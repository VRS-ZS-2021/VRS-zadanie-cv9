
VRS-zadanie-cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009514  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  080096a8  080096a8  000196a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c48  08009c48  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009c48  08009c48  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c48  08009c48  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c48  08009c48  00019c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c4c  08009c4c  00019c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000000e4  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7b7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002004  00000000  00000000  0002a9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000818  00000000  00000000  0002d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018278  00000000  00000000  0002daf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007bc1  00000000  00000000  00045d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b5fb  00000000  00000000  0004d931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c8f2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b8c  00000000  00000000  000c8f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800968c 	.word	0x0800968c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800968c 	.word	0x0800968c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	619a      	str	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <resetSegments>:
void setDigit(uint8_t pos);


/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f7ff ffdc 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f7ff ffd6 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000d48:	2102      	movs	r1, #2
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <resetSegments+0x58>)
 8000d4c:	f7ff ffd2 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000d50:	2120      	movs	r1, #32
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <resetSegments+0x58>)
 8000d54:	f7ff ffce 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000d58:	2110      	movs	r1, #16
 8000d5a:	480a      	ldr	r0, [pc, #40]	; (8000d84 <resetSegments+0x58>)
 8000d5c:	f7ff ffca 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000d60:	2101      	movs	r1, #1
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f7ff ffc5 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f7ff ffc0 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000d74:	2108      	movs	r1, #8
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f7ff ffbb 	bl	8000cf4 <LL_GPIO_SetOutputPin>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	48000400 	.word	0x48000400

08000d88 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f7ff ffbc 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f7ff ffb6 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000da4:	2102      	movs	r1, #2
 8000da6:	480e      	ldr	r0, [pc, #56]	; (8000de0 <setSegments+0x58>)
 8000da8:	f7ff ffb2 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000dac:	2120      	movs	r1, #32
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <setSegments+0x58>)
 8000db0:	f7ff ffae 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000db4:	2110      	movs	r1, #16
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <setSegments+0x58>)
 8000db8:	f7ff ffaa 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f7ff ffa5 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f7ff ffa0 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000dd0:	2108      	movs	r1, #8
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd6:	f7ff ff9b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	48000400 	.word	0x48000400

08000de4 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000de8:	2104      	movs	r1, #4
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f7ff ff8f 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000df2:	2101      	movs	r1, #1
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <resetDigits+0x3c>)
 8000df6:	f7ff ff8b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f7ff ff86 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8000e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f7ff ff80 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f7ff ff7b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	48000400 	.word	0x48000400

08000e24 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8000e28:	2101      	movs	r1, #1
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <setDigits+0x3c>)
 8000e2c:	f7ff ff62 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000e30:	2110      	movs	r1, #16
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f7ff ff5d 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8000e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f7ff ff57 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8000e46:	2104      	movs	r1, #4
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f7ff ff52 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e56:	f7ff ff4d 	bl	8000cf4 <LL_GPIO_SetOutputPin>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	48000400 	.word	0x48000400

08000e64 <set_sign>:

void set_sign(char sign){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<6))
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	3b30      	subs	r3, #48	; 0x30
 8000e72:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <set_sign+0xc8>)
 8000e74:	5cd3      	ldrb	r3, [r2, r3]
 8000e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d004      	beq.n	8000e88 <set_sign+0x24>
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000e7e:	2102      	movs	r1, #2
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f7ff ff44 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<5))
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	3b30      	subs	r3, #48	; 0x30
 8000e8c:	4a27      	ldr	r2, [pc, #156]	; (8000f2c <set_sign+0xc8>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	f003 0320 	and.w	r3, r3, #32
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d004      	beq.n	8000ea2 <set_sign+0x3e>
		LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f7ff ff37 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<4))
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	3b30      	subs	r3, #48	; 0x30
 8000ea6:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <set_sign+0xc8>)
 8000ea8:	5cd3      	ldrb	r3, [r2, r3]
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <set_sign+0x5a>
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f7ff ff29 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<3))
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	3b30      	subs	r3, #48	; 0x30
 8000ec2:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <set_sign+0xc8>)
 8000ec4:	5cd3      	ldrb	r3, [r2, r3]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <set_sign+0x72>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4817      	ldr	r0, [pc, #92]	; (8000f30 <set_sign+0xcc>)
 8000ed2:	f7ff ff1d 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<2))
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	3b30      	subs	r3, #48	; 0x30
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <set_sign+0xc8>)
 8000edc:	5cd3      	ldrb	r3, [r2, r3]
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d005      	beq.n	8000ef2 <set_sign+0x8e>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000ee6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f7ff ff0f 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<1))
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	3b30      	subs	r3, #48	; 0x30
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <set_sign+0xc8>)
 8000ef8:	5cd3      	ldrb	r3, [r2, r3]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <set_sign+0xa8>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000f02:	2108      	movs	r1, #8
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f7ff ff02 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<0))
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	3b30      	subs	r3, #48	; 0x30
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <set_sign+0xc8>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <set_sign+0xc0>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <set_sign+0xcc>)
 8000f20:	f7ff fef6 	bl	8000d10 <LL_GPIO_ResetOutputPin>

}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	080096ec 	.word	0x080096ec
 8000f30:	48000400 	.word	0x48000400

08000f34 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d823      	bhi.n	8000f8c <setDigit+0x58>
 8000f44:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <setDigit+0x18>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f5d 	.word	0x08000f5d
 8000f50:	08000f69 	.word	0x08000f69
 8000f54:	08000f77 	.word	0x08000f77
 8000f58:	08000f83 	.word	0x08000f83
	{
	case 0:
		DIGIT_4_ON;
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f7ff fec7 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f66:	e011      	b.n	8000f8c <setDigit+0x58>
	case 1:
		DIGIT_3_ON;
 8000f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f7ff fec0 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f74:	e00a      	b.n	8000f8c <setDigit+0x58>
	case 2:
		DIGIT_2_ON;
 8000f76:	2110      	movs	r1, #16
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f7ff feba 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f80:	e004      	b.n	8000f8c <setDigit+0x58>
	case 3:
		DIGIT_1_ON;
 8000f82:	2101      	movs	r1, #1
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <setDigit+0x60>)
 8000f86:	f7ff feb5 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f8a:	bf00      	nop
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	48000400 	.word	0x48000400

08000f98 <display_sign>:
void display_sign(char sign_1,char sign_2, char sign_3,char sign_4)
{
 8000f98:	b490      	push	{r4, r7}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	4603      	mov	r3, r0
 8000fac:	71bb      	strb	r3, [r7, #6]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	717b      	strb	r3, [r7, #5]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	713b      	strb	r3, [r7, #4]
	Display_sign[0] = sign_1;
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <display_sign+0x40>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	7013      	strb	r3, [r2, #0]
	Display_sign[1] = sign_2;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <display_sign+0x40>)
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	7053      	strb	r3, [r2, #1]
	Display_sign[2] = sign_3;
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <display_sign+0x40>)
 8000fc4:	797b      	ldrb	r3, [r7, #5]
 8000fc6:	7093      	strb	r3, [r2, #2]
	Display_sign[3] = sign_4;
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <display_sign+0x40>)
 8000fca:	793b      	ldrb	r3, [r7, #4]
 8000fcc:	70d3      	strb	r3, [r2, #3]
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc90      	pop	{r4, r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	20000224 	.word	0x20000224

08000fdc <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8000fdc:	b5b0      	push	{r4, r5, r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	e026      	b.n	8001036 <updateDisplay+0x5a>
	{

		setDigit(i);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffa2 	bl	8000f34 <setDigit>
		set_sign(Display_sign[3-i]);
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f1c3 0303 	rsb	r3, r3, #3
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <updateDisplay+0x6c>)
 8000ff8:	5cd3      	ldrb	r3, [r2, r3]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff32 	bl	8000e64 <set_sign>

		disp_time_saved = disp_time;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <updateDisplay+0x70>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	4912      	ldr	r1, [pc, #72]	; (8001050 <updateDisplay+0x74>)
 8001008:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 800100c:	bf00      	nop
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <updateDisplay+0x74>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	1c94      	adds	r4, r2, #2
 8001016:	f143 0500 	adc.w	r5, r3, #0
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <updateDisplay+0x70>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	42ab      	cmp	r3, r5
 8001022:	bf08      	it	eq
 8001024:	42a2      	cmpeq	r2, r4
 8001026:	d3f2      	bcc.n	800100e <updateDisplay+0x32>

		resetDigits();
 8001028:	f7ff fedc 	bl	8000de4 <resetDigits>
		resetSegments();
 800102c:	f7ff fe7e 	bl	8000d2c <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	3301      	adds	r3, #1
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d9d5      	bls.n	8000fe8 <updateDisplay+0xc>
	}
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bdb0      	pop	{r4, r5, r7, pc}
 8001046:	bf00      	nop
 8001048:	20000224 	.word	0x20000224
 800104c:	20000200 	.word	0x20000200
 8001050:	20000208 	.word	0x20000208

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001172:	695a      	ldr	r2, [r3, #20]
 8001174:	4907      	ldr	r1, [pc, #28]	; (8001194 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800117e:	695a      	ldr	r2, [r3, #20]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4013      	ands	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000

08001198 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <LL_SYSCFG_SetEXTISource+0x58>)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	3302      	adds	r3, #2
 80011aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	0c1b      	lsrs	r3, r3, #16
 80011b2:	43db      	mvns	r3, r3
 80011b4:	ea02 0103 	and.w	r1, r2, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	0c1b      	lsrs	r3, r3, #16
 80011bc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	fab3 f383 	clz	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	fa03 f202 	lsl.w	r2, r3, r2
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <LL_SYSCFG_SetEXTISource+0x58>)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	430a      	orrs	r2, r1
 80011de:	3302      	adds	r3, #2
 80011e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40010000 	.word	0x40010000

080011f4 <LL_GPIO_SetPinMode>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	613b      	str	r3, [r7, #16]
  return result;
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2103      	movs	r1, #3
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	401a      	ands	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	61bb      	str	r3, [r7, #24]
  return result;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	431a      	orrs	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	601a      	str	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_GPIO_SetPinPull>:
{
 8001252:	b480      	push	{r7}
 8001254:	b089      	sub	sp, #36	; 0x24
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	613b      	str	r3, [r7, #16]
  return result;
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	fab3 f383 	clz	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2103      	movs	r1, #3
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	401a      	ands	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	61bb      	str	r3, [r7, #24]
  return result;
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	431a      	orrs	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	60da      	str	r2, [r3, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3724      	adds	r7, #36	; 0x24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_GPIO_ResetOutputPin>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012f2:	f7ff ff39 	bl	8001168 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80012fa:	f7ff ff35 	bl	8001168 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80012fe:	f641 119f 	movw	r1, #6559	; 0x199f
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f7ff ffd3 	bl	80012b0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 800130a:	2133      	movs	r1, #51	; 0x33
 800130c:	482b      	ldr	r0, [pc, #172]	; (80013bc <MX_GPIO_Init+0xf0>)
 800130e:	f7ff ffcf 	bl	80012b0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001312:	f641 139f 	movw	r3, #6559	; 0x199f
 8001316:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001318:	2301      	movs	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f002 f804 	bl	800333c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001334:	2333      	movs	r3, #51	; 0x33
 8001336:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001338:	2301      	movs	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4619      	mov	r1, r3
 800134c:	481b      	ldr	r0, [pc, #108]	; (80013bc <MX_GPIO_Init+0xf0>)
 800134e:	f001 fff5 	bl	800333c <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001352:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff ff1e 	bl	8001198 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 800135c:	2201      	movs	r2, #1
 800135e:	2108      	movs	r1, #8
 8001360:	4816      	ldr	r0, [pc, #88]	; (80013bc <MX_GPIO_Init+0xf0>)
 8001362:	f7ff ff76 	bl	8001252 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8001366:	2200      	movs	r2, #0
 8001368:	2108      	movs	r1, #8
 800136a:	4814      	ldr	r0, [pc, #80]	; (80013bc <MX_GPIO_Init+0xf0>)
 800136c:	f7ff ff42 	bl	80011f4 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001370:	2308      	movs	r3, #8
 8001372:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001378:	2301      	movs	r3, #1
 800137a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800137e:	2300      	movs	r3, #0
 8001380:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001384:	2302      	movs	r3, #2
 8001386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fddc 	bl	8002f4c <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001394:	f7ff fe5e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 8001398:	4603      	mov	r3, r0
 800139a:	2200      	movs	r2, #0
 800139c:	2101      	movs	r1, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff feae 	bl	8001100 <NVIC_EncodePriority>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4619      	mov	r1, r3
 80013a8:	2009      	movs	r0, #9
 80013aa:	f7ff fe7f 	bl	80010ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80013ae:	2009      	movs	r0, #9
 80013b0:	f7ff fe5e 	bl	8001070 <__NVIC_EnableIRQ>

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	48000400 	.word	0x48000400

080013c0 <__NVIC_GetPriorityGrouping>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <__NVIC_EnableIRQ+0x38>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001546:	f023 0306 	bic.w	r3, r3, #6
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	430a      	orrs	r2, r1
 8001550:	431a      	orrs	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	60da      	str	r2, [r3, #12]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60da      	str	r2, [r3, #12]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f043 0204 	orr.w	r2, r3, #4
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	601a      	str	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 0204 	bic.w	r2, r3, #4
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d101      	bne.n	80015da <LL_I2C_IsActiveFlag_TXIS+0x18>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d101      	bne.n	8001600 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0320 	and.w	r3, r3, #32
 800161e:	2b20      	cmp	r3, #32
 8001620:	d101      	bne.n	8001626 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	f043 0220 	orr.w	r2, r3, #32
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	61da      	str	r2, [r3, #28]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	0d5b      	lsrs	r3, r3, #21
 800168a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <LL_I2C_HandleTransfer+0x48>)
 8001690:	430b      	orrs	r3, r1
 8001692:	43db      	mvns	r3, r3
 8001694:	401a      	ands	r2, r3
 8001696:	68b9      	ldr	r1, [r7, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4319      	orrs	r1, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	4319      	orrs	r1, r3
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4319      	orrs	r1, r3
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	430b      	orrs	r3, r1
 80016aa:	431a      	orrs	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	03ff7bff 	.word	0x03ff7bff

080016c0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	b2db      	uxtb	r3, r3
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_AHB1_GRP1_EnableClock>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4013      	ands	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000

08001728 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001732:	69da      	ldr	r2, [r3, #28]
 8001734:	4907      	ldr	r1, [pc, #28]	; (8001754 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4313      	orrs	r3, r2
 800173a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <LL_APB1_GRP1_EnableClock+0x2c>)
 800173e:	69da      	ldr	r2, [r3, #28]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40021000 	.word	0x40021000

08001758 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08e      	sub	sp, #56	; 0x38
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	615a      	str	r2, [r3, #20]
 8001770:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001782:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001786:	f7ff ffb7 	bl	80016f8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800178a:	23c0      	movs	r3, #192	; 0xc0
 800178c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800178e:	2302      	movs	r3, #2
 8001790:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001796:	2301      	movs	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800179a:	2301      	movs	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800179e:	2304      	movs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4821      	ldr	r0, [pc, #132]	; (800182c <MX_I2C1_Init+0xd4>)
 80017a8:	f001 fdc8 	bl	800333c <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80017ac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80017b0:	f7ff ffba 	bl	8001728 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017b4:	f7ff fe04 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe54 	bl	800146c <NVIC_EncodePriority>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4619      	mov	r1, r3
 80017c8:	201f      	movs	r0, #31
 80017ca:	f7ff fe25 	bl	8001418 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017ce:	201f      	movs	r0, #31
 80017d0:	f7ff fe04 	bl	80013dc <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80017d4:	4816      	ldr	r0, [pc, #88]	; (8001830 <MX_I2C1_Init+0xd8>)
 80017d6:	f7ff ff3d 	bl	8001654 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80017da:	4815      	ldr	r0, [pc, #84]	; (8001830 <MX_I2C1_Init+0xd8>)
 80017dc:	f7ff fec1 	bl	8001562 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80017e0:	4813      	ldr	r0, [pc, #76]	; (8001830 <MX_I2C1_Init+0xd8>)
 80017e2:	f7ff fe96 	bl	8001512 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80017e6:	4812      	ldr	r0, [pc, #72]	; (8001830 <MX_I2C1_Init+0xd8>)
 80017e8:	f7ff fe83 	bl	80014f2 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_I2C1_Init+0xdc>)
 80017f2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4619      	mov	r1, r3
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <MX_I2C1_Init+0xd8>)
 8001810:	f001 fea7 	bl	8003562 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_I2C1_Init+0xd8>)
 800181a:	f7ff fe8a 	bl	8001532 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800181e:	4804      	ldr	r0, [pc, #16]	; (8001830 <MX_I2C1_Init+0xd8>)
 8001820:	f7ff fe57 	bl	80014d2 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3738      	adds	r7, #56	; 0x38
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	48000400 	.word	0x48000400
 8001830:	40005400 	.word	0x40005400
 8001834:	2000090e 	.word	0x2000090e

08001838 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b085      	sub	sp, #20
 800183c:	af02      	add	r7, sp, #8
 800183e:	4604      	mov	r4, r0
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4623      	mov	r3, r4
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	4603      	mov	r3, r0
 800184c:	71bb      	strb	r3, [r7, #6]
 800184e:	460b      	mov	r3, r1
 8001850:	717b      	strb	r3, [r7, #5]
 8001852:	4613      	mov	r3, r2
 8001854:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001856:	793b      	ldrb	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001862:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001864:	7979      	ldrb	r1, [r7, #5]
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <i2c_master_write+0x80>)
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2302      	movs	r3, #2
 8001872:	2200      	movs	r2, #0
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <i2c_master_write+0x84>)
 8001876:	f7ff fefd 	bl	8001674 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	4619      	mov	r1, r3
 800187e:	480f      	ldr	r0, [pc, #60]	; (80018bc <i2c_master_write+0x84>)
 8001880:	f7ff ff2b 	bl	80016da <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001884:	e00a      	b.n	800189c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <i2c_master_write+0x84>)
 8001888:	f7ff fe9b 	bl	80015c2 <LL_I2C_IsActiveFlag_TXIS>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4619      	mov	r1, r3
 8001896:	4809      	ldr	r0, [pc, #36]	; (80018bc <i2c_master_write+0x84>)
 8001898:	f7ff ff1f 	bl	80016da <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800189c:	4807      	ldr	r0, [pc, #28]	; (80018bc <i2c_master_write+0x84>)
 800189e:	f7ff feb6 	bl	800160e <LL_I2C_IsActiveFlag_STOP>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ee      	beq.n	8001886 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <i2c_master_write+0x84>)
 80018aa:	f7ff fec3 	bl	8001634 <LL_I2C_ClearFlag_STOP>
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd90      	pop	{r4, r7, pc}
 80018b6:	bf00      	nop
 80018b8:	80002000 	.word	0x80002000
 80018bc:	40005400 	.word	0x40005400

080018c0 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	4603      	mov	r3, r0
 80018d0:	70fb      	strb	r3, [r7, #3]
 80018d2:	460b      	mov	r3, r1
 80018d4:	70bb      	strb	r3, [r7, #2]
 80018d6:	4613      	mov	r3, r2
 80018d8:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80018da:	4a30      	ldr	r2, [pc, #192]	; (800199c <i2c_master_read+0xdc>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80018e0:	7c3b      	ldrb	r3, [r7, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 80018e6:	78bb      	ldrb	r3, [r7, #2]
 80018e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ec:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <i2c_master_read+0xe0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80018f4:	482b      	ldr	r0, [pc, #172]	; (80019a4 <i2c_master_read+0xe4>)
 80018f6:	f7ff fe44 	bl	8001582 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80018fa:	7879      	ldrb	r1, [r7, #1]
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <i2c_master_read+0xe8>)
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2301      	movs	r3, #1
 8001908:	2200      	movs	r2, #0
 800190a:	4826      	ldr	r0, [pc, #152]	; (80019a4 <i2c_master_read+0xe4>)
 800190c:	f7ff feb2 	bl	8001674 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001910:	e00a      	b.n	8001928 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001912:	4824      	ldr	r0, [pc, #144]	; (80019a4 <i2c_master_read+0xe4>)
 8001914:	f7ff fe55 	bl	80015c2 <LL_I2C_IsActiveFlag_TXIS>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr); //adresa, ktoru chceme citat - posielame do slave zariadenia
 800191e:	78bb      	ldrb	r3, [r7, #2]
 8001920:	4619      	mov	r1, r3
 8001922:	4820      	ldr	r0, [pc, #128]	; (80019a4 <i2c_master_read+0xe4>)
 8001924:	f7ff fed9 	bl	80016da <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001928:	481e      	ldr	r0, [pc, #120]	; (80019a4 <i2c_master_read+0xe4>)
 800192a:	f7ff fe70 	bl	800160e <LL_I2C_IsActiveFlag_STOP>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ee      	beq.n	8001912 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001934:	481b      	ldr	r0, [pc, #108]	; (80019a4 <i2c_master_read+0xe4>)
 8001936:	f7ff fe7d 	bl	8001634 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 800193a:	bf00      	nop
 800193c:	4819      	ldr	r0, [pc, #100]	; (80019a4 <i2c_master_read+0xe4>)
 800193e:	f7ff fe66 	bl	800160e <LL_I2C_IsActiveFlag_STOP>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f9      	bne.n	800193c <i2c_master_read+0x7c>

	//citam register od slejva, LL_I2C_HandleTransfer- dolezita funkcia
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001948:	7879      	ldrb	r1, [r7, #1]
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	4a17      	ldr	r2, [pc, #92]	; (80019ac <i2c_master_read+0xec>)
 800194e:	9201      	str	r2, [sp, #4]
 8001950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	2200      	movs	r2, #0
 8001958:	4812      	ldr	r0, [pc, #72]	; (80019a4 <i2c_master_read+0xe4>)
 800195a:	f7ff fe8b 	bl	8001674 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800195e:	bf00      	nop
 8001960:	4810      	ldr	r0, [pc, #64]	; (80019a4 <i2c_master_read+0xe4>)
 8001962:	f7ff fe54 	bl	800160e <LL_I2C_IsActiveFlag_STOP>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f9      	beq.n	8001960 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <i2c_master_read+0xe4>)
 800196e:	f7ff fe61 	bl	8001634 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001972:	480c      	ldr	r0, [pc, #48]	; (80019a4 <i2c_master_read+0xe4>)
 8001974:	f7ff fe15 	bl	80015a2 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <i2c_master_read+0xe4>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <i2c_master_read+0xe4>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <i2c_master_read+0xf0>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <i2c_master_read+0xe0>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <i2c_master_read+0xdc>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000228 	.word	0x20000228
 80019a0:	20000210 	.word	0x20000210
 80019a4:	40005400 	.word	0x40005400
 80019a8:	80002000 	.word	0x80002000
 80019ac:	80002400 	.word	0x80002400
 80019b0:	20000211 	.word	0x20000211

080019b4 <I2C1_EV_IRQHandler_fun>:


void I2C1_EV_IRQHandler_fun(void)
{
 80019b4:	b598      	push	{r3, r4, r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80019b8:	4812      	ldr	r0, [pc, #72]	; (8001a04 <I2C1_EV_IRQHandler_fun+0x50>)
 80019ba:	f7ff fe15 	bl	80015e8 <LL_I2C_IsActiveFlag_RXNE>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01c      	beq.n	80019fe <I2C1_EV_IRQHandler_fun+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80019c4:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <I2C1_EV_IRQHandler_fun+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <I2C1_EV_IRQHandler_fun+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	1c59      	adds	r1, r3, #1
 80019d0:	b2c8      	uxtb	r0, r1
 80019d2:	490e      	ldr	r1, [pc, #56]	; (8001a0c <I2C1_EV_IRQHandler_fun+0x58>)
 80019d4:	7008      	strb	r0, [r1, #0]
 80019d6:	18d4      	adds	r4, r2, r3
 80019d8:	480a      	ldr	r0, [pc, #40]	; (8001a04 <I2C1_EV_IRQHandler_fun+0x50>)
 80019da:	f7ff fe71 	bl	80016c0 <LL_I2C_ReceiveData8>
 80019de:	4603      	mov	r3, r0
 80019e0:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <I2C1_EV_IRQHandler_fun+0x58>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b13      	cmp	r3, #19
 80019ea:	d903      	bls.n	80019f4 <I2C1_EV_IRQHandler_fun+0x40>
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <I2C1_EV_IRQHandler_fun+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
 80019f2:	e001      	b.n	80019f8 <I2C1_EV_IRQHandler_fun+0x44>
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <I2C1_EV_IRQHandler_fun+0x58>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <I2C1_EV_IRQHandler_fun+0x5c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
	}
}
 80019fe:	bf00      	nop
 8001a00:	bd98      	pop	{r3, r4, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40005400 	.word	0x40005400
 8001a08:	20000228 	.word	0x20000228
 8001a0c:	20000211 	.word	0x20000211
 8001a10:	20000210 	.word	0x20000210

08001a14 <iks01a1_init>:
#include "iks01a1.h"

uint8_t data = 0;

uint8_t iks01a1_init(void){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	LL_mDelay(500);
 8001a1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a1e:	f002 f9ff 	bl	8003e20 <LL_mDelay>
	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8001a22:	200f      	movs	r0, #15
 8001a24:	f000 fa18 	bl	8001e58 <lps25hb_read_byte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
	//val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);

	if(!(val == LPS25HB_WHO_AM_I_VALUE))
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	2bbd      	cmp	r3, #189	; 0xbd
 8001a30:	d001      	beq.n	8001a36 <iks01a1_init+0x22>
	{
		return 0; //bad who am I value
 8001a32:	2300      	movs	r3, #0
 8001a34:	e02a      	b.n	8001a8c <iks01a1_init+0x78>
	}

	ctrl = hts221_read_byte(LPS25HB_CTRL_REG1);
 8001a36:	2020      	movs	r0, #32
 8001a38:	f000 fa26 	bl	8001e88 <hts221_read_byte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 7;
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a46:	71bb      	strb	r3, [r7, #6]
	lps25hb_write_byte(LPS25HB_CTRL_REG1, ctrl); //active mode
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	2020      	movs	r0, #32
 8001a4e:	f000 fa6d 	bl	8001f2c <lps25hb_write_byte>


	LL_mDelay(500);
 8001a52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a56:	f002 f9e3 	bl	8003e20 <LL_mDelay>
	val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f000 fa14 	bl	8001e88 <hts221_read_byte>
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]

	if(!(val == HTS221_WHO_AM_I_VALUE))
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2bbc      	cmp	r3, #188	; 0xbc
 8001a68:	d001      	beq.n	8001a6e <iks01a1_init+0x5a>
	{
		return 0; //bad who am I value
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e00e      	b.n	8001a8c <iks01a1_init+0x78>
	}

	ctrl = hts221_read_byte(HTS221_CTRL_REG1);
 8001a6e:	2020      	movs	r0, #32
 8001a70:	f000 fa0a 	bl	8001e88 <hts221_read_byte>
 8001a74:	4603      	mov	r3, r0
 8001a76:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 7;
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a7e:	71bb      	strb	r3, [r7, #6]
	hts221_write_byte(HTS221_CTRL_REG1, ctrl); //active mode
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	4619      	mov	r1, r3
 8001a84:	2020      	movs	r0, #32
 8001a86:	f000 fa3f 	bl	8001f08 <hts221_write_byte>
	//uint8_t ctrltest = hts221_read_byte(HTS221_CTRL_REG1);

	//ctrl = ctrltest;

	return 1;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <hts221_start_measurement>:

void hts221_start_measurement(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
	uint8_t ctrl = hts221_read_byte(LPS25HB_CTRL_REG2);
 8001a9a:	2021      	movs	r0, #33	; 0x21
 8001a9c:	f000 f9f4 	bl	8001e88 <hts221_read_byte>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
	ctrl |= 0x1;
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	71fb      	strb	r3, [r7, #7]
	lps25hb_write_byte(LPS25HB_CTRL_REG2, ctrl); //activate measurement
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	2021      	movs	r0, #33	; 0x21
 8001ab2:	f000 fa3b 	bl	8001f2c <lps25hb_write_byte>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <lps25hb_start_measurement>:

void lps25hb_start_measurement(void) {
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
	uint8_t ctrl = hts221_read_byte(HTS221_CTRL_REG2);
 8001ac4:	2021      	movs	r0, #33	; 0x21
 8001ac6:	f000 f9df 	bl	8001e88 <hts221_read_byte>
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
	ctrl |= 0x1;
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	71fb      	strb	r3, [r7, #7]
	hts221_write_byte(HTS221_CTRL_REG2, ctrl); //activate measurement
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	2021      	movs	r0, #33	; 0x21
 8001adc:	f000 fa14 	bl	8001f08 <hts221_write_byte>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <hts221_get_humidity>:

void hts221_get_humidity(float* out) { //humidity measurement (%)
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	uint8_t data[2], h0_rh, h1_rh;
	uint16_t h_out, h0_t0_out, h1_t0_out;



	uint8_t availability = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 8001af4:	2027      	movs	r0, #39	; 0x27
 8001af6:	f000 f9c7 	bl	8001e88 <hts221_read_byte>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1) >> 1;
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10a      	bne.n	8001b22 <hts221_get_humidity+0x3a>
		hts221_start_measurement();
 8001b0c:	f7ff ffc2 	bl	8001a94 <hts221_start_measurement>
		availability = hts221_read_byte(HTS221_STATUS_REG);
 8001b10:	2027      	movs	r0, #39	; 0x27
 8001b12:	f000 f9b9 	bl	8001e88 <hts221_read_byte>
 8001b16:	4603      	mov	r3, r0
 8001b18:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(0x1<<1);
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	75fb      	strb	r3, [r7, #23]
	}

	h0_rh = hts221_read_byte(HTS221_H0_RH)/2;
 8001b22:	2030      	movs	r0, #48	; 0x30
 8001b24:	f000 f9b0 	bl	8001e88 <hts221_read_byte>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	75bb      	strb	r3, [r7, #22]
	h1_rh = hts221_read_byte(HTS221_H1_RH)/2;
 8001b2e:	2031      	movs	r0, #49	; 0x31
 8001b30:	f000 f9aa 	bl	8001e88 <hts221_read_byte>
 8001b34:	4603      	mov	r3, r0
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	757b      	strb	r3, [r7, #21]

	hts221_readArray(data, HTS221_H0_T0_OUT, 2);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	2202      	movs	r2, #2
 8001b40:	2136      	movs	r1, #54	; 0x36
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f9b8 	bl	8001eb8 <hts221_readArray>
	h0_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 8001b48:	7b7b      	ldrb	r3, [r7, #13]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	7b3b      	ldrb	r3, [r7, #12]
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_H1_T0_OUT, 2);
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	213a      	movs	r1, #58	; 0x3a
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f9a9 	bl	8001eb8 <hts221_readArray>
	h1_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 8001b66:	7b7b      	ldrb	r3, [r7, #13]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	7b3b      	ldrb	r3, [r7, #12]
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	823b      	strh	r3, [r7, #16]

	hts221_readArray(data, HTS221_HUMIDITY_ADDR, 2);
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	2128      	movs	r1, #40	; 0x28
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f99a 	bl	8001eb8 <hts221_readArray>

	h_out = ((uint16_t)data[1]) << 8 | data[0];
 8001b84:	7b7b      	ldrb	r3, [r7, #13]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	b21a      	sxth	r2, r3
 8001b8a:	7b3b      	ldrb	r3, [r7, #12]
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	81fb      	strh	r3, [r7, #14]
	*out = (float)((h1_rh-h0_rh)*(h_out-h0_t0_out)/(float)(h1_t0_out-h0_t0_out)+h0_rh);
 8001b94:	7d7a      	ldrb	r2, [r7, #21]
 8001b96:	7dbb      	ldrb	r3, [r7, #22]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	89f9      	ldrh	r1, [r7, #14]
 8001b9c:	8a7a      	ldrh	r2, [r7, #18]
 8001b9e:	1a8a      	subs	r2, r1, r2
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bac:	8a3a      	ldrh	r2, [r7, #16]
 8001bae:	8a7b      	ldrh	r3, [r7, #18]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bbe:	7dbb      	ldrb	r3, [r7, #22]
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	edc3 7a00 	vstr	s15, [r3]
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <hts221_get_temperature>:

void hts221_get_temperature(float* out) { //temperature measurement (°C)
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	uint16_t t_out, t0_out, t1_out, t0_degc, t1_degc;

	uint8_t availability = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 8001be6:	2027      	movs	r0, #39	; 0x27
 8001be8:	f000 f94e 	bl	8001e88 <hts221_read_byte>
 8001bec:	4603      	mov	r3, r0
 8001bee:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1);
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10a      	bne.n	8001c14 <hts221_get_temperature+0x3a>
		hts221_start_measurement();
 8001bfe:	f7ff ff49 	bl	8001a94 <hts221_start_measurement>
		availability = hts221_read_byte(HTS221_STATUS_REG);
 8001c02:	2027      	movs	r0, #39	; 0x27
 8001c04:	f000 f940 	bl	8001e88 <hts221_read_byte>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1);
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	75fb      	strb	r3, [r7, #23]
	}

	uint8_t tmp = hts221_read_byte(HTS221_T0_T1_DEGC_MSB);
 8001c14:	2035      	movs	r0, #53	; 0x35
 8001c16:	f000 f937 	bl	8001e88 <hts221_read_byte>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	75bb      	strb	r3, [r7, #22]
	//uint16_t tmp2;

	t0_degc = hts221_read_byte(HTS221_T0_DEGC);
 8001c1e:	2032      	movs	r0, #50	; 0x32
 8001c20:	f000 f932 	bl	8001e88 <hts221_read_byte>
 8001c24:	4603      	mov	r3, r0
 8001c26:	82bb      	strh	r3, [r7, #20]
	t1_degc = hts221_read_byte(HTS221_T1_DEGC);
 8001c28:	2033      	movs	r0, #51	; 0x33
 8001c2a:	f000 f92d 	bl	8001e88 <hts221_read_byte>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	827b      	strh	r3, [r7, #18]

	t0_degc += ((tmp & 0x3)<<8);
 8001c32:	7dbb      	ldrb	r3, [r7, #22]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	8abb      	ldrh	r3, [r7, #20]
 8001c40:	4413      	add	r3, r2
 8001c42:	82bb      	strh	r3, [r7, #20]
	t0_degc /= 8;
 8001c44:	8abb      	ldrh	r3, [r7, #20]
 8001c46:	08db      	lsrs	r3, r3, #3
 8001c48:	82bb      	strh	r3, [r7, #20]

	//tmp2 = ((tmp & (0x3)<<2))<<6;
	t1_degc += ((tmp & ((0x3)<<2))<<6);
 8001c4a:	7dbb      	ldrb	r3, [r7, #22]
 8001c4c:	019b      	lsls	r3, r3, #6
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	8a7b      	ldrh	r3, [r7, #18]
 8001c58:	4413      	add	r3, r2
 8001c5a:	827b      	strh	r3, [r7, #18]
	t1_degc /= 8;
 8001c5c:	8a7b      	ldrh	r3, [r7, #18]
 8001c5e:	08db      	lsrs	r3, r3, #3
 8001c60:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_T0_OUT, 2);
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	2202      	movs	r2, #2
 8001c68:	213c      	movs	r1, #60	; 0x3c
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f924 	bl	8001eb8 <hts221_readArray>
	t0_out = ((uint16_t)data[1]) << 8 | data[0];
 8001c70:	7a7b      	ldrb	r3, [r7, #9]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	7a3b      	ldrb	r3, [r7, #8]
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	823b      	strh	r3, [r7, #16]
	hts221_readArray(data, HTS221_T1_OUT, 2);
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	2202      	movs	r2, #2
 8001c86:	213e      	movs	r1, #62	; 0x3e
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f915 	bl	8001eb8 <hts221_readArray>
	t1_out = ((uint16_t)data[1]) << 8 | data[0];
 8001c8e:	7a7b      	ldrb	r3, [r7, #9]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	7a3b      	ldrb	r3, [r7, #8]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	81fb      	strh	r3, [r7, #14]

	hts221_readArray(data, HTS221_TEMPERATURE_ADDR, 2);
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	212a      	movs	r1, #42	; 0x2a
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f906 	bl	8001eb8 <hts221_readArray>

	t_out = ((uint16_t)data[1]) << 8 | data[0];
 8001cac:	7a7b      	ldrb	r3, [r7, #9]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	b21a      	sxth	r2, r3
 8001cb2:	7a3b      	ldrb	r3, [r7, #8]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	81bb      	strh	r3, [r7, #12]
	*out = (float)((t1_degc - t0_degc)*(t_out-t0_out)/(float)(t1_out-t0_out)+t0_degc);
 8001cbc:	8a7a      	ldrh	r2, [r7, #18]
 8001cbe:	8abb      	ldrh	r3, [r7, #20]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	89b9      	ldrh	r1, [r7, #12]
 8001cc4:	8a3a      	ldrh	r2, [r7, #16]
 8001cc6:	1a8a      	subs	r2, r1, r2
 8001cc8:	fb02 f303 	mul.w	r3, r2, r3
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cd4:	89fa      	ldrh	r2, [r7, #14]
 8001cd6:	8a3b      	ldrh	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce6:	8abb      	ldrh	r3, [r7, #20]
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <lps25hb_get_pressure>:

void lps25hb_get_pressure(float* out) { //pressure measurement (hPa = mBAR)
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pressure;// ref_pressure;

	uint8_t availability = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	75fb      	strb	r3, [r7, #23]
	availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001d10:	2027      	movs	r0, #39	; 0x27
 8001d12:	f000 f8a1 	bl	8001e58 <lps25hb_read_byte>
 8001d16:	4603      	mov	r3, r0
 8001d18:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1)>>1;
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10a      	bne.n	8001d3e <lps25hb_get_pressure+0x3a>
		lps25hb_start_measurement();
 8001d28:	f7ff fec9 	bl	8001abe <lps25hb_start_measurement>
		availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001d2c:	2027      	movs	r0, #39	; 0x27
 8001d2e:	f000 f893 	bl	8001e58 <lps25hb_read_byte>
 8001d32:	4603      	mov	r3, r0
 8001d34:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1<<1);
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	75fb      	strb	r3, [r7, #23]
	}

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDR, 3);
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	2203      	movs	r2, #3
 8001d44:	2128      	movs	r1, #40	; 0x28
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f8ca 	bl	8001ee0 <lps25hb_readArray>
	pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	041b      	lsls	r3, r3, #16
 8001d50:	7b7a      	ldrb	r2, [r7, #13]
 8001d52:	0212      	lsls	r2, r2, #8
 8001d54:	4313      	orrs	r3, r2
 8001d56:	7b3a      	ldrb	r2, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]

	/*lps25hb_readArray(data, LPS25HB_REF_PRESSURE_ADDR, 3);
	ref_pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];*/

	*out =  (float)(pressure)/(float)(4096);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d66:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001d7c <lps25hb_get_pressure+0x78>
 8001d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	edc3 7a00 	vstr	s15, [r3]
}
 8001d74:	bf00      	nop
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	45800000 	.word	0x45800000

08001d80 <lps25hb_get_altitude>:

void lps25hb_get_altitude(float* out) { //altitude measurement (m.n.m./AMSL)
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pressure;

	uint8_t availability = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	75fb      	strb	r3, [r7, #23]
	availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001d8c:	2027      	movs	r0, #39	; 0x27
 8001d8e:	f000 f863 	bl	8001e58 <lps25hb_read_byte>
 8001d92:	4603      	mov	r3, r0
 8001d94:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1)>>1;
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10a      	bne.n	8001dba <lps25hb_get_altitude+0x3a>
		lps25hb_start_measurement();
 8001da4:	f7ff fe8b 	bl	8001abe <lps25hb_start_measurement>
		availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001da8:	2027      	movs	r0, #39	; 0x27
 8001daa:	f000 f855 	bl	8001e58 <lps25hb_read_byte>
 8001dae:	4603      	mov	r3, r0
 8001db0:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1<<1);
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	75fb      	strb	r3, [r7, #23]
	}

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDR, 3);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	2128      	movs	r1, #40	; 0x28
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f88c 	bl	8001ee0 <lps25hb_readArray>
	pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8001dc8:	7bbb      	ldrb	r3, [r7, #14]
 8001dca:	041b      	lsls	r3, r3, #16
 8001dcc:	7b7a      	ldrb	r2, [r7, #13]
 8001dce:	0212      	lsls	r2, r2, #8
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	7b3a      	ldrb	r2, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]

	*out = 44330*(1-pow((float)(pressure)/(float)(4096*1013.25f),(1/5.255f)));
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001e50 <lps25hb_get_altitude+0xd0>
 8001de6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dea:	ee16 0a90 	vmov	r0, s13
 8001dee:	f7fe fbab 	bl	8000548 <__aeabi_f2d>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001e40 <lps25hb_get_altitude+0xc0>
 8001dfa:	ec43 2b10 	vmov	d0, r2, r3
 8001dfe:	f006 fc9b 	bl	8008738 <pow>
 8001e02:	ec53 2b10 	vmov	r2, r3, d0
 8001e06:	f04f 0000 	mov.w	r0, #0
 8001e0a:	4912      	ldr	r1, [pc, #72]	; (8001e54 <lps25hb_get_altitude+0xd4>)
 8001e0c:	f7fe fa3c 	bl	8000288 <__aeabi_dsub>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	a30b      	add	r3, pc, #44	; (adr r3, 8001e48 <lps25hb_get_altitude+0xc8>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fbeb 	bl	80005f8 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7fe fedd 	bl	8000be8 <__aeabi_d2f>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	601a      	str	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	f3af 8000 	nop.w
 8001e40:	c0000000 	.word	0xc0000000
 8001e44:	3fc85b95 	.word	0x3fc85b95
 8001e48:	00000000 	.word	0x00000000
 8001e4c:	40e5a540 	.word	0x40e5a540
 8001e50:	4a7d5000 	.word	0x4a7d5000
 8001e54:	3ff00000 	.word	0x3ff00000

08001e58 <lps25hb_read_byte>:

uint8_t lps25hb_read_byte(uint8_t reg_addr) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <lps25hb_read_byte+0x2c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, LPS25HB_DEVICE_ADDRESS, 0));
 8001e68:	79fa      	ldrb	r2, [r7, #7]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	23bb      	movs	r3, #187	; 0xbb
 8001e70:	2101      	movs	r1, #1
 8001e72:	4804      	ldr	r0, [pc, #16]	; (8001e84 <lps25hb_read_byte+0x2c>)
 8001e74:	f7ff fd24 	bl	80018c0 <i2c_master_read>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	781b      	ldrb	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000212 	.word	0x20000212

08001e88 <hts221_read_byte>:

uint8_t hts221_read_byte(uint8_t reg_addr) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <hts221_read_byte+0x2c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, HTS221_DEVICE_ADDRESS, 0));
 8001e98:	79fa      	ldrb	r2, [r7, #7]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	23be      	movs	r3, #190	; 0xbe
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <hts221_read_byte+0x2c>)
 8001ea4:	f7ff fd0c 	bl	80018c0 <i2c_master_read>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	781b      	ldrb	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000212 	.word	0x20000212

08001eb8 <hts221_readArray>:
{
	i2c_master_read(data, length, reg, LSM6DS0_DEVICE_ADDRESS, 1);
}

void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, HTS221_DEVICE_ADDRESS, 1);
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	78b9      	ldrb	r1, [r7, #2]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	23be      	movs	r3, #190	; 0xbe
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff fcf4 	bl	80018c0 <i2c_master_read>
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <lps25hb_readArray>:

void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
 8001eec:	4613      	mov	r3, r2
 8001eee:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, LPS25HB_DEVICE_ADDRESS, 1);
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	78b9      	ldrb	r1, [r7, #2]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	23bb      	movs	r3, #187	; 0xbb
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fce0 	bl	80018c0 <i2c_master_read>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <hts221_write_byte>:
{
	i2c_master_write(value, reg_addr, LSM6DS0_DEVICE_ADDRESS, 0);
}

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460a      	mov	r2, r1
 8001f12:	71fb      	strb	r3, [r7, #7]
 8001f14:	4613      	mov	r3, r2
 8001f16:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, HTS221_DEVICE_ADDRESS, 0);
 8001f18:	79f9      	ldrb	r1, [r7, #7]
 8001f1a:	79b8      	ldrb	r0, [r7, #6]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	22be      	movs	r2, #190	; 0xbe
 8001f20:	f7ff fc8a 	bl	8001838 <i2c_master_write>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	460a      	mov	r2, r1
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS25HB_DEVICE_ADDRESS, 0);
 8001f3c:	79f9      	ldrb	r1, [r7, #7]
 8001f3e:	79b8      	ldrb	r0, [r7, #6]
 8001f40:	2300      	movs	r3, #0
 8001f42:	22bb      	movs	r2, #187	; 0xbb
 8001f44:	f7ff fc78 	bl	8001838 <i2c_master_write>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <__NVIC_SetPriorityGrouping>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <LL_RCC_HSI_Enable+0x1c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <LL_RCC_HSI_Enable+0x1c>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <LL_RCC_HSI_IsReady+0x20>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40021000 	.word	0x40021000

08001fdc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4904      	ldr	r1, [pc, #16]	; (8002004 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000

08002008 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <LL_RCC_SetSysClkSource+0x24>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 0203 	bic.w	r2, r3, #3
 8002018:	4904      	ldr	r1, [pc, #16]	; (800202c <LL_RCC_SetSysClkSource+0x24>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40021000 	.word	0x40021000

08002030 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <LL_RCC_GetSysClkSource+0x18>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000

0800204c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <LL_RCC_SetAHBPrescaler+0x24>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	4904      	ldr	r1, [pc, #16]	; (8002070 <LL_RCC_SetAHBPrescaler+0x24>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40021000 	.word	0x40021000

08002074 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <LL_RCC_SetAPB1Prescaler+0x24>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002084:	4904      	ldr	r1, [pc, #16]	; (8002098 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000

0800209c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ac:	4904      	ldr	r1, [pc, #16]	; (80020c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000

080020c4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <LL_RCC_SetI2CClockSource+0x2c>)
 80020ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0e1b      	lsrs	r3, r3, #24
 80020d4:	43db      	mvns	r3, r3
 80020d6:	401a      	ands	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80020de:	4904      	ldr	r1, [pc, #16]	; (80020f0 <LL_RCC_SetI2CClockSource+0x2c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	630b      	str	r3, [r1, #48]	; 0x30
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000

080020f4 <LL_APB1_GRP1_EnableClock>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	4907      	ldr	r1, [pc, #28]	; (8002120 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4313      	orrs	r3, r2
 8002106:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <LL_APB1_GRP1_EnableClock+0x2c>)
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4013      	ands	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40021000 	.word	0x40021000

08002124 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <LL_APB2_GRP1_EnableClock+0x2c>)
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	4907      	ldr	r1, [pc, #28]	; (8002150 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <LL_APB2_GRP1_EnableClock+0x2c>)
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4013      	ands	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000

08002154 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <LL_FLASH_SetLatency+0x24>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 0207 	bic.w	r2, r3, #7
 8002164:	4904      	ldr	r1, [pc, #16]	; (8002178 <LL_FLASH_SetLatency+0x24>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40022000 	.word	0x40022000

0800217c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <LL_FLASH_GetLatency+0x18>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000

08002198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800219c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800219e:	2001      	movs	r0, #1
 80021a0:	f7ff ffc0 	bl	8002124 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80021a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80021a8:	f7ff ffa4 	bl	80020f4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ac:	2003      	movs	r0, #3
 80021ae:	f7ff fecf 	bl	8001f50 <__NVIC_SetPriorityGrouping>
  EXTI->RTSR &= ~(EXTI_IMR_MR4);
  EXTI->FTSR |= EXTI_IMR_MR4;*/
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021b2:	f000 f96b 	bl	800248c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Systick_Init();
 80021b6:	f000 fcfb 	bl	8002bb0 <Systick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ba:	f7ff f887 	bl	80012cc <MX_GPIO_Init>
  MX_I2C1_Init();
 80021be:	f7ff facb 	bl	8001758 <MX_I2C1_Init>
  MX_TIM3_Init();
 80021c2:	f000 fd07 	bl	8002bd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  error = 0;
 80021c6:	4b97      	ldr	r3, [pc, #604]	; (8002424 <main+0x28c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
  if(!iks01a1_init()) error = 1;
 80021cc:	f7ff fc22 	bl	8001a14 <iks01a1_init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <main+0x44>
 80021d6:	4b93      	ldr	r3, [pc, #588]	; (8002424 <main+0x28c>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]


  setSegments();
 80021dc:	f7fe fdd4 	bl	8000d88 <setSegments>
  setDigits();
 80021e0:	f7fe fe20 	bl	8000e24 <setDigits>
  LL_mDelay(2000);
 80021e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021e8:	f001 fe1a 	bl	8003e20 <LL_mDelay>
  resetDigits();
 80021ec:	f7fe fdfa 	bl	8000de4 <resetDigits>
  resetSegments();
 80021f0:	f7fe fd9c 	bl	8000d2c <resetSegments>

  mode = 0;
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <main+0x290>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(error) {
 80021fa:	4b8a      	ldr	r3, [pc, #552]	; (8002424 <main+0x28c>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00e      	beq.n	8002220 <main+0x88>
		  strcpy(display_text,"I2C_who_am_I_error\0");
 8002202:	4a8a      	ldr	r2, [pc, #552]	; (800242c <main+0x294>)
 8002204:	4b8a      	ldr	r3, [pc, #552]	; (8002430 <main+0x298>)
 8002206:	4615      	mov	r5, r2
 8002208:	461c      	mov	r4, r3
 800220a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220c:	6028      	str	r0, [r5, #0]
 800220e:	6069      	str	r1, [r5, #4]
 8002210:	60aa      	str	r2, [r5, #8]
 8002212:	60eb      	str	r3, [r5, #12]
 8002214:	8823      	ldrh	r3, [r4, #0]
 8002216:	78a2      	ldrb	r2, [r4, #2]
 8002218:	822b      	strh	r3, [r5, #16]
 800221a:	4613      	mov	r3, r2
 800221c:	74ab      	strb	r3, [r5, #18]
 800221e:	e0b3      	b.n	8002388 <main+0x1f0>
	  } else {
		  hts221_start_measurement();
 8002220:	f7ff fc38 	bl	8001a94 <hts221_start_measurement>
		  lps25hb_start_measurement();
 8002224:	f7ff fc4b 	bl	8001abe <lps25hb_start_measurement>
		  hts221_get_humidity(&humidity);
 8002228:	4882      	ldr	r0, [pc, #520]	; (8002434 <main+0x29c>)
 800222a:	f7ff fc5d 	bl	8001ae8 <hts221_get_humidity>
		  hts221_get_temperature(&temperature);
 800222e:	4882      	ldr	r0, [pc, #520]	; (8002438 <main+0x2a0>)
 8002230:	f7ff fcd3 	bl	8001bda <hts221_get_temperature>
		  lps25hb_get_pressure(&pressure);
 8002234:	4881      	ldr	r0, [pc, #516]	; (800243c <main+0x2a4>)
 8002236:	f7ff fd65 	bl	8001d04 <lps25hb_get_pressure>
		  lps25hb_start_measurement();
 800223a:	f7ff fc40 	bl	8001abe <lps25hb_start_measurement>
		  lps25hb_get_altitude(&altitude);
 800223e:	4880      	ldr	r0, [pc, #512]	; (8002440 <main+0x2a8>)
 8002240:	f7ff fd9e 	bl	8001d80 <lps25hb_get_altitude>

		  if (mode == 0) {
 8002244:	4b78      	ldr	r3, [pc, #480]	; (8002428 <main+0x290>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d124      	bne.n	8002296 <main+0xfe>
			  if(temperature>=100){
 800224c:	4b7a      	ldr	r3, [pc, #488]	; (8002438 <main+0x2a0>)
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002444 <main+0x2ac>
 8002256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225e:	db02      	blt.n	8002266 <main+0xce>
				temperature=99.9;
 8002260:	4b75      	ldr	r3, [pc, #468]	; (8002438 <main+0x2a0>)
 8002262:	4a79      	ldr	r2, [pc, #484]	; (8002448 <main+0x2b0>)
 8002264:	601a      	str	r2, [r3, #0]
			  }
			  if(temperature<=-100){
 8002266:	4b74      	ldr	r3, [pc, #464]	; (8002438 <main+0x2a0>)
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800244c <main+0x2b4>
 8002270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	d802      	bhi.n	8002280 <main+0xe8>
				temperature=-99.9;
 800227a:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <main+0x2a0>)
 800227c:	4a74      	ldr	r2, [pc, #464]	; (8002450 <main+0x2b8>)
 800227e:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "TEMP_%2.1f", temperature);
 8002280:	4b6d      	ldr	r3, [pc, #436]	; (8002438 <main+0x2a0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f95f 	bl	8000548 <__aeabi_f2d>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4971      	ldr	r1, [pc, #452]	; (8002454 <main+0x2bc>)
 8002290:	4866      	ldr	r0, [pc, #408]	; (800242c <main+0x294>)
 8002292:	f002 fcad 	bl	8004bf0 <siprintf>

		   }

		   if (mode == 1){
 8002296:	4b64      	ldr	r3, [pc, #400]	; (8002428 <main+0x290>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d123      	bne.n	80022e6 <main+0x14e>
			  if(humidity>=100){
 800229e:	4b65      	ldr	r3, [pc, #404]	; (8002434 <main+0x29c>)
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002444 <main+0x2ac>
 80022a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b0:	db02      	blt.n	80022b8 <main+0x120>
				humidity=99;
 80022b2:	4b60      	ldr	r3, [pc, #384]	; (8002434 <main+0x29c>)
 80022b4:	4a68      	ldr	r2, [pc, #416]	; (8002458 <main+0x2c0>)
 80022b6:	601a      	str	r2, [r3, #0]
			  }
			  if(humidity<0){
 80022b8:	4b5e      	ldr	r3, [pc, #376]	; (8002434 <main+0x29c>)
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	d503      	bpl.n	80022d0 <main+0x138>
				humidity = 0;
 80022c8:	4b5a      	ldr	r3, [pc, #360]	; (8002434 <main+0x29c>)
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "HUM_%2.0f", humidity);
 80022d0:	4b58      	ldr	r3, [pc, #352]	; (8002434 <main+0x29c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f937 	bl	8000548 <__aeabi_f2d>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	495f      	ldr	r1, [pc, #380]	; (800245c <main+0x2c4>)
 80022e0:	4852      	ldr	r0, [pc, #328]	; (800242c <main+0x294>)
 80022e2:	f002 fc85 	bl	8004bf0 <siprintf>
		   }


		   if (mode == 2){
 80022e6:	4b50      	ldr	r3, [pc, #320]	; (8002428 <main+0x290>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d123      	bne.n	8002336 <main+0x19e>
			  if(pressure>=10000){
 80022ee:	4b53      	ldr	r3, [pc, #332]	; (800243c <main+0x2a4>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8002460 <main+0x2c8>
 80022f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002300:	db02      	blt.n	8002308 <main+0x170>
				pressure=9999.99;
 8002302:	4b4e      	ldr	r3, [pc, #312]	; (800243c <main+0x2a4>)
 8002304:	4a57      	ldr	r2, [pc, #348]	; (8002464 <main+0x2cc>)
 8002306:	601a      	str	r2, [r3, #0]
			  }
			  if(pressure<0){
 8002308:	4b4c      	ldr	r3, [pc, #304]	; (800243c <main+0x2a4>)
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	d503      	bpl.n	8002320 <main+0x188>
				pressure = 0;
 8002318:	4b48      	ldr	r3, [pc, #288]	; (800243c <main+0x2a4>)
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "BAR_%4.2f", pressure);
 8002320:	4b46      	ldr	r3, [pc, #280]	; (800243c <main+0x2a4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f90f 	bl	8000548 <__aeabi_f2d>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	494e      	ldr	r1, [pc, #312]	; (8002468 <main+0x2d0>)
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <main+0x294>)
 8002332:	f002 fc5d 	bl	8004bf0 <siprintf>

		   }

		   if(mode == 3){
 8002336:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <main+0x290>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d124      	bne.n	8002388 <main+0x1f0>
			  if(altitude>=10000){
 800233e:	4b40      	ldr	r3, [pc, #256]	; (8002440 <main+0x2a8>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002460 <main+0x2c8>
 8002348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	db02      	blt.n	8002358 <main+0x1c0>
				altitude = 9999.9;
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <main+0x2a8>)
 8002354:	4a45      	ldr	r2, [pc, #276]	; (800246c <main+0x2d4>)
 8002356:	601a      	str	r2, [r3, #0]
			  }
			  if(altitude<=-10000){
 8002358:	4b39      	ldr	r3, [pc, #228]	; (8002440 <main+0x2a8>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002470 <main+0x2d8>
 8002362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236a:	d802      	bhi.n	8002372 <main+0x1da>
				altitude = -9999.9;
 800236c:	4b34      	ldr	r3, [pc, #208]	; (8002440 <main+0x2a8>)
 800236e:	4a41      	ldr	r2, [pc, #260]	; (8002474 <main+0x2dc>)
 8002370:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "ALT_%4.1f", altitude);
 8002372:	4b33      	ldr	r3, [pc, #204]	; (8002440 <main+0x2a8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f8e6 	bl	8000548 <__aeabi_f2d>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	493d      	ldr	r1, [pc, #244]	; (8002478 <main+0x2e0>)
 8002382:	482a      	ldr	r0, [pc, #168]	; (800242c <main+0x294>)
 8002384:	f002 fc34 	bl	8004bf0 <siprintf>
		   }
	  }

	  if(disp_time > (saved_time + 500))
 8002388:	4b3c      	ldr	r3, [pc, #240]	; (800247c <main+0x2e4>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	f512 78fa 	adds.w	r8, r2, #500	; 0x1f4
 8002392:	f143 0900 	adc.w	r9, r3, #0
 8002396:	4b3a      	ldr	r3, [pc, #232]	; (8002480 <main+0x2e8>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	4599      	cmp	r9, r3
 800239e:	bf08      	it	eq
 80023a0:	4590      	cmpeq	r8, r2
 80023a2:	f4bf af2a 	bcs.w	80021fa <main+0x62>
	  	  {

	  		  display_sign(display_text[act_index],display_text[act_index+1],display_text[act_index+2],display_text[act_index+3]);
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <main+0x2ec>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a20      	ldr	r2, [pc, #128]	; (800242c <main+0x294>)
 80023ac:	5cd0      	ldrb	r0, [r2, r3]
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <main+0x2ec>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	4a1d      	ldr	r2, [pc, #116]	; (800242c <main+0x294>)
 80023b6:	5cd1      	ldrb	r1, [r2, r3]
 80023b8:	4b32      	ldr	r3, [pc, #200]	; (8002484 <main+0x2ec>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3302      	adds	r3, #2
 80023be:	4a1b      	ldr	r2, [pc, #108]	; (800242c <main+0x294>)
 80023c0:	5cd2      	ldrb	r2, [r2, r3]
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <main+0x2ec>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3303      	adds	r3, #3
 80023c8:	4c18      	ldr	r4, [pc, #96]	; (800242c <main+0x294>)
 80023ca:	5ce3      	ldrb	r3, [r4, r3]
 80023cc:	f7fe fde4 	bl	8000f98 <display_sign>
	  	  	  saved_time = disp_time;
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <main+0x2e8>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	4929      	ldr	r1, [pc, #164]	; (800247c <main+0x2e4>)
 80023d8:	e9c1 2300 	strd	r2, r3, [r1]

	  	  	  if(right){ //urcovanie smeru
 80023dc:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <main+0x2f0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <main+0x258>
	  	  		  act_index++;
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <main+0x2ec>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	4a26      	ldr	r2, [pc, #152]	; (8002484 <main+0x2ec>)
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e004      	b.n	80023fa <main+0x262>
	  	  	  } else {
	  	  		  act_index--;
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <main+0x2ec>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	4a23      	ldr	r2, [pc, #140]	; (8002484 <main+0x2ec>)
 80023f8:	6013      	str	r3, [r2, #0]
	  	  	  }
	  	  	  if(act_index == strlen(display_text)-4) {
 80023fa:	480c      	ldr	r0, [pc, #48]	; (800242c <main+0x294>)
 80023fc:	f7fd fee8 	bl	80001d0 <strlen>
 8002400:	4603      	mov	r3, r0
 8002402:	3b04      	subs	r3, #4
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <main+0x2ec>)
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	4293      	cmp	r3, r2
 800240a:	d102      	bne.n	8002412 <main+0x27a>
	  	  		  right = 0;
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <main+0x2f0>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
	  	  	  }
	  	  	  if (act_index == 0){
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <main+0x2ec>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f47f aeef 	bne.w	80021fa <main+0x62>
	  	  		  right = 1;
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <main+0x2f0>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]
	  if(error) {
 8002422:	e6ea      	b.n	80021fa <main+0x62>
 8002424:	20000244 	.word	0x20000244
 8002428:	2000023c 	.word	0x2000023c
 800242c:	20000250 	.word	0x20000250
 8002430:	080096a8 	.word	0x080096a8
 8002434:	20000238 	.word	0x20000238
 8002438:	20000230 	.word	0x20000230
 800243c:	20000234 	.word	0x20000234
 8002440:	20000240 	.word	0x20000240
 8002444:	42c80000 	.word	0x42c80000
 8002448:	42c7cccd 	.word	0x42c7cccd
 800244c:	c2c80000 	.word	0xc2c80000
 8002450:	c2c7cccd 	.word	0xc2c7cccd
 8002454:	080096bc 	.word	0x080096bc
 8002458:	42c60000 	.word	0x42c60000
 800245c:	080096c8 	.word	0x080096c8
 8002460:	461c4000 	.word	0x461c4000
 8002464:	461c3ff6 	.word	0x461c3ff6
 8002468:	080096d4 	.word	0x080096d4
 800246c:	461c3f9a 	.word	0x461c3f9a
 8002470:	c61c4000 	.word	0xc61c4000
 8002474:	c61c3f9a 	.word	0xc61c3f9a
 8002478:	080096e0 	.word	0x080096e0
 800247c:	20000248 	.word	0x20000248
 8002480:	20000200 	.word	0x20000200
 8002484:	20000214 	.word	0x20000214
 8002488:	20000000 	.word	0x20000000

0800248c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff fe5f 	bl	8002154 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002496:	bf00      	nop
 8002498:	f7ff fe70 	bl	800217c <LL_FLASH_GetLatency>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1fa      	bne.n	8002498 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80024a2:	f7ff fd79 	bl	8001f98 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80024a6:	bf00      	nop
 80024a8:	f7ff fd86 	bl	8001fb8 <LL_RCC_HSI_IsReady>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d1fa      	bne.n	80024a8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80024b2:	2010      	movs	r0, #16
 80024b4:	f7ff fd92 	bl	8001fdc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7ff fdc7 	bl	800204c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80024be:	2000      	movs	r0, #0
 80024c0:	f7ff fdd8 	bl	8002074 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7ff fde9 	bl	800209c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7ff fd9c 	bl	8002008 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80024d0:	bf00      	nop
 80024d2:	f7ff fdad 	bl	8002030 <LL_RCC_GetSysClkSource>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1fa      	bne.n	80024d2 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80024dc:	4805      	ldr	r0, [pc, #20]	; (80024f4 <SystemClock_Config+0x68>)
 80024de:	f001 fc91 	bl	8003e04 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80024e2:	4804      	ldr	r0, [pc, #16]	; (80024f4 <SystemClock_Config+0x68>)
 80024e4:	f001 fcc2 	bl	8003e6c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80024e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80024ec:	f7ff fdea 	bl	80020c4 <LL_RCC_SetI2CClockSource>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	007a1200 	.word	0x007a1200

080024f8 <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint16_t samples_window, uint16_t samples_required)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	4608      	mov	r0, r1
 8002502:	4611      	mov	r1, r2
 8002504:	461a      	mov	r2, r3
 8002506:	4603      	mov	r3, r0
 8002508:	70fb      	strb	r3, [r7, #3]
 800250a:	460b      	mov	r3, r1
 800250c:	70bb      	strb	r3, [r7, #2]
 800250e:	4613      	mov	r3, r2
 8002510:	803b      	strh	r3, [r7, #0]
	//type your code for "checkButtonState" implementation here:
	uint16_t detection = 0, timeout = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	81fb      	strh	r3, [r7, #14]
 8002516:	2300      	movs	r3, #0
 8002518:	81bb      	strh	r3, [r7, #12]
	while(timeout <= samples_window){ // cyklus bezi pokial nedocita potrebny pocet vzoriek a ak nahodou nastane detekcia funkcia sa ukonci a vrati 1
 800251a:	e020      	b.n	800255e <checkButtonState+0x66>
		uint8_t actual_value = BUTTON_READ_VALUE;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <checkButtonState+0x90>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	72fb      	strb	r3, [r7, #11]
		if((actual_value && edge) || (!(actual_value) && !(edge))) {
 8002528:	7afb      	ldrb	r3, [r7, #11]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <checkButtonState+0x3c>
 800252e:	78bb      	ldrb	r3, [r7, #2]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <checkButtonState+0x48>
 8002534:	7afb      	ldrb	r3, [r7, #11]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <checkButtonState+0x50>
 800253a:	78bb      	ldrb	r3, [r7, #2]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d103      	bne.n	8002548 <checkButtonState+0x50>
			detection++;
 8002540:	89fb      	ldrh	r3, [r7, #14]
 8002542:	3301      	adds	r3, #1
 8002544:	81fb      	strh	r3, [r7, #14]
 8002546:	e001      	b.n	800254c <checkButtonState+0x54>
		}
		else{
			detection = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	81fb      	strh	r3, [r7, #14]
		}

		timeout++;
 800254c:	89bb      	ldrh	r3, [r7, #12]
 800254e:	3301      	adds	r3, #1
 8002550:	81bb      	strh	r3, [r7, #12]

		if(detection == samples_required){
 8002552:	89fa      	ldrh	r2, [r7, #14]
 8002554:	8b3b      	ldrh	r3, [r7, #24]
 8002556:	429a      	cmp	r2, r3
 8002558:	d101      	bne.n	800255e <checkButtonState+0x66>
			return 1;
 800255a:	2301      	movs	r3, #1
 800255c:	e00e      	b.n	800257c <checkButtonState+0x84>
	while(timeout <= samples_window){ // cyklus bezi pokial nedocita potrebny pocet vzoriek a ak nahodou nastane detekcia funkcia sa ukonci a vrati 1
 800255e:	89ba      	ldrh	r2, [r7, #12]
 8002560:	883b      	ldrh	r3, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d9da      	bls.n	800251c <checkButtonState+0x24>
		}
	}
	if (((timeout > samples_window) && (detection != samples_required))){ //ak cyklus dobehol a nenapocitali sme dostatocny pocet vzoriek iducich po sebe vrati 0
 8002566:	89ba      	ldrh	r2, [r7, #12]
 8002568:	883b      	ldrh	r3, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d905      	bls.n	800257a <checkButtonState+0x82>
 800256e:	89fa      	ldrh	r2, [r7, #14]
 8002570:	8b3b      	ldrh	r3, [r7, #24]
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <checkButtonState+0x82>
		return 0;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <checkButtonState+0x84>
	}
	return 0;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	48000400 	.word	0x48000400

0800258c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4013      	ands	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40010400 	.word	0x40010400

080025b8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6153      	str	r3, [r2, #20]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40010400 	.word	0x40010400

080025d8 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f06f 0201 	mvn.w	r2, #1
 80025e6:	611a      	str	r2, [r3, #16]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800261e:	e7fe      	b.n	800261e <NMI_Handler+0x4>

08002620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <HardFault_Handler+0x4>

08002626 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <MemManage_Handler+0x4>

0800262c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <BusFault_Handler+0x4>

08002632 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <UsageFault_Handler+0x4>

08002638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */
	disp_time++;
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <SysTick_Handler+0x20>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	1c50      	adds	r0, r2, #1
 8002670:	f143 0100 	adc.w	r1, r3, #0
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <SysTick_Handler+0x20>)
 8002676:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	20000200 	.word	0x20000200

08002688 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET) {
 800268e:	2008      	movs	r0, #8
 8002690:	f7ff ff7c 	bl	800258c <LL_EXTI_IsActiveFlag_0_31>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d022      	beq.n	80026e0 <EXTI3_IRQHandler+0x58>
		  if(checkButtonState(GPIOB,
 800269a:	f44f 7361 	mov.w	r3, #900	; 0x384
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a4:	2200      	movs	r2, #0
 80026a6:	2103      	movs	r1, #3
 80026a8:	480f      	ldr	r0, [pc, #60]	; (80026e8 <EXTI3_IRQHandler+0x60>)
 80026aa:	f7ff ff25 	bl	80024f8 <checkButtonState>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d012      	beq.n	80026da <EXTI3_IRQHandler+0x52>
							3,
							0,
							1000,
							900)) {
			  mode++;
 80026b4:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <EXTI3_IRQHandler+0x64>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <EXTI3_IRQHandler+0x64>)
 80026be:	701a      	strb	r2, [r3, #0]
			  if(mode >= 4) mode = 0;
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <EXTI3_IRQHandler+0x64>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d902      	bls.n	80026ce <EXTI3_IRQHandler+0x46>
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <EXTI3_IRQHandler+0x64>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
			  act_index=0, right=1;
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <EXTI3_IRQHandler+0x68>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <EXTI3_IRQHandler+0x6c>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

		  }
		  LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80026da:	2008      	movs	r0, #8
 80026dc:	f7ff ff6c 	bl	80025b8 <LL_EXTI_ClearFlag_0_31>
	  }
  /* USER CODE END EXTI3_IRQn 0 */
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	48000400 	.word	0x48000400
 80026ec:	2000023c 	.word	0x2000023c
 80026f0:	20000214 	.word	0x20000214
 80026f4:	20000000 	.word	0x20000000

080026f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 80026fc:	4806      	ldr	r0, [pc, #24]	; (8002718 <TIM3_IRQHandler+0x20>)
 80026fe:	f7ff ff79 	bl	80025f4 <LL_TIM_IsActiveFlag_UPDATE>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <TIM3_IRQHandler+0x14>
		{
			updateDisplay();
 8002708:	f7fe fc68 	bl	8000fdc <updateDisplay>
		}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <TIM3_IRQHandler+0x20>)
 800270e:	f7ff ff63 	bl	80025d8 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40000400 	.word	0x40000400

0800271c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C1_EV_IRQHandler_fun();
 8002720:	f7ff f948 	bl	80019b4 <I2C1_EV_IRQHandler_fun>
  /* USER CODE END I2C1_EV_IRQn 0 */
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}

08002728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
	return 1;
 800272c:	2301      	movs	r3, #1
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <_kill>:

int _kill(int pid, int sig)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002742:	f001 fba3 	bl	8003e8c <__errno>
 8002746:	4603      	mov	r3, r0
 8002748:	2216      	movs	r2, #22
 800274a:	601a      	str	r2, [r3, #0]
	return -1;
 800274c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_exit>:

void _exit (int status)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002760:	f04f 31ff 	mov.w	r1, #4294967295
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ffe7 	bl	8002738 <_kill>
	while (1) {}		/* Make sure we hang here */
 800276a:	e7fe      	b.n	800276a <_exit+0x12>

0800276c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e00a      	b.n	8002794 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800277e:	f3af 8000 	nop.w
 8002782:	4601      	mov	r1, r0
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	60ba      	str	r2, [r7, #8]
 800278a:	b2ca      	uxtb	r2, r1
 800278c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	dbf0      	blt.n	800277e <_read+0x12>
	}

return len;
 800279c:	687b      	ldr	r3, [r7, #4]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e009      	b.n	80027cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3301      	adds	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbf1      	blt.n	80027b8 <_write+0x12>
	}
	return len;
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_close>:

int _close(int file)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
	return -1;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002806:	605a      	str	r2, [r3, #4]
	return 0;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <_isatty>:

int _isatty(int file)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
	return 1;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
	return 0;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <_sbrk+0x5c>)
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <_sbrk+0x60>)
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <_sbrk+0x64>)
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <_sbrk+0x68>)
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	429a      	cmp	r2, r3
 8002876:	d207      	bcs.n	8002888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002878:	f001 fb08 	bl	8003e8c <__errno>
 800287c:	4603      	mov	r3, r0
 800287e:	220c      	movs	r2, #12
 8002880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	e009      	b.n	800289c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	4a05      	ldr	r2, [pc, #20]	; (80028ac <_sbrk+0x64>)
 8002898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20003000 	.word	0x20003000
 80028a8:	00000400 	.word	0x00000400
 80028ac:	20000218 	.word	0x20000218
 80028b0:	200002c8 	.word	0x200002c8

080028b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <SystemInit+0x20>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <SystemInit+0x20>)
 80028c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4907      	ldr	r1, [pc, #28]	; (800292c <__NVIC_EnableIRQ+0x38>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <LL_APB1_GRP1_EnableClock>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	4907      	ldr	r1, [pc, #28]	; (8002a18 <LL_APB1_GRP1_EnableClock+0x2c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4013      	ands	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40021000 	.word	0x40021000

08002a1c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <LL_SYSTICK_EnableIT+0x1c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <LL_SYSTICK_EnableIT+0x1c>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e010 	.word	0xe000e010

08002a3c <LL_TIM_EnableCounter>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f043 0201 	orr.w	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	601a      	str	r2, [r3, #0]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_TIM_EnableARRPreload>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	601a      	str	r2, [r3, #0]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_TIM_OC_DisableFast>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d028      	beq.n	8002ade <LL_TIM_OC_DisableFast+0x62>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d023      	beq.n	8002ada <LL_TIM_OC_DisableFast+0x5e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d01e      	beq.n	8002ad6 <LL_TIM_OC_DisableFast+0x5a>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	d019      	beq.n	8002ad2 <LL_TIM_OC_DisableFast+0x56>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa4:	d013      	beq.n	8002ace <LL_TIM_OC_DisableFast+0x52>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aac:	d00d      	beq.n	8002aca <LL_TIM_OC_DisableFast+0x4e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab4:	d007      	beq.n	8002ac6 <LL_TIM_OC_DisableFast+0x4a>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abc:	d101      	bne.n	8002ac2 <LL_TIM_OC_DisableFast+0x46>
 8002abe:	2307      	movs	r3, #7
 8002ac0:	e00e      	b.n	8002ae0 <LL_TIM_OC_DisableFast+0x64>
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	e00c      	b.n	8002ae0 <LL_TIM_OC_DisableFast+0x64>
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	e00a      	b.n	8002ae0 <LL_TIM_OC_DisableFast+0x64>
 8002aca:	2305      	movs	r3, #5
 8002acc:	e008      	b.n	8002ae0 <LL_TIM_OC_DisableFast+0x64>
 8002ace:	2304      	movs	r3, #4
 8002ad0:	e006      	b.n	8002ae0 <LL_TIM_OC_DisableFast+0x64>
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e004      	b.n	8002ae0 <LL_TIM_OC_DisableFast+0x64>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e002      	b.n	8002ae0 <LL_TIM_OC_DisableFast+0x64>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_TIM_OC_DisableFast+0x64>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3318      	adds	r3, #24
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <LL_TIM_OC_DisableFast+0x9c>)
 8002aec:	5cd3      	ldrb	r3, [r2, r3]
 8002aee:	440b      	add	r3, r1
 8002af0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	4908      	ldr	r1, [pc, #32]	; (8002b1c <LL_TIM_OC_DisableFast+0xa0>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	4619      	mov	r1, r3
 8002afe:	2304      	movs	r3, #4
 8002b00:	408b      	lsls	r3, r1
 8002b02:	43db      	mvns	r3, r3
 8002b04:	401a      	ands	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	601a      	str	r2, [r3, #0]
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	08009738 	.word	0x08009738
 8002b1c:	08009744 	.word	0x08009744

08002b20 <LL_TIM_SetClockSource>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002b32:	f023 0307 	bic.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_TIM_SetTriggerOutput>:
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	605a      	str	r2, [r3, #4]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_TIM_DisableMasterSlaveMode>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <Systick_Init>:

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void Systick_Init(void){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <Systick_Init+0x20>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0; /* Load the SysTick Counter Value */
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <Systick_Init+0x20>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (SysTick_CTRL_TICKINT_Msk   |  /* Enable SysTick exception */
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <Systick_Init+0x20>)
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_ENABLE_Msk) |    /* Enable SysTick system timer */
					 SysTick_CTRL_CLKSOURCE_Msk;   /* Use processor clock source */
	LL_SYSTICK_EnableIT();
 8002bc6:	f7ff ff29 	bl	8002a1c <LL_SYSTICK_EnableIT>
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000e010 	.word	0xe000e010

08002bd4 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	; 0x38
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	2220      	movs	r2, #32
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 f975 	bl	8003ee0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	f7ff fef8 	bl	80029ec <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002bfc:	f7ff fe6c 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2200      	movs	r2, #0
 8002c04:	210f      	movs	r1, #15
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff febc 	bl	8002984 <NVIC_EncodePriority>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4619      	mov	r1, r3
 8002c10:	201d      	movs	r0, #29
 8002c12:	f7ff fe8d 	bl	8002930 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002c16:	201d      	movs	r0, #29
 8002c18:	f7ff fe6c 	bl	80028f4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8002c1c:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002c20:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;
 8002c26:	2313      	movs	r3, #19
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c32:	4619      	mov	r1, r3
 8002c34:	4817      	ldr	r0, [pc, #92]	; (8002c94 <MX_TIM3_Init+0xc0>)
 8002c36:	f000 fd61 	bl	80036fc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002c3a:	4816      	ldr	r0, [pc, #88]	; (8002c94 <MX_TIM3_Init+0xc0>)
 8002c3c:	f7ff ff0e 	bl	8002a5c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002c40:	2100      	movs	r1, #0
 8002c42:	4814      	ldr	r0, [pc, #80]	; (8002c94 <MX_TIM3_Init+0xc0>)
 8002c44:	f7ff ff6c 	bl	8002b20 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002c48:	2310      	movs	r3, #16
 8002c4a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2101      	movs	r1, #1
 8002c62:	480c      	ldr	r0, [pc, #48]	; (8002c94 <MX_TIM3_Init+0xc0>)
 8002c64:	f000 fdbc 	bl	80037e0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002c68:	2101      	movs	r1, #1
 8002c6a:	480a      	ldr	r0, [pc, #40]	; (8002c94 <MX_TIM3_Init+0xc0>)
 8002c6c:	f7ff ff06 	bl	8002a7c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002c70:	2100      	movs	r1, #0
 8002c72:	4808      	ldr	r0, [pc, #32]	; (8002c94 <MX_TIM3_Init+0xc0>)
 8002c74:	f7ff ff69 	bl	8002b4a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002c78:	4806      	ldr	r0, [pc, #24]	; (8002c94 <MX_TIM3_Init+0xc0>)
 8002c7a:	f7ff ff79 	bl	8002b70 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM3);
 8002c7e:	4805      	ldr	r0, [pc, #20]	; (8002c94 <MX_TIM3_Init+0xc0>)
 8002c80:	f7ff ff86 	bl	8002b90 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002c84:	4803      	ldr	r0, [pc, #12]	; (8002c94 <MX_TIM3_Init+0xc0>)
 8002c86:	f7ff fed9 	bl	8002a3c <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 8002c8a:	bf00      	nop
 8002c8c:	3738      	adds	r7, #56	; 0x38
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40000400 	.word	0x40000400

08002c98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cd0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c9c:	480d      	ldr	r0, [pc, #52]	; (8002cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c9e:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <LoopForever+0xe>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca4:	e002      	b.n	8002cac <LoopCopyDataInit>

08002ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002caa:	3304      	adds	r3, #4

08002cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb0:	d3f9      	bcc.n	8002ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cb4:	4c0b      	ldr	r4, [pc, #44]	; (8002ce4 <LoopForever+0x16>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb8:	e001      	b.n	8002cbe <LoopFillZerobss>

08002cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cbc:	3204      	adds	r2, #4

08002cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc0:	d3fb      	bcc.n	8002cba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cc2:	f7ff fdf7 	bl	80028b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cc6:	f001 f8e7 	bl	8003e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cca:	f7ff fa65 	bl	8002198 <main>

08002cce <LoopForever>:

LoopForever:
    b LoopForever
 8002cce:	e7fe      	b.n	8002cce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cd0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002cdc:	08009c50 	.word	0x08009c50
  ldr r2, =_sbss
 8002ce0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002ce4:	200002c4 	.word	0x200002c4

08002ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ce8:	e7fe      	b.n	8002ce8 <ADC1_2_IRQHandler>
	...

08002cec <LL_EXTI_EnableIT_0_31>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <LL_EXTI_EnableIT_0_31+0x20>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4904      	ldr	r1, [pc, #16]	; (8002d0c <LL_EXTI_EnableIT_0_31+0x20>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40010400 	.word	0x40010400

08002d10 <LL_EXTI_EnableIT_32_63>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <LL_EXTI_EnableIT_32_63+0x20>)
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	4904      	ldr	r1, [pc, #16]	; (8002d30 <LL_EXTI_EnableIT_32_63+0x20>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	620b      	str	r3, [r1, #32]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	40010400 	.word	0x40010400

08002d34 <LL_EXTI_DisableIT_0_31>:
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <LL_EXTI_DisableIT_0_31+0x24>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	4904      	ldr	r1, [pc, #16]	; (8002d58 <LL_EXTI_DisableIT_0_31+0x24>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40010400 	.word	0x40010400

08002d5c <LL_EXTI_DisableIT_32_63>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <LL_EXTI_DisableIT_32_63+0x24>)
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	4904      	ldr	r1, [pc, #16]	; (8002d80 <LL_EXTI_DisableIT_32_63+0x24>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	620b      	str	r3, [r1, #32]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40010400 	.word	0x40010400

08002d84 <LL_EXTI_EnableEvent_0_31>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4904      	ldr	r1, [pc, #16]	; (8002da4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40010400 	.word	0x40010400

08002da8 <LL_EXTI_EnableEvent_32_63>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db4:	4904      	ldr	r1, [pc, #16]	; (8002dc8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40010400 	.word	0x40010400

08002dcc <LL_EXTI_DisableEvent_0_31>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	4904      	ldr	r1, [pc, #16]	; (8002df0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40010400 	.word	0x40010400

08002df4 <LL_EXTI_DisableEvent_32_63>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	4904      	ldr	r1, [pc, #16]	; (8002e18 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40010400 	.word	0x40010400

08002e1c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4904      	ldr	r1, [pc, #16]	; (8002e3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	40010400 	.word	0x40010400

08002e40 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e4c:	4904      	ldr	r1, [pc, #16]	; (8002e60 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40010400 	.word	0x40010400

08002e64 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	4904      	ldr	r1, [pc, #16]	; (8002e88 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40010400 	.word	0x40010400

08002e8c <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002e96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40010400 	.word	0x40010400

08002eb4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	4904      	ldr	r1, [pc, #16]	; (8002ed4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60cb      	str	r3, [r1, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40010400 	.word	0x40010400

08002ed8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee4:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40010400 	.word	0x40010400

08002efc <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	4904      	ldr	r1, [pc, #16]	; (8002f20 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60cb      	str	r3, [r1, #12]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40010400 	.word	0x40010400

08002f24 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4904      	ldr	r1, [pc, #16]	; (8002f48 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010400 	.word	0x40010400

08002f4c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002f54:	2300      	movs	r3, #0
 8002f56:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7a1b      	ldrb	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80cd 	beq.w	80030fc <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d061      	beq.n	800302e <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7a5b      	ldrb	r3, [r3, #9]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d01c      	beq.n	8002fac <LL_EXTI_Init+0x60>
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	dc25      	bgt.n	8002fc2 <LL_EXTI_Init+0x76>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <LL_EXTI_Init+0x34>
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d00b      	beq.n	8002f96 <LL_EXTI_Init+0x4a>
 8002f7e:	e020      	b.n	8002fc2 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff21 	bl	8002dcc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff feac 	bl	8002cec <LL_EXTI_EnableIT_0_31>
          break;
 8002f94:	e018      	b.n	8002fc8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff feca 	bl	8002d34 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff feed 	bl	8002d84 <LL_EXTI_EnableEvent_0_31>
          break;
 8002faa:	e00d      	b.n	8002fc8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fe9b 	bl	8002cec <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fee2 	bl	8002d84 <LL_EXTI_EnableEvent_0_31>
          break;
 8002fc0:	e002      	b.n	8002fc8 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fc6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7a9b      	ldrb	r3, [r3, #10]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d02e      	beq.n	800302e <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7a9b      	ldrb	r3, [r3, #10]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d01c      	beq.n	8003012 <LL_EXTI_Init+0xc6>
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	dc25      	bgt.n	8003028 <LL_EXTI_Init+0xdc>
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d002      	beq.n	8002fe6 <LL_EXTI_Init+0x9a>
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d00b      	beq.n	8002ffc <LL_EXTI_Init+0xb0>
 8002fe4:	e020      	b.n	8003028 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff ff86 	bl	8002efc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff11 	bl	8002e1c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002ffa:	e019      	b.n	8003030 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff2f 	bl	8002e64 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff ff52 	bl	8002eb4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003010:	e00e      	b.n	8003030 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ff00 	bl	8002e1c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff ff47 	bl	8002eb4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003026:	e003      	b.n	8003030 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
            break;
 800302c:	e000      	b.n	8003030 <LL_EXTI_Init+0xe4>
        }
      }
 800302e:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d076      	beq.n	8003126 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7a5b      	ldrb	r3, [r3, #9]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d01c      	beq.n	800307a <LL_EXTI_Init+0x12e>
 8003040:	2b02      	cmp	r3, #2
 8003042:	dc25      	bgt.n	8003090 <LL_EXTI_Init+0x144>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <LL_EXTI_Init+0x102>
 8003048:	2b01      	cmp	r3, #1
 800304a:	d00b      	beq.n	8003064 <LL_EXTI_Init+0x118>
 800304c:	e020      	b.n	8003090 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fece 	bl	8002df4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fe57 	bl	8002d10 <LL_EXTI_EnableIT_32_63>
          break;
 8003062:	e018      	b.n	8003096 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fe77 	bl	8002d5c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fe98 	bl	8002da8 <LL_EXTI_EnableEvent_32_63>
          break;
 8003078:	e00d      	b.n	8003096 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fe46 	bl	8002d10 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fe8d 	bl	8002da8 <LL_EXTI_EnableEvent_32_63>
          break;
 800308e:	e002      	b.n	8003096 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
          break;
 8003094:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7a9b      	ldrb	r3, [r3, #10]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d043      	beq.n	8003126 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7a9b      	ldrb	r3, [r3, #10]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d01c      	beq.n	80030e0 <LL_EXTI_Init+0x194>
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	dc25      	bgt.n	80030f6 <LL_EXTI_Init+0x1aa>
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d002      	beq.n	80030b4 <LL_EXTI_Init+0x168>
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d00b      	beq.n	80030ca <LL_EXTI_Init+0x17e>
 80030b2:	e020      	b.n	80030f6 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff33 	bl	8002f24 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff febc 	bl	8002e40 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80030c8:	e02e      	b.n	8003128 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fedc 	bl	8002e8c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fefd 	bl	8002ed8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80030de:	e023      	b.n	8003128 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff feab 	bl	8002e40 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fef2 	bl	8002ed8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80030f4:	e018      	b.n	8003128 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
            break;
 80030fa:	e015      	b.n	8003128 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fe17 	bl	8002d34 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fe5e 	bl	8002dcc <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fe21 	bl	8002d5c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fe68 	bl	8002df4 <LL_EXTI_DisableEvent_32_63>
 8003124:	e000      	b.n	8003128 <LL_EXTI_Init+0x1dc>
      }
 8003126:	bf00      	nop
#endif
  }
  return status;
 8003128:	7bfb      	ldrb	r3, [r7, #15]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <LL_GPIO_SetPinMode>:
{
 8003132:	b480      	push	{r7}
 8003134:	b089      	sub	sp, #36	; 0x24
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	613b      	str	r3, [r7, #16]
  return result;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	2103      	movs	r1, #3
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	401a      	ands	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	61bb      	str	r3, [r7, #24]
  return result;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	431a      	orrs	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	601a      	str	r2, [r3, #0]
}
 8003184:	bf00      	nop
 8003186:	3724      	adds	r7, #36	; 0x24
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_GPIO_SetPinOutputType>:
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	401a      	ands	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	431a      	orrs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	605a      	str	r2, [r3, #4]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_GPIO_SetPinSpeed>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	; 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	613b      	str	r3, [r7, #16]
  return result;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2103      	movs	r1, #3
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	401a      	ands	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	61bb      	str	r3, [r7, #24]
  return result;
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	609a      	str	r2, [r3, #8]
}
 8003212:	bf00      	nop
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_GPIO_SetPinPull>:
{
 800321e:	b480      	push	{r7}
 8003220:	b089      	sub	sp, #36	; 0x24
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	613b      	str	r3, [r7, #16]
  return result;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	2103      	movs	r1, #3
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	401a      	ands	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	61bb      	str	r3, [r7, #24]
  return result;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	60da      	str	r2, [r3, #12]
}
 8003270:	bf00      	nop
 8003272:	3724      	adds	r7, #36	; 0x24
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_GPIO_SetAFPin_0_7>:
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	; 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1a      	ldr	r2, [r3, #32]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	613b      	str	r3, [r7, #16]
  return result;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	210f      	movs	r1, #15
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	401a      	ands	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	61bb      	str	r3, [r7, #24]
  return result;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	431a      	orrs	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_GPIO_SetAFPin_8_15>:
{
 80032da:	b480      	push	{r7}
 80032dc:	b089      	sub	sp, #36	; 0x24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	613b      	str	r3, [r7, #16]
  return result;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	210f      	movs	r1, #15
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	401a      	ands	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	61bb      	str	r3, [r7, #24]
  return result;
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	431a      	orrs	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003330:	bf00      	nop
 8003332:	3724      	adds	r7, #36	; 0x24
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	613b      	str	r3, [r7, #16]
  return result;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800335e:	e051      	b.n	8003404 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d043      	beq.n	80033fe <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d003      	beq.n	8003386 <LL_GPIO_Init+0x4a>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d10e      	bne.n	80033a4 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	461a      	mov	r2, r3
 800338c:	69b9      	ldr	r1, [r7, #24]
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ff16 	bl	80031c0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6819      	ldr	r1, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	461a      	mov	r2, r3
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff fef6 	bl	8003190 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	461a      	mov	r2, r3
 80033aa:	69b9      	ldr	r1, [r7, #24]
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff36 	bl	800321e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d11a      	bne.n	80033f0 <LL_GPIO_Init+0xb4>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	60bb      	str	r3, [r7, #8]
  return result;
 80033c6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b07      	cmp	r3, #7
 80033d0:	d807      	bhi.n	80033e2 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	461a      	mov	r2, r3
 80033d8:	69b9      	ldr	r1, [r7, #24]
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ff4e 	bl	800327c <LL_GPIO_SetAFPin_0_7>
 80033e0:	e006      	b.n	80033f0 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	461a      	mov	r2, r3
 80033e8:	69b9      	ldr	r1, [r7, #24]
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ff75 	bl	80032da <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	461a      	mov	r2, r3
 80033f6:	69b9      	ldr	r1, [r7, #24]
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff fe9a 	bl	8003132 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3301      	adds	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1a6      	bne.n	8003360 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <LL_I2C_Enable>:
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f043 0201 	orr.w	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_I2C_Disable>:
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 0201 	bic.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	601a      	str	r2, [r3, #0]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_I2C_ConfigFilters>:
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	0219      	lsls	r1, r3, #8
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	430b      	orrs	r3, r1
 8003478:	431a      	orrs	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	601a      	str	r2, [r3, #0]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <LL_I2C_SetOwnAddress1>:
{
 800348a:	b480      	push	{r7}
 800348c:	b085      	sub	sp, #20
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800349e:	f023 0307 	bic.w	r3, r3, #7
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	609a      	str	r2, [r3, #8]
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <LL_I2C_EnableOwnAddress1>:
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	609a      	str	r2, [r3, #8]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <LL_I2C_DisableOwnAddress1>:
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	609a      	str	r2, [r3, #8]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_I2C_SetTiming>:
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	611a      	str	r2, [r3, #16]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <LL_I2C_SetMode>:
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	601a      	str	r2, [r3, #0]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_I2C_AcknowledgeNextData>:
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	605a      	str	r2, [r3, #4]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff65 	bl	800343c <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6899      	ldr	r1, [r3, #8]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	461a      	mov	r2, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ff6d 	bl	800345c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4619      	mov	r1, r3
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff ffb6 	bl	80034fa <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ff44 	bl	800341c <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ffa0 	bl	80034da <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6919      	ldr	r1, [r3, #16]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	461a      	mov	r2, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff70 	bl	800348a <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ff81 	bl	80034ba <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ffa9 	bl	8003516 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	4619      	mov	r1, r3
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff ffb6 	bl	800353c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <LL_TIM_SetPrescaler>:
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_TIM_SetAutoReload>:
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_TIM_SetRepetitionCounter>:
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <LL_TIM_OC_SetCompareCH1>:
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_TIM_OC_SetCompareCH2>:
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	639a      	str	r2, [r3, #56]	; 0x38
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_TIM_OC_SetCompareCH3>:
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <LL_TIM_OC_SetCompareCH4>:
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <LL_TIM_OC_SetCompareCH5>:
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	659a      	str	r2, [r3, #88]	; 0x58
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <LL_TIM_OC_SetCompareCH6>:
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	615a      	str	r2, [r3, #20]
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a2f      	ldr	r2, [pc, #188]	; (80037cc <LL_TIM_Init+0xd0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d007      	beq.n	8003724 <LL_TIM_Init+0x28>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371a:	d003      	beq.n	8003724 <LL_TIM_Init+0x28>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <LL_TIM_Init+0xd4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d106      	bne.n	8003732 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a25      	ldr	r2, [pc, #148]	; (80037cc <LL_TIM_Init+0xd0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <LL_TIM_Init+0x66>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d00f      	beq.n	8003762 <LL_TIM_Init+0x66>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <LL_TIM_Init+0xd4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00b      	beq.n	8003762 <LL_TIM_Init+0x66>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <LL_TIM_Init+0xd8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <LL_TIM_Init+0x66>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <LL_TIM_Init+0xdc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d003      	beq.n	8003762 <LL_TIM_Init+0x66>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <LL_TIM_Init+0xe0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d106      	bne.n	8003770 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff3a 	bl	80035f6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff ff26 	bl	80035da <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <LL_TIM_Init+0xd0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <LL_TIM_Init+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <LL_TIM_Init+0xd8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <LL_TIM_Init+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <LL_TIM_Init+0xdc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <LL_TIM_Init+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a0c      	ldr	r2, [pc, #48]	; (80037dc <LL_TIM_Init+0xe0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d105      	bne.n	80037ba <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	4619      	mov	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff2c 	bl	8003612 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ff8d 	bl	80036da <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40014400 	.word	0x40014400
 80037dc:	40014800 	.word	0x40014800

080037e0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f6:	d045      	beq.n	8003884 <LL_TIM_OC_Init+0xa4>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037fe:	d848      	bhi.n	8003892 <LL_TIM_OC_Init+0xb2>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003806:	d036      	beq.n	8003876 <LL_TIM_OC_Init+0x96>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380e:	d840      	bhi.n	8003892 <LL_TIM_OC_Init+0xb2>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003816:	d027      	beq.n	8003868 <LL_TIM_OC_Init+0x88>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381e:	d838      	bhi.n	8003892 <LL_TIM_OC_Init+0xb2>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003826:	d018      	beq.n	800385a <LL_TIM_OC_Init+0x7a>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382e:	d830      	bhi.n	8003892 <LL_TIM_OC_Init+0xb2>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d003      	beq.n	800383e <LL_TIM_OC_Init+0x5e>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b10      	cmp	r3, #16
 800383a:	d007      	beq.n	800384c <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800383c:	e029      	b.n	8003892 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f82d 	bl	80038a0 <OC1Config>
 8003846:	4603      	mov	r3, r0
 8003848:	75fb      	strb	r3, [r7, #23]
      break;
 800384a:	e023      	b.n	8003894 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f8a0 	bl	8003994 <OC2Config>
 8003854:	4603      	mov	r3, r0
 8003856:	75fb      	strb	r3, [r7, #23]
      break;
 8003858:	e01c      	b.n	8003894 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f917 	bl	8003a90 <OC3Config>
 8003862:	4603      	mov	r3, r0
 8003864:	75fb      	strb	r3, [r7, #23]
      break;
 8003866:	e015      	b.n	8003894 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f98e 	bl	8003b8c <OC4Config>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]
      break;
 8003874:	e00e      	b.n	8003894 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f9ed 	bl	8003c58 <OC5Config>
 800387e:	4603      	mov	r3, r0
 8003880:	75fb      	strb	r3, [r7, #23]
      break;
 8003882:	e007      	b.n	8003894 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fa44 	bl	8003d14 <OC6Config>
 800388c:	4603      	mov	r3, r0
 800388e:	75fb      	strb	r3, [r7, #23]
      break;
 8003890:	e000      	b.n	8003894 <LL_TIM_OC_Init+0xb4>
      break;
 8003892:	bf00      	nop
  }

  return result;
 8003894:	7dfb      	ldrb	r3, [r7, #23]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f023 0201 	bic.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f023 0202 	bic.w	r2, r3, #2
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f023 0201 	bic.w	r2, r3, #1
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a20      	ldr	r2, [pc, #128]	; (8003984 <OC1Config+0xe4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00b      	beq.n	800391e <OC1Config+0x7e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a1f      	ldr	r2, [pc, #124]	; (8003988 <OC1Config+0xe8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <OC1Config+0x7e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1e      	ldr	r2, [pc, #120]	; (800398c <OC1Config+0xec>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d003      	beq.n	800391e <OC1Config+0x7e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <OC1Config+0xf0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d11e      	bne.n	800395c <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f023 0208 	bic.w	r2, r3, #8
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f023 0204 	bic.w	r2, r3, #4
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fe5d 	bl	800362e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40014000 	.word	0x40014000
 800398c:	40014400 	.word	0x40014400
 8003990:	40014800 	.word	0x40014800

08003994 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f023 0210 	bic.w	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	0212      	lsls	r2, r2, #8
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 0220 	bic.w	r2, r3, #32
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f023 0210 	bic.w	r2, r3, #16
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a21      	ldr	r2, [pc, #132]	; (8003a80 <OC2Config+0xec>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <OC2Config+0x84>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a20      	ldr	r2, [pc, #128]	; (8003a84 <OC2Config+0xf0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <OC2Config+0x84>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <OC2Config+0xf4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <OC2Config+0x84>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <OC2Config+0xf8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d11f      	bne.n	8003a58 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	019b      	lsls	r3, r3, #6
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	019b      	lsls	r3, r3, #6
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fded 	bl	800364a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	40014000 	.word	0x40014000
 8003a88:	40014400 	.word	0x40014400
 8003a8c:	40014800 	.word	0x40014800

08003a90 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a21      	ldr	r2, [pc, #132]	; (8003b7c <OC3Config+0xec>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <OC3Config+0x82>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a20      	ldr	r2, [pc, #128]	; (8003b80 <OC3Config+0xf0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <OC3Config+0x82>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <OC3Config+0xf4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <OC3Config+0x82>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <OC3Config+0xf8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d11f      	bne.n	8003b52 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	029b      	lsls	r3, r3, #10
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	029b      	lsls	r3, r3, #10
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	015b      	lsls	r3, r3, #5
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fd7e 	bl	8003666 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40014400 	.word	0x40014400
 8003b88:	40014800 	.word	0x40014800

08003b8c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	0212      	lsls	r2, r2, #8
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	031b      	lsls	r3, r3, #12
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	031b      	lsls	r3, r3, #12
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <OC4Config+0xbc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <OC4Config+0x84>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <OC4Config+0xc0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <OC4Config+0x84>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <OC4Config+0xc4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <OC4Config+0x84>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <OC4Config+0xc8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d107      	bne.n	8003c20 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	019b      	lsls	r3, r3, #6
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fd25 	bl	8003682 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400
 8003c54:	40014800 	.word	0x40014800

08003c58 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <OC5Config+0xac>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <OC5Config+0x74>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <OC5Config+0xb0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <OC5Config+0x74>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <OC5Config+0xb4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <OC5Config+0x74>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a12      	ldr	r2, [pc, #72]	; (8003d10 <OC5Config+0xb8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d109      	bne.n	8003ce0 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4619      	mov	r1, r3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff fcd6 	bl	800369e <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40014400 	.word	0x40014400
 8003d10:	40014800 	.word	0x40014800

08003d14 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	0212      	lsls	r2, r2, #8
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	051b      	lsls	r3, r3, #20
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	051b      	lsls	r3, r3, #20
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <OC6Config+0xac>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <OC6Config+0x76>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a13      	ldr	r2, [pc, #76]	; (8003dc4 <OC6Config+0xb0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <OC6Config+0x76>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a12      	ldr	r2, [pc, #72]	; (8003dc8 <OC6Config+0xb4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <OC6Config+0x76>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a11      	ldr	r2, [pc, #68]	; (8003dcc <OC6Config+0xb8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d109      	bne.n	8003d9e <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	029b      	lsls	r3, r3, #10
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff fc87 	bl	80036be <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40014400 	.word	0x40014400
 8003dcc:	40014800 	.word	0x40014800

08003dd0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <LL_InitTick+0x30>)
 8003de4:	3b01      	subs	r3, #1
 8003de6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <LL_InitTick+0x30>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <LL_InitTick+0x30>)
 8003df0:	2205      	movs	r2, #5
 8003df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000e010 	.word	0xe000e010

08003e04 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003e0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ffdd 	bl	8003dd0 <LL_InitTick>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <LL_mDelay+0x48>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003e2e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d00c      	beq.n	8003e52 <LL_mDelay+0x32>
  {
    Delay++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003e3e:	e008      	b.n	8003e52 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <LL_mDelay+0x48>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <LL_mDelay+0x32>
    {
      Delay--;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f3      	bne.n	8003e40 <LL_mDelay+0x20>
    }
  }
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	e000e010 	.word	0xe000e010

08003e6c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003e74:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <LL_SetSystemCoreClock+0x1c>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6013      	str	r3, [r2, #0]
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000004 	.word	0x20000004

08003e8c <__errno>:
 8003e8c:	4b01      	ldr	r3, [pc, #4]	; (8003e94 <__errno+0x8>)
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000008 	.word	0x20000008

08003e98 <__libc_init_array>:
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	4d0d      	ldr	r5, [pc, #52]	; (8003ed0 <__libc_init_array+0x38>)
 8003e9c:	4c0d      	ldr	r4, [pc, #52]	; (8003ed4 <__libc_init_array+0x3c>)
 8003e9e:	1b64      	subs	r4, r4, r5
 8003ea0:	10a4      	asrs	r4, r4, #2
 8003ea2:	2600      	movs	r6, #0
 8003ea4:	42a6      	cmp	r6, r4
 8003ea6:	d109      	bne.n	8003ebc <__libc_init_array+0x24>
 8003ea8:	4d0b      	ldr	r5, [pc, #44]	; (8003ed8 <__libc_init_array+0x40>)
 8003eaa:	4c0c      	ldr	r4, [pc, #48]	; (8003edc <__libc_init_array+0x44>)
 8003eac:	f005 fbee 	bl	800968c <_init>
 8003eb0:	1b64      	subs	r4, r4, r5
 8003eb2:	10a4      	asrs	r4, r4, #2
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	42a6      	cmp	r6, r4
 8003eb8:	d105      	bne.n	8003ec6 <__libc_init_array+0x2e>
 8003eba:	bd70      	pop	{r4, r5, r6, pc}
 8003ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec0:	4798      	blx	r3
 8003ec2:	3601      	adds	r6, #1
 8003ec4:	e7ee      	b.n	8003ea4 <__libc_init_array+0xc>
 8003ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eca:	4798      	blx	r3
 8003ecc:	3601      	adds	r6, #1
 8003ece:	e7f2      	b.n	8003eb6 <__libc_init_array+0x1e>
 8003ed0:	08009c48 	.word	0x08009c48
 8003ed4:	08009c48 	.word	0x08009c48
 8003ed8:	08009c48 	.word	0x08009c48
 8003edc:	08009c4c 	.word	0x08009c4c

08003ee0 <memset>:
 8003ee0:	4402      	add	r2, r0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d100      	bne.n	8003eea <memset+0xa>
 8003ee8:	4770      	bx	lr
 8003eea:	f803 1b01 	strb.w	r1, [r3], #1
 8003eee:	e7f9      	b.n	8003ee4 <memset+0x4>

08003ef0 <__cvt>:
 8003ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	ec55 4b10 	vmov	r4, r5, d0
 8003ef8:	2d00      	cmp	r5, #0
 8003efa:	460e      	mov	r6, r1
 8003efc:	4619      	mov	r1, r3
 8003efe:	462b      	mov	r3, r5
 8003f00:	bfbb      	ittet	lt
 8003f02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f06:	461d      	movlt	r5, r3
 8003f08:	2300      	movge	r3, #0
 8003f0a:	232d      	movlt	r3, #45	; 0x2d
 8003f0c:	700b      	strb	r3, [r1, #0]
 8003f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f14:	4691      	mov	r9, r2
 8003f16:	f023 0820 	bic.w	r8, r3, #32
 8003f1a:	bfbc      	itt	lt
 8003f1c:	4622      	movlt	r2, r4
 8003f1e:	4614      	movlt	r4, r2
 8003f20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f24:	d005      	beq.n	8003f32 <__cvt+0x42>
 8003f26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f2a:	d100      	bne.n	8003f2e <__cvt+0x3e>
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	2102      	movs	r1, #2
 8003f30:	e000      	b.n	8003f34 <__cvt+0x44>
 8003f32:	2103      	movs	r1, #3
 8003f34:	ab03      	add	r3, sp, #12
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	ab02      	add	r3, sp, #8
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	ec45 4b10 	vmov	d0, r4, r5
 8003f40:	4653      	mov	r3, sl
 8003f42:	4632      	mov	r2, r6
 8003f44:	f001 fdb4 	bl	8005ab0 <_dtoa_r>
 8003f48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	d102      	bne.n	8003f56 <__cvt+0x66>
 8003f50:	f019 0f01 	tst.w	r9, #1
 8003f54:	d022      	beq.n	8003f9c <__cvt+0xac>
 8003f56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f5a:	eb07 0906 	add.w	r9, r7, r6
 8003f5e:	d110      	bne.n	8003f82 <__cvt+0x92>
 8003f60:	783b      	ldrb	r3, [r7, #0]
 8003f62:	2b30      	cmp	r3, #48	; 0x30
 8003f64:	d10a      	bne.n	8003f7c <__cvt+0x8c>
 8003f66:	2200      	movs	r2, #0
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fc fdab 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f72:	b918      	cbnz	r0, 8003f7c <__cvt+0x8c>
 8003f74:	f1c6 0601 	rsb	r6, r6, #1
 8003f78:	f8ca 6000 	str.w	r6, [sl]
 8003f7c:	f8da 3000 	ldr.w	r3, [sl]
 8003f80:	4499      	add	r9, r3
 8003f82:	2200      	movs	r2, #0
 8003f84:	2300      	movs	r3, #0
 8003f86:	4620      	mov	r0, r4
 8003f88:	4629      	mov	r1, r5
 8003f8a:	f7fc fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f8e:	b108      	cbz	r0, 8003f94 <__cvt+0xa4>
 8003f90:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f94:	2230      	movs	r2, #48	; 0x30
 8003f96:	9b03      	ldr	r3, [sp, #12]
 8003f98:	454b      	cmp	r3, r9
 8003f9a:	d307      	bcc.n	8003fac <__cvt+0xbc>
 8003f9c:	9b03      	ldr	r3, [sp, #12]
 8003f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fa0:	1bdb      	subs	r3, r3, r7
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	b004      	add	sp, #16
 8003fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fac:	1c59      	adds	r1, r3, #1
 8003fae:	9103      	str	r1, [sp, #12]
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	e7f0      	b.n	8003f96 <__cvt+0xa6>

08003fb4 <__exponent>:
 8003fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	bfb8      	it	lt
 8003fbc:	4249      	neglt	r1, r1
 8003fbe:	f803 2b02 	strb.w	r2, [r3], #2
 8003fc2:	bfb4      	ite	lt
 8003fc4:	222d      	movlt	r2, #45	; 0x2d
 8003fc6:	222b      	movge	r2, #43	; 0x2b
 8003fc8:	2909      	cmp	r1, #9
 8003fca:	7042      	strb	r2, [r0, #1]
 8003fcc:	dd2a      	ble.n	8004024 <__exponent+0x70>
 8003fce:	f10d 0407 	add.w	r4, sp, #7
 8003fd2:	46a4      	mov	ip, r4
 8003fd4:	270a      	movs	r7, #10
 8003fd6:	46a6      	mov	lr, r4
 8003fd8:	460a      	mov	r2, r1
 8003fda:	fb91 f6f7 	sdiv	r6, r1, r7
 8003fde:	fb07 1516 	mls	r5, r7, r6, r1
 8003fe2:	3530      	adds	r5, #48	; 0x30
 8003fe4:	2a63      	cmp	r2, #99	; 0x63
 8003fe6:	f104 34ff 	add.w	r4, r4, #4294967295
 8003fea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003fee:	4631      	mov	r1, r6
 8003ff0:	dcf1      	bgt.n	8003fd6 <__exponent+0x22>
 8003ff2:	3130      	adds	r1, #48	; 0x30
 8003ff4:	f1ae 0502 	sub.w	r5, lr, #2
 8003ff8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ffc:	1c44      	adds	r4, r0, #1
 8003ffe:	4629      	mov	r1, r5
 8004000:	4561      	cmp	r1, ip
 8004002:	d30a      	bcc.n	800401a <__exponent+0x66>
 8004004:	f10d 0209 	add.w	r2, sp, #9
 8004008:	eba2 020e 	sub.w	r2, r2, lr
 800400c:	4565      	cmp	r5, ip
 800400e:	bf88      	it	hi
 8004010:	2200      	movhi	r2, #0
 8004012:	4413      	add	r3, r2
 8004014:	1a18      	subs	r0, r3, r0
 8004016:	b003      	add	sp, #12
 8004018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800401a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800401e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004022:	e7ed      	b.n	8004000 <__exponent+0x4c>
 8004024:	2330      	movs	r3, #48	; 0x30
 8004026:	3130      	adds	r1, #48	; 0x30
 8004028:	7083      	strb	r3, [r0, #2]
 800402a:	70c1      	strb	r1, [r0, #3]
 800402c:	1d03      	adds	r3, r0, #4
 800402e:	e7f1      	b.n	8004014 <__exponent+0x60>

08004030 <_printf_float>:
 8004030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004034:	ed2d 8b02 	vpush	{d8}
 8004038:	b08d      	sub	sp, #52	; 0x34
 800403a:	460c      	mov	r4, r1
 800403c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004040:	4616      	mov	r6, r2
 8004042:	461f      	mov	r7, r3
 8004044:	4605      	mov	r5, r0
 8004046:	f002 fe8f 	bl	8006d68 <_localeconv_r>
 800404a:	f8d0 a000 	ldr.w	sl, [r0]
 800404e:	4650      	mov	r0, sl
 8004050:	f7fc f8be 	bl	80001d0 <strlen>
 8004054:	2300      	movs	r3, #0
 8004056:	930a      	str	r3, [sp, #40]	; 0x28
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	9305      	str	r3, [sp, #20]
 800405c:	f8d8 3000 	ldr.w	r3, [r8]
 8004060:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004064:	3307      	adds	r3, #7
 8004066:	f023 0307 	bic.w	r3, r3, #7
 800406a:	f103 0208 	add.w	r2, r3, #8
 800406e:	f8c8 2000 	str.w	r2, [r8]
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800407a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800407e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004082:	9307      	str	r3, [sp, #28]
 8004084:	f8cd 8018 	str.w	r8, [sp, #24]
 8004088:	ee08 0a10 	vmov	s16, r0
 800408c:	4b9f      	ldr	r3, [pc, #636]	; (800430c <_printf_float+0x2dc>)
 800408e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004092:	f04f 32ff 	mov.w	r2, #4294967295
 8004096:	f7fc fd49 	bl	8000b2c <__aeabi_dcmpun>
 800409a:	bb88      	cbnz	r0, 8004100 <_printf_float+0xd0>
 800409c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040a0:	4b9a      	ldr	r3, [pc, #616]	; (800430c <_printf_float+0x2dc>)
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	f7fc fd23 	bl	8000af0 <__aeabi_dcmple>
 80040aa:	bb48      	cbnz	r0, 8004100 <_printf_float+0xd0>
 80040ac:	2200      	movs	r2, #0
 80040ae:	2300      	movs	r3, #0
 80040b0:	4640      	mov	r0, r8
 80040b2:	4649      	mov	r1, r9
 80040b4:	f7fc fd12 	bl	8000adc <__aeabi_dcmplt>
 80040b8:	b110      	cbz	r0, 80040c0 <_printf_float+0x90>
 80040ba:	232d      	movs	r3, #45	; 0x2d
 80040bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040c0:	4b93      	ldr	r3, [pc, #588]	; (8004310 <_printf_float+0x2e0>)
 80040c2:	4894      	ldr	r0, [pc, #592]	; (8004314 <_printf_float+0x2e4>)
 80040c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80040c8:	bf94      	ite	ls
 80040ca:	4698      	movls	r8, r3
 80040cc:	4680      	movhi	r8, r0
 80040ce:	2303      	movs	r3, #3
 80040d0:	6123      	str	r3, [r4, #16]
 80040d2:	9b05      	ldr	r3, [sp, #20]
 80040d4:	f023 0204 	bic.w	r2, r3, #4
 80040d8:	6022      	str	r2, [r4, #0]
 80040da:	f04f 0900 	mov.w	r9, #0
 80040de:	9700      	str	r7, [sp, #0]
 80040e0:	4633      	mov	r3, r6
 80040e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80040e4:	4621      	mov	r1, r4
 80040e6:	4628      	mov	r0, r5
 80040e8:	f000 f9d8 	bl	800449c <_printf_common>
 80040ec:	3001      	adds	r0, #1
 80040ee:	f040 8090 	bne.w	8004212 <_printf_float+0x1e2>
 80040f2:	f04f 30ff 	mov.w	r0, #4294967295
 80040f6:	b00d      	add	sp, #52	; 0x34
 80040f8:	ecbd 8b02 	vpop	{d8}
 80040fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	4640      	mov	r0, r8
 8004106:	4649      	mov	r1, r9
 8004108:	f7fc fd10 	bl	8000b2c <__aeabi_dcmpun>
 800410c:	b140      	cbz	r0, 8004120 <_printf_float+0xf0>
 800410e:	464b      	mov	r3, r9
 8004110:	2b00      	cmp	r3, #0
 8004112:	bfbc      	itt	lt
 8004114:	232d      	movlt	r3, #45	; 0x2d
 8004116:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800411a:	487f      	ldr	r0, [pc, #508]	; (8004318 <_printf_float+0x2e8>)
 800411c:	4b7f      	ldr	r3, [pc, #508]	; (800431c <_printf_float+0x2ec>)
 800411e:	e7d1      	b.n	80040c4 <_printf_float+0x94>
 8004120:	6863      	ldr	r3, [r4, #4]
 8004122:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004126:	9206      	str	r2, [sp, #24]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	d13f      	bne.n	80041ac <_printf_float+0x17c>
 800412c:	2306      	movs	r3, #6
 800412e:	6063      	str	r3, [r4, #4]
 8004130:	9b05      	ldr	r3, [sp, #20]
 8004132:	6861      	ldr	r1, [r4, #4]
 8004134:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004138:	2300      	movs	r3, #0
 800413a:	9303      	str	r3, [sp, #12]
 800413c:	ab0a      	add	r3, sp, #40	; 0x28
 800413e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004142:	ab09      	add	r3, sp, #36	; 0x24
 8004144:	ec49 8b10 	vmov	d0, r8, r9
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	6022      	str	r2, [r4, #0]
 800414c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004150:	4628      	mov	r0, r5
 8004152:	f7ff fecd 	bl	8003ef0 <__cvt>
 8004156:	9b06      	ldr	r3, [sp, #24]
 8004158:	9909      	ldr	r1, [sp, #36]	; 0x24
 800415a:	2b47      	cmp	r3, #71	; 0x47
 800415c:	4680      	mov	r8, r0
 800415e:	d108      	bne.n	8004172 <_printf_float+0x142>
 8004160:	1cc8      	adds	r0, r1, #3
 8004162:	db02      	blt.n	800416a <_printf_float+0x13a>
 8004164:	6863      	ldr	r3, [r4, #4]
 8004166:	4299      	cmp	r1, r3
 8004168:	dd41      	ble.n	80041ee <_printf_float+0x1be>
 800416a:	f1ab 0b02 	sub.w	fp, fp, #2
 800416e:	fa5f fb8b 	uxtb.w	fp, fp
 8004172:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004176:	d820      	bhi.n	80041ba <_printf_float+0x18a>
 8004178:	3901      	subs	r1, #1
 800417a:	465a      	mov	r2, fp
 800417c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004180:	9109      	str	r1, [sp, #36]	; 0x24
 8004182:	f7ff ff17 	bl	8003fb4 <__exponent>
 8004186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004188:	1813      	adds	r3, r2, r0
 800418a:	2a01      	cmp	r2, #1
 800418c:	4681      	mov	r9, r0
 800418e:	6123      	str	r3, [r4, #16]
 8004190:	dc02      	bgt.n	8004198 <_printf_float+0x168>
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	07d2      	lsls	r2, r2, #31
 8004196:	d501      	bpl.n	800419c <_printf_float+0x16c>
 8004198:	3301      	adds	r3, #1
 800419a:	6123      	str	r3, [r4, #16]
 800419c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d09c      	beq.n	80040de <_printf_float+0xae>
 80041a4:	232d      	movs	r3, #45	; 0x2d
 80041a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041aa:	e798      	b.n	80040de <_printf_float+0xae>
 80041ac:	9a06      	ldr	r2, [sp, #24]
 80041ae:	2a47      	cmp	r2, #71	; 0x47
 80041b0:	d1be      	bne.n	8004130 <_printf_float+0x100>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1bc      	bne.n	8004130 <_printf_float+0x100>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e7b9      	b.n	800412e <_printf_float+0xfe>
 80041ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80041be:	d118      	bne.n	80041f2 <_printf_float+0x1c2>
 80041c0:	2900      	cmp	r1, #0
 80041c2:	6863      	ldr	r3, [r4, #4]
 80041c4:	dd0b      	ble.n	80041de <_printf_float+0x1ae>
 80041c6:	6121      	str	r1, [r4, #16]
 80041c8:	b913      	cbnz	r3, 80041d0 <_printf_float+0x1a0>
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	07d0      	lsls	r0, r2, #31
 80041ce:	d502      	bpl.n	80041d6 <_printf_float+0x1a6>
 80041d0:	3301      	adds	r3, #1
 80041d2:	440b      	add	r3, r1
 80041d4:	6123      	str	r3, [r4, #16]
 80041d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80041d8:	f04f 0900 	mov.w	r9, #0
 80041dc:	e7de      	b.n	800419c <_printf_float+0x16c>
 80041de:	b913      	cbnz	r3, 80041e6 <_printf_float+0x1b6>
 80041e0:	6822      	ldr	r2, [r4, #0]
 80041e2:	07d2      	lsls	r2, r2, #31
 80041e4:	d501      	bpl.n	80041ea <_printf_float+0x1ba>
 80041e6:	3302      	adds	r3, #2
 80041e8:	e7f4      	b.n	80041d4 <_printf_float+0x1a4>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e7f2      	b.n	80041d4 <_printf_float+0x1a4>
 80041ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80041f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041f4:	4299      	cmp	r1, r3
 80041f6:	db05      	blt.n	8004204 <_printf_float+0x1d4>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	6121      	str	r1, [r4, #16]
 80041fc:	07d8      	lsls	r0, r3, #31
 80041fe:	d5ea      	bpl.n	80041d6 <_printf_float+0x1a6>
 8004200:	1c4b      	adds	r3, r1, #1
 8004202:	e7e7      	b.n	80041d4 <_printf_float+0x1a4>
 8004204:	2900      	cmp	r1, #0
 8004206:	bfd4      	ite	le
 8004208:	f1c1 0202 	rsble	r2, r1, #2
 800420c:	2201      	movgt	r2, #1
 800420e:	4413      	add	r3, r2
 8004210:	e7e0      	b.n	80041d4 <_printf_float+0x1a4>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	055a      	lsls	r2, r3, #21
 8004216:	d407      	bmi.n	8004228 <_printf_float+0x1f8>
 8004218:	6923      	ldr	r3, [r4, #16]
 800421a:	4642      	mov	r2, r8
 800421c:	4631      	mov	r1, r6
 800421e:	4628      	mov	r0, r5
 8004220:	47b8      	blx	r7
 8004222:	3001      	adds	r0, #1
 8004224:	d12c      	bne.n	8004280 <_printf_float+0x250>
 8004226:	e764      	b.n	80040f2 <_printf_float+0xc2>
 8004228:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800422c:	f240 80e0 	bls.w	80043f0 <_printf_float+0x3c0>
 8004230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004234:	2200      	movs	r2, #0
 8004236:	2300      	movs	r3, #0
 8004238:	f7fc fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800423c:	2800      	cmp	r0, #0
 800423e:	d034      	beq.n	80042aa <_printf_float+0x27a>
 8004240:	4a37      	ldr	r2, [pc, #220]	; (8004320 <_printf_float+0x2f0>)
 8004242:	2301      	movs	r3, #1
 8004244:	4631      	mov	r1, r6
 8004246:	4628      	mov	r0, r5
 8004248:	47b8      	blx	r7
 800424a:	3001      	adds	r0, #1
 800424c:	f43f af51 	beq.w	80040f2 <_printf_float+0xc2>
 8004250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004254:	429a      	cmp	r2, r3
 8004256:	db02      	blt.n	800425e <_printf_float+0x22e>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	07d8      	lsls	r0, r3, #31
 800425c:	d510      	bpl.n	8004280 <_printf_float+0x250>
 800425e:	ee18 3a10 	vmov	r3, s16
 8004262:	4652      	mov	r2, sl
 8004264:	4631      	mov	r1, r6
 8004266:	4628      	mov	r0, r5
 8004268:	47b8      	blx	r7
 800426a:	3001      	adds	r0, #1
 800426c:	f43f af41 	beq.w	80040f2 <_printf_float+0xc2>
 8004270:	f04f 0800 	mov.w	r8, #0
 8004274:	f104 091a 	add.w	r9, r4, #26
 8004278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800427a:	3b01      	subs	r3, #1
 800427c:	4543      	cmp	r3, r8
 800427e:	dc09      	bgt.n	8004294 <_printf_float+0x264>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	079b      	lsls	r3, r3, #30
 8004284:	f100 8105 	bmi.w	8004492 <_printf_float+0x462>
 8004288:	68e0      	ldr	r0, [r4, #12]
 800428a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800428c:	4298      	cmp	r0, r3
 800428e:	bfb8      	it	lt
 8004290:	4618      	movlt	r0, r3
 8004292:	e730      	b.n	80040f6 <_printf_float+0xc6>
 8004294:	2301      	movs	r3, #1
 8004296:	464a      	mov	r2, r9
 8004298:	4631      	mov	r1, r6
 800429a:	4628      	mov	r0, r5
 800429c:	47b8      	blx	r7
 800429e:	3001      	adds	r0, #1
 80042a0:	f43f af27 	beq.w	80040f2 <_printf_float+0xc2>
 80042a4:	f108 0801 	add.w	r8, r8, #1
 80042a8:	e7e6      	b.n	8004278 <_printf_float+0x248>
 80042aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	dc39      	bgt.n	8004324 <_printf_float+0x2f4>
 80042b0:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <_printf_float+0x2f0>)
 80042b2:	2301      	movs	r3, #1
 80042b4:	4631      	mov	r1, r6
 80042b6:	4628      	mov	r0, r5
 80042b8:	47b8      	blx	r7
 80042ba:	3001      	adds	r0, #1
 80042bc:	f43f af19 	beq.w	80040f2 <_printf_float+0xc2>
 80042c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042c4:	4313      	orrs	r3, r2
 80042c6:	d102      	bne.n	80042ce <_printf_float+0x29e>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	07d9      	lsls	r1, r3, #31
 80042cc:	d5d8      	bpl.n	8004280 <_printf_float+0x250>
 80042ce:	ee18 3a10 	vmov	r3, s16
 80042d2:	4652      	mov	r2, sl
 80042d4:	4631      	mov	r1, r6
 80042d6:	4628      	mov	r0, r5
 80042d8:	47b8      	blx	r7
 80042da:	3001      	adds	r0, #1
 80042dc:	f43f af09 	beq.w	80040f2 <_printf_float+0xc2>
 80042e0:	f04f 0900 	mov.w	r9, #0
 80042e4:	f104 0a1a 	add.w	sl, r4, #26
 80042e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ea:	425b      	negs	r3, r3
 80042ec:	454b      	cmp	r3, r9
 80042ee:	dc01      	bgt.n	80042f4 <_printf_float+0x2c4>
 80042f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042f2:	e792      	b.n	800421a <_printf_float+0x1ea>
 80042f4:	2301      	movs	r3, #1
 80042f6:	4652      	mov	r2, sl
 80042f8:	4631      	mov	r1, r6
 80042fa:	4628      	mov	r0, r5
 80042fc:	47b8      	blx	r7
 80042fe:	3001      	adds	r0, #1
 8004300:	f43f aef7 	beq.w	80040f2 <_printf_float+0xc2>
 8004304:	f109 0901 	add.w	r9, r9, #1
 8004308:	e7ee      	b.n	80042e8 <_printf_float+0x2b8>
 800430a:	bf00      	nop
 800430c:	7fefffff 	.word	0x7fefffff
 8004310:	08009754 	.word	0x08009754
 8004314:	08009758 	.word	0x08009758
 8004318:	08009760 	.word	0x08009760
 800431c:	0800975c 	.word	0x0800975c
 8004320:	08009764 	.word	0x08009764
 8004324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004328:	429a      	cmp	r2, r3
 800432a:	bfa8      	it	ge
 800432c:	461a      	movge	r2, r3
 800432e:	2a00      	cmp	r2, #0
 8004330:	4691      	mov	r9, r2
 8004332:	dc37      	bgt.n	80043a4 <_printf_float+0x374>
 8004334:	f04f 0b00 	mov.w	fp, #0
 8004338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800433c:	f104 021a 	add.w	r2, r4, #26
 8004340:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004342:	9305      	str	r3, [sp, #20]
 8004344:	eba3 0309 	sub.w	r3, r3, r9
 8004348:	455b      	cmp	r3, fp
 800434a:	dc33      	bgt.n	80043b4 <_printf_float+0x384>
 800434c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004350:	429a      	cmp	r2, r3
 8004352:	db3b      	blt.n	80043cc <_printf_float+0x39c>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	07da      	lsls	r2, r3, #31
 8004358:	d438      	bmi.n	80043cc <_printf_float+0x39c>
 800435a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800435c:	9b05      	ldr	r3, [sp, #20]
 800435e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	eba2 0901 	sub.w	r9, r2, r1
 8004366:	4599      	cmp	r9, r3
 8004368:	bfa8      	it	ge
 800436a:	4699      	movge	r9, r3
 800436c:	f1b9 0f00 	cmp.w	r9, #0
 8004370:	dc35      	bgt.n	80043de <_printf_float+0x3ae>
 8004372:	f04f 0800 	mov.w	r8, #0
 8004376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800437a:	f104 0a1a 	add.w	sl, r4, #26
 800437e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	eba3 0309 	sub.w	r3, r3, r9
 8004388:	4543      	cmp	r3, r8
 800438a:	f77f af79 	ble.w	8004280 <_printf_float+0x250>
 800438e:	2301      	movs	r3, #1
 8004390:	4652      	mov	r2, sl
 8004392:	4631      	mov	r1, r6
 8004394:	4628      	mov	r0, r5
 8004396:	47b8      	blx	r7
 8004398:	3001      	adds	r0, #1
 800439a:	f43f aeaa 	beq.w	80040f2 <_printf_float+0xc2>
 800439e:	f108 0801 	add.w	r8, r8, #1
 80043a2:	e7ec      	b.n	800437e <_printf_float+0x34e>
 80043a4:	4613      	mov	r3, r2
 80043a6:	4631      	mov	r1, r6
 80043a8:	4642      	mov	r2, r8
 80043aa:	4628      	mov	r0, r5
 80043ac:	47b8      	blx	r7
 80043ae:	3001      	adds	r0, #1
 80043b0:	d1c0      	bne.n	8004334 <_printf_float+0x304>
 80043b2:	e69e      	b.n	80040f2 <_printf_float+0xc2>
 80043b4:	2301      	movs	r3, #1
 80043b6:	4631      	mov	r1, r6
 80043b8:	4628      	mov	r0, r5
 80043ba:	9205      	str	r2, [sp, #20]
 80043bc:	47b8      	blx	r7
 80043be:	3001      	adds	r0, #1
 80043c0:	f43f ae97 	beq.w	80040f2 <_printf_float+0xc2>
 80043c4:	9a05      	ldr	r2, [sp, #20]
 80043c6:	f10b 0b01 	add.w	fp, fp, #1
 80043ca:	e7b9      	b.n	8004340 <_printf_float+0x310>
 80043cc:	ee18 3a10 	vmov	r3, s16
 80043d0:	4652      	mov	r2, sl
 80043d2:	4631      	mov	r1, r6
 80043d4:	4628      	mov	r0, r5
 80043d6:	47b8      	blx	r7
 80043d8:	3001      	adds	r0, #1
 80043da:	d1be      	bne.n	800435a <_printf_float+0x32a>
 80043dc:	e689      	b.n	80040f2 <_printf_float+0xc2>
 80043de:	9a05      	ldr	r2, [sp, #20]
 80043e0:	464b      	mov	r3, r9
 80043e2:	4442      	add	r2, r8
 80043e4:	4631      	mov	r1, r6
 80043e6:	4628      	mov	r0, r5
 80043e8:	47b8      	blx	r7
 80043ea:	3001      	adds	r0, #1
 80043ec:	d1c1      	bne.n	8004372 <_printf_float+0x342>
 80043ee:	e680      	b.n	80040f2 <_printf_float+0xc2>
 80043f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043f2:	2a01      	cmp	r2, #1
 80043f4:	dc01      	bgt.n	80043fa <_printf_float+0x3ca>
 80043f6:	07db      	lsls	r3, r3, #31
 80043f8:	d538      	bpl.n	800446c <_printf_float+0x43c>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4642      	mov	r2, r8
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	47b8      	blx	r7
 8004404:	3001      	adds	r0, #1
 8004406:	f43f ae74 	beq.w	80040f2 <_printf_float+0xc2>
 800440a:	ee18 3a10 	vmov	r3, s16
 800440e:	4652      	mov	r2, sl
 8004410:	4631      	mov	r1, r6
 8004412:	4628      	mov	r0, r5
 8004414:	47b8      	blx	r7
 8004416:	3001      	adds	r0, #1
 8004418:	f43f ae6b 	beq.w	80040f2 <_printf_float+0xc2>
 800441c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004420:	2200      	movs	r2, #0
 8004422:	2300      	movs	r3, #0
 8004424:	f7fc fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 8004428:	b9d8      	cbnz	r0, 8004462 <_printf_float+0x432>
 800442a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800442c:	f108 0201 	add.w	r2, r8, #1
 8004430:	3b01      	subs	r3, #1
 8004432:	4631      	mov	r1, r6
 8004434:	4628      	mov	r0, r5
 8004436:	47b8      	blx	r7
 8004438:	3001      	adds	r0, #1
 800443a:	d10e      	bne.n	800445a <_printf_float+0x42a>
 800443c:	e659      	b.n	80040f2 <_printf_float+0xc2>
 800443e:	2301      	movs	r3, #1
 8004440:	4652      	mov	r2, sl
 8004442:	4631      	mov	r1, r6
 8004444:	4628      	mov	r0, r5
 8004446:	47b8      	blx	r7
 8004448:	3001      	adds	r0, #1
 800444a:	f43f ae52 	beq.w	80040f2 <_printf_float+0xc2>
 800444e:	f108 0801 	add.w	r8, r8, #1
 8004452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	4543      	cmp	r3, r8
 8004458:	dcf1      	bgt.n	800443e <_printf_float+0x40e>
 800445a:	464b      	mov	r3, r9
 800445c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004460:	e6dc      	b.n	800421c <_printf_float+0x1ec>
 8004462:	f04f 0800 	mov.w	r8, #0
 8004466:	f104 0a1a 	add.w	sl, r4, #26
 800446a:	e7f2      	b.n	8004452 <_printf_float+0x422>
 800446c:	2301      	movs	r3, #1
 800446e:	4642      	mov	r2, r8
 8004470:	e7df      	b.n	8004432 <_printf_float+0x402>
 8004472:	2301      	movs	r3, #1
 8004474:	464a      	mov	r2, r9
 8004476:	4631      	mov	r1, r6
 8004478:	4628      	mov	r0, r5
 800447a:	47b8      	blx	r7
 800447c:	3001      	adds	r0, #1
 800447e:	f43f ae38 	beq.w	80040f2 <_printf_float+0xc2>
 8004482:	f108 0801 	add.w	r8, r8, #1
 8004486:	68e3      	ldr	r3, [r4, #12]
 8004488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800448a:	1a5b      	subs	r3, r3, r1
 800448c:	4543      	cmp	r3, r8
 800448e:	dcf0      	bgt.n	8004472 <_printf_float+0x442>
 8004490:	e6fa      	b.n	8004288 <_printf_float+0x258>
 8004492:	f04f 0800 	mov.w	r8, #0
 8004496:	f104 0919 	add.w	r9, r4, #25
 800449a:	e7f4      	b.n	8004486 <_printf_float+0x456>

0800449c <_printf_common>:
 800449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	4616      	mov	r6, r2
 80044a2:	4699      	mov	r9, r3
 80044a4:	688a      	ldr	r2, [r1, #8]
 80044a6:	690b      	ldr	r3, [r1, #16]
 80044a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044ac:	4293      	cmp	r3, r2
 80044ae:	bfb8      	it	lt
 80044b0:	4613      	movlt	r3, r2
 80044b2:	6033      	str	r3, [r6, #0]
 80044b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044b8:	4607      	mov	r7, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	b10a      	cbz	r2, 80044c2 <_printf_common+0x26>
 80044be:	3301      	adds	r3, #1
 80044c0:	6033      	str	r3, [r6, #0]
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	0699      	lsls	r1, r3, #26
 80044c6:	bf42      	ittt	mi
 80044c8:	6833      	ldrmi	r3, [r6, #0]
 80044ca:	3302      	addmi	r3, #2
 80044cc:	6033      	strmi	r3, [r6, #0]
 80044ce:	6825      	ldr	r5, [r4, #0]
 80044d0:	f015 0506 	ands.w	r5, r5, #6
 80044d4:	d106      	bne.n	80044e4 <_printf_common+0x48>
 80044d6:	f104 0a19 	add.w	sl, r4, #25
 80044da:	68e3      	ldr	r3, [r4, #12]
 80044dc:	6832      	ldr	r2, [r6, #0]
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	42ab      	cmp	r3, r5
 80044e2:	dc26      	bgt.n	8004532 <_printf_common+0x96>
 80044e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044e8:	1e13      	subs	r3, r2, #0
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	bf18      	it	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	0692      	lsls	r2, r2, #26
 80044f2:	d42b      	bmi.n	800454c <_printf_common+0xb0>
 80044f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044f8:	4649      	mov	r1, r9
 80044fa:	4638      	mov	r0, r7
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d01e      	beq.n	8004540 <_printf_common+0xa4>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	68e5      	ldr	r5, [r4, #12]
 8004506:	6832      	ldr	r2, [r6, #0]
 8004508:	f003 0306 	and.w	r3, r3, #6
 800450c:	2b04      	cmp	r3, #4
 800450e:	bf08      	it	eq
 8004510:	1aad      	subeq	r5, r5, r2
 8004512:	68a3      	ldr	r3, [r4, #8]
 8004514:	6922      	ldr	r2, [r4, #16]
 8004516:	bf0c      	ite	eq
 8004518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800451c:	2500      	movne	r5, #0
 800451e:	4293      	cmp	r3, r2
 8004520:	bfc4      	itt	gt
 8004522:	1a9b      	subgt	r3, r3, r2
 8004524:	18ed      	addgt	r5, r5, r3
 8004526:	2600      	movs	r6, #0
 8004528:	341a      	adds	r4, #26
 800452a:	42b5      	cmp	r5, r6
 800452c:	d11a      	bne.n	8004564 <_printf_common+0xc8>
 800452e:	2000      	movs	r0, #0
 8004530:	e008      	b.n	8004544 <_printf_common+0xa8>
 8004532:	2301      	movs	r3, #1
 8004534:	4652      	mov	r2, sl
 8004536:	4649      	mov	r1, r9
 8004538:	4638      	mov	r0, r7
 800453a:	47c0      	blx	r8
 800453c:	3001      	adds	r0, #1
 800453e:	d103      	bne.n	8004548 <_printf_common+0xac>
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004548:	3501      	adds	r5, #1
 800454a:	e7c6      	b.n	80044da <_printf_common+0x3e>
 800454c:	18e1      	adds	r1, r4, r3
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	2030      	movs	r0, #48	; 0x30
 8004552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004556:	4422      	add	r2, r4
 8004558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800455c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004560:	3302      	adds	r3, #2
 8004562:	e7c7      	b.n	80044f4 <_printf_common+0x58>
 8004564:	2301      	movs	r3, #1
 8004566:	4622      	mov	r2, r4
 8004568:	4649      	mov	r1, r9
 800456a:	4638      	mov	r0, r7
 800456c:	47c0      	blx	r8
 800456e:	3001      	adds	r0, #1
 8004570:	d0e6      	beq.n	8004540 <_printf_common+0xa4>
 8004572:	3601      	adds	r6, #1
 8004574:	e7d9      	b.n	800452a <_printf_common+0x8e>
	...

08004578 <_printf_i>:
 8004578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	460c      	mov	r4, r1
 800457e:	4691      	mov	r9, r2
 8004580:	7e27      	ldrb	r7, [r4, #24]
 8004582:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004584:	2f78      	cmp	r7, #120	; 0x78
 8004586:	4680      	mov	r8, r0
 8004588:	469a      	mov	sl, r3
 800458a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800458e:	d807      	bhi.n	80045a0 <_printf_i+0x28>
 8004590:	2f62      	cmp	r7, #98	; 0x62
 8004592:	d80a      	bhi.n	80045aa <_printf_i+0x32>
 8004594:	2f00      	cmp	r7, #0
 8004596:	f000 80d8 	beq.w	800474a <_printf_i+0x1d2>
 800459a:	2f58      	cmp	r7, #88	; 0x58
 800459c:	f000 80a3 	beq.w	80046e6 <_printf_i+0x16e>
 80045a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045a8:	e03a      	b.n	8004620 <_printf_i+0xa8>
 80045aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ae:	2b15      	cmp	r3, #21
 80045b0:	d8f6      	bhi.n	80045a0 <_printf_i+0x28>
 80045b2:	a001      	add	r0, pc, #4	; (adr r0, 80045b8 <_printf_i+0x40>)
 80045b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045b8:	08004611 	.word	0x08004611
 80045bc:	08004625 	.word	0x08004625
 80045c0:	080045a1 	.word	0x080045a1
 80045c4:	080045a1 	.word	0x080045a1
 80045c8:	080045a1 	.word	0x080045a1
 80045cc:	080045a1 	.word	0x080045a1
 80045d0:	08004625 	.word	0x08004625
 80045d4:	080045a1 	.word	0x080045a1
 80045d8:	080045a1 	.word	0x080045a1
 80045dc:	080045a1 	.word	0x080045a1
 80045e0:	080045a1 	.word	0x080045a1
 80045e4:	08004731 	.word	0x08004731
 80045e8:	08004655 	.word	0x08004655
 80045ec:	08004713 	.word	0x08004713
 80045f0:	080045a1 	.word	0x080045a1
 80045f4:	080045a1 	.word	0x080045a1
 80045f8:	08004753 	.word	0x08004753
 80045fc:	080045a1 	.word	0x080045a1
 8004600:	08004655 	.word	0x08004655
 8004604:	080045a1 	.word	0x080045a1
 8004608:	080045a1 	.word	0x080045a1
 800460c:	0800471b 	.word	0x0800471b
 8004610:	680b      	ldr	r3, [r1, #0]
 8004612:	1d1a      	adds	r2, r3, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	600a      	str	r2, [r1, #0]
 8004618:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800461c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004620:	2301      	movs	r3, #1
 8004622:	e0a3      	b.n	800476c <_printf_i+0x1f4>
 8004624:	6825      	ldr	r5, [r4, #0]
 8004626:	6808      	ldr	r0, [r1, #0]
 8004628:	062e      	lsls	r6, r5, #24
 800462a:	f100 0304 	add.w	r3, r0, #4
 800462e:	d50a      	bpl.n	8004646 <_printf_i+0xce>
 8004630:	6805      	ldr	r5, [r0, #0]
 8004632:	600b      	str	r3, [r1, #0]
 8004634:	2d00      	cmp	r5, #0
 8004636:	da03      	bge.n	8004640 <_printf_i+0xc8>
 8004638:	232d      	movs	r3, #45	; 0x2d
 800463a:	426d      	negs	r5, r5
 800463c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004640:	485e      	ldr	r0, [pc, #376]	; (80047bc <_printf_i+0x244>)
 8004642:	230a      	movs	r3, #10
 8004644:	e019      	b.n	800467a <_printf_i+0x102>
 8004646:	f015 0f40 	tst.w	r5, #64	; 0x40
 800464a:	6805      	ldr	r5, [r0, #0]
 800464c:	600b      	str	r3, [r1, #0]
 800464e:	bf18      	it	ne
 8004650:	b22d      	sxthne	r5, r5
 8004652:	e7ef      	b.n	8004634 <_printf_i+0xbc>
 8004654:	680b      	ldr	r3, [r1, #0]
 8004656:	6825      	ldr	r5, [r4, #0]
 8004658:	1d18      	adds	r0, r3, #4
 800465a:	6008      	str	r0, [r1, #0]
 800465c:	0628      	lsls	r0, r5, #24
 800465e:	d501      	bpl.n	8004664 <_printf_i+0xec>
 8004660:	681d      	ldr	r5, [r3, #0]
 8004662:	e002      	b.n	800466a <_printf_i+0xf2>
 8004664:	0669      	lsls	r1, r5, #25
 8004666:	d5fb      	bpl.n	8004660 <_printf_i+0xe8>
 8004668:	881d      	ldrh	r5, [r3, #0]
 800466a:	4854      	ldr	r0, [pc, #336]	; (80047bc <_printf_i+0x244>)
 800466c:	2f6f      	cmp	r7, #111	; 0x6f
 800466e:	bf0c      	ite	eq
 8004670:	2308      	moveq	r3, #8
 8004672:	230a      	movne	r3, #10
 8004674:	2100      	movs	r1, #0
 8004676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800467a:	6866      	ldr	r6, [r4, #4]
 800467c:	60a6      	str	r6, [r4, #8]
 800467e:	2e00      	cmp	r6, #0
 8004680:	bfa2      	ittt	ge
 8004682:	6821      	ldrge	r1, [r4, #0]
 8004684:	f021 0104 	bicge.w	r1, r1, #4
 8004688:	6021      	strge	r1, [r4, #0]
 800468a:	b90d      	cbnz	r5, 8004690 <_printf_i+0x118>
 800468c:	2e00      	cmp	r6, #0
 800468e:	d04d      	beq.n	800472c <_printf_i+0x1b4>
 8004690:	4616      	mov	r6, r2
 8004692:	fbb5 f1f3 	udiv	r1, r5, r3
 8004696:	fb03 5711 	mls	r7, r3, r1, r5
 800469a:	5dc7      	ldrb	r7, [r0, r7]
 800469c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046a0:	462f      	mov	r7, r5
 80046a2:	42bb      	cmp	r3, r7
 80046a4:	460d      	mov	r5, r1
 80046a6:	d9f4      	bls.n	8004692 <_printf_i+0x11a>
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d10b      	bne.n	80046c4 <_printf_i+0x14c>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	07df      	lsls	r7, r3, #31
 80046b0:	d508      	bpl.n	80046c4 <_printf_i+0x14c>
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	6861      	ldr	r1, [r4, #4]
 80046b6:	4299      	cmp	r1, r3
 80046b8:	bfde      	ittt	le
 80046ba:	2330      	movle	r3, #48	; 0x30
 80046bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046c4:	1b92      	subs	r2, r2, r6
 80046c6:	6122      	str	r2, [r4, #16]
 80046c8:	f8cd a000 	str.w	sl, [sp]
 80046cc:	464b      	mov	r3, r9
 80046ce:	aa03      	add	r2, sp, #12
 80046d0:	4621      	mov	r1, r4
 80046d2:	4640      	mov	r0, r8
 80046d4:	f7ff fee2 	bl	800449c <_printf_common>
 80046d8:	3001      	adds	r0, #1
 80046da:	d14c      	bne.n	8004776 <_printf_i+0x1fe>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	b004      	add	sp, #16
 80046e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e6:	4835      	ldr	r0, [pc, #212]	; (80047bc <_printf_i+0x244>)
 80046e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	680e      	ldr	r6, [r1, #0]
 80046f0:	061f      	lsls	r7, r3, #24
 80046f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80046f6:	600e      	str	r6, [r1, #0]
 80046f8:	d514      	bpl.n	8004724 <_printf_i+0x1ac>
 80046fa:	07d9      	lsls	r1, r3, #31
 80046fc:	bf44      	itt	mi
 80046fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004702:	6023      	strmi	r3, [r4, #0]
 8004704:	b91d      	cbnz	r5, 800470e <_printf_i+0x196>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	f023 0320 	bic.w	r3, r3, #32
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	2310      	movs	r3, #16
 8004710:	e7b0      	b.n	8004674 <_printf_i+0xfc>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	f043 0320 	orr.w	r3, r3, #32
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	2378      	movs	r3, #120	; 0x78
 800471c:	4828      	ldr	r0, [pc, #160]	; (80047c0 <_printf_i+0x248>)
 800471e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004722:	e7e3      	b.n	80046ec <_printf_i+0x174>
 8004724:	065e      	lsls	r6, r3, #25
 8004726:	bf48      	it	mi
 8004728:	b2ad      	uxthmi	r5, r5
 800472a:	e7e6      	b.n	80046fa <_printf_i+0x182>
 800472c:	4616      	mov	r6, r2
 800472e:	e7bb      	b.n	80046a8 <_printf_i+0x130>
 8004730:	680b      	ldr	r3, [r1, #0]
 8004732:	6826      	ldr	r6, [r4, #0]
 8004734:	6960      	ldr	r0, [r4, #20]
 8004736:	1d1d      	adds	r5, r3, #4
 8004738:	600d      	str	r5, [r1, #0]
 800473a:	0635      	lsls	r5, r6, #24
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	d501      	bpl.n	8004744 <_printf_i+0x1cc>
 8004740:	6018      	str	r0, [r3, #0]
 8004742:	e002      	b.n	800474a <_printf_i+0x1d2>
 8004744:	0671      	lsls	r1, r6, #25
 8004746:	d5fb      	bpl.n	8004740 <_printf_i+0x1c8>
 8004748:	8018      	strh	r0, [r3, #0]
 800474a:	2300      	movs	r3, #0
 800474c:	6123      	str	r3, [r4, #16]
 800474e:	4616      	mov	r6, r2
 8004750:	e7ba      	b.n	80046c8 <_printf_i+0x150>
 8004752:	680b      	ldr	r3, [r1, #0]
 8004754:	1d1a      	adds	r2, r3, #4
 8004756:	600a      	str	r2, [r1, #0]
 8004758:	681e      	ldr	r6, [r3, #0]
 800475a:	6862      	ldr	r2, [r4, #4]
 800475c:	2100      	movs	r1, #0
 800475e:	4630      	mov	r0, r6
 8004760:	f7fb fd3e 	bl	80001e0 <memchr>
 8004764:	b108      	cbz	r0, 800476a <_printf_i+0x1f2>
 8004766:	1b80      	subs	r0, r0, r6
 8004768:	6060      	str	r0, [r4, #4]
 800476a:	6863      	ldr	r3, [r4, #4]
 800476c:	6123      	str	r3, [r4, #16]
 800476e:	2300      	movs	r3, #0
 8004770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004774:	e7a8      	b.n	80046c8 <_printf_i+0x150>
 8004776:	6923      	ldr	r3, [r4, #16]
 8004778:	4632      	mov	r2, r6
 800477a:	4649      	mov	r1, r9
 800477c:	4640      	mov	r0, r8
 800477e:	47d0      	blx	sl
 8004780:	3001      	adds	r0, #1
 8004782:	d0ab      	beq.n	80046dc <_printf_i+0x164>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	079b      	lsls	r3, r3, #30
 8004788:	d413      	bmi.n	80047b2 <_printf_i+0x23a>
 800478a:	68e0      	ldr	r0, [r4, #12]
 800478c:	9b03      	ldr	r3, [sp, #12]
 800478e:	4298      	cmp	r0, r3
 8004790:	bfb8      	it	lt
 8004792:	4618      	movlt	r0, r3
 8004794:	e7a4      	b.n	80046e0 <_printf_i+0x168>
 8004796:	2301      	movs	r3, #1
 8004798:	4632      	mov	r2, r6
 800479a:	4649      	mov	r1, r9
 800479c:	4640      	mov	r0, r8
 800479e:	47d0      	blx	sl
 80047a0:	3001      	adds	r0, #1
 80047a2:	d09b      	beq.n	80046dc <_printf_i+0x164>
 80047a4:	3501      	adds	r5, #1
 80047a6:	68e3      	ldr	r3, [r4, #12]
 80047a8:	9903      	ldr	r1, [sp, #12]
 80047aa:	1a5b      	subs	r3, r3, r1
 80047ac:	42ab      	cmp	r3, r5
 80047ae:	dcf2      	bgt.n	8004796 <_printf_i+0x21e>
 80047b0:	e7eb      	b.n	800478a <_printf_i+0x212>
 80047b2:	2500      	movs	r5, #0
 80047b4:	f104 0619 	add.w	r6, r4, #25
 80047b8:	e7f5      	b.n	80047a6 <_printf_i+0x22e>
 80047ba:	bf00      	nop
 80047bc:	08009766 	.word	0x08009766
 80047c0:	08009777 	.word	0x08009777

080047c4 <_scanf_float>:
 80047c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c8:	b087      	sub	sp, #28
 80047ca:	4617      	mov	r7, r2
 80047cc:	9303      	str	r3, [sp, #12]
 80047ce:	688b      	ldr	r3, [r1, #8]
 80047d0:	1e5a      	subs	r2, r3, #1
 80047d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80047d6:	bf83      	ittte	hi
 80047d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80047dc:	195b      	addhi	r3, r3, r5
 80047de:	9302      	strhi	r3, [sp, #8]
 80047e0:	2300      	movls	r3, #0
 80047e2:	bf86      	itte	hi
 80047e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80047e8:	608b      	strhi	r3, [r1, #8]
 80047ea:	9302      	strls	r3, [sp, #8]
 80047ec:	680b      	ldr	r3, [r1, #0]
 80047ee:	468b      	mov	fp, r1
 80047f0:	2500      	movs	r5, #0
 80047f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80047f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80047fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80047fe:	4680      	mov	r8, r0
 8004800:	460c      	mov	r4, r1
 8004802:	465e      	mov	r6, fp
 8004804:	46aa      	mov	sl, r5
 8004806:	46a9      	mov	r9, r5
 8004808:	9501      	str	r5, [sp, #4]
 800480a:	68a2      	ldr	r2, [r4, #8]
 800480c:	b152      	cbz	r2, 8004824 <_scanf_float+0x60>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b4e      	cmp	r3, #78	; 0x4e
 8004814:	d864      	bhi.n	80048e0 <_scanf_float+0x11c>
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d83c      	bhi.n	8004894 <_scanf_float+0xd0>
 800481a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800481e:	b2c8      	uxtb	r0, r1
 8004820:	280e      	cmp	r0, #14
 8004822:	d93a      	bls.n	800489a <_scanf_float+0xd6>
 8004824:	f1b9 0f00 	cmp.w	r9, #0
 8004828:	d003      	beq.n	8004832 <_scanf_float+0x6e>
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004836:	f1ba 0f01 	cmp.w	sl, #1
 800483a:	f200 8113 	bhi.w	8004a64 <_scanf_float+0x2a0>
 800483e:	455e      	cmp	r6, fp
 8004840:	f200 8105 	bhi.w	8004a4e <_scanf_float+0x28a>
 8004844:	2501      	movs	r5, #1
 8004846:	4628      	mov	r0, r5
 8004848:	b007      	add	sp, #28
 800484a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004852:	2a0d      	cmp	r2, #13
 8004854:	d8e6      	bhi.n	8004824 <_scanf_float+0x60>
 8004856:	a101      	add	r1, pc, #4	; (adr r1, 800485c <_scanf_float+0x98>)
 8004858:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800485c:	0800499b 	.word	0x0800499b
 8004860:	08004825 	.word	0x08004825
 8004864:	08004825 	.word	0x08004825
 8004868:	08004825 	.word	0x08004825
 800486c:	080049fb 	.word	0x080049fb
 8004870:	080049d3 	.word	0x080049d3
 8004874:	08004825 	.word	0x08004825
 8004878:	08004825 	.word	0x08004825
 800487c:	080049a9 	.word	0x080049a9
 8004880:	08004825 	.word	0x08004825
 8004884:	08004825 	.word	0x08004825
 8004888:	08004825 	.word	0x08004825
 800488c:	08004825 	.word	0x08004825
 8004890:	08004961 	.word	0x08004961
 8004894:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004898:	e7db      	b.n	8004852 <_scanf_float+0x8e>
 800489a:	290e      	cmp	r1, #14
 800489c:	d8c2      	bhi.n	8004824 <_scanf_float+0x60>
 800489e:	a001      	add	r0, pc, #4	; (adr r0, 80048a4 <_scanf_float+0xe0>)
 80048a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80048a4:	08004953 	.word	0x08004953
 80048a8:	08004825 	.word	0x08004825
 80048ac:	08004953 	.word	0x08004953
 80048b0:	080049e7 	.word	0x080049e7
 80048b4:	08004825 	.word	0x08004825
 80048b8:	08004901 	.word	0x08004901
 80048bc:	0800493d 	.word	0x0800493d
 80048c0:	0800493d 	.word	0x0800493d
 80048c4:	0800493d 	.word	0x0800493d
 80048c8:	0800493d 	.word	0x0800493d
 80048cc:	0800493d 	.word	0x0800493d
 80048d0:	0800493d 	.word	0x0800493d
 80048d4:	0800493d 	.word	0x0800493d
 80048d8:	0800493d 	.word	0x0800493d
 80048dc:	0800493d 	.word	0x0800493d
 80048e0:	2b6e      	cmp	r3, #110	; 0x6e
 80048e2:	d809      	bhi.n	80048f8 <_scanf_float+0x134>
 80048e4:	2b60      	cmp	r3, #96	; 0x60
 80048e6:	d8b2      	bhi.n	800484e <_scanf_float+0x8a>
 80048e8:	2b54      	cmp	r3, #84	; 0x54
 80048ea:	d077      	beq.n	80049dc <_scanf_float+0x218>
 80048ec:	2b59      	cmp	r3, #89	; 0x59
 80048ee:	d199      	bne.n	8004824 <_scanf_float+0x60>
 80048f0:	2d07      	cmp	r5, #7
 80048f2:	d197      	bne.n	8004824 <_scanf_float+0x60>
 80048f4:	2508      	movs	r5, #8
 80048f6:	e029      	b.n	800494c <_scanf_float+0x188>
 80048f8:	2b74      	cmp	r3, #116	; 0x74
 80048fa:	d06f      	beq.n	80049dc <_scanf_float+0x218>
 80048fc:	2b79      	cmp	r3, #121	; 0x79
 80048fe:	e7f6      	b.n	80048ee <_scanf_float+0x12a>
 8004900:	6821      	ldr	r1, [r4, #0]
 8004902:	05c8      	lsls	r0, r1, #23
 8004904:	d51a      	bpl.n	800493c <_scanf_float+0x178>
 8004906:	9b02      	ldr	r3, [sp, #8]
 8004908:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800490c:	6021      	str	r1, [r4, #0]
 800490e:	f109 0901 	add.w	r9, r9, #1
 8004912:	b11b      	cbz	r3, 800491c <_scanf_float+0x158>
 8004914:	3b01      	subs	r3, #1
 8004916:	3201      	adds	r2, #1
 8004918:	9302      	str	r3, [sp, #8]
 800491a:	60a2      	str	r2, [r4, #8]
 800491c:	68a3      	ldr	r3, [r4, #8]
 800491e:	3b01      	subs	r3, #1
 8004920:	60a3      	str	r3, [r4, #8]
 8004922:	6923      	ldr	r3, [r4, #16]
 8004924:	3301      	adds	r3, #1
 8004926:	6123      	str	r3, [r4, #16]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3b01      	subs	r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	607b      	str	r3, [r7, #4]
 8004930:	f340 8084 	ble.w	8004a3c <_scanf_float+0x278>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	3301      	adds	r3, #1
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	e766      	b.n	800480a <_scanf_float+0x46>
 800493c:	eb1a 0f05 	cmn.w	sl, r5
 8004940:	f47f af70 	bne.w	8004824 <_scanf_float+0x60>
 8004944:	6822      	ldr	r2, [r4, #0]
 8004946:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800494a:	6022      	str	r2, [r4, #0]
 800494c:	f806 3b01 	strb.w	r3, [r6], #1
 8004950:	e7e4      	b.n	800491c <_scanf_float+0x158>
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	0610      	lsls	r0, r2, #24
 8004956:	f57f af65 	bpl.w	8004824 <_scanf_float+0x60>
 800495a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800495e:	e7f4      	b.n	800494a <_scanf_float+0x186>
 8004960:	f1ba 0f00 	cmp.w	sl, #0
 8004964:	d10e      	bne.n	8004984 <_scanf_float+0x1c0>
 8004966:	f1b9 0f00 	cmp.w	r9, #0
 800496a:	d10e      	bne.n	800498a <_scanf_float+0x1c6>
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004972:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004976:	d108      	bne.n	800498a <_scanf_float+0x1c6>
 8004978:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800497c:	6022      	str	r2, [r4, #0]
 800497e:	f04f 0a01 	mov.w	sl, #1
 8004982:	e7e3      	b.n	800494c <_scanf_float+0x188>
 8004984:	f1ba 0f02 	cmp.w	sl, #2
 8004988:	d055      	beq.n	8004a36 <_scanf_float+0x272>
 800498a:	2d01      	cmp	r5, #1
 800498c:	d002      	beq.n	8004994 <_scanf_float+0x1d0>
 800498e:	2d04      	cmp	r5, #4
 8004990:	f47f af48 	bne.w	8004824 <_scanf_float+0x60>
 8004994:	3501      	adds	r5, #1
 8004996:	b2ed      	uxtb	r5, r5
 8004998:	e7d8      	b.n	800494c <_scanf_float+0x188>
 800499a:	f1ba 0f01 	cmp.w	sl, #1
 800499e:	f47f af41 	bne.w	8004824 <_scanf_float+0x60>
 80049a2:	f04f 0a02 	mov.w	sl, #2
 80049a6:	e7d1      	b.n	800494c <_scanf_float+0x188>
 80049a8:	b97d      	cbnz	r5, 80049ca <_scanf_float+0x206>
 80049aa:	f1b9 0f00 	cmp.w	r9, #0
 80049ae:	f47f af3c 	bne.w	800482a <_scanf_float+0x66>
 80049b2:	6822      	ldr	r2, [r4, #0]
 80049b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80049b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80049bc:	f47f af39 	bne.w	8004832 <_scanf_float+0x6e>
 80049c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	2501      	movs	r5, #1
 80049c8:	e7c0      	b.n	800494c <_scanf_float+0x188>
 80049ca:	2d03      	cmp	r5, #3
 80049cc:	d0e2      	beq.n	8004994 <_scanf_float+0x1d0>
 80049ce:	2d05      	cmp	r5, #5
 80049d0:	e7de      	b.n	8004990 <_scanf_float+0x1cc>
 80049d2:	2d02      	cmp	r5, #2
 80049d4:	f47f af26 	bne.w	8004824 <_scanf_float+0x60>
 80049d8:	2503      	movs	r5, #3
 80049da:	e7b7      	b.n	800494c <_scanf_float+0x188>
 80049dc:	2d06      	cmp	r5, #6
 80049de:	f47f af21 	bne.w	8004824 <_scanf_float+0x60>
 80049e2:	2507      	movs	r5, #7
 80049e4:	e7b2      	b.n	800494c <_scanf_float+0x188>
 80049e6:	6822      	ldr	r2, [r4, #0]
 80049e8:	0591      	lsls	r1, r2, #22
 80049ea:	f57f af1b 	bpl.w	8004824 <_scanf_float+0x60>
 80049ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80049f2:	6022      	str	r2, [r4, #0]
 80049f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80049f8:	e7a8      	b.n	800494c <_scanf_float+0x188>
 80049fa:	6822      	ldr	r2, [r4, #0]
 80049fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004a00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004a04:	d006      	beq.n	8004a14 <_scanf_float+0x250>
 8004a06:	0550      	lsls	r0, r2, #21
 8004a08:	f57f af0c 	bpl.w	8004824 <_scanf_float+0x60>
 8004a0c:	f1b9 0f00 	cmp.w	r9, #0
 8004a10:	f43f af0f 	beq.w	8004832 <_scanf_float+0x6e>
 8004a14:	0591      	lsls	r1, r2, #22
 8004a16:	bf58      	it	pl
 8004a18:	9901      	ldrpl	r1, [sp, #4]
 8004a1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a1e:	bf58      	it	pl
 8004a20:	eba9 0101 	subpl.w	r1, r9, r1
 8004a24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004a28:	bf58      	it	pl
 8004a2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004a2e:	6022      	str	r2, [r4, #0]
 8004a30:	f04f 0900 	mov.w	r9, #0
 8004a34:	e78a      	b.n	800494c <_scanf_float+0x188>
 8004a36:	f04f 0a03 	mov.w	sl, #3
 8004a3a:	e787      	b.n	800494c <_scanf_float+0x188>
 8004a3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a40:	4639      	mov	r1, r7
 8004a42:	4640      	mov	r0, r8
 8004a44:	4798      	blx	r3
 8004a46:	2800      	cmp	r0, #0
 8004a48:	f43f aedf 	beq.w	800480a <_scanf_float+0x46>
 8004a4c:	e6ea      	b.n	8004824 <_scanf_float+0x60>
 8004a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a56:	463a      	mov	r2, r7
 8004a58:	4640      	mov	r0, r8
 8004a5a:	4798      	blx	r3
 8004a5c:	6923      	ldr	r3, [r4, #16]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	6123      	str	r3, [r4, #16]
 8004a62:	e6ec      	b.n	800483e <_scanf_float+0x7a>
 8004a64:	1e6b      	subs	r3, r5, #1
 8004a66:	2b06      	cmp	r3, #6
 8004a68:	d825      	bhi.n	8004ab6 <_scanf_float+0x2f2>
 8004a6a:	2d02      	cmp	r5, #2
 8004a6c:	d836      	bhi.n	8004adc <_scanf_float+0x318>
 8004a6e:	455e      	cmp	r6, fp
 8004a70:	f67f aee8 	bls.w	8004844 <_scanf_float+0x80>
 8004a74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a7c:	463a      	mov	r2, r7
 8004a7e:	4640      	mov	r0, r8
 8004a80:	4798      	blx	r3
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	6123      	str	r3, [r4, #16]
 8004a88:	e7f1      	b.n	8004a6e <_scanf_float+0x2aa>
 8004a8a:	9802      	ldr	r0, [sp, #8]
 8004a8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004a94:	9002      	str	r0, [sp, #8]
 8004a96:	463a      	mov	r2, r7
 8004a98:	4640      	mov	r0, r8
 8004a9a:	4798      	blx	r3
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aa6:	fa5f fa8a 	uxtb.w	sl, sl
 8004aaa:	f1ba 0f02 	cmp.w	sl, #2
 8004aae:	d1ec      	bne.n	8004a8a <_scanf_float+0x2c6>
 8004ab0:	3d03      	subs	r5, #3
 8004ab2:	b2ed      	uxtb	r5, r5
 8004ab4:	1b76      	subs	r6, r6, r5
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	05da      	lsls	r2, r3, #23
 8004aba:	d52f      	bpl.n	8004b1c <_scanf_float+0x358>
 8004abc:	055b      	lsls	r3, r3, #21
 8004abe:	d510      	bpl.n	8004ae2 <_scanf_float+0x31e>
 8004ac0:	455e      	cmp	r6, fp
 8004ac2:	f67f aebf 	bls.w	8004844 <_scanf_float+0x80>
 8004ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004aca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ace:	463a      	mov	r2, r7
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	4798      	blx	r3
 8004ad4:	6923      	ldr	r3, [r4, #16]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	6123      	str	r3, [r4, #16]
 8004ada:	e7f1      	b.n	8004ac0 <_scanf_float+0x2fc>
 8004adc:	46aa      	mov	sl, r5
 8004ade:	9602      	str	r6, [sp, #8]
 8004ae0:	e7df      	b.n	8004aa2 <_scanf_float+0x2de>
 8004ae2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004ae6:	6923      	ldr	r3, [r4, #16]
 8004ae8:	2965      	cmp	r1, #101	; 0x65
 8004aea:	f103 33ff 	add.w	r3, r3, #4294967295
 8004aee:	f106 35ff 	add.w	r5, r6, #4294967295
 8004af2:	6123      	str	r3, [r4, #16]
 8004af4:	d00c      	beq.n	8004b10 <_scanf_float+0x34c>
 8004af6:	2945      	cmp	r1, #69	; 0x45
 8004af8:	d00a      	beq.n	8004b10 <_scanf_float+0x34c>
 8004afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004afe:	463a      	mov	r2, r7
 8004b00:	4640      	mov	r0, r8
 8004b02:	4798      	blx	r3
 8004b04:	6923      	ldr	r3, [r4, #16]
 8004b06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	1eb5      	subs	r5, r6, #2
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b14:	463a      	mov	r2, r7
 8004b16:	4640      	mov	r0, r8
 8004b18:	4798      	blx	r3
 8004b1a:	462e      	mov	r6, r5
 8004b1c:	6825      	ldr	r5, [r4, #0]
 8004b1e:	f015 0510 	ands.w	r5, r5, #16
 8004b22:	d158      	bne.n	8004bd6 <_scanf_float+0x412>
 8004b24:	7035      	strb	r5, [r6, #0]
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b30:	d11c      	bne.n	8004b6c <_scanf_float+0x3a8>
 8004b32:	9b01      	ldr	r3, [sp, #4]
 8004b34:	454b      	cmp	r3, r9
 8004b36:	eba3 0209 	sub.w	r2, r3, r9
 8004b3a:	d124      	bne.n	8004b86 <_scanf_float+0x3c2>
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4659      	mov	r1, fp
 8004b40:	4640      	mov	r0, r8
 8004b42:	f000 fe9b 	bl	800587c <_strtod_r>
 8004b46:	9b03      	ldr	r3, [sp, #12]
 8004b48:	6821      	ldr	r1, [r4, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f011 0f02 	tst.w	r1, #2
 8004b50:	ec57 6b10 	vmov	r6, r7, d0
 8004b54:	f103 0204 	add.w	r2, r3, #4
 8004b58:	d020      	beq.n	8004b9c <_scanf_float+0x3d8>
 8004b5a:	9903      	ldr	r1, [sp, #12]
 8004b5c:	600a      	str	r2, [r1, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	e9c3 6700 	strd	r6, r7, [r3]
 8004b64:	68e3      	ldr	r3, [r4, #12]
 8004b66:	3301      	adds	r3, #1
 8004b68:	60e3      	str	r3, [r4, #12]
 8004b6a:	e66c      	b.n	8004846 <_scanf_float+0x82>
 8004b6c:	9b04      	ldr	r3, [sp, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0e4      	beq.n	8004b3c <_scanf_float+0x378>
 8004b72:	9905      	ldr	r1, [sp, #20]
 8004b74:	230a      	movs	r3, #10
 8004b76:	462a      	mov	r2, r5
 8004b78:	3101      	adds	r1, #1
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	f000 ff08 	bl	8005990 <_strtol_r>
 8004b80:	9b04      	ldr	r3, [sp, #16]
 8004b82:	9e05      	ldr	r6, [sp, #20]
 8004b84:	1ac2      	subs	r2, r0, r3
 8004b86:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004b8a:	429e      	cmp	r6, r3
 8004b8c:	bf28      	it	cs
 8004b8e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004b92:	4912      	ldr	r1, [pc, #72]	; (8004bdc <_scanf_float+0x418>)
 8004b94:	4630      	mov	r0, r6
 8004b96:	f000 f82b 	bl	8004bf0 <siprintf>
 8004b9a:	e7cf      	b.n	8004b3c <_scanf_float+0x378>
 8004b9c:	f011 0f04 	tst.w	r1, #4
 8004ba0:	9903      	ldr	r1, [sp, #12]
 8004ba2:	600a      	str	r2, [r1, #0]
 8004ba4:	d1db      	bne.n	8004b5e <_scanf_float+0x39a>
 8004ba6:	f8d3 8000 	ldr.w	r8, [r3]
 8004baa:	ee10 2a10 	vmov	r2, s0
 8004bae:	ee10 0a10 	vmov	r0, s0
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	4639      	mov	r1, r7
 8004bb6:	f7fb ffb9 	bl	8000b2c <__aeabi_dcmpun>
 8004bba:	b128      	cbz	r0, 8004bc8 <_scanf_float+0x404>
 8004bbc:	4808      	ldr	r0, [pc, #32]	; (8004be0 <_scanf_float+0x41c>)
 8004bbe:	f000 f811 	bl	8004be4 <nanf>
 8004bc2:	ed88 0a00 	vstr	s0, [r8]
 8004bc6:	e7cd      	b.n	8004b64 <_scanf_float+0x3a0>
 8004bc8:	4630      	mov	r0, r6
 8004bca:	4639      	mov	r1, r7
 8004bcc:	f7fc f80c 	bl	8000be8 <__aeabi_d2f>
 8004bd0:	f8c8 0000 	str.w	r0, [r8]
 8004bd4:	e7c6      	b.n	8004b64 <_scanf_float+0x3a0>
 8004bd6:	2500      	movs	r5, #0
 8004bd8:	e635      	b.n	8004846 <_scanf_float+0x82>
 8004bda:	bf00      	nop
 8004bdc:	08009788 	.word	0x08009788
 8004be0:	08009ba0 	.word	0x08009ba0

08004be4 <nanf>:
 8004be4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004bec <nanf+0x8>
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	7fc00000 	.word	0x7fc00000

08004bf0 <siprintf>:
 8004bf0:	b40e      	push	{r1, r2, r3}
 8004bf2:	b500      	push	{lr}
 8004bf4:	b09c      	sub	sp, #112	; 0x70
 8004bf6:	ab1d      	add	r3, sp, #116	; 0x74
 8004bf8:	9002      	str	r0, [sp, #8]
 8004bfa:	9006      	str	r0, [sp, #24]
 8004bfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c00:	4809      	ldr	r0, [pc, #36]	; (8004c28 <siprintf+0x38>)
 8004c02:	9107      	str	r1, [sp, #28]
 8004c04:	9104      	str	r1, [sp, #16]
 8004c06:	4909      	ldr	r1, [pc, #36]	; (8004c2c <siprintf+0x3c>)
 8004c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	6800      	ldr	r0, [r0, #0]
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	a902      	add	r1, sp, #8
 8004c14:	f002 fea4 	bl	8007960 <_svfiprintf_r>
 8004c18:	9b02      	ldr	r3, [sp, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	b01c      	add	sp, #112	; 0x70
 8004c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c24:	b003      	add	sp, #12
 8004c26:	4770      	bx	lr
 8004c28:	20000008 	.word	0x20000008
 8004c2c:	ffff0208 	.word	0xffff0208

08004c30 <sulp>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	4604      	mov	r4, r0
 8004c34:	460d      	mov	r5, r1
 8004c36:	ec45 4b10 	vmov	d0, r4, r5
 8004c3a:	4616      	mov	r6, r2
 8004c3c:	f002 fc2c 	bl	8007498 <__ulp>
 8004c40:	ec51 0b10 	vmov	r0, r1, d0
 8004c44:	b17e      	cbz	r6, 8004c66 <sulp+0x36>
 8004c46:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004c4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	dd09      	ble.n	8004c66 <sulp+0x36>
 8004c52:	051b      	lsls	r3, r3, #20
 8004c54:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c58:	2400      	movs	r4, #0
 8004c5a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c5e:	4622      	mov	r2, r4
 8004c60:	462b      	mov	r3, r5
 8004c62:	f7fb fcc9 	bl	80005f8 <__aeabi_dmul>
 8004c66:	bd70      	pop	{r4, r5, r6, pc}

08004c68 <_strtod_l>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	b0a3      	sub	sp, #140	; 0x8c
 8004c6e:	461f      	mov	r7, r3
 8004c70:	2300      	movs	r3, #0
 8004c72:	931e      	str	r3, [sp, #120]	; 0x78
 8004c74:	4ba4      	ldr	r3, [pc, #656]	; (8004f08 <_strtod_l+0x2a0>)
 8004c76:	9219      	str	r2, [sp, #100]	; 0x64
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	9307      	str	r3, [sp, #28]
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	4688      	mov	r8, r1
 8004c82:	f7fb faa5 	bl	80001d0 <strlen>
 8004c86:	f04f 0a00 	mov.w	sl, #0
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	f04f 0b00 	mov.w	fp, #0
 8004c90:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004c94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c96:	781a      	ldrb	r2, [r3, #0]
 8004c98:	2a2b      	cmp	r2, #43	; 0x2b
 8004c9a:	d04c      	beq.n	8004d36 <_strtod_l+0xce>
 8004c9c:	d839      	bhi.n	8004d12 <_strtod_l+0xaa>
 8004c9e:	2a0d      	cmp	r2, #13
 8004ca0:	d832      	bhi.n	8004d08 <_strtod_l+0xa0>
 8004ca2:	2a08      	cmp	r2, #8
 8004ca4:	d832      	bhi.n	8004d0c <_strtod_l+0xa4>
 8004ca6:	2a00      	cmp	r2, #0
 8004ca8:	d03c      	beq.n	8004d24 <_strtod_l+0xbc>
 8004caa:	2300      	movs	r3, #0
 8004cac:	930e      	str	r3, [sp, #56]	; 0x38
 8004cae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004cb0:	7833      	ldrb	r3, [r6, #0]
 8004cb2:	2b30      	cmp	r3, #48	; 0x30
 8004cb4:	f040 80b4 	bne.w	8004e20 <_strtod_l+0x1b8>
 8004cb8:	7873      	ldrb	r3, [r6, #1]
 8004cba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004cbe:	2b58      	cmp	r3, #88	; 0x58
 8004cc0:	d16c      	bne.n	8004d9c <_strtod_l+0x134>
 8004cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	ab1e      	add	r3, sp, #120	; 0x78
 8004cc8:	9702      	str	r7, [sp, #8]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	4a8f      	ldr	r2, [pc, #572]	; (8004f0c <_strtod_l+0x2a4>)
 8004cce:	ab1f      	add	r3, sp, #124	; 0x7c
 8004cd0:	a91d      	add	r1, sp, #116	; 0x74
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f001 fd40 	bl	8006758 <__gethex>
 8004cd8:	f010 0707 	ands.w	r7, r0, #7
 8004cdc:	4605      	mov	r5, r0
 8004cde:	d005      	beq.n	8004cec <_strtod_l+0x84>
 8004ce0:	2f06      	cmp	r7, #6
 8004ce2:	d12a      	bne.n	8004d3a <_strtod_l+0xd2>
 8004ce4:	3601      	adds	r6, #1
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	961d      	str	r6, [sp, #116]	; 0x74
 8004cea:	930e      	str	r3, [sp, #56]	; 0x38
 8004cec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 8596 	bne.w	8005820 <_strtod_l+0xbb8>
 8004cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cf6:	b1db      	cbz	r3, 8004d30 <_strtod_l+0xc8>
 8004cf8:	4652      	mov	r2, sl
 8004cfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004cfe:	ec43 2b10 	vmov	d0, r2, r3
 8004d02:	b023      	add	sp, #140	; 0x8c
 8004d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d08:	2a20      	cmp	r2, #32
 8004d0a:	d1ce      	bne.n	8004caa <_strtod_l+0x42>
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	931d      	str	r3, [sp, #116]	; 0x74
 8004d10:	e7c0      	b.n	8004c94 <_strtod_l+0x2c>
 8004d12:	2a2d      	cmp	r2, #45	; 0x2d
 8004d14:	d1c9      	bne.n	8004caa <_strtod_l+0x42>
 8004d16:	2201      	movs	r2, #1
 8004d18:	920e      	str	r2, [sp, #56]	; 0x38
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	921d      	str	r2, [sp, #116]	; 0x74
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1c4      	bne.n	8004cae <_strtod_l+0x46>
 8004d24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d26:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f040 8576 	bne.w	800581c <_strtod_l+0xbb4>
 8004d30:	4652      	mov	r2, sl
 8004d32:	465b      	mov	r3, fp
 8004d34:	e7e3      	b.n	8004cfe <_strtod_l+0x96>
 8004d36:	2200      	movs	r2, #0
 8004d38:	e7ee      	b.n	8004d18 <_strtod_l+0xb0>
 8004d3a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004d3c:	b13a      	cbz	r2, 8004d4e <_strtod_l+0xe6>
 8004d3e:	2135      	movs	r1, #53	; 0x35
 8004d40:	a820      	add	r0, sp, #128	; 0x80
 8004d42:	f002 fcb4 	bl	80076ae <__copybits>
 8004d46:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f002 f879 	bl	8006e40 <_Bfree>
 8004d4e:	3f01      	subs	r7, #1
 8004d50:	2f05      	cmp	r7, #5
 8004d52:	d807      	bhi.n	8004d64 <_strtod_l+0xfc>
 8004d54:	e8df f007 	tbb	[pc, r7]
 8004d58:	1d180b0e 	.word	0x1d180b0e
 8004d5c:	030e      	.short	0x030e
 8004d5e:	f04f 0b00 	mov.w	fp, #0
 8004d62:	46da      	mov	sl, fp
 8004d64:	0728      	lsls	r0, r5, #28
 8004d66:	d5c1      	bpl.n	8004cec <_strtod_l+0x84>
 8004d68:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004d6c:	e7be      	b.n	8004cec <_strtod_l+0x84>
 8004d6e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8004d72:	e7f7      	b.n	8004d64 <_strtod_l+0xfc>
 8004d74:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004d78:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004d7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004d86:	e7ed      	b.n	8004d64 <_strtod_l+0xfc>
 8004d88:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004f10 <_strtod_l+0x2a8>
 8004d8c:	f04f 0a00 	mov.w	sl, #0
 8004d90:	e7e8      	b.n	8004d64 <_strtod_l+0xfc>
 8004d92:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004d96:	f04f 3aff 	mov.w	sl, #4294967295
 8004d9a:	e7e3      	b.n	8004d64 <_strtod_l+0xfc>
 8004d9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	921d      	str	r2, [sp, #116]	; 0x74
 8004da2:	785b      	ldrb	r3, [r3, #1]
 8004da4:	2b30      	cmp	r3, #48	; 0x30
 8004da6:	d0f9      	beq.n	8004d9c <_strtod_l+0x134>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d09f      	beq.n	8004cec <_strtod_l+0x84>
 8004dac:	2301      	movs	r3, #1
 8004dae:	f04f 0900 	mov.w	r9, #0
 8004db2:	9304      	str	r3, [sp, #16]
 8004db4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004db6:	930a      	str	r3, [sp, #40]	; 0x28
 8004db8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004dbc:	464f      	mov	r7, r9
 8004dbe:	220a      	movs	r2, #10
 8004dc0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004dc2:	7806      	ldrb	r6, [r0, #0]
 8004dc4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004dc8:	b2d9      	uxtb	r1, r3
 8004dca:	2909      	cmp	r1, #9
 8004dcc:	d92a      	bls.n	8004e24 <_strtod_l+0x1bc>
 8004dce:	9907      	ldr	r1, [sp, #28]
 8004dd0:	462a      	mov	r2, r5
 8004dd2:	f002 fedd 	bl	8007b90 <strncmp>
 8004dd6:	b398      	cbz	r0, 8004e40 <_strtod_l+0x1d8>
 8004dd8:	2000      	movs	r0, #0
 8004dda:	4633      	mov	r3, r6
 8004ddc:	463d      	mov	r5, r7
 8004dde:	9007      	str	r0, [sp, #28]
 8004de0:	4602      	mov	r2, r0
 8004de2:	2b65      	cmp	r3, #101	; 0x65
 8004de4:	d001      	beq.n	8004dea <_strtod_l+0x182>
 8004de6:	2b45      	cmp	r3, #69	; 0x45
 8004de8:	d118      	bne.n	8004e1c <_strtod_l+0x1b4>
 8004dea:	b91d      	cbnz	r5, 8004df4 <_strtod_l+0x18c>
 8004dec:	9b04      	ldr	r3, [sp, #16]
 8004dee:	4303      	orrs	r3, r0
 8004df0:	d098      	beq.n	8004d24 <_strtod_l+0xbc>
 8004df2:	2500      	movs	r5, #0
 8004df4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004df8:	f108 0301 	add.w	r3, r8, #1
 8004dfc:	931d      	str	r3, [sp, #116]	; 0x74
 8004dfe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004e02:	2b2b      	cmp	r3, #43	; 0x2b
 8004e04:	d075      	beq.n	8004ef2 <_strtod_l+0x28a>
 8004e06:	2b2d      	cmp	r3, #45	; 0x2d
 8004e08:	d07b      	beq.n	8004f02 <_strtod_l+0x29a>
 8004e0a:	f04f 0c00 	mov.w	ip, #0
 8004e0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004e12:	2909      	cmp	r1, #9
 8004e14:	f240 8082 	bls.w	8004f1c <_strtod_l+0x2b4>
 8004e18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004e1c:	2600      	movs	r6, #0
 8004e1e:	e09d      	b.n	8004f5c <_strtod_l+0x2f4>
 8004e20:	2300      	movs	r3, #0
 8004e22:	e7c4      	b.n	8004dae <_strtod_l+0x146>
 8004e24:	2f08      	cmp	r7, #8
 8004e26:	bfd8      	it	le
 8004e28:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004e2a:	f100 0001 	add.w	r0, r0, #1
 8004e2e:	bfda      	itte	le
 8004e30:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e34:	9309      	strle	r3, [sp, #36]	; 0x24
 8004e36:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004e3a:	3701      	adds	r7, #1
 8004e3c:	901d      	str	r0, [sp, #116]	; 0x74
 8004e3e:	e7bf      	b.n	8004dc0 <_strtod_l+0x158>
 8004e40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e42:	195a      	adds	r2, r3, r5
 8004e44:	921d      	str	r2, [sp, #116]	; 0x74
 8004e46:	5d5b      	ldrb	r3, [r3, r5]
 8004e48:	2f00      	cmp	r7, #0
 8004e4a:	d037      	beq.n	8004ebc <_strtod_l+0x254>
 8004e4c:	9007      	str	r0, [sp, #28]
 8004e4e:	463d      	mov	r5, r7
 8004e50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004e54:	2a09      	cmp	r2, #9
 8004e56:	d912      	bls.n	8004e7e <_strtod_l+0x216>
 8004e58:	2201      	movs	r2, #1
 8004e5a:	e7c2      	b.n	8004de2 <_strtod_l+0x17a>
 8004e5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	921d      	str	r2, [sp, #116]	; 0x74
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	3001      	adds	r0, #1
 8004e66:	2b30      	cmp	r3, #48	; 0x30
 8004e68:	d0f8      	beq.n	8004e5c <_strtod_l+0x1f4>
 8004e6a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004e6e:	2a08      	cmp	r2, #8
 8004e70:	f200 84db 	bhi.w	800582a <_strtod_l+0xbc2>
 8004e74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004e76:	9007      	str	r0, [sp, #28]
 8004e78:	2000      	movs	r0, #0
 8004e7a:	920a      	str	r2, [sp, #40]	; 0x28
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	3b30      	subs	r3, #48	; 0x30
 8004e80:	f100 0201 	add.w	r2, r0, #1
 8004e84:	d014      	beq.n	8004eb0 <_strtod_l+0x248>
 8004e86:	9907      	ldr	r1, [sp, #28]
 8004e88:	4411      	add	r1, r2
 8004e8a:	9107      	str	r1, [sp, #28]
 8004e8c:	462a      	mov	r2, r5
 8004e8e:	eb00 0e05 	add.w	lr, r0, r5
 8004e92:	210a      	movs	r1, #10
 8004e94:	4572      	cmp	r2, lr
 8004e96:	d113      	bne.n	8004ec0 <_strtod_l+0x258>
 8004e98:	182a      	adds	r2, r5, r0
 8004e9a:	2a08      	cmp	r2, #8
 8004e9c:	f105 0501 	add.w	r5, r5, #1
 8004ea0:	4405      	add	r5, r0
 8004ea2:	dc1c      	bgt.n	8004ede <_strtod_l+0x276>
 8004ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ea6:	220a      	movs	r2, #10
 8004ea8:	fb02 3301 	mla	r3, r2, r1, r3
 8004eac:	9309      	str	r3, [sp, #36]	; 0x24
 8004eae:	2200      	movs	r2, #0
 8004eb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004eb2:	1c59      	adds	r1, r3, #1
 8004eb4:	911d      	str	r1, [sp, #116]	; 0x74
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	4610      	mov	r0, r2
 8004eba:	e7c9      	b.n	8004e50 <_strtod_l+0x1e8>
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	e7d2      	b.n	8004e66 <_strtod_l+0x1fe>
 8004ec0:	2a08      	cmp	r2, #8
 8004ec2:	dc04      	bgt.n	8004ece <_strtod_l+0x266>
 8004ec4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004ec6:	434e      	muls	r6, r1
 8004ec8:	9609      	str	r6, [sp, #36]	; 0x24
 8004eca:	3201      	adds	r2, #1
 8004ecc:	e7e2      	b.n	8004e94 <_strtod_l+0x22c>
 8004ece:	f102 0c01 	add.w	ip, r2, #1
 8004ed2:	f1bc 0f10 	cmp.w	ip, #16
 8004ed6:	bfd8      	it	le
 8004ed8:	fb01 f909 	mulle.w	r9, r1, r9
 8004edc:	e7f5      	b.n	8004eca <_strtod_l+0x262>
 8004ede:	2d10      	cmp	r5, #16
 8004ee0:	bfdc      	itt	le
 8004ee2:	220a      	movle	r2, #10
 8004ee4:	fb02 3909 	mlale	r9, r2, r9, r3
 8004ee8:	e7e1      	b.n	8004eae <_strtod_l+0x246>
 8004eea:	2300      	movs	r3, #0
 8004eec:	9307      	str	r3, [sp, #28]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	e77c      	b.n	8004dec <_strtod_l+0x184>
 8004ef2:	f04f 0c00 	mov.w	ip, #0
 8004ef6:	f108 0302 	add.w	r3, r8, #2
 8004efa:	931d      	str	r3, [sp, #116]	; 0x74
 8004efc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004f00:	e785      	b.n	8004e0e <_strtod_l+0x1a6>
 8004f02:	f04f 0c01 	mov.w	ip, #1
 8004f06:	e7f6      	b.n	8004ef6 <_strtod_l+0x28e>
 8004f08:	080099e0 	.word	0x080099e0
 8004f0c:	08009790 	.word	0x08009790
 8004f10:	7ff00000 	.word	0x7ff00000
 8004f14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	911d      	str	r1, [sp, #116]	; 0x74
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	2b30      	cmp	r3, #48	; 0x30
 8004f1e:	d0f9      	beq.n	8004f14 <_strtod_l+0x2ac>
 8004f20:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004f24:	2908      	cmp	r1, #8
 8004f26:	f63f af79 	bhi.w	8004e1c <_strtod_l+0x1b4>
 8004f2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004f2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f30:	9308      	str	r3, [sp, #32]
 8004f32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f34:	1c59      	adds	r1, r3, #1
 8004f36:	911d      	str	r1, [sp, #116]	; 0x74
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004f3e:	2e09      	cmp	r6, #9
 8004f40:	d937      	bls.n	8004fb2 <_strtod_l+0x34a>
 8004f42:	9e08      	ldr	r6, [sp, #32]
 8004f44:	1b89      	subs	r1, r1, r6
 8004f46:	2908      	cmp	r1, #8
 8004f48:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004f4c:	dc02      	bgt.n	8004f54 <_strtod_l+0x2ec>
 8004f4e:	4576      	cmp	r6, lr
 8004f50:	bfa8      	it	ge
 8004f52:	4676      	movge	r6, lr
 8004f54:	f1bc 0f00 	cmp.w	ip, #0
 8004f58:	d000      	beq.n	8004f5c <_strtod_l+0x2f4>
 8004f5a:	4276      	negs	r6, r6
 8004f5c:	2d00      	cmp	r5, #0
 8004f5e:	d14f      	bne.n	8005000 <_strtod_l+0x398>
 8004f60:	9904      	ldr	r1, [sp, #16]
 8004f62:	4301      	orrs	r1, r0
 8004f64:	f47f aec2 	bne.w	8004cec <_strtod_l+0x84>
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	f47f aedb 	bne.w	8004d24 <_strtod_l+0xbc>
 8004f6e:	2b69      	cmp	r3, #105	; 0x69
 8004f70:	d027      	beq.n	8004fc2 <_strtod_l+0x35a>
 8004f72:	dc24      	bgt.n	8004fbe <_strtod_l+0x356>
 8004f74:	2b49      	cmp	r3, #73	; 0x49
 8004f76:	d024      	beq.n	8004fc2 <_strtod_l+0x35a>
 8004f78:	2b4e      	cmp	r3, #78	; 0x4e
 8004f7a:	f47f aed3 	bne.w	8004d24 <_strtod_l+0xbc>
 8004f7e:	499e      	ldr	r1, [pc, #632]	; (80051f8 <_strtod_l+0x590>)
 8004f80:	a81d      	add	r0, sp, #116	; 0x74
 8004f82:	f001 fe41 	bl	8006c08 <__match>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	f43f aecc 	beq.w	8004d24 <_strtod_l+0xbc>
 8004f8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b28      	cmp	r3, #40	; 0x28
 8004f92:	d12d      	bne.n	8004ff0 <_strtod_l+0x388>
 8004f94:	4999      	ldr	r1, [pc, #612]	; (80051fc <_strtod_l+0x594>)
 8004f96:	aa20      	add	r2, sp, #128	; 0x80
 8004f98:	a81d      	add	r0, sp, #116	; 0x74
 8004f9a:	f001 fe49 	bl	8006c30 <__hexnan>
 8004f9e:	2805      	cmp	r0, #5
 8004fa0:	d126      	bne.n	8004ff0 <_strtod_l+0x388>
 8004fa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fa4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8004fa8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004fac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004fb0:	e69c      	b.n	8004cec <_strtod_l+0x84>
 8004fb2:	210a      	movs	r1, #10
 8004fb4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004fb8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004fbc:	e7b9      	b.n	8004f32 <_strtod_l+0x2ca>
 8004fbe:	2b6e      	cmp	r3, #110	; 0x6e
 8004fc0:	e7db      	b.n	8004f7a <_strtod_l+0x312>
 8004fc2:	498f      	ldr	r1, [pc, #572]	; (8005200 <_strtod_l+0x598>)
 8004fc4:	a81d      	add	r0, sp, #116	; 0x74
 8004fc6:	f001 fe1f 	bl	8006c08 <__match>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	f43f aeaa 	beq.w	8004d24 <_strtod_l+0xbc>
 8004fd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004fd2:	498c      	ldr	r1, [pc, #560]	; (8005204 <_strtod_l+0x59c>)
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	a81d      	add	r0, sp, #116	; 0x74
 8004fd8:	931d      	str	r3, [sp, #116]	; 0x74
 8004fda:	f001 fe15 	bl	8006c08 <__match>
 8004fde:	b910      	cbnz	r0, 8004fe6 <_strtod_l+0x37e>
 8004fe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	931d      	str	r3, [sp, #116]	; 0x74
 8004fe6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005214 <_strtod_l+0x5ac>
 8004fea:	f04f 0a00 	mov.w	sl, #0
 8004fee:	e67d      	b.n	8004cec <_strtod_l+0x84>
 8004ff0:	4885      	ldr	r0, [pc, #532]	; (8005208 <_strtod_l+0x5a0>)
 8004ff2:	f002 fdb5 	bl	8007b60 <nan>
 8004ff6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004ffa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004ffe:	e675      	b.n	8004cec <_strtod_l+0x84>
 8005000:	9b07      	ldr	r3, [sp, #28]
 8005002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005004:	1af3      	subs	r3, r6, r3
 8005006:	2f00      	cmp	r7, #0
 8005008:	bf08      	it	eq
 800500a:	462f      	moveq	r7, r5
 800500c:	2d10      	cmp	r5, #16
 800500e:	9308      	str	r3, [sp, #32]
 8005010:	46a8      	mov	r8, r5
 8005012:	bfa8      	it	ge
 8005014:	f04f 0810 	movge.w	r8, #16
 8005018:	f7fb fa74 	bl	8000504 <__aeabi_ui2d>
 800501c:	2d09      	cmp	r5, #9
 800501e:	4682      	mov	sl, r0
 8005020:	468b      	mov	fp, r1
 8005022:	dd13      	ble.n	800504c <_strtod_l+0x3e4>
 8005024:	4b79      	ldr	r3, [pc, #484]	; (800520c <_strtod_l+0x5a4>)
 8005026:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800502a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800502e:	f7fb fae3 	bl	80005f8 <__aeabi_dmul>
 8005032:	4682      	mov	sl, r0
 8005034:	4648      	mov	r0, r9
 8005036:	468b      	mov	fp, r1
 8005038:	f7fb fa64 	bl	8000504 <__aeabi_ui2d>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4650      	mov	r0, sl
 8005042:	4659      	mov	r1, fp
 8005044:	f7fb f922 	bl	800028c <__adddf3>
 8005048:	4682      	mov	sl, r0
 800504a:	468b      	mov	fp, r1
 800504c:	2d0f      	cmp	r5, #15
 800504e:	dc38      	bgt.n	80050c2 <_strtod_l+0x45a>
 8005050:	9b08      	ldr	r3, [sp, #32]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f43f ae4a 	beq.w	8004cec <_strtod_l+0x84>
 8005058:	dd24      	ble.n	80050a4 <_strtod_l+0x43c>
 800505a:	2b16      	cmp	r3, #22
 800505c:	dc0b      	bgt.n	8005076 <_strtod_l+0x40e>
 800505e:	4d6b      	ldr	r5, [pc, #428]	; (800520c <_strtod_l+0x5a4>)
 8005060:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005064:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005068:	4652      	mov	r2, sl
 800506a:	465b      	mov	r3, fp
 800506c:	f7fb fac4 	bl	80005f8 <__aeabi_dmul>
 8005070:	4682      	mov	sl, r0
 8005072:	468b      	mov	fp, r1
 8005074:	e63a      	b.n	8004cec <_strtod_l+0x84>
 8005076:	9a08      	ldr	r2, [sp, #32]
 8005078:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800507c:	4293      	cmp	r3, r2
 800507e:	db20      	blt.n	80050c2 <_strtod_l+0x45a>
 8005080:	4c62      	ldr	r4, [pc, #392]	; (800520c <_strtod_l+0x5a4>)
 8005082:	f1c5 050f 	rsb	r5, r5, #15
 8005086:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800508a:	4652      	mov	r2, sl
 800508c:	465b      	mov	r3, fp
 800508e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005092:	f7fb fab1 	bl	80005f8 <__aeabi_dmul>
 8005096:	9b08      	ldr	r3, [sp, #32]
 8005098:	1b5d      	subs	r5, r3, r5
 800509a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800509e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80050a2:	e7e3      	b.n	800506c <_strtod_l+0x404>
 80050a4:	9b08      	ldr	r3, [sp, #32]
 80050a6:	3316      	adds	r3, #22
 80050a8:	db0b      	blt.n	80050c2 <_strtod_l+0x45a>
 80050aa:	9b07      	ldr	r3, [sp, #28]
 80050ac:	4a57      	ldr	r2, [pc, #348]	; (800520c <_strtod_l+0x5a4>)
 80050ae:	1b9e      	subs	r6, r3, r6
 80050b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80050b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050b8:	4650      	mov	r0, sl
 80050ba:	4659      	mov	r1, fp
 80050bc:	f7fb fbc6 	bl	800084c <__aeabi_ddiv>
 80050c0:	e7d6      	b.n	8005070 <_strtod_l+0x408>
 80050c2:	9b08      	ldr	r3, [sp, #32]
 80050c4:	eba5 0808 	sub.w	r8, r5, r8
 80050c8:	4498      	add	r8, r3
 80050ca:	f1b8 0f00 	cmp.w	r8, #0
 80050ce:	dd71      	ble.n	80051b4 <_strtod_l+0x54c>
 80050d0:	f018 030f 	ands.w	r3, r8, #15
 80050d4:	d00a      	beq.n	80050ec <_strtod_l+0x484>
 80050d6:	494d      	ldr	r1, [pc, #308]	; (800520c <_strtod_l+0x5a4>)
 80050d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050dc:	4652      	mov	r2, sl
 80050de:	465b      	mov	r3, fp
 80050e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050e4:	f7fb fa88 	bl	80005f8 <__aeabi_dmul>
 80050e8:	4682      	mov	sl, r0
 80050ea:	468b      	mov	fp, r1
 80050ec:	f038 080f 	bics.w	r8, r8, #15
 80050f0:	d04d      	beq.n	800518e <_strtod_l+0x526>
 80050f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80050f6:	dd22      	ble.n	800513e <_strtod_l+0x4d6>
 80050f8:	2500      	movs	r5, #0
 80050fa:	462e      	mov	r6, r5
 80050fc:	9509      	str	r5, [sp, #36]	; 0x24
 80050fe:	9507      	str	r5, [sp, #28]
 8005100:	2322      	movs	r3, #34	; 0x22
 8005102:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005214 <_strtod_l+0x5ac>
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	f04f 0a00 	mov.w	sl, #0
 800510c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	f43f adec 	beq.w	8004cec <_strtod_l+0x84>
 8005114:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005116:	4620      	mov	r0, r4
 8005118:	f001 fe92 	bl	8006e40 <_Bfree>
 800511c:	9907      	ldr	r1, [sp, #28]
 800511e:	4620      	mov	r0, r4
 8005120:	f001 fe8e 	bl	8006e40 <_Bfree>
 8005124:	4631      	mov	r1, r6
 8005126:	4620      	mov	r0, r4
 8005128:	f001 fe8a 	bl	8006e40 <_Bfree>
 800512c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800512e:	4620      	mov	r0, r4
 8005130:	f001 fe86 	bl	8006e40 <_Bfree>
 8005134:	4629      	mov	r1, r5
 8005136:	4620      	mov	r0, r4
 8005138:	f001 fe82 	bl	8006e40 <_Bfree>
 800513c:	e5d6      	b.n	8004cec <_strtod_l+0x84>
 800513e:	2300      	movs	r3, #0
 8005140:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005144:	4650      	mov	r0, sl
 8005146:	4659      	mov	r1, fp
 8005148:	4699      	mov	r9, r3
 800514a:	f1b8 0f01 	cmp.w	r8, #1
 800514e:	dc21      	bgt.n	8005194 <_strtod_l+0x52c>
 8005150:	b10b      	cbz	r3, 8005156 <_strtod_l+0x4ee>
 8005152:	4682      	mov	sl, r0
 8005154:	468b      	mov	fp, r1
 8005156:	4b2e      	ldr	r3, [pc, #184]	; (8005210 <_strtod_l+0x5a8>)
 8005158:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800515c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005160:	4652      	mov	r2, sl
 8005162:	465b      	mov	r3, fp
 8005164:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005168:	f7fb fa46 	bl	80005f8 <__aeabi_dmul>
 800516c:	4b29      	ldr	r3, [pc, #164]	; (8005214 <_strtod_l+0x5ac>)
 800516e:	460a      	mov	r2, r1
 8005170:	400b      	ands	r3, r1
 8005172:	4929      	ldr	r1, [pc, #164]	; (8005218 <_strtod_l+0x5b0>)
 8005174:	428b      	cmp	r3, r1
 8005176:	4682      	mov	sl, r0
 8005178:	d8be      	bhi.n	80050f8 <_strtod_l+0x490>
 800517a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800517e:	428b      	cmp	r3, r1
 8005180:	bf86      	itte	hi
 8005182:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800521c <_strtod_l+0x5b4>
 8005186:	f04f 3aff 	movhi.w	sl, #4294967295
 800518a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800518e:	2300      	movs	r3, #0
 8005190:	9304      	str	r3, [sp, #16]
 8005192:	e081      	b.n	8005298 <_strtod_l+0x630>
 8005194:	f018 0f01 	tst.w	r8, #1
 8005198:	d007      	beq.n	80051aa <_strtod_l+0x542>
 800519a:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <_strtod_l+0x5a8>)
 800519c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f7fb fa28 	bl	80005f8 <__aeabi_dmul>
 80051a8:	2301      	movs	r3, #1
 80051aa:	f109 0901 	add.w	r9, r9, #1
 80051ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80051b2:	e7ca      	b.n	800514a <_strtod_l+0x4e2>
 80051b4:	d0eb      	beq.n	800518e <_strtod_l+0x526>
 80051b6:	f1c8 0800 	rsb	r8, r8, #0
 80051ba:	f018 020f 	ands.w	r2, r8, #15
 80051be:	d00a      	beq.n	80051d6 <_strtod_l+0x56e>
 80051c0:	4b12      	ldr	r3, [pc, #72]	; (800520c <_strtod_l+0x5a4>)
 80051c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051c6:	4650      	mov	r0, sl
 80051c8:	4659      	mov	r1, fp
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	f7fb fb3d 	bl	800084c <__aeabi_ddiv>
 80051d2:	4682      	mov	sl, r0
 80051d4:	468b      	mov	fp, r1
 80051d6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80051da:	d0d8      	beq.n	800518e <_strtod_l+0x526>
 80051dc:	f1b8 0f1f 	cmp.w	r8, #31
 80051e0:	dd1e      	ble.n	8005220 <_strtod_l+0x5b8>
 80051e2:	2500      	movs	r5, #0
 80051e4:	462e      	mov	r6, r5
 80051e6:	9509      	str	r5, [sp, #36]	; 0x24
 80051e8:	9507      	str	r5, [sp, #28]
 80051ea:	2322      	movs	r3, #34	; 0x22
 80051ec:	f04f 0a00 	mov.w	sl, #0
 80051f0:	f04f 0b00 	mov.w	fp, #0
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	e789      	b.n	800510c <_strtod_l+0x4a4>
 80051f8:	08009761 	.word	0x08009761
 80051fc:	080097a4 	.word	0x080097a4
 8005200:	08009759 	.word	0x08009759
 8005204:	080098e4 	.word	0x080098e4
 8005208:	08009ba0 	.word	0x08009ba0
 800520c:	08009a80 	.word	0x08009a80
 8005210:	08009a58 	.word	0x08009a58
 8005214:	7ff00000 	.word	0x7ff00000
 8005218:	7ca00000 	.word	0x7ca00000
 800521c:	7fefffff 	.word	0x7fefffff
 8005220:	f018 0310 	ands.w	r3, r8, #16
 8005224:	bf18      	it	ne
 8005226:	236a      	movne	r3, #106	; 0x6a
 8005228:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80055e0 <_strtod_l+0x978>
 800522c:	9304      	str	r3, [sp, #16]
 800522e:	4650      	mov	r0, sl
 8005230:	4659      	mov	r1, fp
 8005232:	2300      	movs	r3, #0
 8005234:	f018 0f01 	tst.w	r8, #1
 8005238:	d004      	beq.n	8005244 <_strtod_l+0x5dc>
 800523a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800523e:	f7fb f9db 	bl	80005f8 <__aeabi_dmul>
 8005242:	2301      	movs	r3, #1
 8005244:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005248:	f109 0908 	add.w	r9, r9, #8
 800524c:	d1f2      	bne.n	8005234 <_strtod_l+0x5cc>
 800524e:	b10b      	cbz	r3, 8005254 <_strtod_l+0x5ec>
 8005250:	4682      	mov	sl, r0
 8005252:	468b      	mov	fp, r1
 8005254:	9b04      	ldr	r3, [sp, #16]
 8005256:	b1bb      	cbz	r3, 8005288 <_strtod_l+0x620>
 8005258:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800525c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005260:	2b00      	cmp	r3, #0
 8005262:	4659      	mov	r1, fp
 8005264:	dd10      	ble.n	8005288 <_strtod_l+0x620>
 8005266:	2b1f      	cmp	r3, #31
 8005268:	f340 8128 	ble.w	80054bc <_strtod_l+0x854>
 800526c:	2b34      	cmp	r3, #52	; 0x34
 800526e:	bfde      	ittt	le
 8005270:	3b20      	suble	r3, #32
 8005272:	f04f 32ff 	movle.w	r2, #4294967295
 8005276:	fa02 f303 	lslle.w	r3, r2, r3
 800527a:	f04f 0a00 	mov.w	sl, #0
 800527e:	bfcc      	ite	gt
 8005280:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005284:	ea03 0b01 	andle.w	fp, r3, r1
 8005288:	2200      	movs	r2, #0
 800528a:	2300      	movs	r3, #0
 800528c:	4650      	mov	r0, sl
 800528e:	4659      	mov	r1, fp
 8005290:	f7fb fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005294:	2800      	cmp	r0, #0
 8005296:	d1a4      	bne.n	80051e2 <_strtod_l+0x57a>
 8005298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800529e:	462b      	mov	r3, r5
 80052a0:	463a      	mov	r2, r7
 80052a2:	4620      	mov	r0, r4
 80052a4:	f001 fe38 	bl	8006f18 <__s2b>
 80052a8:	9009      	str	r0, [sp, #36]	; 0x24
 80052aa:	2800      	cmp	r0, #0
 80052ac:	f43f af24 	beq.w	80050f8 <_strtod_l+0x490>
 80052b0:	9b07      	ldr	r3, [sp, #28]
 80052b2:	1b9e      	subs	r6, r3, r6
 80052b4:	9b08      	ldr	r3, [sp, #32]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bfb4      	ite	lt
 80052ba:	4633      	movlt	r3, r6
 80052bc:	2300      	movge	r3, #0
 80052be:	9310      	str	r3, [sp, #64]	; 0x40
 80052c0:	9b08      	ldr	r3, [sp, #32]
 80052c2:	2500      	movs	r5, #0
 80052c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80052c8:	9318      	str	r3, [sp, #96]	; 0x60
 80052ca:	462e      	mov	r6, r5
 80052cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ce:	4620      	mov	r0, r4
 80052d0:	6859      	ldr	r1, [r3, #4]
 80052d2:	f001 fd75 	bl	8006dc0 <_Balloc>
 80052d6:	9007      	str	r0, [sp, #28]
 80052d8:	2800      	cmp	r0, #0
 80052da:	f43f af11 	beq.w	8005100 <_strtod_l+0x498>
 80052de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	3202      	adds	r2, #2
 80052e4:	f103 010c 	add.w	r1, r3, #12
 80052e8:	0092      	lsls	r2, r2, #2
 80052ea:	300c      	adds	r0, #12
 80052ec:	f001 fd5a 	bl	8006da4 <memcpy>
 80052f0:	ec4b ab10 	vmov	d0, sl, fp
 80052f4:	aa20      	add	r2, sp, #128	; 0x80
 80052f6:	a91f      	add	r1, sp, #124	; 0x7c
 80052f8:	4620      	mov	r0, r4
 80052fa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80052fe:	f002 f947 	bl	8007590 <__d2b>
 8005302:	901e      	str	r0, [sp, #120]	; 0x78
 8005304:	2800      	cmp	r0, #0
 8005306:	f43f aefb 	beq.w	8005100 <_strtod_l+0x498>
 800530a:	2101      	movs	r1, #1
 800530c:	4620      	mov	r0, r4
 800530e:	f001 fe9d 	bl	800704c <__i2b>
 8005312:	4606      	mov	r6, r0
 8005314:	2800      	cmp	r0, #0
 8005316:	f43f aef3 	beq.w	8005100 <_strtod_l+0x498>
 800531a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800531c:	9904      	ldr	r1, [sp, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	bfab      	itete	ge
 8005322:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005324:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005326:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005328:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800532c:	bfac      	ite	ge
 800532e:	eb03 0902 	addge.w	r9, r3, r2
 8005332:	1ad7      	sublt	r7, r2, r3
 8005334:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005336:	eba3 0801 	sub.w	r8, r3, r1
 800533a:	4490      	add	r8, r2
 800533c:	4ba3      	ldr	r3, [pc, #652]	; (80055cc <_strtod_l+0x964>)
 800533e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005342:	4598      	cmp	r8, r3
 8005344:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005348:	f280 80cc 	bge.w	80054e4 <_strtod_l+0x87c>
 800534c:	eba3 0308 	sub.w	r3, r3, r8
 8005350:	2b1f      	cmp	r3, #31
 8005352:	eba2 0203 	sub.w	r2, r2, r3
 8005356:	f04f 0101 	mov.w	r1, #1
 800535a:	f300 80b6 	bgt.w	80054ca <_strtod_l+0x862>
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	9311      	str	r3, [sp, #68]	; 0x44
 8005364:	2300      	movs	r3, #0
 8005366:	930c      	str	r3, [sp, #48]	; 0x30
 8005368:	eb09 0802 	add.w	r8, r9, r2
 800536c:	9b04      	ldr	r3, [sp, #16]
 800536e:	45c1      	cmp	r9, r8
 8005370:	4417      	add	r7, r2
 8005372:	441f      	add	r7, r3
 8005374:	464b      	mov	r3, r9
 8005376:	bfa8      	it	ge
 8005378:	4643      	movge	r3, r8
 800537a:	42bb      	cmp	r3, r7
 800537c:	bfa8      	it	ge
 800537e:	463b      	movge	r3, r7
 8005380:	2b00      	cmp	r3, #0
 8005382:	bfc2      	ittt	gt
 8005384:	eba8 0803 	subgt.w	r8, r8, r3
 8005388:	1aff      	subgt	r7, r7, r3
 800538a:	eba9 0903 	subgt.w	r9, r9, r3
 800538e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	dd17      	ble.n	80053c4 <_strtod_l+0x75c>
 8005394:	4631      	mov	r1, r6
 8005396:	461a      	mov	r2, r3
 8005398:	4620      	mov	r0, r4
 800539a:	f001 ff13 	bl	80071c4 <__pow5mult>
 800539e:	4606      	mov	r6, r0
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f43f aead 	beq.w	8005100 <_strtod_l+0x498>
 80053a6:	4601      	mov	r1, r0
 80053a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80053aa:	4620      	mov	r0, r4
 80053ac:	f001 fe64 	bl	8007078 <__multiply>
 80053b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80053b2:	2800      	cmp	r0, #0
 80053b4:	f43f aea4 	beq.w	8005100 <_strtod_l+0x498>
 80053b8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80053ba:	4620      	mov	r0, r4
 80053bc:	f001 fd40 	bl	8006e40 <_Bfree>
 80053c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053c2:	931e      	str	r3, [sp, #120]	; 0x78
 80053c4:	f1b8 0f00 	cmp.w	r8, #0
 80053c8:	f300 8091 	bgt.w	80054ee <_strtod_l+0x886>
 80053cc:	9b08      	ldr	r3, [sp, #32]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dd08      	ble.n	80053e4 <_strtod_l+0x77c>
 80053d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80053d4:	9907      	ldr	r1, [sp, #28]
 80053d6:	4620      	mov	r0, r4
 80053d8:	f001 fef4 	bl	80071c4 <__pow5mult>
 80053dc:	9007      	str	r0, [sp, #28]
 80053de:	2800      	cmp	r0, #0
 80053e0:	f43f ae8e 	beq.w	8005100 <_strtod_l+0x498>
 80053e4:	2f00      	cmp	r7, #0
 80053e6:	dd08      	ble.n	80053fa <_strtod_l+0x792>
 80053e8:	9907      	ldr	r1, [sp, #28]
 80053ea:	463a      	mov	r2, r7
 80053ec:	4620      	mov	r0, r4
 80053ee:	f001 ff43 	bl	8007278 <__lshift>
 80053f2:	9007      	str	r0, [sp, #28]
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f43f ae83 	beq.w	8005100 <_strtod_l+0x498>
 80053fa:	f1b9 0f00 	cmp.w	r9, #0
 80053fe:	dd08      	ble.n	8005412 <_strtod_l+0x7aa>
 8005400:	4631      	mov	r1, r6
 8005402:	464a      	mov	r2, r9
 8005404:	4620      	mov	r0, r4
 8005406:	f001 ff37 	bl	8007278 <__lshift>
 800540a:	4606      	mov	r6, r0
 800540c:	2800      	cmp	r0, #0
 800540e:	f43f ae77 	beq.w	8005100 <_strtod_l+0x498>
 8005412:	9a07      	ldr	r2, [sp, #28]
 8005414:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005416:	4620      	mov	r0, r4
 8005418:	f001 ffb6 	bl	8007388 <__mdiff>
 800541c:	4605      	mov	r5, r0
 800541e:	2800      	cmp	r0, #0
 8005420:	f43f ae6e 	beq.w	8005100 <_strtod_l+0x498>
 8005424:	68c3      	ldr	r3, [r0, #12]
 8005426:	930f      	str	r3, [sp, #60]	; 0x3c
 8005428:	2300      	movs	r3, #0
 800542a:	60c3      	str	r3, [r0, #12]
 800542c:	4631      	mov	r1, r6
 800542e:	f001 ff8f 	bl	8007350 <__mcmp>
 8005432:	2800      	cmp	r0, #0
 8005434:	da65      	bge.n	8005502 <_strtod_l+0x89a>
 8005436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005438:	ea53 030a 	orrs.w	r3, r3, sl
 800543c:	f040 8087 	bne.w	800554e <_strtod_l+0x8e6>
 8005440:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005444:	2b00      	cmp	r3, #0
 8005446:	f040 8082 	bne.w	800554e <_strtod_l+0x8e6>
 800544a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800544e:	0d1b      	lsrs	r3, r3, #20
 8005450:	051b      	lsls	r3, r3, #20
 8005452:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005456:	d97a      	bls.n	800554e <_strtod_l+0x8e6>
 8005458:	696b      	ldr	r3, [r5, #20]
 800545a:	b913      	cbnz	r3, 8005462 <_strtod_l+0x7fa>
 800545c:	692b      	ldr	r3, [r5, #16]
 800545e:	2b01      	cmp	r3, #1
 8005460:	dd75      	ble.n	800554e <_strtod_l+0x8e6>
 8005462:	4629      	mov	r1, r5
 8005464:	2201      	movs	r2, #1
 8005466:	4620      	mov	r0, r4
 8005468:	f001 ff06 	bl	8007278 <__lshift>
 800546c:	4631      	mov	r1, r6
 800546e:	4605      	mov	r5, r0
 8005470:	f001 ff6e 	bl	8007350 <__mcmp>
 8005474:	2800      	cmp	r0, #0
 8005476:	dd6a      	ble.n	800554e <_strtod_l+0x8e6>
 8005478:	9904      	ldr	r1, [sp, #16]
 800547a:	4a55      	ldr	r2, [pc, #340]	; (80055d0 <_strtod_l+0x968>)
 800547c:	465b      	mov	r3, fp
 800547e:	2900      	cmp	r1, #0
 8005480:	f000 8085 	beq.w	800558e <_strtod_l+0x926>
 8005484:	ea02 010b 	and.w	r1, r2, fp
 8005488:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800548c:	dc7f      	bgt.n	800558e <_strtod_l+0x926>
 800548e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005492:	f77f aeaa 	ble.w	80051ea <_strtod_l+0x582>
 8005496:	4a4f      	ldr	r2, [pc, #316]	; (80055d4 <_strtod_l+0x96c>)
 8005498:	2300      	movs	r3, #0
 800549a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800549e:	4650      	mov	r0, sl
 80054a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80054a4:	4659      	mov	r1, fp
 80054a6:	f7fb f8a7 	bl	80005f8 <__aeabi_dmul>
 80054aa:	460b      	mov	r3, r1
 80054ac:	4303      	orrs	r3, r0
 80054ae:	bf08      	it	eq
 80054b0:	2322      	moveq	r3, #34	; 0x22
 80054b2:	4682      	mov	sl, r0
 80054b4:	468b      	mov	fp, r1
 80054b6:	bf08      	it	eq
 80054b8:	6023      	streq	r3, [r4, #0]
 80054ba:	e62b      	b.n	8005114 <_strtod_l+0x4ac>
 80054bc:	f04f 32ff 	mov.w	r2, #4294967295
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	ea03 0a0a 	and.w	sl, r3, sl
 80054c8:	e6de      	b.n	8005288 <_strtod_l+0x620>
 80054ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80054ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80054d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80054d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80054da:	fa01 f308 	lsl.w	r3, r1, r8
 80054de:	930c      	str	r3, [sp, #48]	; 0x30
 80054e0:	9111      	str	r1, [sp, #68]	; 0x44
 80054e2:	e741      	b.n	8005368 <_strtod_l+0x700>
 80054e4:	2300      	movs	r3, #0
 80054e6:	930c      	str	r3, [sp, #48]	; 0x30
 80054e8:	2301      	movs	r3, #1
 80054ea:	9311      	str	r3, [sp, #68]	; 0x44
 80054ec:	e73c      	b.n	8005368 <_strtod_l+0x700>
 80054ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80054f0:	4642      	mov	r2, r8
 80054f2:	4620      	mov	r0, r4
 80054f4:	f001 fec0 	bl	8007278 <__lshift>
 80054f8:	901e      	str	r0, [sp, #120]	; 0x78
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f47f af66 	bne.w	80053cc <_strtod_l+0x764>
 8005500:	e5fe      	b.n	8005100 <_strtod_l+0x498>
 8005502:	465f      	mov	r7, fp
 8005504:	d16e      	bne.n	80055e4 <_strtod_l+0x97c>
 8005506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800550c:	b342      	cbz	r2, 8005560 <_strtod_l+0x8f8>
 800550e:	4a32      	ldr	r2, [pc, #200]	; (80055d8 <_strtod_l+0x970>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d128      	bne.n	8005566 <_strtod_l+0x8fe>
 8005514:	9b04      	ldr	r3, [sp, #16]
 8005516:	4650      	mov	r0, sl
 8005518:	b1eb      	cbz	r3, 8005556 <_strtod_l+0x8ee>
 800551a:	4a2d      	ldr	r2, [pc, #180]	; (80055d0 <_strtod_l+0x968>)
 800551c:	403a      	ands	r2, r7
 800551e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005522:	f04f 31ff 	mov.w	r1, #4294967295
 8005526:	d819      	bhi.n	800555c <_strtod_l+0x8f4>
 8005528:	0d12      	lsrs	r2, r2, #20
 800552a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800552e:	fa01 f303 	lsl.w	r3, r1, r3
 8005532:	4298      	cmp	r0, r3
 8005534:	d117      	bne.n	8005566 <_strtod_l+0x8fe>
 8005536:	4b29      	ldr	r3, [pc, #164]	; (80055dc <_strtod_l+0x974>)
 8005538:	429f      	cmp	r7, r3
 800553a:	d102      	bne.n	8005542 <_strtod_l+0x8da>
 800553c:	3001      	adds	r0, #1
 800553e:	f43f addf 	beq.w	8005100 <_strtod_l+0x498>
 8005542:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <_strtod_l+0x968>)
 8005544:	403b      	ands	r3, r7
 8005546:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800554a:	f04f 0a00 	mov.w	sl, #0
 800554e:	9b04      	ldr	r3, [sp, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1a0      	bne.n	8005496 <_strtod_l+0x82e>
 8005554:	e5de      	b.n	8005114 <_strtod_l+0x4ac>
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
 800555a:	e7ea      	b.n	8005532 <_strtod_l+0x8ca>
 800555c:	460b      	mov	r3, r1
 800555e:	e7e8      	b.n	8005532 <_strtod_l+0x8ca>
 8005560:	ea53 030a 	orrs.w	r3, r3, sl
 8005564:	d088      	beq.n	8005478 <_strtod_l+0x810>
 8005566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005568:	b1db      	cbz	r3, 80055a2 <_strtod_l+0x93a>
 800556a:	423b      	tst	r3, r7
 800556c:	d0ef      	beq.n	800554e <_strtod_l+0x8e6>
 800556e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005570:	9a04      	ldr	r2, [sp, #16]
 8005572:	4650      	mov	r0, sl
 8005574:	4659      	mov	r1, fp
 8005576:	b1c3      	cbz	r3, 80055aa <_strtod_l+0x942>
 8005578:	f7ff fb5a 	bl	8004c30 <sulp>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005584:	f7fa fe82 	bl	800028c <__adddf3>
 8005588:	4682      	mov	sl, r0
 800558a:	468b      	mov	fp, r1
 800558c:	e7df      	b.n	800554e <_strtod_l+0x8e6>
 800558e:	4013      	ands	r3, r2
 8005590:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005594:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005598:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800559c:	f04f 3aff 	mov.w	sl, #4294967295
 80055a0:	e7d5      	b.n	800554e <_strtod_l+0x8e6>
 80055a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055a4:	ea13 0f0a 	tst.w	r3, sl
 80055a8:	e7e0      	b.n	800556c <_strtod_l+0x904>
 80055aa:	f7ff fb41 	bl	8004c30 <sulp>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055b6:	f7fa fe67 	bl	8000288 <__aeabi_dsub>
 80055ba:	2200      	movs	r2, #0
 80055bc:	2300      	movs	r3, #0
 80055be:	4682      	mov	sl, r0
 80055c0:	468b      	mov	fp, r1
 80055c2:	f7fb fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d0c1      	beq.n	800554e <_strtod_l+0x8e6>
 80055ca:	e60e      	b.n	80051ea <_strtod_l+0x582>
 80055cc:	fffffc02 	.word	0xfffffc02
 80055d0:	7ff00000 	.word	0x7ff00000
 80055d4:	39500000 	.word	0x39500000
 80055d8:	000fffff 	.word	0x000fffff
 80055dc:	7fefffff 	.word	0x7fefffff
 80055e0:	080097b8 	.word	0x080097b8
 80055e4:	4631      	mov	r1, r6
 80055e6:	4628      	mov	r0, r5
 80055e8:	f002 f82e 	bl	8007648 <__ratio>
 80055ec:	ec59 8b10 	vmov	r8, r9, d0
 80055f0:	ee10 0a10 	vmov	r0, s0
 80055f4:	2200      	movs	r2, #0
 80055f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055fa:	4649      	mov	r1, r9
 80055fc:	f7fb fa78 	bl	8000af0 <__aeabi_dcmple>
 8005600:	2800      	cmp	r0, #0
 8005602:	d07c      	beq.n	80056fe <_strtod_l+0xa96>
 8005604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d04c      	beq.n	80056a4 <_strtod_l+0xa3c>
 800560a:	4b95      	ldr	r3, [pc, #596]	; (8005860 <_strtod_l+0xbf8>)
 800560c:	2200      	movs	r2, #0
 800560e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005612:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005860 <_strtod_l+0xbf8>
 8005616:	f04f 0800 	mov.w	r8, #0
 800561a:	4b92      	ldr	r3, [pc, #584]	; (8005864 <_strtod_l+0xbfc>)
 800561c:	403b      	ands	r3, r7
 800561e:	9311      	str	r3, [sp, #68]	; 0x44
 8005620:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005622:	4b91      	ldr	r3, [pc, #580]	; (8005868 <_strtod_l+0xc00>)
 8005624:	429a      	cmp	r2, r3
 8005626:	f040 80b2 	bne.w	800578e <_strtod_l+0xb26>
 800562a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800562e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005632:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005636:	ec4b ab10 	vmov	d0, sl, fp
 800563a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800563e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005642:	f001 ff29 	bl	8007498 <__ulp>
 8005646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800564a:	ec53 2b10 	vmov	r2, r3, d0
 800564e:	f7fa ffd3 	bl	80005f8 <__aeabi_dmul>
 8005652:	4652      	mov	r2, sl
 8005654:	465b      	mov	r3, fp
 8005656:	f7fa fe19 	bl	800028c <__adddf3>
 800565a:	460b      	mov	r3, r1
 800565c:	4981      	ldr	r1, [pc, #516]	; (8005864 <_strtod_l+0xbfc>)
 800565e:	4a83      	ldr	r2, [pc, #524]	; (800586c <_strtod_l+0xc04>)
 8005660:	4019      	ands	r1, r3
 8005662:	4291      	cmp	r1, r2
 8005664:	4682      	mov	sl, r0
 8005666:	d95e      	bls.n	8005726 <_strtod_l+0xabe>
 8005668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800566a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800566e:	4293      	cmp	r3, r2
 8005670:	d103      	bne.n	800567a <_strtod_l+0xa12>
 8005672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005674:	3301      	adds	r3, #1
 8005676:	f43f ad43 	beq.w	8005100 <_strtod_l+0x498>
 800567a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005878 <_strtod_l+0xc10>
 800567e:	f04f 3aff 	mov.w	sl, #4294967295
 8005682:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005684:	4620      	mov	r0, r4
 8005686:	f001 fbdb 	bl	8006e40 <_Bfree>
 800568a:	9907      	ldr	r1, [sp, #28]
 800568c:	4620      	mov	r0, r4
 800568e:	f001 fbd7 	bl	8006e40 <_Bfree>
 8005692:	4631      	mov	r1, r6
 8005694:	4620      	mov	r0, r4
 8005696:	f001 fbd3 	bl	8006e40 <_Bfree>
 800569a:	4629      	mov	r1, r5
 800569c:	4620      	mov	r0, r4
 800569e:	f001 fbcf 	bl	8006e40 <_Bfree>
 80056a2:	e613      	b.n	80052cc <_strtod_l+0x664>
 80056a4:	f1ba 0f00 	cmp.w	sl, #0
 80056a8:	d11b      	bne.n	80056e2 <_strtod_l+0xa7a>
 80056aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056ae:	b9f3      	cbnz	r3, 80056ee <_strtod_l+0xa86>
 80056b0:	4b6b      	ldr	r3, [pc, #428]	; (8005860 <_strtod_l+0xbf8>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	4640      	mov	r0, r8
 80056b6:	4649      	mov	r1, r9
 80056b8:	f7fb fa10 	bl	8000adc <__aeabi_dcmplt>
 80056bc:	b9d0      	cbnz	r0, 80056f4 <_strtod_l+0xa8c>
 80056be:	4640      	mov	r0, r8
 80056c0:	4649      	mov	r1, r9
 80056c2:	4b6b      	ldr	r3, [pc, #428]	; (8005870 <_strtod_l+0xc08>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	f7fa ff97 	bl	80005f8 <__aeabi_dmul>
 80056ca:	4680      	mov	r8, r0
 80056cc:	4689      	mov	r9, r1
 80056ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80056d2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80056d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80056d8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80056dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80056e0:	e79b      	b.n	800561a <_strtod_l+0x9b2>
 80056e2:	f1ba 0f01 	cmp.w	sl, #1
 80056e6:	d102      	bne.n	80056ee <_strtod_l+0xa86>
 80056e8:	2f00      	cmp	r7, #0
 80056ea:	f43f ad7e 	beq.w	80051ea <_strtod_l+0x582>
 80056ee:	4b61      	ldr	r3, [pc, #388]	; (8005874 <_strtod_l+0xc0c>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	e78c      	b.n	800560e <_strtod_l+0x9a6>
 80056f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005870 <_strtod_l+0xc08>
 80056f8:	f04f 0800 	mov.w	r8, #0
 80056fc:	e7e7      	b.n	80056ce <_strtod_l+0xa66>
 80056fe:	4b5c      	ldr	r3, [pc, #368]	; (8005870 <_strtod_l+0xc08>)
 8005700:	4640      	mov	r0, r8
 8005702:	4649      	mov	r1, r9
 8005704:	2200      	movs	r2, #0
 8005706:	f7fa ff77 	bl	80005f8 <__aeabi_dmul>
 800570a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800570c:	4680      	mov	r8, r0
 800570e:	4689      	mov	r9, r1
 8005710:	b933      	cbnz	r3, 8005720 <_strtod_l+0xab8>
 8005712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005716:	9012      	str	r0, [sp, #72]	; 0x48
 8005718:	9313      	str	r3, [sp, #76]	; 0x4c
 800571a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800571e:	e7dd      	b.n	80056dc <_strtod_l+0xa74>
 8005720:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005724:	e7f9      	b.n	800571a <_strtod_l+0xab2>
 8005726:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1a8      	bne.n	8005682 <_strtod_l+0xa1a>
 8005730:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005734:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005736:	0d1b      	lsrs	r3, r3, #20
 8005738:	051b      	lsls	r3, r3, #20
 800573a:	429a      	cmp	r2, r3
 800573c:	d1a1      	bne.n	8005682 <_strtod_l+0xa1a>
 800573e:	4640      	mov	r0, r8
 8005740:	4649      	mov	r1, r9
 8005742:	f7fb faa1 	bl	8000c88 <__aeabi_d2lz>
 8005746:	f7fa ff29 	bl	800059c <__aeabi_l2d>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4640      	mov	r0, r8
 8005750:	4649      	mov	r1, r9
 8005752:	f7fa fd99 	bl	8000288 <__aeabi_dsub>
 8005756:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005758:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800575c:	ea43 030a 	orr.w	r3, r3, sl
 8005760:	4313      	orrs	r3, r2
 8005762:	4680      	mov	r8, r0
 8005764:	4689      	mov	r9, r1
 8005766:	d053      	beq.n	8005810 <_strtod_l+0xba8>
 8005768:	a335      	add	r3, pc, #212	; (adr r3, 8005840 <_strtod_l+0xbd8>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f7fb f9b5 	bl	8000adc <__aeabi_dcmplt>
 8005772:	2800      	cmp	r0, #0
 8005774:	f47f acce 	bne.w	8005114 <_strtod_l+0x4ac>
 8005778:	a333      	add	r3, pc, #204	; (adr r3, 8005848 <_strtod_l+0xbe0>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	4640      	mov	r0, r8
 8005780:	4649      	mov	r1, r9
 8005782:	f7fb f9c9 	bl	8000b18 <__aeabi_dcmpgt>
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f af7b 	beq.w	8005682 <_strtod_l+0xa1a>
 800578c:	e4c2      	b.n	8005114 <_strtod_l+0x4ac>
 800578e:	9b04      	ldr	r3, [sp, #16]
 8005790:	b333      	cbz	r3, 80057e0 <_strtod_l+0xb78>
 8005792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005794:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005798:	d822      	bhi.n	80057e0 <_strtod_l+0xb78>
 800579a:	a32d      	add	r3, pc, #180	; (adr r3, 8005850 <_strtod_l+0xbe8>)
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	4640      	mov	r0, r8
 80057a2:	4649      	mov	r1, r9
 80057a4:	f7fb f9a4 	bl	8000af0 <__aeabi_dcmple>
 80057a8:	b1a0      	cbz	r0, 80057d4 <_strtod_l+0xb6c>
 80057aa:	4649      	mov	r1, r9
 80057ac:	4640      	mov	r0, r8
 80057ae:	f7fb f9fb 	bl	8000ba8 <__aeabi_d2uiz>
 80057b2:	2801      	cmp	r0, #1
 80057b4:	bf38      	it	cc
 80057b6:	2001      	movcc	r0, #1
 80057b8:	f7fa fea4 	bl	8000504 <__aeabi_ui2d>
 80057bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057be:	4680      	mov	r8, r0
 80057c0:	4689      	mov	r9, r1
 80057c2:	bb13      	cbnz	r3, 800580a <_strtod_l+0xba2>
 80057c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057c8:	9014      	str	r0, [sp, #80]	; 0x50
 80057ca:	9315      	str	r3, [sp, #84]	; 0x54
 80057cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80057d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80057d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80057d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	930d      	str	r3, [sp, #52]	; 0x34
 80057e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80057e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80057ec:	f001 fe54 	bl	8007498 <__ulp>
 80057f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057f4:	ec53 2b10 	vmov	r2, r3, d0
 80057f8:	f7fa fefe 	bl	80005f8 <__aeabi_dmul>
 80057fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005800:	f7fa fd44 	bl	800028c <__adddf3>
 8005804:	4682      	mov	sl, r0
 8005806:	468b      	mov	fp, r1
 8005808:	e78f      	b.n	800572a <_strtod_l+0xac2>
 800580a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800580e:	e7dd      	b.n	80057cc <_strtod_l+0xb64>
 8005810:	a311      	add	r3, pc, #68	; (adr r3, 8005858 <_strtod_l+0xbf0>)
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f7fb f961 	bl	8000adc <__aeabi_dcmplt>
 800581a:	e7b4      	b.n	8005786 <_strtod_l+0xb1e>
 800581c:	2300      	movs	r3, #0
 800581e:	930e      	str	r3, [sp, #56]	; 0x38
 8005820:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005822:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	f7ff ba65 	b.w	8004cf4 <_strtod_l+0x8c>
 800582a:	2b65      	cmp	r3, #101	; 0x65
 800582c:	f43f ab5d 	beq.w	8004eea <_strtod_l+0x282>
 8005830:	2b45      	cmp	r3, #69	; 0x45
 8005832:	f43f ab5a 	beq.w	8004eea <_strtod_l+0x282>
 8005836:	2201      	movs	r2, #1
 8005838:	f7ff bb92 	b.w	8004f60 <_strtod_l+0x2f8>
 800583c:	f3af 8000 	nop.w
 8005840:	94a03595 	.word	0x94a03595
 8005844:	3fdfffff 	.word	0x3fdfffff
 8005848:	35afe535 	.word	0x35afe535
 800584c:	3fe00000 	.word	0x3fe00000
 8005850:	ffc00000 	.word	0xffc00000
 8005854:	41dfffff 	.word	0x41dfffff
 8005858:	94a03595 	.word	0x94a03595
 800585c:	3fcfffff 	.word	0x3fcfffff
 8005860:	3ff00000 	.word	0x3ff00000
 8005864:	7ff00000 	.word	0x7ff00000
 8005868:	7fe00000 	.word	0x7fe00000
 800586c:	7c9fffff 	.word	0x7c9fffff
 8005870:	3fe00000 	.word	0x3fe00000
 8005874:	bff00000 	.word	0xbff00000
 8005878:	7fefffff 	.word	0x7fefffff

0800587c <_strtod_r>:
 800587c:	4b01      	ldr	r3, [pc, #4]	; (8005884 <_strtod_r+0x8>)
 800587e:	f7ff b9f3 	b.w	8004c68 <_strtod_l>
 8005882:	bf00      	nop
 8005884:	20000070 	.word	0x20000070

08005888 <_strtol_l.isra.0>:
 8005888:	2b01      	cmp	r3, #1
 800588a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800588e:	d001      	beq.n	8005894 <_strtol_l.isra.0+0xc>
 8005890:	2b24      	cmp	r3, #36	; 0x24
 8005892:	d906      	bls.n	80058a2 <_strtol_l.isra.0+0x1a>
 8005894:	f7fe fafa 	bl	8003e8c <__errno>
 8005898:	2316      	movs	r3, #22
 800589a:	6003      	str	r3, [r0, #0]
 800589c:	2000      	movs	r0, #0
 800589e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a2:	4f3a      	ldr	r7, [pc, #232]	; (800598c <_strtol_l.isra.0+0x104>)
 80058a4:	468e      	mov	lr, r1
 80058a6:	4676      	mov	r6, lr
 80058a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80058ac:	5de5      	ldrb	r5, [r4, r7]
 80058ae:	f015 0508 	ands.w	r5, r5, #8
 80058b2:	d1f8      	bne.n	80058a6 <_strtol_l.isra.0+0x1e>
 80058b4:	2c2d      	cmp	r4, #45	; 0x2d
 80058b6:	d134      	bne.n	8005922 <_strtol_l.isra.0+0x9a>
 80058b8:	f89e 4000 	ldrb.w	r4, [lr]
 80058bc:	f04f 0801 	mov.w	r8, #1
 80058c0:	f106 0e02 	add.w	lr, r6, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d05c      	beq.n	8005982 <_strtol_l.isra.0+0xfa>
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d10c      	bne.n	80058e6 <_strtol_l.isra.0+0x5e>
 80058cc:	2c30      	cmp	r4, #48	; 0x30
 80058ce:	d10a      	bne.n	80058e6 <_strtol_l.isra.0+0x5e>
 80058d0:	f89e 4000 	ldrb.w	r4, [lr]
 80058d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80058d8:	2c58      	cmp	r4, #88	; 0x58
 80058da:	d14d      	bne.n	8005978 <_strtol_l.isra.0+0xf0>
 80058dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80058e0:	2310      	movs	r3, #16
 80058e2:	f10e 0e02 	add.w	lr, lr, #2
 80058e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80058ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80058ee:	2600      	movs	r6, #0
 80058f0:	fbbc f9f3 	udiv	r9, ip, r3
 80058f4:	4635      	mov	r5, r6
 80058f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80058fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80058fe:	2f09      	cmp	r7, #9
 8005900:	d818      	bhi.n	8005934 <_strtol_l.isra.0+0xac>
 8005902:	463c      	mov	r4, r7
 8005904:	42a3      	cmp	r3, r4
 8005906:	dd24      	ble.n	8005952 <_strtol_l.isra.0+0xca>
 8005908:	2e00      	cmp	r6, #0
 800590a:	db1f      	blt.n	800594c <_strtol_l.isra.0+0xc4>
 800590c:	45a9      	cmp	r9, r5
 800590e:	d31d      	bcc.n	800594c <_strtol_l.isra.0+0xc4>
 8005910:	d101      	bne.n	8005916 <_strtol_l.isra.0+0x8e>
 8005912:	45a2      	cmp	sl, r4
 8005914:	db1a      	blt.n	800594c <_strtol_l.isra.0+0xc4>
 8005916:	fb05 4503 	mla	r5, r5, r3, r4
 800591a:	2601      	movs	r6, #1
 800591c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005920:	e7eb      	b.n	80058fa <_strtol_l.isra.0+0x72>
 8005922:	2c2b      	cmp	r4, #43	; 0x2b
 8005924:	bf08      	it	eq
 8005926:	f89e 4000 	ldrbeq.w	r4, [lr]
 800592a:	46a8      	mov	r8, r5
 800592c:	bf08      	it	eq
 800592e:	f106 0e02 	addeq.w	lr, r6, #2
 8005932:	e7c7      	b.n	80058c4 <_strtol_l.isra.0+0x3c>
 8005934:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005938:	2f19      	cmp	r7, #25
 800593a:	d801      	bhi.n	8005940 <_strtol_l.isra.0+0xb8>
 800593c:	3c37      	subs	r4, #55	; 0x37
 800593e:	e7e1      	b.n	8005904 <_strtol_l.isra.0+0x7c>
 8005940:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005944:	2f19      	cmp	r7, #25
 8005946:	d804      	bhi.n	8005952 <_strtol_l.isra.0+0xca>
 8005948:	3c57      	subs	r4, #87	; 0x57
 800594a:	e7db      	b.n	8005904 <_strtol_l.isra.0+0x7c>
 800594c:	f04f 36ff 	mov.w	r6, #4294967295
 8005950:	e7e4      	b.n	800591c <_strtol_l.isra.0+0x94>
 8005952:	2e00      	cmp	r6, #0
 8005954:	da05      	bge.n	8005962 <_strtol_l.isra.0+0xda>
 8005956:	2322      	movs	r3, #34	; 0x22
 8005958:	6003      	str	r3, [r0, #0]
 800595a:	4665      	mov	r5, ip
 800595c:	b942      	cbnz	r2, 8005970 <_strtol_l.isra.0+0xe8>
 800595e:	4628      	mov	r0, r5
 8005960:	e79d      	b.n	800589e <_strtol_l.isra.0+0x16>
 8005962:	f1b8 0f00 	cmp.w	r8, #0
 8005966:	d000      	beq.n	800596a <_strtol_l.isra.0+0xe2>
 8005968:	426d      	negs	r5, r5
 800596a:	2a00      	cmp	r2, #0
 800596c:	d0f7      	beq.n	800595e <_strtol_l.isra.0+0xd6>
 800596e:	b10e      	cbz	r6, 8005974 <_strtol_l.isra.0+0xec>
 8005970:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005974:	6011      	str	r1, [r2, #0]
 8005976:	e7f2      	b.n	800595e <_strtol_l.isra.0+0xd6>
 8005978:	2430      	movs	r4, #48	; 0x30
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1b3      	bne.n	80058e6 <_strtol_l.isra.0+0x5e>
 800597e:	2308      	movs	r3, #8
 8005980:	e7b1      	b.n	80058e6 <_strtol_l.isra.0+0x5e>
 8005982:	2c30      	cmp	r4, #48	; 0x30
 8005984:	d0a4      	beq.n	80058d0 <_strtol_l.isra.0+0x48>
 8005986:	230a      	movs	r3, #10
 8005988:	e7ad      	b.n	80058e6 <_strtol_l.isra.0+0x5e>
 800598a:	bf00      	nop
 800598c:	080097e1 	.word	0x080097e1

08005990 <_strtol_r>:
 8005990:	f7ff bf7a 	b.w	8005888 <_strtol_l.isra.0>

08005994 <quorem>:
 8005994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005998:	6903      	ldr	r3, [r0, #16]
 800599a:	690c      	ldr	r4, [r1, #16]
 800599c:	42a3      	cmp	r3, r4
 800599e:	4607      	mov	r7, r0
 80059a0:	f2c0 8081 	blt.w	8005aa6 <quorem+0x112>
 80059a4:	3c01      	subs	r4, #1
 80059a6:	f101 0814 	add.w	r8, r1, #20
 80059aa:	f100 0514 	add.w	r5, r0, #20
 80059ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059bc:	3301      	adds	r3, #1
 80059be:	429a      	cmp	r2, r3
 80059c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80059cc:	d331      	bcc.n	8005a32 <quorem+0x9e>
 80059ce:	f04f 0e00 	mov.w	lr, #0
 80059d2:	4640      	mov	r0, r8
 80059d4:	46ac      	mov	ip, r5
 80059d6:	46f2      	mov	sl, lr
 80059d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80059dc:	b293      	uxth	r3, r2
 80059de:	fb06 e303 	mla	r3, r6, r3, lr
 80059e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	ebaa 0303 	sub.w	r3, sl, r3
 80059ec:	0c12      	lsrs	r2, r2, #16
 80059ee:	f8dc a000 	ldr.w	sl, [ip]
 80059f2:	fb06 e202 	mla	r2, r6, r2, lr
 80059f6:	fa13 f38a 	uxtah	r3, r3, sl
 80059fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059fe:	fa1f fa82 	uxth.w	sl, r2
 8005a02:	f8dc 2000 	ldr.w	r2, [ip]
 8005a06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005a0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a14:	4581      	cmp	r9, r0
 8005a16:	f84c 3b04 	str.w	r3, [ip], #4
 8005a1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a1e:	d2db      	bcs.n	80059d8 <quorem+0x44>
 8005a20:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a24:	b92b      	cbnz	r3, 8005a32 <quorem+0x9e>
 8005a26:	9b01      	ldr	r3, [sp, #4]
 8005a28:	3b04      	subs	r3, #4
 8005a2a:	429d      	cmp	r5, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	d32e      	bcc.n	8005a8e <quorem+0xfa>
 8005a30:	613c      	str	r4, [r7, #16]
 8005a32:	4638      	mov	r0, r7
 8005a34:	f001 fc8c 	bl	8007350 <__mcmp>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	db24      	blt.n	8005a86 <quorem+0xf2>
 8005a3c:	3601      	adds	r6, #1
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f04f 0c00 	mov.w	ip, #0
 8005a44:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a48:	f8d0 e000 	ldr.w	lr, [r0]
 8005a4c:	b293      	uxth	r3, r2
 8005a4e:	ebac 0303 	sub.w	r3, ip, r3
 8005a52:	0c12      	lsrs	r2, r2, #16
 8005a54:	fa13 f38e 	uxtah	r3, r3, lr
 8005a58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a66:	45c1      	cmp	r9, r8
 8005a68:	f840 3b04 	str.w	r3, [r0], #4
 8005a6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a70:	d2e8      	bcs.n	8005a44 <quorem+0xb0>
 8005a72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a7a:	b922      	cbnz	r2, 8005a86 <quorem+0xf2>
 8005a7c:	3b04      	subs	r3, #4
 8005a7e:	429d      	cmp	r5, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	d30a      	bcc.n	8005a9a <quorem+0x106>
 8005a84:	613c      	str	r4, [r7, #16]
 8005a86:	4630      	mov	r0, r6
 8005a88:	b003      	add	sp, #12
 8005a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	3b04      	subs	r3, #4
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	d1cc      	bne.n	8005a30 <quorem+0x9c>
 8005a96:	3c01      	subs	r4, #1
 8005a98:	e7c7      	b.n	8005a2a <quorem+0x96>
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	3b04      	subs	r3, #4
 8005a9e:	2a00      	cmp	r2, #0
 8005aa0:	d1f0      	bne.n	8005a84 <quorem+0xf0>
 8005aa2:	3c01      	subs	r4, #1
 8005aa4:	e7eb      	b.n	8005a7e <quorem+0xea>
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	e7ee      	b.n	8005a88 <quorem+0xf4>
 8005aaa:	0000      	movs	r0, r0
 8005aac:	0000      	movs	r0, r0
	...

08005ab0 <_dtoa_r>:
 8005ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	ed2d 8b02 	vpush	{d8}
 8005ab8:	ec57 6b10 	vmov	r6, r7, d0
 8005abc:	b095      	sub	sp, #84	; 0x54
 8005abe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ac0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ac4:	9105      	str	r1, [sp, #20]
 8005ac6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005aca:	4604      	mov	r4, r0
 8005acc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ad0:	b975      	cbnz	r5, 8005af0 <_dtoa_r+0x40>
 8005ad2:	2010      	movs	r0, #16
 8005ad4:	f001 f94c 	bl	8006d70 <malloc>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6260      	str	r0, [r4, #36]	; 0x24
 8005adc:	b920      	cbnz	r0, 8005ae8 <_dtoa_r+0x38>
 8005ade:	4bb2      	ldr	r3, [pc, #712]	; (8005da8 <_dtoa_r+0x2f8>)
 8005ae0:	21ea      	movs	r1, #234	; 0xea
 8005ae2:	48b2      	ldr	r0, [pc, #712]	; (8005dac <_dtoa_r+0x2fc>)
 8005ae4:	f002 f874 	bl	8007bd0 <__assert_func>
 8005ae8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005aec:	6005      	str	r5, [r0, #0]
 8005aee:	60c5      	str	r5, [r0, #12]
 8005af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	b151      	cbz	r1, 8005b0c <_dtoa_r+0x5c>
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	604a      	str	r2, [r1, #4]
 8005afa:	2301      	movs	r3, #1
 8005afc:	4093      	lsls	r3, r2
 8005afe:	608b      	str	r3, [r1, #8]
 8005b00:	4620      	mov	r0, r4
 8005b02:	f001 f99d 	bl	8006e40 <_Bfree>
 8005b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	1e3b      	subs	r3, r7, #0
 8005b0e:	bfb9      	ittee	lt
 8005b10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b14:	9303      	strlt	r3, [sp, #12]
 8005b16:	2300      	movge	r3, #0
 8005b18:	f8c8 3000 	strge.w	r3, [r8]
 8005b1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005b20:	4ba3      	ldr	r3, [pc, #652]	; (8005db0 <_dtoa_r+0x300>)
 8005b22:	bfbc      	itt	lt
 8005b24:	2201      	movlt	r2, #1
 8005b26:	f8c8 2000 	strlt.w	r2, [r8]
 8005b2a:	ea33 0309 	bics.w	r3, r3, r9
 8005b2e:	d11b      	bne.n	8005b68 <_dtoa_r+0xb8>
 8005b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b32:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b3c:	4333      	orrs	r3, r6
 8005b3e:	f000 857a 	beq.w	8006636 <_dtoa_r+0xb86>
 8005b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b44:	b963      	cbnz	r3, 8005b60 <_dtoa_r+0xb0>
 8005b46:	4b9b      	ldr	r3, [pc, #620]	; (8005db4 <_dtoa_r+0x304>)
 8005b48:	e024      	b.n	8005b94 <_dtoa_r+0xe4>
 8005b4a:	4b9b      	ldr	r3, [pc, #620]	; (8005db8 <_dtoa_r+0x308>)
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	3308      	adds	r3, #8
 8005b50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	9800      	ldr	r0, [sp, #0]
 8005b56:	b015      	add	sp, #84	; 0x54
 8005b58:	ecbd 8b02 	vpop	{d8}
 8005b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b60:	4b94      	ldr	r3, [pc, #592]	; (8005db4 <_dtoa_r+0x304>)
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	3303      	adds	r3, #3
 8005b66:	e7f3      	b.n	8005b50 <_dtoa_r+0xa0>
 8005b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	ec51 0b17 	vmov	r0, r1, d7
 8005b72:	2300      	movs	r3, #0
 8005b74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005b78:	f7fa ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	b158      	cbz	r0, 8005b98 <_dtoa_r+0xe8>
 8005b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b82:	2301      	movs	r3, #1
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8551 	beq.w	8006630 <_dtoa_r+0xb80>
 8005b8e:	488b      	ldr	r0, [pc, #556]	; (8005dbc <_dtoa_r+0x30c>)
 8005b90:	6018      	str	r0, [r3, #0]
 8005b92:	1e43      	subs	r3, r0, #1
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	e7dd      	b.n	8005b54 <_dtoa_r+0xa4>
 8005b98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005b9c:	aa12      	add	r2, sp, #72	; 0x48
 8005b9e:	a913      	add	r1, sp, #76	; 0x4c
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f001 fcf5 	bl	8007590 <__d2b>
 8005ba6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005baa:	4683      	mov	fp, r0
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	d07c      	beq.n	8005caa <_dtoa_r+0x1fa>
 8005bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bb2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005bbe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bca:	4b7d      	ldr	r3, [pc, #500]	; (8005dc0 <_dtoa_r+0x310>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4630      	mov	r0, r6
 8005bd0:	4639      	mov	r1, r7
 8005bd2:	f7fa fb59 	bl	8000288 <__aeabi_dsub>
 8005bd6:	a36e      	add	r3, pc, #440	; (adr r3, 8005d90 <_dtoa_r+0x2e0>)
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f7fa fd0c 	bl	80005f8 <__aeabi_dmul>
 8005be0:	a36d      	add	r3, pc, #436	; (adr r3, 8005d98 <_dtoa_r+0x2e8>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa fb51 	bl	800028c <__adddf3>
 8005bea:	4606      	mov	r6, r0
 8005bec:	4628      	mov	r0, r5
 8005bee:	460f      	mov	r7, r1
 8005bf0:	f7fa fc98 	bl	8000524 <__aeabi_i2d>
 8005bf4:	a36a      	add	r3, pc, #424	; (adr r3, 8005da0 <_dtoa_r+0x2f0>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f7fa fcfd 	bl	80005f8 <__aeabi_dmul>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4630      	mov	r0, r6
 8005c04:	4639      	mov	r1, r7
 8005c06:	f7fa fb41 	bl	800028c <__adddf3>
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	460f      	mov	r7, r1
 8005c0e:	f7fa ffa3 	bl	8000b58 <__aeabi_d2iz>
 8005c12:	2200      	movs	r2, #0
 8005c14:	4682      	mov	sl, r0
 8005c16:	2300      	movs	r3, #0
 8005c18:	4630      	mov	r0, r6
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	f7fa ff5e 	bl	8000adc <__aeabi_dcmplt>
 8005c20:	b148      	cbz	r0, 8005c36 <_dtoa_r+0x186>
 8005c22:	4650      	mov	r0, sl
 8005c24:	f7fa fc7e 	bl	8000524 <__aeabi_i2d>
 8005c28:	4632      	mov	r2, r6
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	f7fa ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c30:	b908      	cbnz	r0, 8005c36 <_dtoa_r+0x186>
 8005c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c36:	f1ba 0f16 	cmp.w	sl, #22
 8005c3a:	d854      	bhi.n	8005ce6 <_dtoa_r+0x236>
 8005c3c:	4b61      	ldr	r3, [pc, #388]	; (8005dc4 <_dtoa_r+0x314>)
 8005c3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c4a:	f7fa ff47 	bl	8000adc <__aeabi_dcmplt>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d04b      	beq.n	8005cea <_dtoa_r+0x23a>
 8005c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c56:	2300      	movs	r3, #0
 8005c58:	930e      	str	r3, [sp, #56]	; 0x38
 8005c5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c5c:	1b5d      	subs	r5, r3, r5
 8005c5e:	1e6b      	subs	r3, r5, #1
 8005c60:	9304      	str	r3, [sp, #16]
 8005c62:	bf43      	ittte	mi
 8005c64:	2300      	movmi	r3, #0
 8005c66:	f1c5 0801 	rsbmi	r8, r5, #1
 8005c6a:	9304      	strmi	r3, [sp, #16]
 8005c6c:	f04f 0800 	movpl.w	r8, #0
 8005c70:	f1ba 0f00 	cmp.w	sl, #0
 8005c74:	db3b      	blt.n	8005cee <_dtoa_r+0x23e>
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005c7c:	4453      	add	r3, sl
 8005c7e:	9304      	str	r3, [sp, #16]
 8005c80:	2300      	movs	r3, #0
 8005c82:	9306      	str	r3, [sp, #24]
 8005c84:	9b05      	ldr	r3, [sp, #20]
 8005c86:	2b09      	cmp	r3, #9
 8005c88:	d869      	bhi.n	8005d5e <_dtoa_r+0x2ae>
 8005c8a:	2b05      	cmp	r3, #5
 8005c8c:	bfc4      	itt	gt
 8005c8e:	3b04      	subgt	r3, #4
 8005c90:	9305      	strgt	r3, [sp, #20]
 8005c92:	9b05      	ldr	r3, [sp, #20]
 8005c94:	f1a3 0302 	sub.w	r3, r3, #2
 8005c98:	bfcc      	ite	gt
 8005c9a:	2500      	movgt	r5, #0
 8005c9c:	2501      	movle	r5, #1
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d869      	bhi.n	8005d76 <_dtoa_r+0x2c6>
 8005ca2:	e8df f003 	tbb	[pc, r3]
 8005ca6:	4e2c      	.short	0x4e2c
 8005ca8:	5a4c      	.short	0x5a4c
 8005caa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005cae:	441d      	add	r5, r3
 8005cb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	bfc1      	itttt	gt
 8005cb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cbc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005cc0:	fa09 f303 	lslgt.w	r3, r9, r3
 8005cc4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005cc8:	bfda      	itte	le
 8005cca:	f1c3 0320 	rsble	r3, r3, #32
 8005cce:	fa06 f003 	lslle.w	r0, r6, r3
 8005cd2:	4318      	orrgt	r0, r3
 8005cd4:	f7fa fc16 	bl	8000504 <__aeabi_ui2d>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4606      	mov	r6, r0
 8005cdc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ce0:	3d01      	subs	r5, #1
 8005ce2:	9310      	str	r3, [sp, #64]	; 0x40
 8005ce4:	e771      	b.n	8005bca <_dtoa_r+0x11a>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e7b6      	b.n	8005c58 <_dtoa_r+0x1a8>
 8005cea:	900e      	str	r0, [sp, #56]	; 0x38
 8005cec:	e7b5      	b.n	8005c5a <_dtoa_r+0x1aa>
 8005cee:	f1ca 0300 	rsb	r3, sl, #0
 8005cf2:	9306      	str	r3, [sp, #24]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	eba8 080a 	sub.w	r8, r8, sl
 8005cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8005cfc:	e7c2      	b.n	8005c84 <_dtoa_r+0x1d4>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	9308      	str	r3, [sp, #32]
 8005d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	dc39      	bgt.n	8005d7c <_dtoa_r+0x2cc>
 8005d08:	f04f 0901 	mov.w	r9, #1
 8005d0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d10:	464b      	mov	r3, r9
 8005d12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005d16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d18:	2200      	movs	r2, #0
 8005d1a:	6042      	str	r2, [r0, #4]
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	f102 0614 	add.w	r6, r2, #20
 8005d22:	429e      	cmp	r6, r3
 8005d24:	6841      	ldr	r1, [r0, #4]
 8005d26:	d92f      	bls.n	8005d88 <_dtoa_r+0x2d8>
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f001 f849 	bl	8006dc0 <_Balloc>
 8005d2e:	9000      	str	r0, [sp, #0]
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d14b      	bne.n	8005dcc <_dtoa_r+0x31c>
 8005d34:	4b24      	ldr	r3, [pc, #144]	; (8005dc8 <_dtoa_r+0x318>)
 8005d36:	4602      	mov	r2, r0
 8005d38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d3c:	e6d1      	b.n	8005ae2 <_dtoa_r+0x32>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e7de      	b.n	8005d00 <_dtoa_r+0x250>
 8005d42:	2300      	movs	r3, #0
 8005d44:	9308      	str	r3, [sp, #32]
 8005d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d48:	eb0a 0903 	add.w	r9, sl, r3
 8005d4c:	f109 0301 	add.w	r3, r9, #1
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	9301      	str	r3, [sp, #4]
 8005d54:	bfb8      	it	lt
 8005d56:	2301      	movlt	r3, #1
 8005d58:	e7dd      	b.n	8005d16 <_dtoa_r+0x266>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e7f2      	b.n	8005d44 <_dtoa_r+0x294>
 8005d5e:	2501      	movs	r5, #1
 8005d60:	2300      	movs	r3, #0
 8005d62:	9305      	str	r3, [sp, #20]
 8005d64:	9508      	str	r5, [sp, #32]
 8005d66:	f04f 39ff 	mov.w	r9, #4294967295
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d70:	2312      	movs	r3, #18
 8005d72:	9209      	str	r2, [sp, #36]	; 0x24
 8005d74:	e7cf      	b.n	8005d16 <_dtoa_r+0x266>
 8005d76:	2301      	movs	r3, #1
 8005d78:	9308      	str	r3, [sp, #32]
 8005d7a:	e7f4      	b.n	8005d66 <_dtoa_r+0x2b6>
 8005d7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005d80:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d84:	464b      	mov	r3, r9
 8005d86:	e7c6      	b.n	8005d16 <_dtoa_r+0x266>
 8005d88:	3101      	adds	r1, #1
 8005d8a:	6041      	str	r1, [r0, #4]
 8005d8c:	0052      	lsls	r2, r2, #1
 8005d8e:	e7c6      	b.n	8005d1e <_dtoa_r+0x26e>
 8005d90:	636f4361 	.word	0x636f4361
 8005d94:	3fd287a7 	.word	0x3fd287a7
 8005d98:	8b60c8b3 	.word	0x8b60c8b3
 8005d9c:	3fc68a28 	.word	0x3fc68a28
 8005da0:	509f79fb 	.word	0x509f79fb
 8005da4:	3fd34413 	.word	0x3fd34413
 8005da8:	080098ee 	.word	0x080098ee
 8005dac:	08009905 	.word	0x08009905
 8005db0:	7ff00000 	.word	0x7ff00000
 8005db4:	080098ea 	.word	0x080098ea
 8005db8:	080098e1 	.word	0x080098e1
 8005dbc:	08009765 	.word	0x08009765
 8005dc0:	3ff80000 	.word	0x3ff80000
 8005dc4:	08009a80 	.word	0x08009a80
 8005dc8:	08009964 	.word	0x08009964
 8005dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dce:	9a00      	ldr	r2, [sp, #0]
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	9b01      	ldr	r3, [sp, #4]
 8005dd4:	2b0e      	cmp	r3, #14
 8005dd6:	f200 80ad 	bhi.w	8005f34 <_dtoa_r+0x484>
 8005dda:	2d00      	cmp	r5, #0
 8005ddc:	f000 80aa 	beq.w	8005f34 <_dtoa_r+0x484>
 8005de0:	f1ba 0f00 	cmp.w	sl, #0
 8005de4:	dd36      	ble.n	8005e54 <_dtoa_r+0x3a4>
 8005de6:	4ac3      	ldr	r2, [pc, #780]	; (80060f4 <_dtoa_r+0x644>)
 8005de8:	f00a 030f 	and.w	r3, sl, #15
 8005dec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005df0:	ed93 7b00 	vldr	d7, [r3]
 8005df4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005df8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005dfc:	eeb0 8a47 	vmov.f32	s16, s14
 8005e00:	eef0 8a67 	vmov.f32	s17, s15
 8005e04:	d016      	beq.n	8005e34 <_dtoa_r+0x384>
 8005e06:	4bbc      	ldr	r3, [pc, #752]	; (80060f8 <_dtoa_r+0x648>)
 8005e08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e10:	f7fa fd1c 	bl	800084c <__aeabi_ddiv>
 8005e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e18:	f007 070f 	and.w	r7, r7, #15
 8005e1c:	2503      	movs	r5, #3
 8005e1e:	4eb6      	ldr	r6, [pc, #728]	; (80060f8 <_dtoa_r+0x648>)
 8005e20:	b957      	cbnz	r7, 8005e38 <_dtoa_r+0x388>
 8005e22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e26:	ec53 2b18 	vmov	r2, r3, d8
 8005e2a:	f7fa fd0f 	bl	800084c <__aeabi_ddiv>
 8005e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e32:	e029      	b.n	8005e88 <_dtoa_r+0x3d8>
 8005e34:	2502      	movs	r5, #2
 8005e36:	e7f2      	b.n	8005e1e <_dtoa_r+0x36e>
 8005e38:	07f9      	lsls	r1, r7, #31
 8005e3a:	d508      	bpl.n	8005e4e <_dtoa_r+0x39e>
 8005e3c:	ec51 0b18 	vmov	r0, r1, d8
 8005e40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e44:	f7fa fbd8 	bl	80005f8 <__aeabi_dmul>
 8005e48:	ec41 0b18 	vmov	d8, r0, r1
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	107f      	asrs	r7, r7, #1
 8005e50:	3608      	adds	r6, #8
 8005e52:	e7e5      	b.n	8005e20 <_dtoa_r+0x370>
 8005e54:	f000 80a6 	beq.w	8005fa4 <_dtoa_r+0x4f4>
 8005e58:	f1ca 0600 	rsb	r6, sl, #0
 8005e5c:	4ba5      	ldr	r3, [pc, #660]	; (80060f4 <_dtoa_r+0x644>)
 8005e5e:	4fa6      	ldr	r7, [pc, #664]	; (80060f8 <_dtoa_r+0x648>)
 8005e60:	f006 020f 	and.w	r2, r6, #15
 8005e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e70:	f7fa fbc2 	bl	80005f8 <__aeabi_dmul>
 8005e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e78:	1136      	asrs	r6, r6, #4
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2502      	movs	r5, #2
 8005e7e:	2e00      	cmp	r6, #0
 8005e80:	f040 8085 	bne.w	8005f8e <_dtoa_r+0x4de>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1d2      	bne.n	8005e2e <_dtoa_r+0x37e>
 8005e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 808c 	beq.w	8005fa8 <_dtoa_r+0x4f8>
 8005e90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e94:	4b99      	ldr	r3, [pc, #612]	; (80060fc <_dtoa_r+0x64c>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	4630      	mov	r0, r6
 8005e9a:	4639      	mov	r1, r7
 8005e9c:	f7fa fe1e 	bl	8000adc <__aeabi_dcmplt>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	f000 8081 	beq.w	8005fa8 <_dtoa_r+0x4f8>
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d07d      	beq.n	8005fa8 <_dtoa_r+0x4f8>
 8005eac:	f1b9 0f00 	cmp.w	r9, #0
 8005eb0:	dd3c      	ble.n	8005f2c <_dtoa_r+0x47c>
 8005eb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005eb6:	9307      	str	r3, [sp, #28]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4b91      	ldr	r3, [pc, #580]	; (8006100 <_dtoa_r+0x650>)
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f7fa fb9a 	bl	80005f8 <__aeabi_dmul>
 8005ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ec8:	3501      	adds	r5, #1
 8005eca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005ece:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f7fa fb26 	bl	8000524 <__aeabi_i2d>
 8005ed8:	4632      	mov	r2, r6
 8005eda:	463b      	mov	r3, r7
 8005edc:	f7fa fb8c 	bl	80005f8 <__aeabi_dmul>
 8005ee0:	4b88      	ldr	r3, [pc, #544]	; (8006104 <_dtoa_r+0x654>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f7fa f9d2 	bl	800028c <__adddf3>
 8005ee8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef0:	9303      	str	r3, [sp, #12]
 8005ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d15c      	bne.n	8005fb2 <_dtoa_r+0x502>
 8005ef8:	4b83      	ldr	r3, [pc, #524]	; (8006108 <_dtoa_r+0x658>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	4630      	mov	r0, r6
 8005efe:	4639      	mov	r1, r7
 8005f00:	f7fa f9c2 	bl	8000288 <__aeabi_dsub>
 8005f04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f08:	4606      	mov	r6, r0
 8005f0a:	460f      	mov	r7, r1
 8005f0c:	f7fa fe04 	bl	8000b18 <__aeabi_dcmpgt>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f040 8296 	bne.w	8006442 <_dtoa_r+0x992>
 8005f16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f20:	4639      	mov	r1, r7
 8005f22:	f7fa fddb 	bl	8000adc <__aeabi_dcmplt>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	f040 8288 	bne.w	800643c <_dtoa_r+0x98c>
 8005f2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f2c0 8158 	blt.w	80061ec <_dtoa_r+0x73c>
 8005f3c:	f1ba 0f0e 	cmp.w	sl, #14
 8005f40:	f300 8154 	bgt.w	80061ec <_dtoa_r+0x73c>
 8005f44:	4b6b      	ldr	r3, [pc, #428]	; (80060f4 <_dtoa_r+0x644>)
 8005f46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f280 80e3 	bge.w	800611c <_dtoa_r+0x66c>
 8005f56:	9b01      	ldr	r3, [sp, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f300 80df 	bgt.w	800611c <_dtoa_r+0x66c>
 8005f5e:	f040 826d 	bne.w	800643c <_dtoa_r+0x98c>
 8005f62:	4b69      	ldr	r3, [pc, #420]	; (8006108 <_dtoa_r+0x658>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	4640      	mov	r0, r8
 8005f68:	4649      	mov	r1, r9
 8005f6a:	f7fa fb45 	bl	80005f8 <__aeabi_dmul>
 8005f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f72:	f7fa fdc7 	bl	8000b04 <__aeabi_dcmpge>
 8005f76:	9e01      	ldr	r6, [sp, #4]
 8005f78:	4637      	mov	r7, r6
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	f040 8243 	bne.w	8006406 <_dtoa_r+0x956>
 8005f80:	9d00      	ldr	r5, [sp, #0]
 8005f82:	2331      	movs	r3, #49	; 0x31
 8005f84:	f805 3b01 	strb.w	r3, [r5], #1
 8005f88:	f10a 0a01 	add.w	sl, sl, #1
 8005f8c:	e23f      	b.n	800640e <_dtoa_r+0x95e>
 8005f8e:	07f2      	lsls	r2, r6, #31
 8005f90:	d505      	bpl.n	8005f9e <_dtoa_r+0x4ee>
 8005f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f96:	f7fa fb2f 	bl	80005f8 <__aeabi_dmul>
 8005f9a:	3501      	adds	r5, #1
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	1076      	asrs	r6, r6, #1
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	e76c      	b.n	8005e7e <_dtoa_r+0x3ce>
 8005fa4:	2502      	movs	r5, #2
 8005fa6:	e76f      	b.n	8005e88 <_dtoa_r+0x3d8>
 8005fa8:	9b01      	ldr	r3, [sp, #4]
 8005faa:	f8cd a01c 	str.w	sl, [sp, #28]
 8005fae:	930c      	str	r3, [sp, #48]	; 0x30
 8005fb0:	e78d      	b.n	8005ece <_dtoa_r+0x41e>
 8005fb2:	9900      	ldr	r1, [sp, #0]
 8005fb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fb8:	4b4e      	ldr	r3, [pc, #312]	; (80060f4 <_dtoa_r+0x644>)
 8005fba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fbe:	4401      	add	r1, r0
 8005fc0:	9102      	str	r1, [sp, #8]
 8005fc2:	9908      	ldr	r1, [sp, #32]
 8005fc4:	eeb0 8a47 	vmov.f32	s16, s14
 8005fc8:	eef0 8a67 	vmov.f32	s17, s15
 8005fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fd4:	2900      	cmp	r1, #0
 8005fd6:	d045      	beq.n	8006064 <_dtoa_r+0x5b4>
 8005fd8:	494c      	ldr	r1, [pc, #304]	; (800610c <_dtoa_r+0x65c>)
 8005fda:	2000      	movs	r0, #0
 8005fdc:	f7fa fc36 	bl	800084c <__aeabi_ddiv>
 8005fe0:	ec53 2b18 	vmov	r2, r3, d8
 8005fe4:	f7fa f950 	bl	8000288 <__aeabi_dsub>
 8005fe8:	9d00      	ldr	r5, [sp, #0]
 8005fea:	ec41 0b18 	vmov	d8, r0, r1
 8005fee:	4639      	mov	r1, r7
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f7fa fdb1 	bl	8000b58 <__aeabi_d2iz>
 8005ff6:	900c      	str	r0, [sp, #48]	; 0x30
 8005ff8:	f7fa fa94 	bl	8000524 <__aeabi_i2d>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4630      	mov	r0, r6
 8006002:	4639      	mov	r1, r7
 8006004:	f7fa f940 	bl	8000288 <__aeabi_dsub>
 8006008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800600a:	3330      	adds	r3, #48	; 0x30
 800600c:	f805 3b01 	strb.w	r3, [r5], #1
 8006010:	ec53 2b18 	vmov	r2, r3, d8
 8006014:	4606      	mov	r6, r0
 8006016:	460f      	mov	r7, r1
 8006018:	f7fa fd60 	bl	8000adc <__aeabi_dcmplt>
 800601c:	2800      	cmp	r0, #0
 800601e:	d165      	bne.n	80060ec <_dtoa_r+0x63c>
 8006020:	4632      	mov	r2, r6
 8006022:	463b      	mov	r3, r7
 8006024:	4935      	ldr	r1, [pc, #212]	; (80060fc <_dtoa_r+0x64c>)
 8006026:	2000      	movs	r0, #0
 8006028:	f7fa f92e 	bl	8000288 <__aeabi_dsub>
 800602c:	ec53 2b18 	vmov	r2, r3, d8
 8006030:	f7fa fd54 	bl	8000adc <__aeabi_dcmplt>
 8006034:	2800      	cmp	r0, #0
 8006036:	f040 80b9 	bne.w	80061ac <_dtoa_r+0x6fc>
 800603a:	9b02      	ldr	r3, [sp, #8]
 800603c:	429d      	cmp	r5, r3
 800603e:	f43f af75 	beq.w	8005f2c <_dtoa_r+0x47c>
 8006042:	4b2f      	ldr	r3, [pc, #188]	; (8006100 <_dtoa_r+0x650>)
 8006044:	ec51 0b18 	vmov	r0, r1, d8
 8006048:	2200      	movs	r2, #0
 800604a:	f7fa fad5 	bl	80005f8 <__aeabi_dmul>
 800604e:	4b2c      	ldr	r3, [pc, #176]	; (8006100 <_dtoa_r+0x650>)
 8006050:	ec41 0b18 	vmov	d8, r0, r1
 8006054:	2200      	movs	r2, #0
 8006056:	4630      	mov	r0, r6
 8006058:	4639      	mov	r1, r7
 800605a:	f7fa facd 	bl	80005f8 <__aeabi_dmul>
 800605e:	4606      	mov	r6, r0
 8006060:	460f      	mov	r7, r1
 8006062:	e7c4      	b.n	8005fee <_dtoa_r+0x53e>
 8006064:	ec51 0b17 	vmov	r0, r1, d7
 8006068:	f7fa fac6 	bl	80005f8 <__aeabi_dmul>
 800606c:	9b02      	ldr	r3, [sp, #8]
 800606e:	9d00      	ldr	r5, [sp, #0]
 8006070:	930c      	str	r3, [sp, #48]	; 0x30
 8006072:	ec41 0b18 	vmov	d8, r0, r1
 8006076:	4639      	mov	r1, r7
 8006078:	4630      	mov	r0, r6
 800607a:	f7fa fd6d 	bl	8000b58 <__aeabi_d2iz>
 800607e:	9011      	str	r0, [sp, #68]	; 0x44
 8006080:	f7fa fa50 	bl	8000524 <__aeabi_i2d>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4630      	mov	r0, r6
 800608a:	4639      	mov	r1, r7
 800608c:	f7fa f8fc 	bl	8000288 <__aeabi_dsub>
 8006090:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006092:	3330      	adds	r3, #48	; 0x30
 8006094:	f805 3b01 	strb.w	r3, [r5], #1
 8006098:	9b02      	ldr	r3, [sp, #8]
 800609a:	429d      	cmp	r5, r3
 800609c:	4606      	mov	r6, r0
 800609e:	460f      	mov	r7, r1
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	d134      	bne.n	8006110 <_dtoa_r+0x660>
 80060a6:	4b19      	ldr	r3, [pc, #100]	; (800610c <_dtoa_r+0x65c>)
 80060a8:	ec51 0b18 	vmov	r0, r1, d8
 80060ac:	f7fa f8ee 	bl	800028c <__adddf3>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4630      	mov	r0, r6
 80060b6:	4639      	mov	r1, r7
 80060b8:	f7fa fd2e 	bl	8000b18 <__aeabi_dcmpgt>
 80060bc:	2800      	cmp	r0, #0
 80060be:	d175      	bne.n	80061ac <_dtoa_r+0x6fc>
 80060c0:	ec53 2b18 	vmov	r2, r3, d8
 80060c4:	4911      	ldr	r1, [pc, #68]	; (800610c <_dtoa_r+0x65c>)
 80060c6:	2000      	movs	r0, #0
 80060c8:	f7fa f8de 	bl	8000288 <__aeabi_dsub>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4630      	mov	r0, r6
 80060d2:	4639      	mov	r1, r7
 80060d4:	f7fa fd02 	bl	8000adc <__aeabi_dcmplt>
 80060d8:	2800      	cmp	r0, #0
 80060da:	f43f af27 	beq.w	8005f2c <_dtoa_r+0x47c>
 80060de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060e0:	1e6b      	subs	r3, r5, #1
 80060e2:	930c      	str	r3, [sp, #48]	; 0x30
 80060e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060e8:	2b30      	cmp	r3, #48	; 0x30
 80060ea:	d0f8      	beq.n	80060de <_dtoa_r+0x62e>
 80060ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80060f0:	e04a      	b.n	8006188 <_dtoa_r+0x6d8>
 80060f2:	bf00      	nop
 80060f4:	08009a80 	.word	0x08009a80
 80060f8:	08009a58 	.word	0x08009a58
 80060fc:	3ff00000 	.word	0x3ff00000
 8006100:	40240000 	.word	0x40240000
 8006104:	401c0000 	.word	0x401c0000
 8006108:	40140000 	.word	0x40140000
 800610c:	3fe00000 	.word	0x3fe00000
 8006110:	4baf      	ldr	r3, [pc, #700]	; (80063d0 <_dtoa_r+0x920>)
 8006112:	f7fa fa71 	bl	80005f8 <__aeabi_dmul>
 8006116:	4606      	mov	r6, r0
 8006118:	460f      	mov	r7, r1
 800611a:	e7ac      	b.n	8006076 <_dtoa_r+0x5c6>
 800611c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006120:	9d00      	ldr	r5, [sp, #0]
 8006122:	4642      	mov	r2, r8
 8006124:	464b      	mov	r3, r9
 8006126:	4630      	mov	r0, r6
 8006128:	4639      	mov	r1, r7
 800612a:	f7fa fb8f 	bl	800084c <__aeabi_ddiv>
 800612e:	f7fa fd13 	bl	8000b58 <__aeabi_d2iz>
 8006132:	9002      	str	r0, [sp, #8]
 8006134:	f7fa f9f6 	bl	8000524 <__aeabi_i2d>
 8006138:	4642      	mov	r2, r8
 800613a:	464b      	mov	r3, r9
 800613c:	f7fa fa5c 	bl	80005f8 <__aeabi_dmul>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4630      	mov	r0, r6
 8006146:	4639      	mov	r1, r7
 8006148:	f7fa f89e 	bl	8000288 <__aeabi_dsub>
 800614c:	9e02      	ldr	r6, [sp, #8]
 800614e:	9f01      	ldr	r7, [sp, #4]
 8006150:	3630      	adds	r6, #48	; 0x30
 8006152:	f805 6b01 	strb.w	r6, [r5], #1
 8006156:	9e00      	ldr	r6, [sp, #0]
 8006158:	1bae      	subs	r6, r5, r6
 800615a:	42b7      	cmp	r7, r6
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	d137      	bne.n	80061d2 <_dtoa_r+0x722>
 8006162:	f7fa f893 	bl	800028c <__adddf3>
 8006166:	4642      	mov	r2, r8
 8006168:	464b      	mov	r3, r9
 800616a:	4606      	mov	r6, r0
 800616c:	460f      	mov	r7, r1
 800616e:	f7fa fcd3 	bl	8000b18 <__aeabi_dcmpgt>
 8006172:	b9c8      	cbnz	r0, 80061a8 <_dtoa_r+0x6f8>
 8006174:	4642      	mov	r2, r8
 8006176:	464b      	mov	r3, r9
 8006178:	4630      	mov	r0, r6
 800617a:	4639      	mov	r1, r7
 800617c:	f7fa fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006180:	b110      	cbz	r0, 8006188 <_dtoa_r+0x6d8>
 8006182:	9b02      	ldr	r3, [sp, #8]
 8006184:	07d9      	lsls	r1, r3, #31
 8006186:	d40f      	bmi.n	80061a8 <_dtoa_r+0x6f8>
 8006188:	4620      	mov	r0, r4
 800618a:	4659      	mov	r1, fp
 800618c:	f000 fe58 	bl	8006e40 <_Bfree>
 8006190:	2300      	movs	r3, #0
 8006192:	702b      	strb	r3, [r5, #0]
 8006194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006196:	f10a 0001 	add.w	r0, sl, #1
 800619a:	6018      	str	r0, [r3, #0]
 800619c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f43f acd8 	beq.w	8005b54 <_dtoa_r+0xa4>
 80061a4:	601d      	str	r5, [r3, #0]
 80061a6:	e4d5      	b.n	8005b54 <_dtoa_r+0xa4>
 80061a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80061ac:	462b      	mov	r3, r5
 80061ae:	461d      	mov	r5, r3
 80061b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061b4:	2a39      	cmp	r2, #57	; 0x39
 80061b6:	d108      	bne.n	80061ca <_dtoa_r+0x71a>
 80061b8:	9a00      	ldr	r2, [sp, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d1f7      	bne.n	80061ae <_dtoa_r+0x6fe>
 80061be:	9a07      	ldr	r2, [sp, #28]
 80061c0:	9900      	ldr	r1, [sp, #0]
 80061c2:	3201      	adds	r2, #1
 80061c4:	9207      	str	r2, [sp, #28]
 80061c6:	2230      	movs	r2, #48	; 0x30
 80061c8:	700a      	strb	r2, [r1, #0]
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	3201      	adds	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e78c      	b.n	80060ec <_dtoa_r+0x63c>
 80061d2:	4b7f      	ldr	r3, [pc, #508]	; (80063d0 <_dtoa_r+0x920>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	f7fa fa0f 	bl	80005f8 <__aeabi_dmul>
 80061da:	2200      	movs	r2, #0
 80061dc:	2300      	movs	r3, #0
 80061de:	4606      	mov	r6, r0
 80061e0:	460f      	mov	r7, r1
 80061e2:	f7fa fc71 	bl	8000ac8 <__aeabi_dcmpeq>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d09b      	beq.n	8006122 <_dtoa_r+0x672>
 80061ea:	e7cd      	b.n	8006188 <_dtoa_r+0x6d8>
 80061ec:	9a08      	ldr	r2, [sp, #32]
 80061ee:	2a00      	cmp	r2, #0
 80061f0:	f000 80c4 	beq.w	800637c <_dtoa_r+0x8cc>
 80061f4:	9a05      	ldr	r2, [sp, #20]
 80061f6:	2a01      	cmp	r2, #1
 80061f8:	f300 80a8 	bgt.w	800634c <_dtoa_r+0x89c>
 80061fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061fe:	2a00      	cmp	r2, #0
 8006200:	f000 80a0 	beq.w	8006344 <_dtoa_r+0x894>
 8006204:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006208:	9e06      	ldr	r6, [sp, #24]
 800620a:	4645      	mov	r5, r8
 800620c:	9a04      	ldr	r2, [sp, #16]
 800620e:	2101      	movs	r1, #1
 8006210:	441a      	add	r2, r3
 8006212:	4620      	mov	r0, r4
 8006214:	4498      	add	r8, r3
 8006216:	9204      	str	r2, [sp, #16]
 8006218:	f000 ff18 	bl	800704c <__i2b>
 800621c:	4607      	mov	r7, r0
 800621e:	2d00      	cmp	r5, #0
 8006220:	dd0b      	ble.n	800623a <_dtoa_r+0x78a>
 8006222:	9b04      	ldr	r3, [sp, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	dd08      	ble.n	800623a <_dtoa_r+0x78a>
 8006228:	42ab      	cmp	r3, r5
 800622a:	9a04      	ldr	r2, [sp, #16]
 800622c:	bfa8      	it	ge
 800622e:	462b      	movge	r3, r5
 8006230:	eba8 0803 	sub.w	r8, r8, r3
 8006234:	1aed      	subs	r5, r5, r3
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	9b06      	ldr	r3, [sp, #24]
 800623c:	b1fb      	cbz	r3, 800627e <_dtoa_r+0x7ce>
 800623e:	9b08      	ldr	r3, [sp, #32]
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 809f 	beq.w	8006384 <_dtoa_r+0x8d4>
 8006246:	2e00      	cmp	r6, #0
 8006248:	dd11      	ble.n	800626e <_dtoa_r+0x7be>
 800624a:	4639      	mov	r1, r7
 800624c:	4632      	mov	r2, r6
 800624e:	4620      	mov	r0, r4
 8006250:	f000 ffb8 	bl	80071c4 <__pow5mult>
 8006254:	465a      	mov	r2, fp
 8006256:	4601      	mov	r1, r0
 8006258:	4607      	mov	r7, r0
 800625a:	4620      	mov	r0, r4
 800625c:	f000 ff0c 	bl	8007078 <__multiply>
 8006260:	4659      	mov	r1, fp
 8006262:	9007      	str	r0, [sp, #28]
 8006264:	4620      	mov	r0, r4
 8006266:	f000 fdeb 	bl	8006e40 <_Bfree>
 800626a:	9b07      	ldr	r3, [sp, #28]
 800626c:	469b      	mov	fp, r3
 800626e:	9b06      	ldr	r3, [sp, #24]
 8006270:	1b9a      	subs	r2, r3, r6
 8006272:	d004      	beq.n	800627e <_dtoa_r+0x7ce>
 8006274:	4659      	mov	r1, fp
 8006276:	4620      	mov	r0, r4
 8006278:	f000 ffa4 	bl	80071c4 <__pow5mult>
 800627c:	4683      	mov	fp, r0
 800627e:	2101      	movs	r1, #1
 8006280:	4620      	mov	r0, r4
 8006282:	f000 fee3 	bl	800704c <__i2b>
 8006286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006288:	2b00      	cmp	r3, #0
 800628a:	4606      	mov	r6, r0
 800628c:	dd7c      	ble.n	8006388 <_dtoa_r+0x8d8>
 800628e:	461a      	mov	r2, r3
 8006290:	4601      	mov	r1, r0
 8006292:	4620      	mov	r0, r4
 8006294:	f000 ff96 	bl	80071c4 <__pow5mult>
 8006298:	9b05      	ldr	r3, [sp, #20]
 800629a:	2b01      	cmp	r3, #1
 800629c:	4606      	mov	r6, r0
 800629e:	dd76      	ble.n	800638e <_dtoa_r+0x8de>
 80062a0:	2300      	movs	r3, #0
 80062a2:	9306      	str	r3, [sp, #24]
 80062a4:	6933      	ldr	r3, [r6, #16]
 80062a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80062aa:	6918      	ldr	r0, [r3, #16]
 80062ac:	f000 fe7e 	bl	8006fac <__hi0bits>
 80062b0:	f1c0 0020 	rsb	r0, r0, #32
 80062b4:	9b04      	ldr	r3, [sp, #16]
 80062b6:	4418      	add	r0, r3
 80062b8:	f010 001f 	ands.w	r0, r0, #31
 80062bc:	f000 8086 	beq.w	80063cc <_dtoa_r+0x91c>
 80062c0:	f1c0 0320 	rsb	r3, r0, #32
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	dd7f      	ble.n	80063c8 <_dtoa_r+0x918>
 80062c8:	f1c0 001c 	rsb	r0, r0, #28
 80062cc:	9b04      	ldr	r3, [sp, #16]
 80062ce:	4403      	add	r3, r0
 80062d0:	4480      	add	r8, r0
 80062d2:	4405      	add	r5, r0
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	f1b8 0f00 	cmp.w	r8, #0
 80062da:	dd05      	ble.n	80062e8 <_dtoa_r+0x838>
 80062dc:	4659      	mov	r1, fp
 80062de:	4642      	mov	r2, r8
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 ffc9 	bl	8007278 <__lshift>
 80062e6:	4683      	mov	fp, r0
 80062e8:	9b04      	ldr	r3, [sp, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	dd05      	ble.n	80062fa <_dtoa_r+0x84a>
 80062ee:	4631      	mov	r1, r6
 80062f0:	461a      	mov	r2, r3
 80062f2:	4620      	mov	r0, r4
 80062f4:	f000 ffc0 	bl	8007278 <__lshift>
 80062f8:	4606      	mov	r6, r0
 80062fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d069      	beq.n	80063d4 <_dtoa_r+0x924>
 8006300:	4631      	mov	r1, r6
 8006302:	4658      	mov	r0, fp
 8006304:	f001 f824 	bl	8007350 <__mcmp>
 8006308:	2800      	cmp	r0, #0
 800630a:	da63      	bge.n	80063d4 <_dtoa_r+0x924>
 800630c:	2300      	movs	r3, #0
 800630e:	4659      	mov	r1, fp
 8006310:	220a      	movs	r2, #10
 8006312:	4620      	mov	r0, r4
 8006314:	f000 fdb6 	bl	8006e84 <__multadd>
 8006318:	9b08      	ldr	r3, [sp, #32]
 800631a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800631e:	4683      	mov	fp, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 818f 	beq.w	8006644 <_dtoa_r+0xb94>
 8006326:	4639      	mov	r1, r7
 8006328:	2300      	movs	r3, #0
 800632a:	220a      	movs	r2, #10
 800632c:	4620      	mov	r0, r4
 800632e:	f000 fda9 	bl	8006e84 <__multadd>
 8006332:	f1b9 0f00 	cmp.w	r9, #0
 8006336:	4607      	mov	r7, r0
 8006338:	f300 808e 	bgt.w	8006458 <_dtoa_r+0x9a8>
 800633c:	9b05      	ldr	r3, [sp, #20]
 800633e:	2b02      	cmp	r3, #2
 8006340:	dc50      	bgt.n	80063e4 <_dtoa_r+0x934>
 8006342:	e089      	b.n	8006458 <_dtoa_r+0x9a8>
 8006344:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006346:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800634a:	e75d      	b.n	8006208 <_dtoa_r+0x758>
 800634c:	9b01      	ldr	r3, [sp, #4]
 800634e:	1e5e      	subs	r6, r3, #1
 8006350:	9b06      	ldr	r3, [sp, #24]
 8006352:	42b3      	cmp	r3, r6
 8006354:	bfbf      	itttt	lt
 8006356:	9b06      	ldrlt	r3, [sp, #24]
 8006358:	9606      	strlt	r6, [sp, #24]
 800635a:	1af2      	sublt	r2, r6, r3
 800635c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800635e:	bfb6      	itet	lt
 8006360:	189b      	addlt	r3, r3, r2
 8006362:	1b9e      	subge	r6, r3, r6
 8006364:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	bfb8      	it	lt
 800636a:	2600      	movlt	r6, #0
 800636c:	2b00      	cmp	r3, #0
 800636e:	bfb5      	itete	lt
 8006370:	eba8 0503 	sublt.w	r5, r8, r3
 8006374:	9b01      	ldrge	r3, [sp, #4]
 8006376:	2300      	movlt	r3, #0
 8006378:	4645      	movge	r5, r8
 800637a:	e747      	b.n	800620c <_dtoa_r+0x75c>
 800637c:	9e06      	ldr	r6, [sp, #24]
 800637e:	9f08      	ldr	r7, [sp, #32]
 8006380:	4645      	mov	r5, r8
 8006382:	e74c      	b.n	800621e <_dtoa_r+0x76e>
 8006384:	9a06      	ldr	r2, [sp, #24]
 8006386:	e775      	b.n	8006274 <_dtoa_r+0x7c4>
 8006388:	9b05      	ldr	r3, [sp, #20]
 800638a:	2b01      	cmp	r3, #1
 800638c:	dc18      	bgt.n	80063c0 <_dtoa_r+0x910>
 800638e:	9b02      	ldr	r3, [sp, #8]
 8006390:	b9b3      	cbnz	r3, 80063c0 <_dtoa_r+0x910>
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006398:	b9a3      	cbnz	r3, 80063c4 <_dtoa_r+0x914>
 800639a:	9b03      	ldr	r3, [sp, #12]
 800639c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a0:	0d1b      	lsrs	r3, r3, #20
 80063a2:	051b      	lsls	r3, r3, #20
 80063a4:	b12b      	cbz	r3, 80063b2 <_dtoa_r+0x902>
 80063a6:	9b04      	ldr	r3, [sp, #16]
 80063a8:	3301      	adds	r3, #1
 80063aa:	9304      	str	r3, [sp, #16]
 80063ac:	f108 0801 	add.w	r8, r8, #1
 80063b0:	2301      	movs	r3, #1
 80063b2:	9306      	str	r3, [sp, #24]
 80063b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f47f af74 	bne.w	80062a4 <_dtoa_r+0x7f4>
 80063bc:	2001      	movs	r0, #1
 80063be:	e779      	b.n	80062b4 <_dtoa_r+0x804>
 80063c0:	2300      	movs	r3, #0
 80063c2:	e7f6      	b.n	80063b2 <_dtoa_r+0x902>
 80063c4:	9b02      	ldr	r3, [sp, #8]
 80063c6:	e7f4      	b.n	80063b2 <_dtoa_r+0x902>
 80063c8:	d085      	beq.n	80062d6 <_dtoa_r+0x826>
 80063ca:	4618      	mov	r0, r3
 80063cc:	301c      	adds	r0, #28
 80063ce:	e77d      	b.n	80062cc <_dtoa_r+0x81c>
 80063d0:	40240000 	.word	0x40240000
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	dc38      	bgt.n	800644c <_dtoa_r+0x99c>
 80063da:	9b05      	ldr	r3, [sp, #20]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	dd35      	ble.n	800644c <_dtoa_r+0x99c>
 80063e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80063e4:	f1b9 0f00 	cmp.w	r9, #0
 80063e8:	d10d      	bne.n	8006406 <_dtoa_r+0x956>
 80063ea:	4631      	mov	r1, r6
 80063ec:	464b      	mov	r3, r9
 80063ee:	2205      	movs	r2, #5
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 fd47 	bl	8006e84 <__multadd>
 80063f6:	4601      	mov	r1, r0
 80063f8:	4606      	mov	r6, r0
 80063fa:	4658      	mov	r0, fp
 80063fc:	f000 ffa8 	bl	8007350 <__mcmp>
 8006400:	2800      	cmp	r0, #0
 8006402:	f73f adbd 	bgt.w	8005f80 <_dtoa_r+0x4d0>
 8006406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006408:	9d00      	ldr	r5, [sp, #0]
 800640a:	ea6f 0a03 	mvn.w	sl, r3
 800640e:	f04f 0800 	mov.w	r8, #0
 8006412:	4631      	mov	r1, r6
 8006414:	4620      	mov	r0, r4
 8006416:	f000 fd13 	bl	8006e40 <_Bfree>
 800641a:	2f00      	cmp	r7, #0
 800641c:	f43f aeb4 	beq.w	8006188 <_dtoa_r+0x6d8>
 8006420:	f1b8 0f00 	cmp.w	r8, #0
 8006424:	d005      	beq.n	8006432 <_dtoa_r+0x982>
 8006426:	45b8      	cmp	r8, r7
 8006428:	d003      	beq.n	8006432 <_dtoa_r+0x982>
 800642a:	4641      	mov	r1, r8
 800642c:	4620      	mov	r0, r4
 800642e:	f000 fd07 	bl	8006e40 <_Bfree>
 8006432:	4639      	mov	r1, r7
 8006434:	4620      	mov	r0, r4
 8006436:	f000 fd03 	bl	8006e40 <_Bfree>
 800643a:	e6a5      	b.n	8006188 <_dtoa_r+0x6d8>
 800643c:	2600      	movs	r6, #0
 800643e:	4637      	mov	r7, r6
 8006440:	e7e1      	b.n	8006406 <_dtoa_r+0x956>
 8006442:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006444:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006448:	4637      	mov	r7, r6
 800644a:	e599      	b.n	8005f80 <_dtoa_r+0x4d0>
 800644c:	9b08      	ldr	r3, [sp, #32]
 800644e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80fd 	beq.w	8006652 <_dtoa_r+0xba2>
 8006458:	2d00      	cmp	r5, #0
 800645a:	dd05      	ble.n	8006468 <_dtoa_r+0x9b8>
 800645c:	4639      	mov	r1, r7
 800645e:	462a      	mov	r2, r5
 8006460:	4620      	mov	r0, r4
 8006462:	f000 ff09 	bl	8007278 <__lshift>
 8006466:	4607      	mov	r7, r0
 8006468:	9b06      	ldr	r3, [sp, #24]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d05c      	beq.n	8006528 <_dtoa_r+0xa78>
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	4620      	mov	r0, r4
 8006472:	f000 fca5 	bl	8006dc0 <_Balloc>
 8006476:	4605      	mov	r5, r0
 8006478:	b928      	cbnz	r0, 8006486 <_dtoa_r+0x9d6>
 800647a:	4b80      	ldr	r3, [pc, #512]	; (800667c <_dtoa_r+0xbcc>)
 800647c:	4602      	mov	r2, r0
 800647e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006482:	f7ff bb2e 	b.w	8005ae2 <_dtoa_r+0x32>
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	3202      	adds	r2, #2
 800648a:	0092      	lsls	r2, r2, #2
 800648c:	f107 010c 	add.w	r1, r7, #12
 8006490:	300c      	adds	r0, #12
 8006492:	f000 fc87 	bl	8006da4 <memcpy>
 8006496:	2201      	movs	r2, #1
 8006498:	4629      	mov	r1, r5
 800649a:	4620      	mov	r0, r4
 800649c:	f000 feec 	bl	8007278 <__lshift>
 80064a0:	9b00      	ldr	r3, [sp, #0]
 80064a2:	3301      	adds	r3, #1
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	444b      	add	r3, r9
 80064aa:	9307      	str	r3, [sp, #28]
 80064ac:	9b02      	ldr	r3, [sp, #8]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	46b8      	mov	r8, r7
 80064b4:	9306      	str	r3, [sp, #24]
 80064b6:	4607      	mov	r7, r0
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	4631      	mov	r1, r6
 80064bc:	3b01      	subs	r3, #1
 80064be:	4658      	mov	r0, fp
 80064c0:	9302      	str	r3, [sp, #8]
 80064c2:	f7ff fa67 	bl	8005994 <quorem>
 80064c6:	4603      	mov	r3, r0
 80064c8:	3330      	adds	r3, #48	; 0x30
 80064ca:	9004      	str	r0, [sp, #16]
 80064cc:	4641      	mov	r1, r8
 80064ce:	4658      	mov	r0, fp
 80064d0:	9308      	str	r3, [sp, #32]
 80064d2:	f000 ff3d 	bl	8007350 <__mcmp>
 80064d6:	463a      	mov	r2, r7
 80064d8:	4681      	mov	r9, r0
 80064da:	4631      	mov	r1, r6
 80064dc:	4620      	mov	r0, r4
 80064de:	f000 ff53 	bl	8007388 <__mdiff>
 80064e2:	68c2      	ldr	r2, [r0, #12]
 80064e4:	9b08      	ldr	r3, [sp, #32]
 80064e6:	4605      	mov	r5, r0
 80064e8:	bb02      	cbnz	r2, 800652c <_dtoa_r+0xa7c>
 80064ea:	4601      	mov	r1, r0
 80064ec:	4658      	mov	r0, fp
 80064ee:	f000 ff2f 	bl	8007350 <__mcmp>
 80064f2:	9b08      	ldr	r3, [sp, #32]
 80064f4:	4602      	mov	r2, r0
 80064f6:	4629      	mov	r1, r5
 80064f8:	4620      	mov	r0, r4
 80064fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80064fe:	f000 fc9f 	bl	8006e40 <_Bfree>
 8006502:	9b05      	ldr	r3, [sp, #20]
 8006504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006506:	9d01      	ldr	r5, [sp, #4]
 8006508:	ea43 0102 	orr.w	r1, r3, r2
 800650c:	9b06      	ldr	r3, [sp, #24]
 800650e:	430b      	orrs	r3, r1
 8006510:	9b08      	ldr	r3, [sp, #32]
 8006512:	d10d      	bne.n	8006530 <_dtoa_r+0xa80>
 8006514:	2b39      	cmp	r3, #57	; 0x39
 8006516:	d029      	beq.n	800656c <_dtoa_r+0xabc>
 8006518:	f1b9 0f00 	cmp.w	r9, #0
 800651c:	dd01      	ble.n	8006522 <_dtoa_r+0xa72>
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	3331      	adds	r3, #49	; 0x31
 8006522:	9a02      	ldr	r2, [sp, #8]
 8006524:	7013      	strb	r3, [r2, #0]
 8006526:	e774      	b.n	8006412 <_dtoa_r+0x962>
 8006528:	4638      	mov	r0, r7
 800652a:	e7b9      	b.n	80064a0 <_dtoa_r+0x9f0>
 800652c:	2201      	movs	r2, #1
 800652e:	e7e2      	b.n	80064f6 <_dtoa_r+0xa46>
 8006530:	f1b9 0f00 	cmp.w	r9, #0
 8006534:	db06      	blt.n	8006544 <_dtoa_r+0xa94>
 8006536:	9905      	ldr	r1, [sp, #20]
 8006538:	ea41 0909 	orr.w	r9, r1, r9
 800653c:	9906      	ldr	r1, [sp, #24]
 800653e:	ea59 0101 	orrs.w	r1, r9, r1
 8006542:	d120      	bne.n	8006586 <_dtoa_r+0xad6>
 8006544:	2a00      	cmp	r2, #0
 8006546:	ddec      	ble.n	8006522 <_dtoa_r+0xa72>
 8006548:	4659      	mov	r1, fp
 800654a:	2201      	movs	r2, #1
 800654c:	4620      	mov	r0, r4
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	f000 fe92 	bl	8007278 <__lshift>
 8006554:	4631      	mov	r1, r6
 8006556:	4683      	mov	fp, r0
 8006558:	f000 fefa 	bl	8007350 <__mcmp>
 800655c:	2800      	cmp	r0, #0
 800655e:	9b01      	ldr	r3, [sp, #4]
 8006560:	dc02      	bgt.n	8006568 <_dtoa_r+0xab8>
 8006562:	d1de      	bne.n	8006522 <_dtoa_r+0xa72>
 8006564:	07da      	lsls	r2, r3, #31
 8006566:	d5dc      	bpl.n	8006522 <_dtoa_r+0xa72>
 8006568:	2b39      	cmp	r3, #57	; 0x39
 800656a:	d1d8      	bne.n	800651e <_dtoa_r+0xa6e>
 800656c:	9a02      	ldr	r2, [sp, #8]
 800656e:	2339      	movs	r3, #57	; 0x39
 8006570:	7013      	strb	r3, [r2, #0]
 8006572:	462b      	mov	r3, r5
 8006574:	461d      	mov	r5, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800657c:	2a39      	cmp	r2, #57	; 0x39
 800657e:	d050      	beq.n	8006622 <_dtoa_r+0xb72>
 8006580:	3201      	adds	r2, #1
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	e745      	b.n	8006412 <_dtoa_r+0x962>
 8006586:	2a00      	cmp	r2, #0
 8006588:	dd03      	ble.n	8006592 <_dtoa_r+0xae2>
 800658a:	2b39      	cmp	r3, #57	; 0x39
 800658c:	d0ee      	beq.n	800656c <_dtoa_r+0xabc>
 800658e:	3301      	adds	r3, #1
 8006590:	e7c7      	b.n	8006522 <_dtoa_r+0xa72>
 8006592:	9a01      	ldr	r2, [sp, #4]
 8006594:	9907      	ldr	r1, [sp, #28]
 8006596:	f802 3c01 	strb.w	r3, [r2, #-1]
 800659a:	428a      	cmp	r2, r1
 800659c:	d02a      	beq.n	80065f4 <_dtoa_r+0xb44>
 800659e:	4659      	mov	r1, fp
 80065a0:	2300      	movs	r3, #0
 80065a2:	220a      	movs	r2, #10
 80065a4:	4620      	mov	r0, r4
 80065a6:	f000 fc6d 	bl	8006e84 <__multadd>
 80065aa:	45b8      	cmp	r8, r7
 80065ac:	4683      	mov	fp, r0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	f04f 020a 	mov.w	r2, #10
 80065b6:	4641      	mov	r1, r8
 80065b8:	4620      	mov	r0, r4
 80065ba:	d107      	bne.n	80065cc <_dtoa_r+0xb1c>
 80065bc:	f000 fc62 	bl	8006e84 <__multadd>
 80065c0:	4680      	mov	r8, r0
 80065c2:	4607      	mov	r7, r0
 80065c4:	9b01      	ldr	r3, [sp, #4]
 80065c6:	3301      	adds	r3, #1
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	e775      	b.n	80064b8 <_dtoa_r+0xa08>
 80065cc:	f000 fc5a 	bl	8006e84 <__multadd>
 80065d0:	4639      	mov	r1, r7
 80065d2:	4680      	mov	r8, r0
 80065d4:	2300      	movs	r3, #0
 80065d6:	220a      	movs	r2, #10
 80065d8:	4620      	mov	r0, r4
 80065da:	f000 fc53 	bl	8006e84 <__multadd>
 80065de:	4607      	mov	r7, r0
 80065e0:	e7f0      	b.n	80065c4 <_dtoa_r+0xb14>
 80065e2:	f1b9 0f00 	cmp.w	r9, #0
 80065e6:	9a00      	ldr	r2, [sp, #0]
 80065e8:	bfcc      	ite	gt
 80065ea:	464d      	movgt	r5, r9
 80065ec:	2501      	movle	r5, #1
 80065ee:	4415      	add	r5, r2
 80065f0:	f04f 0800 	mov.w	r8, #0
 80065f4:	4659      	mov	r1, fp
 80065f6:	2201      	movs	r2, #1
 80065f8:	4620      	mov	r0, r4
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	f000 fe3c 	bl	8007278 <__lshift>
 8006600:	4631      	mov	r1, r6
 8006602:	4683      	mov	fp, r0
 8006604:	f000 fea4 	bl	8007350 <__mcmp>
 8006608:	2800      	cmp	r0, #0
 800660a:	dcb2      	bgt.n	8006572 <_dtoa_r+0xac2>
 800660c:	d102      	bne.n	8006614 <_dtoa_r+0xb64>
 800660e:	9b01      	ldr	r3, [sp, #4]
 8006610:	07db      	lsls	r3, r3, #31
 8006612:	d4ae      	bmi.n	8006572 <_dtoa_r+0xac2>
 8006614:	462b      	mov	r3, r5
 8006616:	461d      	mov	r5, r3
 8006618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800661c:	2a30      	cmp	r2, #48	; 0x30
 800661e:	d0fa      	beq.n	8006616 <_dtoa_r+0xb66>
 8006620:	e6f7      	b.n	8006412 <_dtoa_r+0x962>
 8006622:	9a00      	ldr	r2, [sp, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d1a5      	bne.n	8006574 <_dtoa_r+0xac4>
 8006628:	f10a 0a01 	add.w	sl, sl, #1
 800662c:	2331      	movs	r3, #49	; 0x31
 800662e:	e779      	b.n	8006524 <_dtoa_r+0xa74>
 8006630:	4b13      	ldr	r3, [pc, #76]	; (8006680 <_dtoa_r+0xbd0>)
 8006632:	f7ff baaf 	b.w	8005b94 <_dtoa_r+0xe4>
 8006636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006638:	2b00      	cmp	r3, #0
 800663a:	f47f aa86 	bne.w	8005b4a <_dtoa_r+0x9a>
 800663e:	4b11      	ldr	r3, [pc, #68]	; (8006684 <_dtoa_r+0xbd4>)
 8006640:	f7ff baa8 	b.w	8005b94 <_dtoa_r+0xe4>
 8006644:	f1b9 0f00 	cmp.w	r9, #0
 8006648:	dc03      	bgt.n	8006652 <_dtoa_r+0xba2>
 800664a:	9b05      	ldr	r3, [sp, #20]
 800664c:	2b02      	cmp	r3, #2
 800664e:	f73f aec9 	bgt.w	80063e4 <_dtoa_r+0x934>
 8006652:	9d00      	ldr	r5, [sp, #0]
 8006654:	4631      	mov	r1, r6
 8006656:	4658      	mov	r0, fp
 8006658:	f7ff f99c 	bl	8005994 <quorem>
 800665c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006660:	f805 3b01 	strb.w	r3, [r5], #1
 8006664:	9a00      	ldr	r2, [sp, #0]
 8006666:	1aaa      	subs	r2, r5, r2
 8006668:	4591      	cmp	r9, r2
 800666a:	ddba      	ble.n	80065e2 <_dtoa_r+0xb32>
 800666c:	4659      	mov	r1, fp
 800666e:	2300      	movs	r3, #0
 8006670:	220a      	movs	r2, #10
 8006672:	4620      	mov	r0, r4
 8006674:	f000 fc06 	bl	8006e84 <__multadd>
 8006678:	4683      	mov	fp, r0
 800667a:	e7eb      	b.n	8006654 <_dtoa_r+0xba4>
 800667c:	08009964 	.word	0x08009964
 8006680:	08009764 	.word	0x08009764
 8006684:	080098e1 	.word	0x080098e1

08006688 <rshift>:
 8006688:	6903      	ldr	r3, [r0, #16]
 800668a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800668e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006692:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006696:	f100 0414 	add.w	r4, r0, #20
 800669a:	dd45      	ble.n	8006728 <rshift+0xa0>
 800669c:	f011 011f 	ands.w	r1, r1, #31
 80066a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80066a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80066a8:	d10c      	bne.n	80066c4 <rshift+0x3c>
 80066aa:	f100 0710 	add.w	r7, r0, #16
 80066ae:	4629      	mov	r1, r5
 80066b0:	42b1      	cmp	r1, r6
 80066b2:	d334      	bcc.n	800671e <rshift+0x96>
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	1eea      	subs	r2, r5, #3
 80066ba:	4296      	cmp	r6, r2
 80066bc:	bf38      	it	cc
 80066be:	2300      	movcc	r3, #0
 80066c0:	4423      	add	r3, r4
 80066c2:	e015      	b.n	80066f0 <rshift+0x68>
 80066c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80066c8:	f1c1 0820 	rsb	r8, r1, #32
 80066cc:	40cf      	lsrs	r7, r1
 80066ce:	f105 0e04 	add.w	lr, r5, #4
 80066d2:	46a1      	mov	r9, r4
 80066d4:	4576      	cmp	r6, lr
 80066d6:	46f4      	mov	ip, lr
 80066d8:	d815      	bhi.n	8006706 <rshift+0x7e>
 80066da:	1a9b      	subs	r3, r3, r2
 80066dc:	009a      	lsls	r2, r3, #2
 80066de:	3a04      	subs	r2, #4
 80066e0:	3501      	adds	r5, #1
 80066e2:	42ae      	cmp	r6, r5
 80066e4:	bf38      	it	cc
 80066e6:	2200      	movcc	r2, #0
 80066e8:	18a3      	adds	r3, r4, r2
 80066ea:	50a7      	str	r7, [r4, r2]
 80066ec:	b107      	cbz	r7, 80066f0 <rshift+0x68>
 80066ee:	3304      	adds	r3, #4
 80066f0:	1b1a      	subs	r2, r3, r4
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80066f8:	bf08      	it	eq
 80066fa:	2300      	moveq	r3, #0
 80066fc:	6102      	str	r2, [r0, #16]
 80066fe:	bf08      	it	eq
 8006700:	6143      	streq	r3, [r0, #20]
 8006702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006706:	f8dc c000 	ldr.w	ip, [ip]
 800670a:	fa0c fc08 	lsl.w	ip, ip, r8
 800670e:	ea4c 0707 	orr.w	r7, ip, r7
 8006712:	f849 7b04 	str.w	r7, [r9], #4
 8006716:	f85e 7b04 	ldr.w	r7, [lr], #4
 800671a:	40cf      	lsrs	r7, r1
 800671c:	e7da      	b.n	80066d4 <rshift+0x4c>
 800671e:	f851 cb04 	ldr.w	ip, [r1], #4
 8006722:	f847 cf04 	str.w	ip, [r7, #4]!
 8006726:	e7c3      	b.n	80066b0 <rshift+0x28>
 8006728:	4623      	mov	r3, r4
 800672a:	e7e1      	b.n	80066f0 <rshift+0x68>

0800672c <__hexdig_fun>:
 800672c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006730:	2b09      	cmp	r3, #9
 8006732:	d802      	bhi.n	800673a <__hexdig_fun+0xe>
 8006734:	3820      	subs	r0, #32
 8006736:	b2c0      	uxtb	r0, r0
 8006738:	4770      	bx	lr
 800673a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800673e:	2b05      	cmp	r3, #5
 8006740:	d801      	bhi.n	8006746 <__hexdig_fun+0x1a>
 8006742:	3847      	subs	r0, #71	; 0x47
 8006744:	e7f7      	b.n	8006736 <__hexdig_fun+0xa>
 8006746:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800674a:	2b05      	cmp	r3, #5
 800674c:	d801      	bhi.n	8006752 <__hexdig_fun+0x26>
 800674e:	3827      	subs	r0, #39	; 0x27
 8006750:	e7f1      	b.n	8006736 <__hexdig_fun+0xa>
 8006752:	2000      	movs	r0, #0
 8006754:	4770      	bx	lr
	...

08006758 <__gethex>:
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	ed2d 8b02 	vpush	{d8}
 8006760:	b089      	sub	sp, #36	; 0x24
 8006762:	ee08 0a10 	vmov	s16, r0
 8006766:	9304      	str	r3, [sp, #16]
 8006768:	4bbc      	ldr	r3, [pc, #752]	; (8006a5c <__gethex+0x304>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	4618      	mov	r0, r3
 8006770:	468b      	mov	fp, r1
 8006772:	4690      	mov	r8, r2
 8006774:	f7f9 fd2c 	bl	80001d0 <strlen>
 8006778:	9b01      	ldr	r3, [sp, #4]
 800677a:	f8db 2000 	ldr.w	r2, [fp]
 800677e:	4403      	add	r3, r0
 8006780:	4682      	mov	sl, r0
 8006782:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006786:	9305      	str	r3, [sp, #20]
 8006788:	1c93      	adds	r3, r2, #2
 800678a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800678e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006792:	32fe      	adds	r2, #254	; 0xfe
 8006794:	18d1      	adds	r1, r2, r3
 8006796:	461f      	mov	r7, r3
 8006798:	f813 0b01 	ldrb.w	r0, [r3], #1
 800679c:	9100      	str	r1, [sp, #0]
 800679e:	2830      	cmp	r0, #48	; 0x30
 80067a0:	d0f8      	beq.n	8006794 <__gethex+0x3c>
 80067a2:	f7ff ffc3 	bl	800672c <__hexdig_fun>
 80067a6:	4604      	mov	r4, r0
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d13a      	bne.n	8006822 <__gethex+0xca>
 80067ac:	9901      	ldr	r1, [sp, #4]
 80067ae:	4652      	mov	r2, sl
 80067b0:	4638      	mov	r0, r7
 80067b2:	f001 f9ed 	bl	8007b90 <strncmp>
 80067b6:	4605      	mov	r5, r0
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d168      	bne.n	800688e <__gethex+0x136>
 80067bc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80067c0:	eb07 060a 	add.w	r6, r7, sl
 80067c4:	f7ff ffb2 	bl	800672c <__hexdig_fun>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d062      	beq.n	8006892 <__gethex+0x13a>
 80067cc:	4633      	mov	r3, r6
 80067ce:	7818      	ldrb	r0, [r3, #0]
 80067d0:	2830      	cmp	r0, #48	; 0x30
 80067d2:	461f      	mov	r7, r3
 80067d4:	f103 0301 	add.w	r3, r3, #1
 80067d8:	d0f9      	beq.n	80067ce <__gethex+0x76>
 80067da:	f7ff ffa7 	bl	800672c <__hexdig_fun>
 80067de:	2301      	movs	r3, #1
 80067e0:	fab0 f480 	clz	r4, r0
 80067e4:	0964      	lsrs	r4, r4, #5
 80067e6:	4635      	mov	r5, r6
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	463a      	mov	r2, r7
 80067ec:	4616      	mov	r6, r2
 80067ee:	3201      	adds	r2, #1
 80067f0:	7830      	ldrb	r0, [r6, #0]
 80067f2:	f7ff ff9b 	bl	800672c <__hexdig_fun>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d1f8      	bne.n	80067ec <__gethex+0x94>
 80067fa:	9901      	ldr	r1, [sp, #4]
 80067fc:	4652      	mov	r2, sl
 80067fe:	4630      	mov	r0, r6
 8006800:	f001 f9c6 	bl	8007b90 <strncmp>
 8006804:	b980      	cbnz	r0, 8006828 <__gethex+0xd0>
 8006806:	b94d      	cbnz	r5, 800681c <__gethex+0xc4>
 8006808:	eb06 050a 	add.w	r5, r6, sl
 800680c:	462a      	mov	r2, r5
 800680e:	4616      	mov	r6, r2
 8006810:	3201      	adds	r2, #1
 8006812:	7830      	ldrb	r0, [r6, #0]
 8006814:	f7ff ff8a 	bl	800672c <__hexdig_fun>
 8006818:	2800      	cmp	r0, #0
 800681a:	d1f8      	bne.n	800680e <__gethex+0xb6>
 800681c:	1bad      	subs	r5, r5, r6
 800681e:	00ad      	lsls	r5, r5, #2
 8006820:	e004      	b.n	800682c <__gethex+0xd4>
 8006822:	2400      	movs	r4, #0
 8006824:	4625      	mov	r5, r4
 8006826:	e7e0      	b.n	80067ea <__gethex+0x92>
 8006828:	2d00      	cmp	r5, #0
 800682a:	d1f7      	bne.n	800681c <__gethex+0xc4>
 800682c:	7833      	ldrb	r3, [r6, #0]
 800682e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006832:	2b50      	cmp	r3, #80	; 0x50
 8006834:	d13b      	bne.n	80068ae <__gethex+0x156>
 8006836:	7873      	ldrb	r3, [r6, #1]
 8006838:	2b2b      	cmp	r3, #43	; 0x2b
 800683a:	d02c      	beq.n	8006896 <__gethex+0x13e>
 800683c:	2b2d      	cmp	r3, #45	; 0x2d
 800683e:	d02e      	beq.n	800689e <__gethex+0x146>
 8006840:	1c71      	adds	r1, r6, #1
 8006842:	f04f 0900 	mov.w	r9, #0
 8006846:	7808      	ldrb	r0, [r1, #0]
 8006848:	f7ff ff70 	bl	800672c <__hexdig_fun>
 800684c:	1e43      	subs	r3, r0, #1
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b18      	cmp	r3, #24
 8006852:	d82c      	bhi.n	80068ae <__gethex+0x156>
 8006854:	f1a0 0210 	sub.w	r2, r0, #16
 8006858:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800685c:	f7ff ff66 	bl	800672c <__hexdig_fun>
 8006860:	1e43      	subs	r3, r0, #1
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b18      	cmp	r3, #24
 8006866:	d91d      	bls.n	80068a4 <__gethex+0x14c>
 8006868:	f1b9 0f00 	cmp.w	r9, #0
 800686c:	d000      	beq.n	8006870 <__gethex+0x118>
 800686e:	4252      	negs	r2, r2
 8006870:	4415      	add	r5, r2
 8006872:	f8cb 1000 	str.w	r1, [fp]
 8006876:	b1e4      	cbz	r4, 80068b2 <__gethex+0x15a>
 8006878:	9b00      	ldr	r3, [sp, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	bf14      	ite	ne
 800687e:	2700      	movne	r7, #0
 8006880:	2706      	moveq	r7, #6
 8006882:	4638      	mov	r0, r7
 8006884:	b009      	add	sp, #36	; 0x24
 8006886:	ecbd 8b02 	vpop	{d8}
 800688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688e:	463e      	mov	r6, r7
 8006890:	4625      	mov	r5, r4
 8006892:	2401      	movs	r4, #1
 8006894:	e7ca      	b.n	800682c <__gethex+0xd4>
 8006896:	f04f 0900 	mov.w	r9, #0
 800689a:	1cb1      	adds	r1, r6, #2
 800689c:	e7d3      	b.n	8006846 <__gethex+0xee>
 800689e:	f04f 0901 	mov.w	r9, #1
 80068a2:	e7fa      	b.n	800689a <__gethex+0x142>
 80068a4:	230a      	movs	r3, #10
 80068a6:	fb03 0202 	mla	r2, r3, r2, r0
 80068aa:	3a10      	subs	r2, #16
 80068ac:	e7d4      	b.n	8006858 <__gethex+0x100>
 80068ae:	4631      	mov	r1, r6
 80068b0:	e7df      	b.n	8006872 <__gethex+0x11a>
 80068b2:	1bf3      	subs	r3, r6, r7
 80068b4:	3b01      	subs	r3, #1
 80068b6:	4621      	mov	r1, r4
 80068b8:	2b07      	cmp	r3, #7
 80068ba:	dc0b      	bgt.n	80068d4 <__gethex+0x17c>
 80068bc:	ee18 0a10 	vmov	r0, s16
 80068c0:	f000 fa7e 	bl	8006dc0 <_Balloc>
 80068c4:	4604      	mov	r4, r0
 80068c6:	b940      	cbnz	r0, 80068da <__gethex+0x182>
 80068c8:	4b65      	ldr	r3, [pc, #404]	; (8006a60 <__gethex+0x308>)
 80068ca:	4602      	mov	r2, r0
 80068cc:	21de      	movs	r1, #222	; 0xde
 80068ce:	4865      	ldr	r0, [pc, #404]	; (8006a64 <__gethex+0x30c>)
 80068d0:	f001 f97e 	bl	8007bd0 <__assert_func>
 80068d4:	3101      	adds	r1, #1
 80068d6:	105b      	asrs	r3, r3, #1
 80068d8:	e7ee      	b.n	80068b8 <__gethex+0x160>
 80068da:	f100 0914 	add.w	r9, r0, #20
 80068de:	f04f 0b00 	mov.w	fp, #0
 80068e2:	f1ca 0301 	rsb	r3, sl, #1
 80068e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80068ea:	f8cd b000 	str.w	fp, [sp]
 80068ee:	9306      	str	r3, [sp, #24]
 80068f0:	42b7      	cmp	r7, r6
 80068f2:	d340      	bcc.n	8006976 <__gethex+0x21e>
 80068f4:	9802      	ldr	r0, [sp, #8]
 80068f6:	9b00      	ldr	r3, [sp, #0]
 80068f8:	f840 3b04 	str.w	r3, [r0], #4
 80068fc:	eba0 0009 	sub.w	r0, r0, r9
 8006900:	1080      	asrs	r0, r0, #2
 8006902:	0146      	lsls	r6, r0, #5
 8006904:	6120      	str	r0, [r4, #16]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fb50 	bl	8006fac <__hi0bits>
 800690c:	1a30      	subs	r0, r6, r0
 800690e:	f8d8 6000 	ldr.w	r6, [r8]
 8006912:	42b0      	cmp	r0, r6
 8006914:	dd63      	ble.n	80069de <__gethex+0x286>
 8006916:	1b87      	subs	r7, r0, r6
 8006918:	4639      	mov	r1, r7
 800691a:	4620      	mov	r0, r4
 800691c:	f000 feea 	bl	80076f4 <__any_on>
 8006920:	4682      	mov	sl, r0
 8006922:	b1a8      	cbz	r0, 8006950 <__gethex+0x1f8>
 8006924:	1e7b      	subs	r3, r7, #1
 8006926:	1159      	asrs	r1, r3, #5
 8006928:	f003 021f 	and.w	r2, r3, #31
 800692c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006930:	f04f 0a01 	mov.w	sl, #1
 8006934:	fa0a f202 	lsl.w	r2, sl, r2
 8006938:	420a      	tst	r2, r1
 800693a:	d009      	beq.n	8006950 <__gethex+0x1f8>
 800693c:	4553      	cmp	r3, sl
 800693e:	dd05      	ble.n	800694c <__gethex+0x1f4>
 8006940:	1eb9      	subs	r1, r7, #2
 8006942:	4620      	mov	r0, r4
 8006944:	f000 fed6 	bl	80076f4 <__any_on>
 8006948:	2800      	cmp	r0, #0
 800694a:	d145      	bne.n	80069d8 <__gethex+0x280>
 800694c:	f04f 0a02 	mov.w	sl, #2
 8006950:	4639      	mov	r1, r7
 8006952:	4620      	mov	r0, r4
 8006954:	f7ff fe98 	bl	8006688 <rshift>
 8006958:	443d      	add	r5, r7
 800695a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800695e:	42ab      	cmp	r3, r5
 8006960:	da4c      	bge.n	80069fc <__gethex+0x2a4>
 8006962:	ee18 0a10 	vmov	r0, s16
 8006966:	4621      	mov	r1, r4
 8006968:	f000 fa6a 	bl	8006e40 <_Bfree>
 800696c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800696e:	2300      	movs	r3, #0
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	27a3      	movs	r7, #163	; 0xa3
 8006974:	e785      	b.n	8006882 <__gethex+0x12a>
 8006976:	1e73      	subs	r3, r6, #1
 8006978:	9a05      	ldr	r2, [sp, #20]
 800697a:	9303      	str	r3, [sp, #12]
 800697c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006980:	4293      	cmp	r3, r2
 8006982:	d019      	beq.n	80069b8 <__gethex+0x260>
 8006984:	f1bb 0f20 	cmp.w	fp, #32
 8006988:	d107      	bne.n	800699a <__gethex+0x242>
 800698a:	9b02      	ldr	r3, [sp, #8]
 800698c:	9a00      	ldr	r2, [sp, #0]
 800698e:	f843 2b04 	str.w	r2, [r3], #4
 8006992:	9302      	str	r3, [sp, #8]
 8006994:	2300      	movs	r3, #0
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	469b      	mov	fp, r3
 800699a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800699e:	f7ff fec5 	bl	800672c <__hexdig_fun>
 80069a2:	9b00      	ldr	r3, [sp, #0]
 80069a4:	f000 000f 	and.w	r0, r0, #15
 80069a8:	fa00 f00b 	lsl.w	r0, r0, fp
 80069ac:	4303      	orrs	r3, r0
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	f10b 0b04 	add.w	fp, fp, #4
 80069b4:	9b03      	ldr	r3, [sp, #12]
 80069b6:	e00d      	b.n	80069d4 <__gethex+0x27c>
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	9a06      	ldr	r2, [sp, #24]
 80069bc:	4413      	add	r3, r2
 80069be:	42bb      	cmp	r3, r7
 80069c0:	d3e0      	bcc.n	8006984 <__gethex+0x22c>
 80069c2:	4618      	mov	r0, r3
 80069c4:	9901      	ldr	r1, [sp, #4]
 80069c6:	9307      	str	r3, [sp, #28]
 80069c8:	4652      	mov	r2, sl
 80069ca:	f001 f8e1 	bl	8007b90 <strncmp>
 80069ce:	9b07      	ldr	r3, [sp, #28]
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d1d7      	bne.n	8006984 <__gethex+0x22c>
 80069d4:	461e      	mov	r6, r3
 80069d6:	e78b      	b.n	80068f0 <__gethex+0x198>
 80069d8:	f04f 0a03 	mov.w	sl, #3
 80069dc:	e7b8      	b.n	8006950 <__gethex+0x1f8>
 80069de:	da0a      	bge.n	80069f6 <__gethex+0x29e>
 80069e0:	1a37      	subs	r7, r6, r0
 80069e2:	4621      	mov	r1, r4
 80069e4:	ee18 0a10 	vmov	r0, s16
 80069e8:	463a      	mov	r2, r7
 80069ea:	f000 fc45 	bl	8007278 <__lshift>
 80069ee:	1bed      	subs	r5, r5, r7
 80069f0:	4604      	mov	r4, r0
 80069f2:	f100 0914 	add.w	r9, r0, #20
 80069f6:	f04f 0a00 	mov.w	sl, #0
 80069fa:	e7ae      	b.n	800695a <__gethex+0x202>
 80069fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006a00:	42a8      	cmp	r0, r5
 8006a02:	dd72      	ble.n	8006aea <__gethex+0x392>
 8006a04:	1b45      	subs	r5, r0, r5
 8006a06:	42ae      	cmp	r6, r5
 8006a08:	dc36      	bgt.n	8006a78 <__gethex+0x320>
 8006a0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d02a      	beq.n	8006a68 <__gethex+0x310>
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d02c      	beq.n	8006a70 <__gethex+0x318>
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d115      	bne.n	8006a46 <__gethex+0x2ee>
 8006a1a:	42ae      	cmp	r6, r5
 8006a1c:	d113      	bne.n	8006a46 <__gethex+0x2ee>
 8006a1e:	2e01      	cmp	r6, #1
 8006a20:	d10b      	bne.n	8006a3a <__gethex+0x2e2>
 8006a22:	9a04      	ldr	r2, [sp, #16]
 8006a24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	f8c9 3000 	str.w	r3, [r9]
 8006a32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a34:	2762      	movs	r7, #98	; 0x62
 8006a36:	601c      	str	r4, [r3, #0]
 8006a38:	e723      	b.n	8006882 <__gethex+0x12a>
 8006a3a:	1e71      	subs	r1, r6, #1
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 fe59 	bl	80076f4 <__any_on>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d1ed      	bne.n	8006a22 <__gethex+0x2ca>
 8006a46:	ee18 0a10 	vmov	r0, s16
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	f000 f9f8 	bl	8006e40 <_Bfree>
 8006a50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a52:	2300      	movs	r3, #0
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	2750      	movs	r7, #80	; 0x50
 8006a58:	e713      	b.n	8006882 <__gethex+0x12a>
 8006a5a:	bf00      	nop
 8006a5c:	080099e0 	.word	0x080099e0
 8006a60:	08009964 	.word	0x08009964
 8006a64:	08009975 	.word	0x08009975
 8006a68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1eb      	bne.n	8006a46 <__gethex+0x2ee>
 8006a6e:	e7d8      	b.n	8006a22 <__gethex+0x2ca>
 8006a70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1d5      	bne.n	8006a22 <__gethex+0x2ca>
 8006a76:	e7e6      	b.n	8006a46 <__gethex+0x2ee>
 8006a78:	1e6f      	subs	r7, r5, #1
 8006a7a:	f1ba 0f00 	cmp.w	sl, #0
 8006a7e:	d131      	bne.n	8006ae4 <__gethex+0x38c>
 8006a80:	b127      	cbz	r7, 8006a8c <__gethex+0x334>
 8006a82:	4639      	mov	r1, r7
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 fe35 	bl	80076f4 <__any_on>
 8006a8a:	4682      	mov	sl, r0
 8006a8c:	117b      	asrs	r3, r7, #5
 8006a8e:	2101      	movs	r1, #1
 8006a90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006a94:	f007 071f 	and.w	r7, r7, #31
 8006a98:	fa01 f707 	lsl.w	r7, r1, r7
 8006a9c:	421f      	tst	r7, r3
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	bf18      	it	ne
 8006aa4:	f04a 0a02 	orrne.w	sl, sl, #2
 8006aa8:	1b76      	subs	r6, r6, r5
 8006aaa:	f7ff fded 	bl	8006688 <rshift>
 8006aae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ab2:	2702      	movs	r7, #2
 8006ab4:	f1ba 0f00 	cmp.w	sl, #0
 8006ab8:	d048      	beq.n	8006b4c <__gethex+0x3f4>
 8006aba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d015      	beq.n	8006aee <__gethex+0x396>
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d017      	beq.n	8006af6 <__gethex+0x39e>
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d109      	bne.n	8006ade <__gethex+0x386>
 8006aca:	f01a 0f02 	tst.w	sl, #2
 8006ace:	d006      	beq.n	8006ade <__gethex+0x386>
 8006ad0:	f8d9 0000 	ldr.w	r0, [r9]
 8006ad4:	ea4a 0a00 	orr.w	sl, sl, r0
 8006ad8:	f01a 0f01 	tst.w	sl, #1
 8006adc:	d10e      	bne.n	8006afc <__gethex+0x3a4>
 8006ade:	f047 0710 	orr.w	r7, r7, #16
 8006ae2:	e033      	b.n	8006b4c <__gethex+0x3f4>
 8006ae4:	f04f 0a01 	mov.w	sl, #1
 8006ae8:	e7d0      	b.n	8006a8c <__gethex+0x334>
 8006aea:	2701      	movs	r7, #1
 8006aec:	e7e2      	b.n	8006ab4 <__gethex+0x35c>
 8006aee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006af0:	f1c3 0301 	rsb	r3, r3, #1
 8006af4:	9315      	str	r3, [sp, #84]	; 0x54
 8006af6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0f0      	beq.n	8006ade <__gethex+0x386>
 8006afc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006b00:	f104 0314 	add.w	r3, r4, #20
 8006b04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006b08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006b0c:	f04f 0c00 	mov.w	ip, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b16:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006b1a:	d01c      	beq.n	8006b56 <__gethex+0x3fe>
 8006b1c:	3201      	adds	r2, #1
 8006b1e:	6002      	str	r2, [r0, #0]
 8006b20:	2f02      	cmp	r7, #2
 8006b22:	f104 0314 	add.w	r3, r4, #20
 8006b26:	d13f      	bne.n	8006ba8 <__gethex+0x450>
 8006b28:	f8d8 2000 	ldr.w	r2, [r8]
 8006b2c:	3a01      	subs	r2, #1
 8006b2e:	42b2      	cmp	r2, r6
 8006b30:	d10a      	bne.n	8006b48 <__gethex+0x3f0>
 8006b32:	1171      	asrs	r1, r6, #5
 8006b34:	2201      	movs	r2, #1
 8006b36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b3a:	f006 061f 	and.w	r6, r6, #31
 8006b3e:	fa02 f606 	lsl.w	r6, r2, r6
 8006b42:	421e      	tst	r6, r3
 8006b44:	bf18      	it	ne
 8006b46:	4617      	movne	r7, r2
 8006b48:	f047 0720 	orr.w	r7, r7, #32
 8006b4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b4e:	601c      	str	r4, [r3, #0]
 8006b50:	9b04      	ldr	r3, [sp, #16]
 8006b52:	601d      	str	r5, [r3, #0]
 8006b54:	e695      	b.n	8006882 <__gethex+0x12a>
 8006b56:	4299      	cmp	r1, r3
 8006b58:	f843 cc04 	str.w	ip, [r3, #-4]
 8006b5c:	d8d8      	bhi.n	8006b10 <__gethex+0x3b8>
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	459b      	cmp	fp, r3
 8006b62:	db19      	blt.n	8006b98 <__gethex+0x440>
 8006b64:	6861      	ldr	r1, [r4, #4]
 8006b66:	ee18 0a10 	vmov	r0, s16
 8006b6a:	3101      	adds	r1, #1
 8006b6c:	f000 f928 	bl	8006dc0 <_Balloc>
 8006b70:	4681      	mov	r9, r0
 8006b72:	b918      	cbnz	r0, 8006b7c <__gethex+0x424>
 8006b74:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <__gethex+0x488>)
 8006b76:	4602      	mov	r2, r0
 8006b78:	2184      	movs	r1, #132	; 0x84
 8006b7a:	e6a8      	b.n	80068ce <__gethex+0x176>
 8006b7c:	6922      	ldr	r2, [r4, #16]
 8006b7e:	3202      	adds	r2, #2
 8006b80:	f104 010c 	add.w	r1, r4, #12
 8006b84:	0092      	lsls	r2, r2, #2
 8006b86:	300c      	adds	r0, #12
 8006b88:	f000 f90c 	bl	8006da4 <memcpy>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	ee18 0a10 	vmov	r0, s16
 8006b92:	f000 f955 	bl	8006e40 <_Bfree>
 8006b96:	464c      	mov	r4, r9
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ba0:	6122      	str	r2, [r4, #16]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	615a      	str	r2, [r3, #20]
 8006ba6:	e7bb      	b.n	8006b20 <__gethex+0x3c8>
 8006ba8:	6922      	ldr	r2, [r4, #16]
 8006baa:	455a      	cmp	r2, fp
 8006bac:	dd0b      	ble.n	8006bc6 <__gethex+0x46e>
 8006bae:	2101      	movs	r1, #1
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f7ff fd69 	bl	8006688 <rshift>
 8006bb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006bba:	3501      	adds	r5, #1
 8006bbc:	42ab      	cmp	r3, r5
 8006bbe:	f6ff aed0 	blt.w	8006962 <__gethex+0x20a>
 8006bc2:	2701      	movs	r7, #1
 8006bc4:	e7c0      	b.n	8006b48 <__gethex+0x3f0>
 8006bc6:	f016 061f 	ands.w	r6, r6, #31
 8006bca:	d0fa      	beq.n	8006bc2 <__gethex+0x46a>
 8006bcc:	449a      	add	sl, r3
 8006bce:	f1c6 0620 	rsb	r6, r6, #32
 8006bd2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006bd6:	f000 f9e9 	bl	8006fac <__hi0bits>
 8006bda:	42b0      	cmp	r0, r6
 8006bdc:	dbe7      	blt.n	8006bae <__gethex+0x456>
 8006bde:	e7f0      	b.n	8006bc2 <__gethex+0x46a>
 8006be0:	08009964 	.word	0x08009964

08006be4 <L_shift>:
 8006be4:	f1c2 0208 	rsb	r2, r2, #8
 8006be8:	0092      	lsls	r2, r2, #2
 8006bea:	b570      	push	{r4, r5, r6, lr}
 8006bec:	f1c2 0620 	rsb	r6, r2, #32
 8006bf0:	6843      	ldr	r3, [r0, #4]
 8006bf2:	6804      	ldr	r4, [r0, #0]
 8006bf4:	fa03 f506 	lsl.w	r5, r3, r6
 8006bf8:	432c      	orrs	r4, r5
 8006bfa:	40d3      	lsrs	r3, r2
 8006bfc:	6004      	str	r4, [r0, #0]
 8006bfe:	f840 3f04 	str.w	r3, [r0, #4]!
 8006c02:	4288      	cmp	r0, r1
 8006c04:	d3f4      	bcc.n	8006bf0 <L_shift+0xc>
 8006c06:	bd70      	pop	{r4, r5, r6, pc}

08006c08 <__match>:
 8006c08:	b530      	push	{r4, r5, lr}
 8006c0a:	6803      	ldr	r3, [r0, #0]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c12:	b914      	cbnz	r4, 8006c1a <__match+0x12>
 8006c14:	6003      	str	r3, [r0, #0]
 8006c16:	2001      	movs	r0, #1
 8006c18:	bd30      	pop	{r4, r5, pc}
 8006c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006c22:	2d19      	cmp	r5, #25
 8006c24:	bf98      	it	ls
 8006c26:	3220      	addls	r2, #32
 8006c28:	42a2      	cmp	r2, r4
 8006c2a:	d0f0      	beq.n	8006c0e <__match+0x6>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e7f3      	b.n	8006c18 <__match+0x10>

08006c30 <__hexnan>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	680b      	ldr	r3, [r1, #0]
 8006c36:	6801      	ldr	r1, [r0, #0]
 8006c38:	115e      	asrs	r6, r3, #5
 8006c3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006c3e:	f013 031f 	ands.w	r3, r3, #31
 8006c42:	b087      	sub	sp, #28
 8006c44:	bf18      	it	ne
 8006c46:	3604      	addne	r6, #4
 8006c48:	2500      	movs	r5, #0
 8006c4a:	1f37      	subs	r7, r6, #4
 8006c4c:	4682      	mov	sl, r0
 8006c4e:	4690      	mov	r8, r2
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	f846 5c04 	str.w	r5, [r6, #-4]
 8006c56:	46b9      	mov	r9, r7
 8006c58:	463c      	mov	r4, r7
 8006c5a:	9502      	str	r5, [sp, #8]
 8006c5c:	46ab      	mov	fp, r5
 8006c5e:	784a      	ldrb	r2, [r1, #1]
 8006c60:	1c4b      	adds	r3, r1, #1
 8006c62:	9303      	str	r3, [sp, #12]
 8006c64:	b342      	cbz	r2, 8006cb8 <__hexnan+0x88>
 8006c66:	4610      	mov	r0, r2
 8006c68:	9105      	str	r1, [sp, #20]
 8006c6a:	9204      	str	r2, [sp, #16]
 8006c6c:	f7ff fd5e 	bl	800672c <__hexdig_fun>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d14f      	bne.n	8006d14 <__hexnan+0xe4>
 8006c74:	9a04      	ldr	r2, [sp, #16]
 8006c76:	9905      	ldr	r1, [sp, #20]
 8006c78:	2a20      	cmp	r2, #32
 8006c7a:	d818      	bhi.n	8006cae <__hexnan+0x7e>
 8006c7c:	9b02      	ldr	r3, [sp, #8]
 8006c7e:	459b      	cmp	fp, r3
 8006c80:	dd13      	ble.n	8006caa <__hexnan+0x7a>
 8006c82:	454c      	cmp	r4, r9
 8006c84:	d206      	bcs.n	8006c94 <__hexnan+0x64>
 8006c86:	2d07      	cmp	r5, #7
 8006c88:	dc04      	bgt.n	8006c94 <__hexnan+0x64>
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f7ff ffa8 	bl	8006be4 <L_shift>
 8006c94:	4544      	cmp	r4, r8
 8006c96:	d950      	bls.n	8006d3a <__hexnan+0x10a>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f1a4 0904 	sub.w	r9, r4, #4
 8006c9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ca2:	f8cd b008 	str.w	fp, [sp, #8]
 8006ca6:	464c      	mov	r4, r9
 8006ca8:	461d      	mov	r5, r3
 8006caa:	9903      	ldr	r1, [sp, #12]
 8006cac:	e7d7      	b.n	8006c5e <__hexnan+0x2e>
 8006cae:	2a29      	cmp	r2, #41	; 0x29
 8006cb0:	d156      	bne.n	8006d60 <__hexnan+0x130>
 8006cb2:	3102      	adds	r1, #2
 8006cb4:	f8ca 1000 	str.w	r1, [sl]
 8006cb8:	f1bb 0f00 	cmp.w	fp, #0
 8006cbc:	d050      	beq.n	8006d60 <__hexnan+0x130>
 8006cbe:	454c      	cmp	r4, r9
 8006cc0:	d206      	bcs.n	8006cd0 <__hexnan+0xa0>
 8006cc2:	2d07      	cmp	r5, #7
 8006cc4:	dc04      	bgt.n	8006cd0 <__hexnan+0xa0>
 8006cc6:	462a      	mov	r2, r5
 8006cc8:	4649      	mov	r1, r9
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7ff ff8a 	bl	8006be4 <L_shift>
 8006cd0:	4544      	cmp	r4, r8
 8006cd2:	d934      	bls.n	8006d3e <__hexnan+0x10e>
 8006cd4:	f1a8 0204 	sub.w	r2, r8, #4
 8006cd8:	4623      	mov	r3, r4
 8006cda:	f853 1b04 	ldr.w	r1, [r3], #4
 8006cde:	f842 1f04 	str.w	r1, [r2, #4]!
 8006ce2:	429f      	cmp	r7, r3
 8006ce4:	d2f9      	bcs.n	8006cda <__hexnan+0xaa>
 8006ce6:	1b3b      	subs	r3, r7, r4
 8006ce8:	f023 0303 	bic.w	r3, r3, #3
 8006cec:	3304      	adds	r3, #4
 8006cee:	3401      	adds	r4, #1
 8006cf0:	3e03      	subs	r6, #3
 8006cf2:	42b4      	cmp	r4, r6
 8006cf4:	bf88      	it	hi
 8006cf6:	2304      	movhi	r3, #4
 8006cf8:	4443      	add	r3, r8
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f843 2b04 	str.w	r2, [r3], #4
 8006d00:	429f      	cmp	r7, r3
 8006d02:	d2fb      	bcs.n	8006cfc <__hexnan+0xcc>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	b91b      	cbnz	r3, 8006d10 <__hexnan+0xe0>
 8006d08:	4547      	cmp	r7, r8
 8006d0a:	d127      	bne.n	8006d5c <__hexnan+0x12c>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	2005      	movs	r0, #5
 8006d12:	e026      	b.n	8006d62 <__hexnan+0x132>
 8006d14:	3501      	adds	r5, #1
 8006d16:	2d08      	cmp	r5, #8
 8006d18:	f10b 0b01 	add.w	fp, fp, #1
 8006d1c:	dd06      	ble.n	8006d2c <__hexnan+0xfc>
 8006d1e:	4544      	cmp	r4, r8
 8006d20:	d9c3      	bls.n	8006caa <__hexnan+0x7a>
 8006d22:	2300      	movs	r3, #0
 8006d24:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d28:	2501      	movs	r5, #1
 8006d2a:	3c04      	subs	r4, #4
 8006d2c:	6822      	ldr	r2, [r4, #0]
 8006d2e:	f000 000f 	and.w	r0, r0, #15
 8006d32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006d36:	6022      	str	r2, [r4, #0]
 8006d38:	e7b7      	b.n	8006caa <__hexnan+0x7a>
 8006d3a:	2508      	movs	r5, #8
 8006d3c:	e7b5      	b.n	8006caa <__hexnan+0x7a>
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0df      	beq.n	8006d04 <__hexnan+0xd4>
 8006d44:	f04f 32ff 	mov.w	r2, #4294967295
 8006d48:	f1c3 0320 	rsb	r3, r3, #32
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006d54:	401a      	ands	r2, r3
 8006d56:	f846 2c04 	str.w	r2, [r6, #-4]
 8006d5a:	e7d3      	b.n	8006d04 <__hexnan+0xd4>
 8006d5c:	3f04      	subs	r7, #4
 8006d5e:	e7d1      	b.n	8006d04 <__hexnan+0xd4>
 8006d60:	2004      	movs	r0, #4
 8006d62:	b007      	add	sp, #28
 8006d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d68 <_localeconv_r>:
 8006d68:	4800      	ldr	r0, [pc, #0]	; (8006d6c <_localeconv_r+0x4>)
 8006d6a:	4770      	bx	lr
 8006d6c:	20000160 	.word	0x20000160

08006d70 <malloc>:
 8006d70:	4b02      	ldr	r3, [pc, #8]	; (8006d7c <malloc+0xc>)
 8006d72:	4601      	mov	r1, r0
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	f000 bd3d 	b.w	80077f4 <_malloc_r>
 8006d7a:	bf00      	nop
 8006d7c:	20000008 	.word	0x20000008

08006d80 <__ascii_mbtowc>:
 8006d80:	b082      	sub	sp, #8
 8006d82:	b901      	cbnz	r1, 8006d86 <__ascii_mbtowc+0x6>
 8006d84:	a901      	add	r1, sp, #4
 8006d86:	b142      	cbz	r2, 8006d9a <__ascii_mbtowc+0x1a>
 8006d88:	b14b      	cbz	r3, 8006d9e <__ascii_mbtowc+0x1e>
 8006d8a:	7813      	ldrb	r3, [r2, #0]
 8006d8c:	600b      	str	r3, [r1, #0]
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	1e10      	subs	r0, r2, #0
 8006d92:	bf18      	it	ne
 8006d94:	2001      	movne	r0, #1
 8006d96:	b002      	add	sp, #8
 8006d98:	4770      	bx	lr
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	e7fb      	b.n	8006d96 <__ascii_mbtowc+0x16>
 8006d9e:	f06f 0001 	mvn.w	r0, #1
 8006da2:	e7f8      	b.n	8006d96 <__ascii_mbtowc+0x16>

08006da4 <memcpy>:
 8006da4:	440a      	add	r2, r1
 8006da6:	4291      	cmp	r1, r2
 8006da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dac:	d100      	bne.n	8006db0 <memcpy+0xc>
 8006dae:	4770      	bx	lr
 8006db0:	b510      	push	{r4, lr}
 8006db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	d1f9      	bne.n	8006db2 <memcpy+0xe>
 8006dbe:	bd10      	pop	{r4, pc}

08006dc0 <_Balloc>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	460d      	mov	r5, r1
 8006dc8:	b976      	cbnz	r6, 8006de8 <_Balloc+0x28>
 8006dca:	2010      	movs	r0, #16
 8006dcc:	f7ff ffd0 	bl	8006d70 <malloc>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6260      	str	r0, [r4, #36]	; 0x24
 8006dd4:	b920      	cbnz	r0, 8006de0 <_Balloc+0x20>
 8006dd6:	4b18      	ldr	r3, [pc, #96]	; (8006e38 <_Balloc+0x78>)
 8006dd8:	4818      	ldr	r0, [pc, #96]	; (8006e3c <_Balloc+0x7c>)
 8006dda:	2166      	movs	r1, #102	; 0x66
 8006ddc:	f000 fef8 	bl	8007bd0 <__assert_func>
 8006de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006de4:	6006      	str	r6, [r0, #0]
 8006de6:	60c6      	str	r6, [r0, #12]
 8006de8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006dea:	68f3      	ldr	r3, [r6, #12]
 8006dec:	b183      	cbz	r3, 8006e10 <_Balloc+0x50>
 8006dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006df6:	b9b8      	cbnz	r0, 8006e28 <_Balloc+0x68>
 8006df8:	2101      	movs	r1, #1
 8006dfa:	fa01 f605 	lsl.w	r6, r1, r5
 8006dfe:	1d72      	adds	r2, r6, #5
 8006e00:	0092      	lsls	r2, r2, #2
 8006e02:	4620      	mov	r0, r4
 8006e04:	f000 fc97 	bl	8007736 <_calloc_r>
 8006e08:	b160      	cbz	r0, 8006e24 <_Balloc+0x64>
 8006e0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e0e:	e00e      	b.n	8006e2e <_Balloc+0x6e>
 8006e10:	2221      	movs	r2, #33	; 0x21
 8006e12:	2104      	movs	r1, #4
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 fc8e 	bl	8007736 <_calloc_r>
 8006e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e1c:	60f0      	str	r0, [r6, #12]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e4      	bne.n	8006dee <_Balloc+0x2e>
 8006e24:	2000      	movs	r0, #0
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	6802      	ldr	r2, [r0, #0]
 8006e2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e34:	e7f7      	b.n	8006e26 <_Balloc+0x66>
 8006e36:	bf00      	nop
 8006e38:	080098ee 	.word	0x080098ee
 8006e3c:	080099f4 	.word	0x080099f4

08006e40 <_Bfree>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e44:	4605      	mov	r5, r0
 8006e46:	460c      	mov	r4, r1
 8006e48:	b976      	cbnz	r6, 8006e68 <_Bfree+0x28>
 8006e4a:	2010      	movs	r0, #16
 8006e4c:	f7ff ff90 	bl	8006d70 <malloc>
 8006e50:	4602      	mov	r2, r0
 8006e52:	6268      	str	r0, [r5, #36]	; 0x24
 8006e54:	b920      	cbnz	r0, 8006e60 <_Bfree+0x20>
 8006e56:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <_Bfree+0x3c>)
 8006e58:	4809      	ldr	r0, [pc, #36]	; (8006e80 <_Bfree+0x40>)
 8006e5a:	218a      	movs	r1, #138	; 0x8a
 8006e5c:	f000 feb8 	bl	8007bd0 <__assert_func>
 8006e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e64:	6006      	str	r6, [r0, #0]
 8006e66:	60c6      	str	r6, [r0, #12]
 8006e68:	b13c      	cbz	r4, 8006e7a <_Bfree+0x3a>
 8006e6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e6c:	6862      	ldr	r2, [r4, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e74:	6021      	str	r1, [r4, #0]
 8006e76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	080098ee 	.word	0x080098ee
 8006e80:	080099f4 	.word	0x080099f4

08006e84 <__multadd>:
 8006e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e88:	690e      	ldr	r6, [r1, #16]
 8006e8a:	4607      	mov	r7, r0
 8006e8c:	4698      	mov	r8, r3
 8006e8e:	460c      	mov	r4, r1
 8006e90:	f101 0014 	add.w	r0, r1, #20
 8006e94:	2300      	movs	r3, #0
 8006e96:	6805      	ldr	r5, [r0, #0]
 8006e98:	b2a9      	uxth	r1, r5
 8006e9a:	fb02 8101 	mla	r1, r2, r1, r8
 8006e9e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006ea2:	0c2d      	lsrs	r5, r5, #16
 8006ea4:	fb02 c505 	mla	r5, r2, r5, ip
 8006ea8:	b289      	uxth	r1, r1
 8006eaa:	3301      	adds	r3, #1
 8006eac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006eb0:	429e      	cmp	r6, r3
 8006eb2:	f840 1b04 	str.w	r1, [r0], #4
 8006eb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006eba:	dcec      	bgt.n	8006e96 <__multadd+0x12>
 8006ebc:	f1b8 0f00 	cmp.w	r8, #0
 8006ec0:	d022      	beq.n	8006f08 <__multadd+0x84>
 8006ec2:	68a3      	ldr	r3, [r4, #8]
 8006ec4:	42b3      	cmp	r3, r6
 8006ec6:	dc19      	bgt.n	8006efc <__multadd+0x78>
 8006ec8:	6861      	ldr	r1, [r4, #4]
 8006eca:	4638      	mov	r0, r7
 8006ecc:	3101      	adds	r1, #1
 8006ece:	f7ff ff77 	bl	8006dc0 <_Balloc>
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	b928      	cbnz	r0, 8006ee2 <__multadd+0x5e>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <__multadd+0x8c>)
 8006eda:	480e      	ldr	r0, [pc, #56]	; (8006f14 <__multadd+0x90>)
 8006edc:	21b5      	movs	r1, #181	; 0xb5
 8006ede:	f000 fe77 	bl	8007bd0 <__assert_func>
 8006ee2:	6922      	ldr	r2, [r4, #16]
 8006ee4:	3202      	adds	r2, #2
 8006ee6:	f104 010c 	add.w	r1, r4, #12
 8006eea:	0092      	lsls	r2, r2, #2
 8006eec:	300c      	adds	r0, #12
 8006eee:	f7ff ff59 	bl	8006da4 <memcpy>
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	f7ff ffa3 	bl	8006e40 <_Bfree>
 8006efa:	462c      	mov	r4, r5
 8006efc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006f00:	3601      	adds	r6, #1
 8006f02:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f06:	6126      	str	r6, [r4, #16]
 8006f08:	4620      	mov	r0, r4
 8006f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f0e:	bf00      	nop
 8006f10:	08009964 	.word	0x08009964
 8006f14:	080099f4 	.word	0x080099f4

08006f18 <__s2b>:
 8006f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	4615      	mov	r5, r2
 8006f20:	461f      	mov	r7, r3
 8006f22:	2209      	movs	r2, #9
 8006f24:	3308      	adds	r3, #8
 8006f26:	4606      	mov	r6, r0
 8006f28:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	2201      	movs	r2, #1
 8006f30:	429a      	cmp	r2, r3
 8006f32:	db09      	blt.n	8006f48 <__s2b+0x30>
 8006f34:	4630      	mov	r0, r6
 8006f36:	f7ff ff43 	bl	8006dc0 <_Balloc>
 8006f3a:	b940      	cbnz	r0, 8006f4e <__s2b+0x36>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <__s2b+0x8c>)
 8006f40:	4819      	ldr	r0, [pc, #100]	; (8006fa8 <__s2b+0x90>)
 8006f42:	21ce      	movs	r1, #206	; 0xce
 8006f44:	f000 fe44 	bl	8007bd0 <__assert_func>
 8006f48:	0052      	lsls	r2, r2, #1
 8006f4a:	3101      	adds	r1, #1
 8006f4c:	e7f0      	b.n	8006f30 <__s2b+0x18>
 8006f4e:	9b08      	ldr	r3, [sp, #32]
 8006f50:	6143      	str	r3, [r0, #20]
 8006f52:	2d09      	cmp	r5, #9
 8006f54:	f04f 0301 	mov.w	r3, #1
 8006f58:	6103      	str	r3, [r0, #16]
 8006f5a:	dd16      	ble.n	8006f8a <__s2b+0x72>
 8006f5c:	f104 0909 	add.w	r9, r4, #9
 8006f60:	46c8      	mov	r8, r9
 8006f62:	442c      	add	r4, r5
 8006f64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f68:	4601      	mov	r1, r0
 8006f6a:	3b30      	subs	r3, #48	; 0x30
 8006f6c:	220a      	movs	r2, #10
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f7ff ff88 	bl	8006e84 <__multadd>
 8006f74:	45a0      	cmp	r8, r4
 8006f76:	d1f5      	bne.n	8006f64 <__s2b+0x4c>
 8006f78:	f1a5 0408 	sub.w	r4, r5, #8
 8006f7c:	444c      	add	r4, r9
 8006f7e:	1b2d      	subs	r5, r5, r4
 8006f80:	1963      	adds	r3, r4, r5
 8006f82:	42bb      	cmp	r3, r7
 8006f84:	db04      	blt.n	8006f90 <__s2b+0x78>
 8006f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8a:	340a      	adds	r4, #10
 8006f8c:	2509      	movs	r5, #9
 8006f8e:	e7f6      	b.n	8006f7e <__s2b+0x66>
 8006f90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f94:	4601      	mov	r1, r0
 8006f96:	3b30      	subs	r3, #48	; 0x30
 8006f98:	220a      	movs	r2, #10
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f7ff ff72 	bl	8006e84 <__multadd>
 8006fa0:	e7ee      	b.n	8006f80 <__s2b+0x68>
 8006fa2:	bf00      	nop
 8006fa4:	08009964 	.word	0x08009964
 8006fa8:	080099f4 	.word	0x080099f4

08006fac <__hi0bits>:
 8006fac:	0c03      	lsrs	r3, r0, #16
 8006fae:	041b      	lsls	r3, r3, #16
 8006fb0:	b9d3      	cbnz	r3, 8006fe8 <__hi0bits+0x3c>
 8006fb2:	0400      	lsls	r0, r0, #16
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006fba:	bf04      	itt	eq
 8006fbc:	0200      	lsleq	r0, r0, #8
 8006fbe:	3308      	addeq	r3, #8
 8006fc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fc4:	bf04      	itt	eq
 8006fc6:	0100      	lsleq	r0, r0, #4
 8006fc8:	3304      	addeq	r3, #4
 8006fca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006fce:	bf04      	itt	eq
 8006fd0:	0080      	lsleq	r0, r0, #2
 8006fd2:	3302      	addeq	r3, #2
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	db05      	blt.n	8006fe4 <__hi0bits+0x38>
 8006fd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006fdc:	f103 0301 	add.w	r3, r3, #1
 8006fe0:	bf08      	it	eq
 8006fe2:	2320      	moveq	r3, #32
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	4770      	bx	lr
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e7e4      	b.n	8006fb6 <__hi0bits+0xa>

08006fec <__lo0bits>:
 8006fec:	6803      	ldr	r3, [r0, #0]
 8006fee:	f013 0207 	ands.w	r2, r3, #7
 8006ff2:	4601      	mov	r1, r0
 8006ff4:	d00b      	beq.n	800700e <__lo0bits+0x22>
 8006ff6:	07da      	lsls	r2, r3, #31
 8006ff8:	d424      	bmi.n	8007044 <__lo0bits+0x58>
 8006ffa:	0798      	lsls	r0, r3, #30
 8006ffc:	bf49      	itett	mi
 8006ffe:	085b      	lsrmi	r3, r3, #1
 8007000:	089b      	lsrpl	r3, r3, #2
 8007002:	2001      	movmi	r0, #1
 8007004:	600b      	strmi	r3, [r1, #0]
 8007006:	bf5c      	itt	pl
 8007008:	600b      	strpl	r3, [r1, #0]
 800700a:	2002      	movpl	r0, #2
 800700c:	4770      	bx	lr
 800700e:	b298      	uxth	r0, r3
 8007010:	b9b0      	cbnz	r0, 8007040 <__lo0bits+0x54>
 8007012:	0c1b      	lsrs	r3, r3, #16
 8007014:	2010      	movs	r0, #16
 8007016:	f013 0fff 	tst.w	r3, #255	; 0xff
 800701a:	bf04      	itt	eq
 800701c:	0a1b      	lsreq	r3, r3, #8
 800701e:	3008      	addeq	r0, #8
 8007020:	071a      	lsls	r2, r3, #28
 8007022:	bf04      	itt	eq
 8007024:	091b      	lsreq	r3, r3, #4
 8007026:	3004      	addeq	r0, #4
 8007028:	079a      	lsls	r2, r3, #30
 800702a:	bf04      	itt	eq
 800702c:	089b      	lsreq	r3, r3, #2
 800702e:	3002      	addeq	r0, #2
 8007030:	07da      	lsls	r2, r3, #31
 8007032:	d403      	bmi.n	800703c <__lo0bits+0x50>
 8007034:	085b      	lsrs	r3, r3, #1
 8007036:	f100 0001 	add.w	r0, r0, #1
 800703a:	d005      	beq.n	8007048 <__lo0bits+0x5c>
 800703c:	600b      	str	r3, [r1, #0]
 800703e:	4770      	bx	lr
 8007040:	4610      	mov	r0, r2
 8007042:	e7e8      	b.n	8007016 <__lo0bits+0x2a>
 8007044:	2000      	movs	r0, #0
 8007046:	4770      	bx	lr
 8007048:	2020      	movs	r0, #32
 800704a:	4770      	bx	lr

0800704c <__i2b>:
 800704c:	b510      	push	{r4, lr}
 800704e:	460c      	mov	r4, r1
 8007050:	2101      	movs	r1, #1
 8007052:	f7ff feb5 	bl	8006dc0 <_Balloc>
 8007056:	4602      	mov	r2, r0
 8007058:	b928      	cbnz	r0, 8007066 <__i2b+0x1a>
 800705a:	4b05      	ldr	r3, [pc, #20]	; (8007070 <__i2b+0x24>)
 800705c:	4805      	ldr	r0, [pc, #20]	; (8007074 <__i2b+0x28>)
 800705e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007062:	f000 fdb5 	bl	8007bd0 <__assert_func>
 8007066:	2301      	movs	r3, #1
 8007068:	6144      	str	r4, [r0, #20]
 800706a:	6103      	str	r3, [r0, #16]
 800706c:	bd10      	pop	{r4, pc}
 800706e:	bf00      	nop
 8007070:	08009964 	.word	0x08009964
 8007074:	080099f4 	.word	0x080099f4

08007078 <__multiply>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	4614      	mov	r4, r2
 800707e:	690a      	ldr	r2, [r1, #16]
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	429a      	cmp	r2, r3
 8007084:	bfb8      	it	lt
 8007086:	460b      	movlt	r3, r1
 8007088:	460d      	mov	r5, r1
 800708a:	bfbc      	itt	lt
 800708c:	4625      	movlt	r5, r4
 800708e:	461c      	movlt	r4, r3
 8007090:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007094:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007098:	68ab      	ldr	r3, [r5, #8]
 800709a:	6869      	ldr	r1, [r5, #4]
 800709c:	eb0a 0709 	add.w	r7, sl, r9
 80070a0:	42bb      	cmp	r3, r7
 80070a2:	b085      	sub	sp, #20
 80070a4:	bfb8      	it	lt
 80070a6:	3101      	addlt	r1, #1
 80070a8:	f7ff fe8a 	bl	8006dc0 <_Balloc>
 80070ac:	b930      	cbnz	r0, 80070bc <__multiply+0x44>
 80070ae:	4602      	mov	r2, r0
 80070b0:	4b42      	ldr	r3, [pc, #264]	; (80071bc <__multiply+0x144>)
 80070b2:	4843      	ldr	r0, [pc, #268]	; (80071c0 <__multiply+0x148>)
 80070b4:	f240 115d 	movw	r1, #349	; 0x15d
 80070b8:	f000 fd8a 	bl	8007bd0 <__assert_func>
 80070bc:	f100 0614 	add.w	r6, r0, #20
 80070c0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80070c4:	4633      	mov	r3, r6
 80070c6:	2200      	movs	r2, #0
 80070c8:	4543      	cmp	r3, r8
 80070ca:	d31e      	bcc.n	800710a <__multiply+0x92>
 80070cc:	f105 0c14 	add.w	ip, r5, #20
 80070d0:	f104 0314 	add.w	r3, r4, #20
 80070d4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80070d8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80070dc:	9202      	str	r2, [sp, #8]
 80070de:	ebac 0205 	sub.w	r2, ip, r5
 80070e2:	3a15      	subs	r2, #21
 80070e4:	f022 0203 	bic.w	r2, r2, #3
 80070e8:	3204      	adds	r2, #4
 80070ea:	f105 0115 	add.w	r1, r5, #21
 80070ee:	458c      	cmp	ip, r1
 80070f0:	bf38      	it	cc
 80070f2:	2204      	movcc	r2, #4
 80070f4:	9201      	str	r2, [sp, #4]
 80070f6:	9a02      	ldr	r2, [sp, #8]
 80070f8:	9303      	str	r3, [sp, #12]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d808      	bhi.n	8007110 <__multiply+0x98>
 80070fe:	2f00      	cmp	r7, #0
 8007100:	dc55      	bgt.n	80071ae <__multiply+0x136>
 8007102:	6107      	str	r7, [r0, #16]
 8007104:	b005      	add	sp, #20
 8007106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710a:	f843 2b04 	str.w	r2, [r3], #4
 800710e:	e7db      	b.n	80070c8 <__multiply+0x50>
 8007110:	f8b3 a000 	ldrh.w	sl, [r3]
 8007114:	f1ba 0f00 	cmp.w	sl, #0
 8007118:	d020      	beq.n	800715c <__multiply+0xe4>
 800711a:	f105 0e14 	add.w	lr, r5, #20
 800711e:	46b1      	mov	r9, r6
 8007120:	2200      	movs	r2, #0
 8007122:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007126:	f8d9 b000 	ldr.w	fp, [r9]
 800712a:	b2a1      	uxth	r1, r4
 800712c:	fa1f fb8b 	uxth.w	fp, fp
 8007130:	fb0a b101 	mla	r1, sl, r1, fp
 8007134:	4411      	add	r1, r2
 8007136:	f8d9 2000 	ldr.w	r2, [r9]
 800713a:	0c24      	lsrs	r4, r4, #16
 800713c:	0c12      	lsrs	r2, r2, #16
 800713e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007142:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007146:	b289      	uxth	r1, r1
 8007148:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800714c:	45f4      	cmp	ip, lr
 800714e:	f849 1b04 	str.w	r1, [r9], #4
 8007152:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007156:	d8e4      	bhi.n	8007122 <__multiply+0xaa>
 8007158:	9901      	ldr	r1, [sp, #4]
 800715a:	5072      	str	r2, [r6, r1]
 800715c:	9a03      	ldr	r2, [sp, #12]
 800715e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007162:	3304      	adds	r3, #4
 8007164:	f1b9 0f00 	cmp.w	r9, #0
 8007168:	d01f      	beq.n	80071aa <__multiply+0x132>
 800716a:	6834      	ldr	r4, [r6, #0]
 800716c:	f105 0114 	add.w	r1, r5, #20
 8007170:	46b6      	mov	lr, r6
 8007172:	f04f 0a00 	mov.w	sl, #0
 8007176:	880a      	ldrh	r2, [r1, #0]
 8007178:	f8be b002 	ldrh.w	fp, [lr, #2]
 800717c:	fb09 b202 	mla	r2, r9, r2, fp
 8007180:	4492      	add	sl, r2
 8007182:	b2a4      	uxth	r4, r4
 8007184:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007188:	f84e 4b04 	str.w	r4, [lr], #4
 800718c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007190:	f8be 2000 	ldrh.w	r2, [lr]
 8007194:	0c24      	lsrs	r4, r4, #16
 8007196:	fb09 2404 	mla	r4, r9, r4, r2
 800719a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800719e:	458c      	cmp	ip, r1
 80071a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071a4:	d8e7      	bhi.n	8007176 <__multiply+0xfe>
 80071a6:	9a01      	ldr	r2, [sp, #4]
 80071a8:	50b4      	str	r4, [r6, r2]
 80071aa:	3604      	adds	r6, #4
 80071ac:	e7a3      	b.n	80070f6 <__multiply+0x7e>
 80071ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1a5      	bne.n	8007102 <__multiply+0x8a>
 80071b6:	3f01      	subs	r7, #1
 80071b8:	e7a1      	b.n	80070fe <__multiply+0x86>
 80071ba:	bf00      	nop
 80071bc:	08009964 	.word	0x08009964
 80071c0:	080099f4 	.word	0x080099f4

080071c4 <__pow5mult>:
 80071c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c8:	4615      	mov	r5, r2
 80071ca:	f012 0203 	ands.w	r2, r2, #3
 80071ce:	4606      	mov	r6, r0
 80071d0:	460f      	mov	r7, r1
 80071d2:	d007      	beq.n	80071e4 <__pow5mult+0x20>
 80071d4:	4c25      	ldr	r4, [pc, #148]	; (800726c <__pow5mult+0xa8>)
 80071d6:	3a01      	subs	r2, #1
 80071d8:	2300      	movs	r3, #0
 80071da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071de:	f7ff fe51 	bl	8006e84 <__multadd>
 80071e2:	4607      	mov	r7, r0
 80071e4:	10ad      	asrs	r5, r5, #2
 80071e6:	d03d      	beq.n	8007264 <__pow5mult+0xa0>
 80071e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071ea:	b97c      	cbnz	r4, 800720c <__pow5mult+0x48>
 80071ec:	2010      	movs	r0, #16
 80071ee:	f7ff fdbf 	bl	8006d70 <malloc>
 80071f2:	4602      	mov	r2, r0
 80071f4:	6270      	str	r0, [r6, #36]	; 0x24
 80071f6:	b928      	cbnz	r0, 8007204 <__pow5mult+0x40>
 80071f8:	4b1d      	ldr	r3, [pc, #116]	; (8007270 <__pow5mult+0xac>)
 80071fa:	481e      	ldr	r0, [pc, #120]	; (8007274 <__pow5mult+0xb0>)
 80071fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007200:	f000 fce6 	bl	8007bd0 <__assert_func>
 8007204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007208:	6004      	str	r4, [r0, #0]
 800720a:	60c4      	str	r4, [r0, #12]
 800720c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007214:	b94c      	cbnz	r4, 800722a <__pow5mult+0x66>
 8007216:	f240 2171 	movw	r1, #625	; 0x271
 800721a:	4630      	mov	r0, r6
 800721c:	f7ff ff16 	bl	800704c <__i2b>
 8007220:	2300      	movs	r3, #0
 8007222:	f8c8 0008 	str.w	r0, [r8, #8]
 8007226:	4604      	mov	r4, r0
 8007228:	6003      	str	r3, [r0, #0]
 800722a:	f04f 0900 	mov.w	r9, #0
 800722e:	07eb      	lsls	r3, r5, #31
 8007230:	d50a      	bpl.n	8007248 <__pow5mult+0x84>
 8007232:	4639      	mov	r1, r7
 8007234:	4622      	mov	r2, r4
 8007236:	4630      	mov	r0, r6
 8007238:	f7ff ff1e 	bl	8007078 <__multiply>
 800723c:	4639      	mov	r1, r7
 800723e:	4680      	mov	r8, r0
 8007240:	4630      	mov	r0, r6
 8007242:	f7ff fdfd 	bl	8006e40 <_Bfree>
 8007246:	4647      	mov	r7, r8
 8007248:	106d      	asrs	r5, r5, #1
 800724a:	d00b      	beq.n	8007264 <__pow5mult+0xa0>
 800724c:	6820      	ldr	r0, [r4, #0]
 800724e:	b938      	cbnz	r0, 8007260 <__pow5mult+0x9c>
 8007250:	4622      	mov	r2, r4
 8007252:	4621      	mov	r1, r4
 8007254:	4630      	mov	r0, r6
 8007256:	f7ff ff0f 	bl	8007078 <__multiply>
 800725a:	6020      	str	r0, [r4, #0]
 800725c:	f8c0 9000 	str.w	r9, [r0]
 8007260:	4604      	mov	r4, r0
 8007262:	e7e4      	b.n	800722e <__pow5mult+0x6a>
 8007264:	4638      	mov	r0, r7
 8007266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726a:	bf00      	nop
 800726c:	08009b48 	.word	0x08009b48
 8007270:	080098ee 	.word	0x080098ee
 8007274:	080099f4 	.word	0x080099f4

08007278 <__lshift>:
 8007278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	460c      	mov	r4, r1
 800727e:	6849      	ldr	r1, [r1, #4]
 8007280:	6923      	ldr	r3, [r4, #16]
 8007282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007286:	68a3      	ldr	r3, [r4, #8]
 8007288:	4607      	mov	r7, r0
 800728a:	4691      	mov	r9, r2
 800728c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007290:	f108 0601 	add.w	r6, r8, #1
 8007294:	42b3      	cmp	r3, r6
 8007296:	db0b      	blt.n	80072b0 <__lshift+0x38>
 8007298:	4638      	mov	r0, r7
 800729a:	f7ff fd91 	bl	8006dc0 <_Balloc>
 800729e:	4605      	mov	r5, r0
 80072a0:	b948      	cbnz	r0, 80072b6 <__lshift+0x3e>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4b28      	ldr	r3, [pc, #160]	; (8007348 <__lshift+0xd0>)
 80072a6:	4829      	ldr	r0, [pc, #164]	; (800734c <__lshift+0xd4>)
 80072a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072ac:	f000 fc90 	bl	8007bd0 <__assert_func>
 80072b0:	3101      	adds	r1, #1
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	e7ee      	b.n	8007294 <__lshift+0x1c>
 80072b6:	2300      	movs	r3, #0
 80072b8:	f100 0114 	add.w	r1, r0, #20
 80072bc:	f100 0210 	add.w	r2, r0, #16
 80072c0:	4618      	mov	r0, r3
 80072c2:	4553      	cmp	r3, sl
 80072c4:	db33      	blt.n	800732e <__lshift+0xb6>
 80072c6:	6920      	ldr	r0, [r4, #16]
 80072c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072cc:	f104 0314 	add.w	r3, r4, #20
 80072d0:	f019 091f 	ands.w	r9, r9, #31
 80072d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072dc:	d02b      	beq.n	8007336 <__lshift+0xbe>
 80072de:	f1c9 0e20 	rsb	lr, r9, #32
 80072e2:	468a      	mov	sl, r1
 80072e4:	2200      	movs	r2, #0
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	fa00 f009 	lsl.w	r0, r0, r9
 80072ec:	4302      	orrs	r2, r0
 80072ee:	f84a 2b04 	str.w	r2, [sl], #4
 80072f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f6:	459c      	cmp	ip, r3
 80072f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80072fc:	d8f3      	bhi.n	80072e6 <__lshift+0x6e>
 80072fe:	ebac 0304 	sub.w	r3, ip, r4
 8007302:	3b15      	subs	r3, #21
 8007304:	f023 0303 	bic.w	r3, r3, #3
 8007308:	3304      	adds	r3, #4
 800730a:	f104 0015 	add.w	r0, r4, #21
 800730e:	4584      	cmp	ip, r0
 8007310:	bf38      	it	cc
 8007312:	2304      	movcc	r3, #4
 8007314:	50ca      	str	r2, [r1, r3]
 8007316:	b10a      	cbz	r2, 800731c <__lshift+0xa4>
 8007318:	f108 0602 	add.w	r6, r8, #2
 800731c:	3e01      	subs	r6, #1
 800731e:	4638      	mov	r0, r7
 8007320:	612e      	str	r6, [r5, #16]
 8007322:	4621      	mov	r1, r4
 8007324:	f7ff fd8c 	bl	8006e40 <_Bfree>
 8007328:	4628      	mov	r0, r5
 800732a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800732e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007332:	3301      	adds	r3, #1
 8007334:	e7c5      	b.n	80072c2 <__lshift+0x4a>
 8007336:	3904      	subs	r1, #4
 8007338:	f853 2b04 	ldr.w	r2, [r3], #4
 800733c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007340:	459c      	cmp	ip, r3
 8007342:	d8f9      	bhi.n	8007338 <__lshift+0xc0>
 8007344:	e7ea      	b.n	800731c <__lshift+0xa4>
 8007346:	bf00      	nop
 8007348:	08009964 	.word	0x08009964
 800734c:	080099f4 	.word	0x080099f4

08007350 <__mcmp>:
 8007350:	b530      	push	{r4, r5, lr}
 8007352:	6902      	ldr	r2, [r0, #16]
 8007354:	690c      	ldr	r4, [r1, #16]
 8007356:	1b12      	subs	r2, r2, r4
 8007358:	d10e      	bne.n	8007378 <__mcmp+0x28>
 800735a:	f100 0314 	add.w	r3, r0, #20
 800735e:	3114      	adds	r1, #20
 8007360:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007364:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007368:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800736c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007370:	42a5      	cmp	r5, r4
 8007372:	d003      	beq.n	800737c <__mcmp+0x2c>
 8007374:	d305      	bcc.n	8007382 <__mcmp+0x32>
 8007376:	2201      	movs	r2, #1
 8007378:	4610      	mov	r0, r2
 800737a:	bd30      	pop	{r4, r5, pc}
 800737c:	4283      	cmp	r3, r0
 800737e:	d3f3      	bcc.n	8007368 <__mcmp+0x18>
 8007380:	e7fa      	b.n	8007378 <__mcmp+0x28>
 8007382:	f04f 32ff 	mov.w	r2, #4294967295
 8007386:	e7f7      	b.n	8007378 <__mcmp+0x28>

08007388 <__mdiff>:
 8007388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	460c      	mov	r4, r1
 800738e:	4606      	mov	r6, r0
 8007390:	4611      	mov	r1, r2
 8007392:	4620      	mov	r0, r4
 8007394:	4617      	mov	r7, r2
 8007396:	f7ff ffdb 	bl	8007350 <__mcmp>
 800739a:	1e05      	subs	r5, r0, #0
 800739c:	d110      	bne.n	80073c0 <__mdiff+0x38>
 800739e:	4629      	mov	r1, r5
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7ff fd0d 	bl	8006dc0 <_Balloc>
 80073a6:	b930      	cbnz	r0, 80073b6 <__mdiff+0x2e>
 80073a8:	4b39      	ldr	r3, [pc, #228]	; (8007490 <__mdiff+0x108>)
 80073aa:	4602      	mov	r2, r0
 80073ac:	f240 2132 	movw	r1, #562	; 0x232
 80073b0:	4838      	ldr	r0, [pc, #224]	; (8007494 <__mdiff+0x10c>)
 80073b2:	f000 fc0d 	bl	8007bd0 <__assert_func>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c0:	bfa4      	itt	ge
 80073c2:	463b      	movge	r3, r7
 80073c4:	4627      	movge	r7, r4
 80073c6:	4630      	mov	r0, r6
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	bfa6      	itte	ge
 80073cc:	461c      	movge	r4, r3
 80073ce:	2500      	movge	r5, #0
 80073d0:	2501      	movlt	r5, #1
 80073d2:	f7ff fcf5 	bl	8006dc0 <_Balloc>
 80073d6:	b920      	cbnz	r0, 80073e2 <__mdiff+0x5a>
 80073d8:	4b2d      	ldr	r3, [pc, #180]	; (8007490 <__mdiff+0x108>)
 80073da:	4602      	mov	r2, r0
 80073dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073e0:	e7e6      	b.n	80073b0 <__mdiff+0x28>
 80073e2:	693e      	ldr	r6, [r7, #16]
 80073e4:	60c5      	str	r5, [r0, #12]
 80073e6:	6925      	ldr	r5, [r4, #16]
 80073e8:	f107 0114 	add.w	r1, r7, #20
 80073ec:	f104 0914 	add.w	r9, r4, #20
 80073f0:	f100 0e14 	add.w	lr, r0, #20
 80073f4:	f107 0210 	add.w	r2, r7, #16
 80073f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80073fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007400:	46f2      	mov	sl, lr
 8007402:	2700      	movs	r7, #0
 8007404:	f859 3b04 	ldr.w	r3, [r9], #4
 8007408:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800740c:	fa1f f883 	uxth.w	r8, r3
 8007410:	fa17 f78b 	uxtah	r7, r7, fp
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	eba7 0808 	sub.w	r8, r7, r8
 800741a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800741e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007422:	fa1f f888 	uxth.w	r8, r8
 8007426:	141f      	asrs	r7, r3, #16
 8007428:	454d      	cmp	r5, r9
 800742a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800742e:	f84a 3b04 	str.w	r3, [sl], #4
 8007432:	d8e7      	bhi.n	8007404 <__mdiff+0x7c>
 8007434:	1b2b      	subs	r3, r5, r4
 8007436:	3b15      	subs	r3, #21
 8007438:	f023 0303 	bic.w	r3, r3, #3
 800743c:	3304      	adds	r3, #4
 800743e:	3415      	adds	r4, #21
 8007440:	42a5      	cmp	r5, r4
 8007442:	bf38      	it	cc
 8007444:	2304      	movcc	r3, #4
 8007446:	4419      	add	r1, r3
 8007448:	4473      	add	r3, lr
 800744a:	469e      	mov	lr, r3
 800744c:	460d      	mov	r5, r1
 800744e:	4565      	cmp	r5, ip
 8007450:	d30e      	bcc.n	8007470 <__mdiff+0xe8>
 8007452:	f10c 0203 	add.w	r2, ip, #3
 8007456:	1a52      	subs	r2, r2, r1
 8007458:	f022 0203 	bic.w	r2, r2, #3
 800745c:	3903      	subs	r1, #3
 800745e:	458c      	cmp	ip, r1
 8007460:	bf38      	it	cc
 8007462:	2200      	movcc	r2, #0
 8007464:	441a      	add	r2, r3
 8007466:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800746a:	b17b      	cbz	r3, 800748c <__mdiff+0x104>
 800746c:	6106      	str	r6, [r0, #16]
 800746e:	e7a5      	b.n	80073bc <__mdiff+0x34>
 8007470:	f855 8b04 	ldr.w	r8, [r5], #4
 8007474:	fa17 f488 	uxtah	r4, r7, r8
 8007478:	1422      	asrs	r2, r4, #16
 800747a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800747e:	b2a4      	uxth	r4, r4
 8007480:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007484:	f84e 4b04 	str.w	r4, [lr], #4
 8007488:	1417      	asrs	r7, r2, #16
 800748a:	e7e0      	b.n	800744e <__mdiff+0xc6>
 800748c:	3e01      	subs	r6, #1
 800748e:	e7ea      	b.n	8007466 <__mdiff+0xde>
 8007490:	08009964 	.word	0x08009964
 8007494:	080099f4 	.word	0x080099f4

08007498 <__ulp>:
 8007498:	b082      	sub	sp, #8
 800749a:	ed8d 0b00 	vstr	d0, [sp]
 800749e:	9b01      	ldr	r3, [sp, #4]
 80074a0:	4912      	ldr	r1, [pc, #72]	; (80074ec <__ulp+0x54>)
 80074a2:	4019      	ands	r1, r3
 80074a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80074a8:	2900      	cmp	r1, #0
 80074aa:	dd05      	ble.n	80074b8 <__ulp+0x20>
 80074ac:	2200      	movs	r2, #0
 80074ae:	460b      	mov	r3, r1
 80074b0:	ec43 2b10 	vmov	d0, r2, r3
 80074b4:	b002      	add	sp, #8
 80074b6:	4770      	bx	lr
 80074b8:	4249      	negs	r1, r1
 80074ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80074be:	ea4f 5021 	mov.w	r0, r1, asr #20
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	da04      	bge.n	80074d6 <__ulp+0x3e>
 80074cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80074d0:	fa41 f300 	asr.w	r3, r1, r0
 80074d4:	e7ec      	b.n	80074b0 <__ulp+0x18>
 80074d6:	f1a0 0114 	sub.w	r1, r0, #20
 80074da:	291e      	cmp	r1, #30
 80074dc:	bfda      	itte	le
 80074de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80074e2:	fa20 f101 	lsrle.w	r1, r0, r1
 80074e6:	2101      	movgt	r1, #1
 80074e8:	460a      	mov	r2, r1
 80074ea:	e7e1      	b.n	80074b0 <__ulp+0x18>
 80074ec:	7ff00000 	.word	0x7ff00000

080074f0 <__b2d>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	6905      	ldr	r5, [r0, #16]
 80074f4:	f100 0714 	add.w	r7, r0, #20
 80074f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80074fc:	1f2e      	subs	r6, r5, #4
 80074fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007502:	4620      	mov	r0, r4
 8007504:	f7ff fd52 	bl	8006fac <__hi0bits>
 8007508:	f1c0 0320 	rsb	r3, r0, #32
 800750c:	280a      	cmp	r0, #10
 800750e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800758c <__b2d+0x9c>
 8007512:	600b      	str	r3, [r1, #0]
 8007514:	dc14      	bgt.n	8007540 <__b2d+0x50>
 8007516:	f1c0 0e0b 	rsb	lr, r0, #11
 800751a:	fa24 f10e 	lsr.w	r1, r4, lr
 800751e:	42b7      	cmp	r7, r6
 8007520:	ea41 030c 	orr.w	r3, r1, ip
 8007524:	bf34      	ite	cc
 8007526:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800752a:	2100      	movcs	r1, #0
 800752c:	3015      	adds	r0, #21
 800752e:	fa04 f000 	lsl.w	r0, r4, r0
 8007532:	fa21 f10e 	lsr.w	r1, r1, lr
 8007536:	ea40 0201 	orr.w	r2, r0, r1
 800753a:	ec43 2b10 	vmov	d0, r2, r3
 800753e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007540:	42b7      	cmp	r7, r6
 8007542:	bf3a      	itte	cc
 8007544:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007548:	f1a5 0608 	subcc.w	r6, r5, #8
 800754c:	2100      	movcs	r1, #0
 800754e:	380b      	subs	r0, #11
 8007550:	d017      	beq.n	8007582 <__b2d+0x92>
 8007552:	f1c0 0c20 	rsb	ip, r0, #32
 8007556:	fa04 f500 	lsl.w	r5, r4, r0
 800755a:	42be      	cmp	r6, r7
 800755c:	fa21 f40c 	lsr.w	r4, r1, ip
 8007560:	ea45 0504 	orr.w	r5, r5, r4
 8007564:	bf8c      	ite	hi
 8007566:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800756a:	2400      	movls	r4, #0
 800756c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007570:	fa01 f000 	lsl.w	r0, r1, r0
 8007574:	fa24 f40c 	lsr.w	r4, r4, ip
 8007578:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800757c:	ea40 0204 	orr.w	r2, r0, r4
 8007580:	e7db      	b.n	800753a <__b2d+0x4a>
 8007582:	ea44 030c 	orr.w	r3, r4, ip
 8007586:	460a      	mov	r2, r1
 8007588:	e7d7      	b.n	800753a <__b2d+0x4a>
 800758a:	bf00      	nop
 800758c:	3ff00000 	.word	0x3ff00000

08007590 <__d2b>:
 8007590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007594:	4689      	mov	r9, r1
 8007596:	2101      	movs	r1, #1
 8007598:	ec57 6b10 	vmov	r6, r7, d0
 800759c:	4690      	mov	r8, r2
 800759e:	f7ff fc0f 	bl	8006dc0 <_Balloc>
 80075a2:	4604      	mov	r4, r0
 80075a4:	b930      	cbnz	r0, 80075b4 <__d2b+0x24>
 80075a6:	4602      	mov	r2, r0
 80075a8:	4b25      	ldr	r3, [pc, #148]	; (8007640 <__d2b+0xb0>)
 80075aa:	4826      	ldr	r0, [pc, #152]	; (8007644 <__d2b+0xb4>)
 80075ac:	f240 310a 	movw	r1, #778	; 0x30a
 80075b0:	f000 fb0e 	bl	8007bd0 <__assert_func>
 80075b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075bc:	bb35      	cbnz	r5, 800760c <__d2b+0x7c>
 80075be:	2e00      	cmp	r6, #0
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	d028      	beq.n	8007616 <__d2b+0x86>
 80075c4:	4668      	mov	r0, sp
 80075c6:	9600      	str	r6, [sp, #0]
 80075c8:	f7ff fd10 	bl	8006fec <__lo0bits>
 80075cc:	9900      	ldr	r1, [sp, #0]
 80075ce:	b300      	cbz	r0, 8007612 <__d2b+0x82>
 80075d0:	9a01      	ldr	r2, [sp, #4]
 80075d2:	f1c0 0320 	rsb	r3, r0, #32
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	430b      	orrs	r3, r1
 80075dc:	40c2      	lsrs	r2, r0
 80075de:	6163      	str	r3, [r4, #20]
 80075e0:	9201      	str	r2, [sp, #4]
 80075e2:	9b01      	ldr	r3, [sp, #4]
 80075e4:	61a3      	str	r3, [r4, #24]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf14      	ite	ne
 80075ea:	2202      	movne	r2, #2
 80075ec:	2201      	moveq	r2, #1
 80075ee:	6122      	str	r2, [r4, #16]
 80075f0:	b1d5      	cbz	r5, 8007628 <__d2b+0x98>
 80075f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075f6:	4405      	add	r5, r0
 80075f8:	f8c9 5000 	str.w	r5, [r9]
 80075fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007600:	f8c8 0000 	str.w	r0, [r8]
 8007604:	4620      	mov	r0, r4
 8007606:	b003      	add	sp, #12
 8007608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800760c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007610:	e7d5      	b.n	80075be <__d2b+0x2e>
 8007612:	6161      	str	r1, [r4, #20]
 8007614:	e7e5      	b.n	80075e2 <__d2b+0x52>
 8007616:	a801      	add	r0, sp, #4
 8007618:	f7ff fce8 	bl	8006fec <__lo0bits>
 800761c:	9b01      	ldr	r3, [sp, #4]
 800761e:	6163      	str	r3, [r4, #20]
 8007620:	2201      	movs	r2, #1
 8007622:	6122      	str	r2, [r4, #16]
 8007624:	3020      	adds	r0, #32
 8007626:	e7e3      	b.n	80075f0 <__d2b+0x60>
 8007628:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800762c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007630:	f8c9 0000 	str.w	r0, [r9]
 8007634:	6918      	ldr	r0, [r3, #16]
 8007636:	f7ff fcb9 	bl	8006fac <__hi0bits>
 800763a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800763e:	e7df      	b.n	8007600 <__d2b+0x70>
 8007640:	08009964 	.word	0x08009964
 8007644:	080099f4 	.word	0x080099f4

08007648 <__ratio>:
 8007648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	4688      	mov	r8, r1
 800764e:	4669      	mov	r1, sp
 8007650:	4681      	mov	r9, r0
 8007652:	f7ff ff4d 	bl	80074f0 <__b2d>
 8007656:	a901      	add	r1, sp, #4
 8007658:	4640      	mov	r0, r8
 800765a:	ec55 4b10 	vmov	r4, r5, d0
 800765e:	f7ff ff47 	bl	80074f0 <__b2d>
 8007662:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007666:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800766a:	eba3 0c02 	sub.w	ip, r3, r2
 800766e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007672:	1a9b      	subs	r3, r3, r2
 8007674:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007678:	ec51 0b10 	vmov	r0, r1, d0
 800767c:	2b00      	cmp	r3, #0
 800767e:	bfd6      	itet	le
 8007680:	460a      	movle	r2, r1
 8007682:	462a      	movgt	r2, r5
 8007684:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007688:	468b      	mov	fp, r1
 800768a:	462f      	mov	r7, r5
 800768c:	bfd4      	ite	le
 800768e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007692:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007696:	4620      	mov	r0, r4
 8007698:	ee10 2a10 	vmov	r2, s0
 800769c:	465b      	mov	r3, fp
 800769e:	4639      	mov	r1, r7
 80076a0:	f7f9 f8d4 	bl	800084c <__aeabi_ddiv>
 80076a4:	ec41 0b10 	vmov	d0, r0, r1
 80076a8:	b003      	add	sp, #12
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076ae <__copybits>:
 80076ae:	3901      	subs	r1, #1
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	1149      	asrs	r1, r1, #5
 80076b4:	6914      	ldr	r4, [r2, #16]
 80076b6:	3101      	adds	r1, #1
 80076b8:	f102 0314 	add.w	r3, r2, #20
 80076bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80076c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076c4:	1f05      	subs	r5, r0, #4
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	d30c      	bcc.n	80076e4 <__copybits+0x36>
 80076ca:	1aa3      	subs	r3, r4, r2
 80076cc:	3b11      	subs	r3, #17
 80076ce:	f023 0303 	bic.w	r3, r3, #3
 80076d2:	3211      	adds	r2, #17
 80076d4:	42a2      	cmp	r2, r4
 80076d6:	bf88      	it	hi
 80076d8:	2300      	movhi	r3, #0
 80076da:	4418      	add	r0, r3
 80076dc:	2300      	movs	r3, #0
 80076de:	4288      	cmp	r0, r1
 80076e0:	d305      	bcc.n	80076ee <__copybits+0x40>
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80076e8:	f845 6f04 	str.w	r6, [r5, #4]!
 80076ec:	e7eb      	b.n	80076c6 <__copybits+0x18>
 80076ee:	f840 3b04 	str.w	r3, [r0], #4
 80076f2:	e7f4      	b.n	80076de <__copybits+0x30>

080076f4 <__any_on>:
 80076f4:	f100 0214 	add.w	r2, r0, #20
 80076f8:	6900      	ldr	r0, [r0, #16]
 80076fa:	114b      	asrs	r3, r1, #5
 80076fc:	4298      	cmp	r0, r3
 80076fe:	b510      	push	{r4, lr}
 8007700:	db11      	blt.n	8007726 <__any_on+0x32>
 8007702:	dd0a      	ble.n	800771a <__any_on+0x26>
 8007704:	f011 011f 	ands.w	r1, r1, #31
 8007708:	d007      	beq.n	800771a <__any_on+0x26>
 800770a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800770e:	fa24 f001 	lsr.w	r0, r4, r1
 8007712:	fa00 f101 	lsl.w	r1, r0, r1
 8007716:	428c      	cmp	r4, r1
 8007718:	d10b      	bne.n	8007732 <__any_on+0x3e>
 800771a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800771e:	4293      	cmp	r3, r2
 8007720:	d803      	bhi.n	800772a <__any_on+0x36>
 8007722:	2000      	movs	r0, #0
 8007724:	bd10      	pop	{r4, pc}
 8007726:	4603      	mov	r3, r0
 8007728:	e7f7      	b.n	800771a <__any_on+0x26>
 800772a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800772e:	2900      	cmp	r1, #0
 8007730:	d0f5      	beq.n	800771e <__any_on+0x2a>
 8007732:	2001      	movs	r0, #1
 8007734:	e7f6      	b.n	8007724 <__any_on+0x30>

08007736 <_calloc_r>:
 8007736:	b513      	push	{r0, r1, r4, lr}
 8007738:	434a      	muls	r2, r1
 800773a:	4611      	mov	r1, r2
 800773c:	9201      	str	r2, [sp, #4]
 800773e:	f000 f859 	bl	80077f4 <_malloc_r>
 8007742:	4604      	mov	r4, r0
 8007744:	b118      	cbz	r0, 800774e <_calloc_r+0x18>
 8007746:	9a01      	ldr	r2, [sp, #4]
 8007748:	2100      	movs	r1, #0
 800774a:	f7fc fbc9 	bl	8003ee0 <memset>
 800774e:	4620      	mov	r0, r4
 8007750:	b002      	add	sp, #8
 8007752:	bd10      	pop	{r4, pc}

08007754 <_free_r>:
 8007754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007756:	2900      	cmp	r1, #0
 8007758:	d048      	beq.n	80077ec <_free_r+0x98>
 800775a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800775e:	9001      	str	r0, [sp, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f1a1 0404 	sub.w	r4, r1, #4
 8007766:	bfb8      	it	lt
 8007768:	18e4      	addlt	r4, r4, r3
 800776a:	f000 fa7b 	bl	8007c64 <__malloc_lock>
 800776e:	4a20      	ldr	r2, [pc, #128]	; (80077f0 <_free_r+0x9c>)
 8007770:	9801      	ldr	r0, [sp, #4]
 8007772:	6813      	ldr	r3, [r2, #0]
 8007774:	4615      	mov	r5, r2
 8007776:	b933      	cbnz	r3, 8007786 <_free_r+0x32>
 8007778:	6063      	str	r3, [r4, #4]
 800777a:	6014      	str	r4, [r2, #0]
 800777c:	b003      	add	sp, #12
 800777e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007782:	f000 ba75 	b.w	8007c70 <__malloc_unlock>
 8007786:	42a3      	cmp	r3, r4
 8007788:	d90b      	bls.n	80077a2 <_free_r+0x4e>
 800778a:	6821      	ldr	r1, [r4, #0]
 800778c:	1862      	adds	r2, r4, r1
 800778e:	4293      	cmp	r3, r2
 8007790:	bf04      	itt	eq
 8007792:	681a      	ldreq	r2, [r3, #0]
 8007794:	685b      	ldreq	r3, [r3, #4]
 8007796:	6063      	str	r3, [r4, #4]
 8007798:	bf04      	itt	eq
 800779a:	1852      	addeq	r2, r2, r1
 800779c:	6022      	streq	r2, [r4, #0]
 800779e:	602c      	str	r4, [r5, #0]
 80077a0:	e7ec      	b.n	800777c <_free_r+0x28>
 80077a2:	461a      	mov	r2, r3
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	b10b      	cbz	r3, 80077ac <_free_r+0x58>
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	d9fa      	bls.n	80077a2 <_free_r+0x4e>
 80077ac:	6811      	ldr	r1, [r2, #0]
 80077ae:	1855      	adds	r5, r2, r1
 80077b0:	42a5      	cmp	r5, r4
 80077b2:	d10b      	bne.n	80077cc <_free_r+0x78>
 80077b4:	6824      	ldr	r4, [r4, #0]
 80077b6:	4421      	add	r1, r4
 80077b8:	1854      	adds	r4, r2, r1
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	6011      	str	r1, [r2, #0]
 80077be:	d1dd      	bne.n	800777c <_free_r+0x28>
 80077c0:	681c      	ldr	r4, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	6053      	str	r3, [r2, #4]
 80077c6:	4421      	add	r1, r4
 80077c8:	6011      	str	r1, [r2, #0]
 80077ca:	e7d7      	b.n	800777c <_free_r+0x28>
 80077cc:	d902      	bls.n	80077d4 <_free_r+0x80>
 80077ce:	230c      	movs	r3, #12
 80077d0:	6003      	str	r3, [r0, #0]
 80077d2:	e7d3      	b.n	800777c <_free_r+0x28>
 80077d4:	6825      	ldr	r5, [r4, #0]
 80077d6:	1961      	adds	r1, r4, r5
 80077d8:	428b      	cmp	r3, r1
 80077da:	bf04      	itt	eq
 80077dc:	6819      	ldreq	r1, [r3, #0]
 80077de:	685b      	ldreq	r3, [r3, #4]
 80077e0:	6063      	str	r3, [r4, #4]
 80077e2:	bf04      	itt	eq
 80077e4:	1949      	addeq	r1, r1, r5
 80077e6:	6021      	streq	r1, [r4, #0]
 80077e8:	6054      	str	r4, [r2, #4]
 80077ea:	e7c7      	b.n	800777c <_free_r+0x28>
 80077ec:	b003      	add	sp, #12
 80077ee:	bd30      	pop	{r4, r5, pc}
 80077f0:	2000021c 	.word	0x2000021c

080077f4 <_malloc_r>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	1ccd      	adds	r5, r1, #3
 80077f8:	f025 0503 	bic.w	r5, r5, #3
 80077fc:	3508      	adds	r5, #8
 80077fe:	2d0c      	cmp	r5, #12
 8007800:	bf38      	it	cc
 8007802:	250c      	movcc	r5, #12
 8007804:	2d00      	cmp	r5, #0
 8007806:	4606      	mov	r6, r0
 8007808:	db01      	blt.n	800780e <_malloc_r+0x1a>
 800780a:	42a9      	cmp	r1, r5
 800780c:	d903      	bls.n	8007816 <_malloc_r+0x22>
 800780e:	230c      	movs	r3, #12
 8007810:	6033      	str	r3, [r6, #0]
 8007812:	2000      	movs	r0, #0
 8007814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007816:	f000 fa25 	bl	8007c64 <__malloc_lock>
 800781a:	4921      	ldr	r1, [pc, #132]	; (80078a0 <_malloc_r+0xac>)
 800781c:	680a      	ldr	r2, [r1, #0]
 800781e:	4614      	mov	r4, r2
 8007820:	b99c      	cbnz	r4, 800784a <_malloc_r+0x56>
 8007822:	4f20      	ldr	r7, [pc, #128]	; (80078a4 <_malloc_r+0xb0>)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	b923      	cbnz	r3, 8007832 <_malloc_r+0x3e>
 8007828:	4621      	mov	r1, r4
 800782a:	4630      	mov	r0, r6
 800782c:	f000 f9a0 	bl	8007b70 <_sbrk_r>
 8007830:	6038      	str	r0, [r7, #0]
 8007832:	4629      	mov	r1, r5
 8007834:	4630      	mov	r0, r6
 8007836:	f000 f99b 	bl	8007b70 <_sbrk_r>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	d123      	bne.n	8007886 <_malloc_r+0x92>
 800783e:	230c      	movs	r3, #12
 8007840:	6033      	str	r3, [r6, #0]
 8007842:	4630      	mov	r0, r6
 8007844:	f000 fa14 	bl	8007c70 <__malloc_unlock>
 8007848:	e7e3      	b.n	8007812 <_malloc_r+0x1e>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	1b5b      	subs	r3, r3, r5
 800784e:	d417      	bmi.n	8007880 <_malloc_r+0x8c>
 8007850:	2b0b      	cmp	r3, #11
 8007852:	d903      	bls.n	800785c <_malloc_r+0x68>
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	441c      	add	r4, r3
 8007858:	6025      	str	r5, [r4, #0]
 800785a:	e004      	b.n	8007866 <_malloc_r+0x72>
 800785c:	6863      	ldr	r3, [r4, #4]
 800785e:	42a2      	cmp	r2, r4
 8007860:	bf0c      	ite	eq
 8007862:	600b      	streq	r3, [r1, #0]
 8007864:	6053      	strne	r3, [r2, #4]
 8007866:	4630      	mov	r0, r6
 8007868:	f000 fa02 	bl	8007c70 <__malloc_unlock>
 800786c:	f104 000b 	add.w	r0, r4, #11
 8007870:	1d23      	adds	r3, r4, #4
 8007872:	f020 0007 	bic.w	r0, r0, #7
 8007876:	1ac2      	subs	r2, r0, r3
 8007878:	d0cc      	beq.n	8007814 <_malloc_r+0x20>
 800787a:	1a1b      	subs	r3, r3, r0
 800787c:	50a3      	str	r3, [r4, r2]
 800787e:	e7c9      	b.n	8007814 <_malloc_r+0x20>
 8007880:	4622      	mov	r2, r4
 8007882:	6864      	ldr	r4, [r4, #4]
 8007884:	e7cc      	b.n	8007820 <_malloc_r+0x2c>
 8007886:	1cc4      	adds	r4, r0, #3
 8007888:	f024 0403 	bic.w	r4, r4, #3
 800788c:	42a0      	cmp	r0, r4
 800788e:	d0e3      	beq.n	8007858 <_malloc_r+0x64>
 8007890:	1a21      	subs	r1, r4, r0
 8007892:	4630      	mov	r0, r6
 8007894:	f000 f96c 	bl	8007b70 <_sbrk_r>
 8007898:	3001      	adds	r0, #1
 800789a:	d1dd      	bne.n	8007858 <_malloc_r+0x64>
 800789c:	e7cf      	b.n	800783e <_malloc_r+0x4a>
 800789e:	bf00      	nop
 80078a0:	2000021c 	.word	0x2000021c
 80078a4:	20000220 	.word	0x20000220

080078a8 <__ssputs_r>:
 80078a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ac:	688e      	ldr	r6, [r1, #8]
 80078ae:	429e      	cmp	r6, r3
 80078b0:	4682      	mov	sl, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	4690      	mov	r8, r2
 80078b6:	461f      	mov	r7, r3
 80078b8:	d838      	bhi.n	800792c <__ssputs_r+0x84>
 80078ba:	898a      	ldrh	r2, [r1, #12]
 80078bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078c0:	d032      	beq.n	8007928 <__ssputs_r+0x80>
 80078c2:	6825      	ldr	r5, [r4, #0]
 80078c4:	6909      	ldr	r1, [r1, #16]
 80078c6:	eba5 0901 	sub.w	r9, r5, r1
 80078ca:	6965      	ldr	r5, [r4, #20]
 80078cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078d4:	3301      	adds	r3, #1
 80078d6:	444b      	add	r3, r9
 80078d8:	106d      	asrs	r5, r5, #1
 80078da:	429d      	cmp	r5, r3
 80078dc:	bf38      	it	cc
 80078de:	461d      	movcc	r5, r3
 80078e0:	0553      	lsls	r3, r2, #21
 80078e2:	d531      	bpl.n	8007948 <__ssputs_r+0xa0>
 80078e4:	4629      	mov	r1, r5
 80078e6:	f7ff ff85 	bl	80077f4 <_malloc_r>
 80078ea:	4606      	mov	r6, r0
 80078ec:	b950      	cbnz	r0, 8007904 <__ssputs_r+0x5c>
 80078ee:	230c      	movs	r3, #12
 80078f0:	f8ca 3000 	str.w	r3, [sl]
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fa:	81a3      	strh	r3, [r4, #12]
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007904:	6921      	ldr	r1, [r4, #16]
 8007906:	464a      	mov	r2, r9
 8007908:	f7ff fa4c 	bl	8006da4 <memcpy>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	6126      	str	r6, [r4, #16]
 800791a:	6165      	str	r5, [r4, #20]
 800791c:	444e      	add	r6, r9
 800791e:	eba5 0509 	sub.w	r5, r5, r9
 8007922:	6026      	str	r6, [r4, #0]
 8007924:	60a5      	str	r5, [r4, #8]
 8007926:	463e      	mov	r6, r7
 8007928:	42be      	cmp	r6, r7
 800792a:	d900      	bls.n	800792e <__ssputs_r+0x86>
 800792c:	463e      	mov	r6, r7
 800792e:	4632      	mov	r2, r6
 8007930:	6820      	ldr	r0, [r4, #0]
 8007932:	4641      	mov	r1, r8
 8007934:	f000 f97c 	bl	8007c30 <memmove>
 8007938:	68a3      	ldr	r3, [r4, #8]
 800793a:	6822      	ldr	r2, [r4, #0]
 800793c:	1b9b      	subs	r3, r3, r6
 800793e:	4432      	add	r2, r6
 8007940:	60a3      	str	r3, [r4, #8]
 8007942:	6022      	str	r2, [r4, #0]
 8007944:	2000      	movs	r0, #0
 8007946:	e7db      	b.n	8007900 <__ssputs_r+0x58>
 8007948:	462a      	mov	r2, r5
 800794a:	f000 f997 	bl	8007c7c <_realloc_r>
 800794e:	4606      	mov	r6, r0
 8007950:	2800      	cmp	r0, #0
 8007952:	d1e1      	bne.n	8007918 <__ssputs_r+0x70>
 8007954:	6921      	ldr	r1, [r4, #16]
 8007956:	4650      	mov	r0, sl
 8007958:	f7ff fefc 	bl	8007754 <_free_r>
 800795c:	e7c7      	b.n	80078ee <__ssputs_r+0x46>
	...

08007960 <_svfiprintf_r>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	4698      	mov	r8, r3
 8007966:	898b      	ldrh	r3, [r1, #12]
 8007968:	061b      	lsls	r3, r3, #24
 800796a:	b09d      	sub	sp, #116	; 0x74
 800796c:	4607      	mov	r7, r0
 800796e:	460d      	mov	r5, r1
 8007970:	4614      	mov	r4, r2
 8007972:	d50e      	bpl.n	8007992 <_svfiprintf_r+0x32>
 8007974:	690b      	ldr	r3, [r1, #16]
 8007976:	b963      	cbnz	r3, 8007992 <_svfiprintf_r+0x32>
 8007978:	2140      	movs	r1, #64	; 0x40
 800797a:	f7ff ff3b 	bl	80077f4 <_malloc_r>
 800797e:	6028      	str	r0, [r5, #0]
 8007980:	6128      	str	r0, [r5, #16]
 8007982:	b920      	cbnz	r0, 800798e <_svfiprintf_r+0x2e>
 8007984:	230c      	movs	r3, #12
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	f04f 30ff 	mov.w	r0, #4294967295
 800798c:	e0d1      	b.n	8007b32 <_svfiprintf_r+0x1d2>
 800798e:	2340      	movs	r3, #64	; 0x40
 8007990:	616b      	str	r3, [r5, #20]
 8007992:	2300      	movs	r3, #0
 8007994:	9309      	str	r3, [sp, #36]	; 0x24
 8007996:	2320      	movs	r3, #32
 8007998:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800799c:	f8cd 800c 	str.w	r8, [sp, #12]
 80079a0:	2330      	movs	r3, #48	; 0x30
 80079a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b4c <_svfiprintf_r+0x1ec>
 80079a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079aa:	f04f 0901 	mov.w	r9, #1
 80079ae:	4623      	mov	r3, r4
 80079b0:	469a      	mov	sl, r3
 80079b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b6:	b10a      	cbz	r2, 80079bc <_svfiprintf_r+0x5c>
 80079b8:	2a25      	cmp	r2, #37	; 0x25
 80079ba:	d1f9      	bne.n	80079b0 <_svfiprintf_r+0x50>
 80079bc:	ebba 0b04 	subs.w	fp, sl, r4
 80079c0:	d00b      	beq.n	80079da <_svfiprintf_r+0x7a>
 80079c2:	465b      	mov	r3, fp
 80079c4:	4622      	mov	r2, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff ff6d 	bl	80078a8 <__ssputs_r>
 80079ce:	3001      	adds	r0, #1
 80079d0:	f000 80aa 	beq.w	8007b28 <_svfiprintf_r+0x1c8>
 80079d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d6:	445a      	add	r2, fp
 80079d8:	9209      	str	r2, [sp, #36]	; 0x24
 80079da:	f89a 3000 	ldrb.w	r3, [sl]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80a2 	beq.w	8007b28 <_svfiprintf_r+0x1c8>
 80079e4:	2300      	movs	r3, #0
 80079e6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ee:	f10a 0a01 	add.w	sl, sl, #1
 80079f2:	9304      	str	r3, [sp, #16]
 80079f4:	9307      	str	r3, [sp, #28]
 80079f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079fa:	931a      	str	r3, [sp, #104]	; 0x68
 80079fc:	4654      	mov	r4, sl
 80079fe:	2205      	movs	r2, #5
 8007a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a04:	4851      	ldr	r0, [pc, #324]	; (8007b4c <_svfiprintf_r+0x1ec>)
 8007a06:	f7f8 fbeb 	bl	80001e0 <memchr>
 8007a0a:	9a04      	ldr	r2, [sp, #16]
 8007a0c:	b9d8      	cbnz	r0, 8007a46 <_svfiprintf_r+0xe6>
 8007a0e:	06d0      	lsls	r0, r2, #27
 8007a10:	bf44      	itt	mi
 8007a12:	2320      	movmi	r3, #32
 8007a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a18:	0711      	lsls	r1, r2, #28
 8007a1a:	bf44      	itt	mi
 8007a1c:	232b      	movmi	r3, #43	; 0x2b
 8007a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a22:	f89a 3000 	ldrb.w	r3, [sl]
 8007a26:	2b2a      	cmp	r3, #42	; 0x2a
 8007a28:	d015      	beq.n	8007a56 <_svfiprintf_r+0xf6>
 8007a2a:	9a07      	ldr	r2, [sp, #28]
 8007a2c:	4654      	mov	r4, sl
 8007a2e:	2000      	movs	r0, #0
 8007a30:	f04f 0c0a 	mov.w	ip, #10
 8007a34:	4621      	mov	r1, r4
 8007a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a3a:	3b30      	subs	r3, #48	; 0x30
 8007a3c:	2b09      	cmp	r3, #9
 8007a3e:	d94e      	bls.n	8007ade <_svfiprintf_r+0x17e>
 8007a40:	b1b0      	cbz	r0, 8007a70 <_svfiprintf_r+0x110>
 8007a42:	9207      	str	r2, [sp, #28]
 8007a44:	e014      	b.n	8007a70 <_svfiprintf_r+0x110>
 8007a46:	eba0 0308 	sub.w	r3, r0, r8
 8007a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	9304      	str	r3, [sp, #16]
 8007a52:	46a2      	mov	sl, r4
 8007a54:	e7d2      	b.n	80079fc <_svfiprintf_r+0x9c>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	1d19      	adds	r1, r3, #4
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	9103      	str	r1, [sp, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bfbb      	ittet	lt
 8007a62:	425b      	neglt	r3, r3
 8007a64:	f042 0202 	orrlt.w	r2, r2, #2
 8007a68:	9307      	strge	r3, [sp, #28]
 8007a6a:	9307      	strlt	r3, [sp, #28]
 8007a6c:	bfb8      	it	lt
 8007a6e:	9204      	strlt	r2, [sp, #16]
 8007a70:	7823      	ldrb	r3, [r4, #0]
 8007a72:	2b2e      	cmp	r3, #46	; 0x2e
 8007a74:	d10c      	bne.n	8007a90 <_svfiprintf_r+0x130>
 8007a76:	7863      	ldrb	r3, [r4, #1]
 8007a78:	2b2a      	cmp	r3, #42	; 0x2a
 8007a7a:	d135      	bne.n	8007ae8 <_svfiprintf_r+0x188>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	1d1a      	adds	r2, r3, #4
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	9203      	str	r2, [sp, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	bfb8      	it	lt
 8007a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a8c:	3402      	adds	r4, #2
 8007a8e:	9305      	str	r3, [sp, #20]
 8007a90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b5c <_svfiprintf_r+0x1fc>
 8007a94:	7821      	ldrb	r1, [r4, #0]
 8007a96:	2203      	movs	r2, #3
 8007a98:	4650      	mov	r0, sl
 8007a9a:	f7f8 fba1 	bl	80001e0 <memchr>
 8007a9e:	b140      	cbz	r0, 8007ab2 <_svfiprintf_r+0x152>
 8007aa0:	2340      	movs	r3, #64	; 0x40
 8007aa2:	eba0 000a 	sub.w	r0, r0, sl
 8007aa6:	fa03 f000 	lsl.w	r0, r3, r0
 8007aaa:	9b04      	ldr	r3, [sp, #16]
 8007aac:	4303      	orrs	r3, r0
 8007aae:	3401      	adds	r4, #1
 8007ab0:	9304      	str	r3, [sp, #16]
 8007ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab6:	4826      	ldr	r0, [pc, #152]	; (8007b50 <_svfiprintf_r+0x1f0>)
 8007ab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007abc:	2206      	movs	r2, #6
 8007abe:	f7f8 fb8f 	bl	80001e0 <memchr>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d038      	beq.n	8007b38 <_svfiprintf_r+0x1d8>
 8007ac6:	4b23      	ldr	r3, [pc, #140]	; (8007b54 <_svfiprintf_r+0x1f4>)
 8007ac8:	bb1b      	cbnz	r3, 8007b12 <_svfiprintf_r+0x1b2>
 8007aca:	9b03      	ldr	r3, [sp, #12]
 8007acc:	3307      	adds	r3, #7
 8007ace:	f023 0307 	bic.w	r3, r3, #7
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	9303      	str	r3, [sp, #12]
 8007ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad8:	4433      	add	r3, r6
 8007ada:	9309      	str	r3, [sp, #36]	; 0x24
 8007adc:	e767      	b.n	80079ae <_svfiprintf_r+0x4e>
 8007ade:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	e7a5      	b.n	8007a34 <_svfiprintf_r+0xd4>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	3401      	adds	r4, #1
 8007aec:	9305      	str	r3, [sp, #20]
 8007aee:	4619      	mov	r1, r3
 8007af0:	f04f 0c0a 	mov.w	ip, #10
 8007af4:	4620      	mov	r0, r4
 8007af6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007afa:	3a30      	subs	r2, #48	; 0x30
 8007afc:	2a09      	cmp	r2, #9
 8007afe:	d903      	bls.n	8007b08 <_svfiprintf_r+0x1a8>
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0c5      	beq.n	8007a90 <_svfiprintf_r+0x130>
 8007b04:	9105      	str	r1, [sp, #20]
 8007b06:	e7c3      	b.n	8007a90 <_svfiprintf_r+0x130>
 8007b08:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e7f0      	b.n	8007af4 <_svfiprintf_r+0x194>
 8007b12:	ab03      	add	r3, sp, #12
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	462a      	mov	r2, r5
 8007b18:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <_svfiprintf_r+0x1f8>)
 8007b1a:	a904      	add	r1, sp, #16
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	f7fc fa87 	bl	8004030 <_printf_float>
 8007b22:	1c42      	adds	r2, r0, #1
 8007b24:	4606      	mov	r6, r0
 8007b26:	d1d6      	bne.n	8007ad6 <_svfiprintf_r+0x176>
 8007b28:	89ab      	ldrh	r3, [r5, #12]
 8007b2a:	065b      	lsls	r3, r3, #25
 8007b2c:	f53f af2c 	bmi.w	8007988 <_svfiprintf_r+0x28>
 8007b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b32:	b01d      	add	sp, #116	; 0x74
 8007b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b38:	ab03      	add	r3, sp, #12
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <_svfiprintf_r+0x1f8>)
 8007b40:	a904      	add	r1, sp, #16
 8007b42:	4638      	mov	r0, r7
 8007b44:	f7fc fd18 	bl	8004578 <_printf_i>
 8007b48:	e7eb      	b.n	8007b22 <_svfiprintf_r+0x1c2>
 8007b4a:	bf00      	nop
 8007b4c:	08009b54 	.word	0x08009b54
 8007b50:	08009b5e 	.word	0x08009b5e
 8007b54:	08004031 	.word	0x08004031
 8007b58:	080078a9 	.word	0x080078a9
 8007b5c:	08009b5a 	.word	0x08009b5a

08007b60 <nan>:
 8007b60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b68 <nan+0x8>
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	00000000 	.word	0x00000000
 8007b6c:	7ff80000 	.word	0x7ff80000

08007b70 <_sbrk_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d06      	ldr	r5, [pc, #24]	; (8007b8c <_sbrk_r+0x1c>)
 8007b74:	2300      	movs	r3, #0
 8007b76:	4604      	mov	r4, r0
 8007b78:	4608      	mov	r0, r1
 8007b7a:	602b      	str	r3, [r5, #0]
 8007b7c:	f7fa fe64 	bl	8002848 <_sbrk>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d102      	bne.n	8007b8a <_sbrk_r+0x1a>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	b103      	cbz	r3, 8007b8a <_sbrk_r+0x1a>
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	200002b4 	.word	0x200002b4

08007b90 <strncmp>:
 8007b90:	b510      	push	{r4, lr}
 8007b92:	b16a      	cbz	r2, 8007bb0 <strncmp+0x20>
 8007b94:	3901      	subs	r1, #1
 8007b96:	1884      	adds	r4, r0, r2
 8007b98:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007b9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d103      	bne.n	8007bac <strncmp+0x1c>
 8007ba4:	42a0      	cmp	r0, r4
 8007ba6:	d001      	beq.n	8007bac <strncmp+0x1c>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1f5      	bne.n	8007b98 <strncmp+0x8>
 8007bac:	1a98      	subs	r0, r3, r2
 8007bae:	bd10      	pop	{r4, pc}
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	e7fc      	b.n	8007bae <strncmp+0x1e>

08007bb4 <__ascii_wctomb>:
 8007bb4:	b149      	cbz	r1, 8007bca <__ascii_wctomb+0x16>
 8007bb6:	2aff      	cmp	r2, #255	; 0xff
 8007bb8:	bf85      	ittet	hi
 8007bba:	238a      	movhi	r3, #138	; 0x8a
 8007bbc:	6003      	strhi	r3, [r0, #0]
 8007bbe:	700a      	strbls	r2, [r1, #0]
 8007bc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007bc4:	bf98      	it	ls
 8007bc6:	2001      	movls	r0, #1
 8007bc8:	4770      	bx	lr
 8007bca:	4608      	mov	r0, r1
 8007bcc:	4770      	bx	lr
	...

08007bd0 <__assert_func>:
 8007bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bd2:	4614      	mov	r4, r2
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <__assert_func+0x2c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4605      	mov	r5, r0
 8007bdc:	68d8      	ldr	r0, [r3, #12]
 8007bde:	b14c      	cbz	r4, 8007bf4 <__assert_func+0x24>
 8007be0:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <__assert_func+0x30>)
 8007be2:	9100      	str	r1, [sp, #0]
 8007be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007be8:	4906      	ldr	r1, [pc, #24]	; (8007c04 <__assert_func+0x34>)
 8007bea:	462b      	mov	r3, r5
 8007bec:	f000 f80e 	bl	8007c0c <fiprintf>
 8007bf0:	f000 fa84 	bl	80080fc <abort>
 8007bf4:	4b04      	ldr	r3, [pc, #16]	; (8007c08 <__assert_func+0x38>)
 8007bf6:	461c      	mov	r4, r3
 8007bf8:	e7f3      	b.n	8007be2 <__assert_func+0x12>
 8007bfa:	bf00      	nop
 8007bfc:	20000008 	.word	0x20000008
 8007c00:	08009b65 	.word	0x08009b65
 8007c04:	08009b72 	.word	0x08009b72
 8007c08:	08009ba0 	.word	0x08009ba0

08007c0c <fiprintf>:
 8007c0c:	b40e      	push	{r1, r2, r3}
 8007c0e:	b503      	push	{r0, r1, lr}
 8007c10:	4601      	mov	r1, r0
 8007c12:	ab03      	add	r3, sp, #12
 8007c14:	4805      	ldr	r0, [pc, #20]	; (8007c2c <fiprintf+0x20>)
 8007c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1a:	6800      	ldr	r0, [r0, #0]
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	f000 f87d 	bl	8007d1c <_vfiprintf_r>
 8007c22:	b002      	add	sp, #8
 8007c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c28:	b003      	add	sp, #12
 8007c2a:	4770      	bx	lr
 8007c2c:	20000008 	.word	0x20000008

08007c30 <memmove>:
 8007c30:	4288      	cmp	r0, r1
 8007c32:	b510      	push	{r4, lr}
 8007c34:	eb01 0402 	add.w	r4, r1, r2
 8007c38:	d902      	bls.n	8007c40 <memmove+0x10>
 8007c3a:	4284      	cmp	r4, r0
 8007c3c:	4623      	mov	r3, r4
 8007c3e:	d807      	bhi.n	8007c50 <memmove+0x20>
 8007c40:	1e43      	subs	r3, r0, #1
 8007c42:	42a1      	cmp	r1, r4
 8007c44:	d008      	beq.n	8007c58 <memmove+0x28>
 8007c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c4e:	e7f8      	b.n	8007c42 <memmove+0x12>
 8007c50:	4402      	add	r2, r0
 8007c52:	4601      	mov	r1, r0
 8007c54:	428a      	cmp	r2, r1
 8007c56:	d100      	bne.n	8007c5a <memmove+0x2a>
 8007c58:	bd10      	pop	{r4, pc}
 8007c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c62:	e7f7      	b.n	8007c54 <memmove+0x24>

08007c64 <__malloc_lock>:
 8007c64:	4801      	ldr	r0, [pc, #4]	; (8007c6c <__malloc_lock+0x8>)
 8007c66:	f000 bc09 	b.w	800847c <__retarget_lock_acquire_recursive>
 8007c6a:	bf00      	nop
 8007c6c:	200002bc 	.word	0x200002bc

08007c70 <__malloc_unlock>:
 8007c70:	4801      	ldr	r0, [pc, #4]	; (8007c78 <__malloc_unlock+0x8>)
 8007c72:	f000 bc04 	b.w	800847e <__retarget_lock_release_recursive>
 8007c76:	bf00      	nop
 8007c78:	200002bc 	.word	0x200002bc

08007c7c <_realloc_r>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	4607      	mov	r7, r0
 8007c80:	4614      	mov	r4, r2
 8007c82:	460e      	mov	r6, r1
 8007c84:	b921      	cbnz	r1, 8007c90 <_realloc_r+0x14>
 8007c86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	f7ff bdb2 	b.w	80077f4 <_malloc_r>
 8007c90:	b922      	cbnz	r2, 8007c9c <_realloc_r+0x20>
 8007c92:	f7ff fd5f 	bl	8007754 <_free_r>
 8007c96:	4625      	mov	r5, r4
 8007c98:	4628      	mov	r0, r5
 8007c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c9c:	f000 fc54 	bl	8008548 <_malloc_usable_size_r>
 8007ca0:	42a0      	cmp	r0, r4
 8007ca2:	d20f      	bcs.n	8007cc4 <_realloc_r+0x48>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	f7ff fda4 	bl	80077f4 <_malloc_r>
 8007cac:	4605      	mov	r5, r0
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d0f2      	beq.n	8007c98 <_realloc_r+0x1c>
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4622      	mov	r2, r4
 8007cb6:	f7ff f875 	bl	8006da4 <memcpy>
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	f7ff fd49 	bl	8007754 <_free_r>
 8007cc2:	e7e9      	b.n	8007c98 <_realloc_r+0x1c>
 8007cc4:	4635      	mov	r5, r6
 8007cc6:	e7e7      	b.n	8007c98 <_realloc_r+0x1c>

08007cc8 <__sfputc_r>:
 8007cc8:	6893      	ldr	r3, [r2, #8]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	b410      	push	{r4}
 8007cd0:	6093      	str	r3, [r2, #8]
 8007cd2:	da08      	bge.n	8007ce6 <__sfputc_r+0x1e>
 8007cd4:	6994      	ldr	r4, [r2, #24]
 8007cd6:	42a3      	cmp	r3, r4
 8007cd8:	db01      	blt.n	8007cde <__sfputc_r+0x16>
 8007cda:	290a      	cmp	r1, #10
 8007cdc:	d103      	bne.n	8007ce6 <__sfputc_r+0x1e>
 8007cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ce2:	f000 b94b 	b.w	8007f7c <__swbuf_r>
 8007ce6:	6813      	ldr	r3, [r2, #0]
 8007ce8:	1c58      	adds	r0, r3, #1
 8007cea:	6010      	str	r0, [r2, #0]
 8007cec:	7019      	strb	r1, [r3, #0]
 8007cee:	4608      	mov	r0, r1
 8007cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <__sfputs_r>:
 8007cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	460f      	mov	r7, r1
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	18d5      	adds	r5, r2, r3
 8007d00:	42ac      	cmp	r4, r5
 8007d02:	d101      	bne.n	8007d08 <__sfputs_r+0x12>
 8007d04:	2000      	movs	r0, #0
 8007d06:	e007      	b.n	8007d18 <__sfputs_r+0x22>
 8007d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d0c:	463a      	mov	r2, r7
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7ff ffda 	bl	8007cc8 <__sfputc_r>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d1f3      	bne.n	8007d00 <__sfputs_r+0xa>
 8007d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d1c <_vfiprintf_r>:
 8007d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d20:	460d      	mov	r5, r1
 8007d22:	b09d      	sub	sp, #116	; 0x74
 8007d24:	4614      	mov	r4, r2
 8007d26:	4698      	mov	r8, r3
 8007d28:	4606      	mov	r6, r0
 8007d2a:	b118      	cbz	r0, 8007d34 <_vfiprintf_r+0x18>
 8007d2c:	6983      	ldr	r3, [r0, #24]
 8007d2e:	b90b      	cbnz	r3, 8007d34 <_vfiprintf_r+0x18>
 8007d30:	f000 fb06 	bl	8008340 <__sinit>
 8007d34:	4b89      	ldr	r3, [pc, #548]	; (8007f5c <_vfiprintf_r+0x240>)
 8007d36:	429d      	cmp	r5, r3
 8007d38:	d11b      	bne.n	8007d72 <_vfiprintf_r+0x56>
 8007d3a:	6875      	ldr	r5, [r6, #4]
 8007d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d3e:	07d9      	lsls	r1, r3, #31
 8007d40:	d405      	bmi.n	8007d4e <_vfiprintf_r+0x32>
 8007d42:	89ab      	ldrh	r3, [r5, #12]
 8007d44:	059a      	lsls	r2, r3, #22
 8007d46:	d402      	bmi.n	8007d4e <_vfiprintf_r+0x32>
 8007d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d4a:	f000 fb97 	bl	800847c <__retarget_lock_acquire_recursive>
 8007d4e:	89ab      	ldrh	r3, [r5, #12]
 8007d50:	071b      	lsls	r3, r3, #28
 8007d52:	d501      	bpl.n	8007d58 <_vfiprintf_r+0x3c>
 8007d54:	692b      	ldr	r3, [r5, #16]
 8007d56:	b9eb      	cbnz	r3, 8007d94 <_vfiprintf_r+0x78>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f000 f960 	bl	8008020 <__swsetup_r>
 8007d60:	b1c0      	cbz	r0, 8007d94 <_vfiprintf_r+0x78>
 8007d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d64:	07dc      	lsls	r4, r3, #31
 8007d66:	d50e      	bpl.n	8007d86 <_vfiprintf_r+0x6a>
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	b01d      	add	sp, #116	; 0x74
 8007d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d72:	4b7b      	ldr	r3, [pc, #492]	; (8007f60 <_vfiprintf_r+0x244>)
 8007d74:	429d      	cmp	r5, r3
 8007d76:	d101      	bne.n	8007d7c <_vfiprintf_r+0x60>
 8007d78:	68b5      	ldr	r5, [r6, #8]
 8007d7a:	e7df      	b.n	8007d3c <_vfiprintf_r+0x20>
 8007d7c:	4b79      	ldr	r3, [pc, #484]	; (8007f64 <_vfiprintf_r+0x248>)
 8007d7e:	429d      	cmp	r5, r3
 8007d80:	bf08      	it	eq
 8007d82:	68f5      	ldreq	r5, [r6, #12]
 8007d84:	e7da      	b.n	8007d3c <_vfiprintf_r+0x20>
 8007d86:	89ab      	ldrh	r3, [r5, #12]
 8007d88:	0598      	lsls	r0, r3, #22
 8007d8a:	d4ed      	bmi.n	8007d68 <_vfiprintf_r+0x4c>
 8007d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d8e:	f000 fb76 	bl	800847e <__retarget_lock_release_recursive>
 8007d92:	e7e9      	b.n	8007d68 <_vfiprintf_r+0x4c>
 8007d94:	2300      	movs	r3, #0
 8007d96:	9309      	str	r3, [sp, #36]	; 0x24
 8007d98:	2320      	movs	r3, #32
 8007d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007da2:	2330      	movs	r3, #48	; 0x30
 8007da4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f68 <_vfiprintf_r+0x24c>
 8007da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dac:	f04f 0901 	mov.w	r9, #1
 8007db0:	4623      	mov	r3, r4
 8007db2:	469a      	mov	sl, r3
 8007db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007db8:	b10a      	cbz	r2, 8007dbe <_vfiprintf_r+0xa2>
 8007dba:	2a25      	cmp	r2, #37	; 0x25
 8007dbc:	d1f9      	bne.n	8007db2 <_vfiprintf_r+0x96>
 8007dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8007dc2:	d00b      	beq.n	8007ddc <_vfiprintf_r+0xc0>
 8007dc4:	465b      	mov	r3, fp
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f7ff ff93 	bl	8007cf6 <__sfputs_r>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	f000 80aa 	beq.w	8007f2a <_vfiprintf_r+0x20e>
 8007dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dd8:	445a      	add	r2, fp
 8007dda:	9209      	str	r2, [sp, #36]	; 0x24
 8007ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80a2 	beq.w	8007f2a <_vfiprintf_r+0x20e>
 8007de6:	2300      	movs	r3, #0
 8007de8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007df0:	f10a 0a01 	add.w	sl, sl, #1
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	9307      	str	r3, [sp, #28]
 8007df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8007dfe:	4654      	mov	r4, sl
 8007e00:	2205      	movs	r2, #5
 8007e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e06:	4858      	ldr	r0, [pc, #352]	; (8007f68 <_vfiprintf_r+0x24c>)
 8007e08:	f7f8 f9ea 	bl	80001e0 <memchr>
 8007e0c:	9a04      	ldr	r2, [sp, #16]
 8007e0e:	b9d8      	cbnz	r0, 8007e48 <_vfiprintf_r+0x12c>
 8007e10:	06d1      	lsls	r1, r2, #27
 8007e12:	bf44      	itt	mi
 8007e14:	2320      	movmi	r3, #32
 8007e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e1a:	0713      	lsls	r3, r2, #28
 8007e1c:	bf44      	itt	mi
 8007e1e:	232b      	movmi	r3, #43	; 0x2b
 8007e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e24:	f89a 3000 	ldrb.w	r3, [sl]
 8007e28:	2b2a      	cmp	r3, #42	; 0x2a
 8007e2a:	d015      	beq.n	8007e58 <_vfiprintf_r+0x13c>
 8007e2c:	9a07      	ldr	r2, [sp, #28]
 8007e2e:	4654      	mov	r4, sl
 8007e30:	2000      	movs	r0, #0
 8007e32:	f04f 0c0a 	mov.w	ip, #10
 8007e36:	4621      	mov	r1, r4
 8007e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e3c:	3b30      	subs	r3, #48	; 0x30
 8007e3e:	2b09      	cmp	r3, #9
 8007e40:	d94e      	bls.n	8007ee0 <_vfiprintf_r+0x1c4>
 8007e42:	b1b0      	cbz	r0, 8007e72 <_vfiprintf_r+0x156>
 8007e44:	9207      	str	r2, [sp, #28]
 8007e46:	e014      	b.n	8007e72 <_vfiprintf_r+0x156>
 8007e48:	eba0 0308 	sub.w	r3, r0, r8
 8007e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e50:	4313      	orrs	r3, r2
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	46a2      	mov	sl, r4
 8007e56:	e7d2      	b.n	8007dfe <_vfiprintf_r+0xe2>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	1d19      	adds	r1, r3, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	9103      	str	r1, [sp, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	bfbb      	ittet	lt
 8007e64:	425b      	neglt	r3, r3
 8007e66:	f042 0202 	orrlt.w	r2, r2, #2
 8007e6a:	9307      	strge	r3, [sp, #28]
 8007e6c:	9307      	strlt	r3, [sp, #28]
 8007e6e:	bfb8      	it	lt
 8007e70:	9204      	strlt	r2, [sp, #16]
 8007e72:	7823      	ldrb	r3, [r4, #0]
 8007e74:	2b2e      	cmp	r3, #46	; 0x2e
 8007e76:	d10c      	bne.n	8007e92 <_vfiprintf_r+0x176>
 8007e78:	7863      	ldrb	r3, [r4, #1]
 8007e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e7c:	d135      	bne.n	8007eea <_vfiprintf_r+0x1ce>
 8007e7e:	9b03      	ldr	r3, [sp, #12]
 8007e80:	1d1a      	adds	r2, r3, #4
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	9203      	str	r2, [sp, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bfb8      	it	lt
 8007e8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e8e:	3402      	adds	r4, #2
 8007e90:	9305      	str	r3, [sp, #20]
 8007e92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f78 <_vfiprintf_r+0x25c>
 8007e96:	7821      	ldrb	r1, [r4, #0]
 8007e98:	2203      	movs	r2, #3
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	f7f8 f9a0 	bl	80001e0 <memchr>
 8007ea0:	b140      	cbz	r0, 8007eb4 <_vfiprintf_r+0x198>
 8007ea2:	2340      	movs	r3, #64	; 0x40
 8007ea4:	eba0 000a 	sub.w	r0, r0, sl
 8007ea8:	fa03 f000 	lsl.w	r0, r3, r0
 8007eac:	9b04      	ldr	r3, [sp, #16]
 8007eae:	4303      	orrs	r3, r0
 8007eb0:	3401      	adds	r4, #1
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb8:	482c      	ldr	r0, [pc, #176]	; (8007f6c <_vfiprintf_r+0x250>)
 8007eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ebe:	2206      	movs	r2, #6
 8007ec0:	f7f8 f98e 	bl	80001e0 <memchr>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d03f      	beq.n	8007f48 <_vfiprintf_r+0x22c>
 8007ec8:	4b29      	ldr	r3, [pc, #164]	; (8007f70 <_vfiprintf_r+0x254>)
 8007eca:	bb1b      	cbnz	r3, 8007f14 <_vfiprintf_r+0x1f8>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	3307      	adds	r3, #7
 8007ed0:	f023 0307 	bic.w	r3, r3, #7
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	9303      	str	r3, [sp, #12]
 8007ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eda:	443b      	add	r3, r7
 8007edc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ede:	e767      	b.n	8007db0 <_vfiprintf_r+0x94>
 8007ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	e7a5      	b.n	8007e36 <_vfiprintf_r+0x11a>
 8007eea:	2300      	movs	r3, #0
 8007eec:	3401      	adds	r4, #1
 8007eee:	9305      	str	r3, [sp, #20]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f04f 0c0a 	mov.w	ip, #10
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007efc:	3a30      	subs	r2, #48	; 0x30
 8007efe:	2a09      	cmp	r2, #9
 8007f00:	d903      	bls.n	8007f0a <_vfiprintf_r+0x1ee>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0c5      	beq.n	8007e92 <_vfiprintf_r+0x176>
 8007f06:	9105      	str	r1, [sp, #20]
 8007f08:	e7c3      	b.n	8007e92 <_vfiprintf_r+0x176>
 8007f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f0e:	4604      	mov	r4, r0
 8007f10:	2301      	movs	r3, #1
 8007f12:	e7f0      	b.n	8007ef6 <_vfiprintf_r+0x1da>
 8007f14:	ab03      	add	r3, sp, #12
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	462a      	mov	r2, r5
 8007f1a:	4b16      	ldr	r3, [pc, #88]	; (8007f74 <_vfiprintf_r+0x258>)
 8007f1c:	a904      	add	r1, sp, #16
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7fc f886 	bl	8004030 <_printf_float>
 8007f24:	4607      	mov	r7, r0
 8007f26:	1c78      	adds	r0, r7, #1
 8007f28:	d1d6      	bne.n	8007ed8 <_vfiprintf_r+0x1bc>
 8007f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f2c:	07d9      	lsls	r1, r3, #31
 8007f2e:	d405      	bmi.n	8007f3c <_vfiprintf_r+0x220>
 8007f30:	89ab      	ldrh	r3, [r5, #12]
 8007f32:	059a      	lsls	r2, r3, #22
 8007f34:	d402      	bmi.n	8007f3c <_vfiprintf_r+0x220>
 8007f36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f38:	f000 faa1 	bl	800847e <__retarget_lock_release_recursive>
 8007f3c:	89ab      	ldrh	r3, [r5, #12]
 8007f3e:	065b      	lsls	r3, r3, #25
 8007f40:	f53f af12 	bmi.w	8007d68 <_vfiprintf_r+0x4c>
 8007f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f46:	e711      	b.n	8007d6c <_vfiprintf_r+0x50>
 8007f48:	ab03      	add	r3, sp, #12
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <_vfiprintf_r+0x258>)
 8007f50:	a904      	add	r1, sp, #16
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7fc fb10 	bl	8004578 <_printf_i>
 8007f58:	e7e4      	b.n	8007f24 <_vfiprintf_r+0x208>
 8007f5a:	bf00      	nop
 8007f5c:	08009bc4 	.word	0x08009bc4
 8007f60:	08009be4 	.word	0x08009be4
 8007f64:	08009ba4 	.word	0x08009ba4
 8007f68:	08009b54 	.word	0x08009b54
 8007f6c:	08009b5e 	.word	0x08009b5e
 8007f70:	08004031 	.word	0x08004031
 8007f74:	08007cf7 	.word	0x08007cf7
 8007f78:	08009b5a 	.word	0x08009b5a

08007f7c <__swbuf_r>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	460e      	mov	r6, r1
 8007f80:	4614      	mov	r4, r2
 8007f82:	4605      	mov	r5, r0
 8007f84:	b118      	cbz	r0, 8007f8e <__swbuf_r+0x12>
 8007f86:	6983      	ldr	r3, [r0, #24]
 8007f88:	b90b      	cbnz	r3, 8007f8e <__swbuf_r+0x12>
 8007f8a:	f000 f9d9 	bl	8008340 <__sinit>
 8007f8e:	4b21      	ldr	r3, [pc, #132]	; (8008014 <__swbuf_r+0x98>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	d12b      	bne.n	8007fec <__swbuf_r+0x70>
 8007f94:	686c      	ldr	r4, [r5, #4]
 8007f96:	69a3      	ldr	r3, [r4, #24]
 8007f98:	60a3      	str	r3, [r4, #8]
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	071a      	lsls	r2, r3, #28
 8007f9e:	d52f      	bpl.n	8008000 <__swbuf_r+0x84>
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	b36b      	cbz	r3, 8008000 <__swbuf_r+0x84>
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	6820      	ldr	r0, [r4, #0]
 8007fa8:	1ac0      	subs	r0, r0, r3
 8007faa:	6963      	ldr	r3, [r4, #20]
 8007fac:	b2f6      	uxtb	r6, r6
 8007fae:	4283      	cmp	r3, r0
 8007fb0:	4637      	mov	r7, r6
 8007fb2:	dc04      	bgt.n	8007fbe <__swbuf_r+0x42>
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f000 f92e 	bl	8008218 <_fflush_r>
 8007fbc:	bb30      	cbnz	r0, 800800c <__swbuf_r+0x90>
 8007fbe:	68a3      	ldr	r3, [r4, #8]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	60a3      	str	r3, [r4, #8]
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	6022      	str	r2, [r4, #0]
 8007fca:	701e      	strb	r6, [r3, #0]
 8007fcc:	6963      	ldr	r3, [r4, #20]
 8007fce:	3001      	adds	r0, #1
 8007fd0:	4283      	cmp	r3, r0
 8007fd2:	d004      	beq.n	8007fde <__swbuf_r+0x62>
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	07db      	lsls	r3, r3, #31
 8007fd8:	d506      	bpl.n	8007fe8 <__swbuf_r+0x6c>
 8007fda:	2e0a      	cmp	r6, #10
 8007fdc:	d104      	bne.n	8007fe8 <__swbuf_r+0x6c>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 f919 	bl	8008218 <_fflush_r>
 8007fe6:	b988      	cbnz	r0, 800800c <__swbuf_r+0x90>
 8007fe8:	4638      	mov	r0, r7
 8007fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <__swbuf_r+0x9c>)
 8007fee:	429c      	cmp	r4, r3
 8007ff0:	d101      	bne.n	8007ff6 <__swbuf_r+0x7a>
 8007ff2:	68ac      	ldr	r4, [r5, #8]
 8007ff4:	e7cf      	b.n	8007f96 <__swbuf_r+0x1a>
 8007ff6:	4b09      	ldr	r3, [pc, #36]	; (800801c <__swbuf_r+0xa0>)
 8007ff8:	429c      	cmp	r4, r3
 8007ffa:	bf08      	it	eq
 8007ffc:	68ec      	ldreq	r4, [r5, #12]
 8007ffe:	e7ca      	b.n	8007f96 <__swbuf_r+0x1a>
 8008000:	4621      	mov	r1, r4
 8008002:	4628      	mov	r0, r5
 8008004:	f000 f80c 	bl	8008020 <__swsetup_r>
 8008008:	2800      	cmp	r0, #0
 800800a:	d0cb      	beq.n	8007fa4 <__swbuf_r+0x28>
 800800c:	f04f 37ff 	mov.w	r7, #4294967295
 8008010:	e7ea      	b.n	8007fe8 <__swbuf_r+0x6c>
 8008012:	bf00      	nop
 8008014:	08009bc4 	.word	0x08009bc4
 8008018:	08009be4 	.word	0x08009be4
 800801c:	08009ba4 	.word	0x08009ba4

08008020 <__swsetup_r>:
 8008020:	4b32      	ldr	r3, [pc, #200]	; (80080ec <__swsetup_r+0xcc>)
 8008022:	b570      	push	{r4, r5, r6, lr}
 8008024:	681d      	ldr	r5, [r3, #0]
 8008026:	4606      	mov	r6, r0
 8008028:	460c      	mov	r4, r1
 800802a:	b125      	cbz	r5, 8008036 <__swsetup_r+0x16>
 800802c:	69ab      	ldr	r3, [r5, #24]
 800802e:	b913      	cbnz	r3, 8008036 <__swsetup_r+0x16>
 8008030:	4628      	mov	r0, r5
 8008032:	f000 f985 	bl	8008340 <__sinit>
 8008036:	4b2e      	ldr	r3, [pc, #184]	; (80080f0 <__swsetup_r+0xd0>)
 8008038:	429c      	cmp	r4, r3
 800803a:	d10f      	bne.n	800805c <__swsetup_r+0x3c>
 800803c:	686c      	ldr	r4, [r5, #4]
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008044:	0719      	lsls	r1, r3, #28
 8008046:	d42c      	bmi.n	80080a2 <__swsetup_r+0x82>
 8008048:	06dd      	lsls	r5, r3, #27
 800804a:	d411      	bmi.n	8008070 <__swsetup_r+0x50>
 800804c:	2309      	movs	r3, #9
 800804e:	6033      	str	r3, [r6, #0]
 8008050:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008054:	81a3      	strh	r3, [r4, #12]
 8008056:	f04f 30ff 	mov.w	r0, #4294967295
 800805a:	e03e      	b.n	80080da <__swsetup_r+0xba>
 800805c:	4b25      	ldr	r3, [pc, #148]	; (80080f4 <__swsetup_r+0xd4>)
 800805e:	429c      	cmp	r4, r3
 8008060:	d101      	bne.n	8008066 <__swsetup_r+0x46>
 8008062:	68ac      	ldr	r4, [r5, #8]
 8008064:	e7eb      	b.n	800803e <__swsetup_r+0x1e>
 8008066:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <__swsetup_r+0xd8>)
 8008068:	429c      	cmp	r4, r3
 800806a:	bf08      	it	eq
 800806c:	68ec      	ldreq	r4, [r5, #12]
 800806e:	e7e6      	b.n	800803e <__swsetup_r+0x1e>
 8008070:	0758      	lsls	r0, r3, #29
 8008072:	d512      	bpl.n	800809a <__swsetup_r+0x7a>
 8008074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008076:	b141      	cbz	r1, 800808a <__swsetup_r+0x6a>
 8008078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800807c:	4299      	cmp	r1, r3
 800807e:	d002      	beq.n	8008086 <__swsetup_r+0x66>
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff fb67 	bl	8007754 <_free_r>
 8008086:	2300      	movs	r3, #0
 8008088:	6363      	str	r3, [r4, #52]	; 0x34
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	2300      	movs	r3, #0
 8008094:	6063      	str	r3, [r4, #4]
 8008096:	6923      	ldr	r3, [r4, #16]
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f043 0308 	orr.w	r3, r3, #8
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	b94b      	cbnz	r3, 80080ba <__swsetup_r+0x9a>
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b0:	d003      	beq.n	80080ba <__swsetup_r+0x9a>
 80080b2:	4621      	mov	r1, r4
 80080b4:	4630      	mov	r0, r6
 80080b6:	f000 fa07 	bl	80084c8 <__smakebuf_r>
 80080ba:	89a0      	ldrh	r0, [r4, #12]
 80080bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080c0:	f010 0301 	ands.w	r3, r0, #1
 80080c4:	d00a      	beq.n	80080dc <__swsetup_r+0xbc>
 80080c6:	2300      	movs	r3, #0
 80080c8:	60a3      	str	r3, [r4, #8]
 80080ca:	6963      	ldr	r3, [r4, #20]
 80080cc:	425b      	negs	r3, r3
 80080ce:	61a3      	str	r3, [r4, #24]
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	b943      	cbnz	r3, 80080e6 <__swsetup_r+0xc6>
 80080d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080d8:	d1ba      	bne.n	8008050 <__swsetup_r+0x30>
 80080da:	bd70      	pop	{r4, r5, r6, pc}
 80080dc:	0781      	lsls	r1, r0, #30
 80080de:	bf58      	it	pl
 80080e0:	6963      	ldrpl	r3, [r4, #20]
 80080e2:	60a3      	str	r3, [r4, #8]
 80080e4:	e7f4      	b.n	80080d0 <__swsetup_r+0xb0>
 80080e6:	2000      	movs	r0, #0
 80080e8:	e7f7      	b.n	80080da <__swsetup_r+0xba>
 80080ea:	bf00      	nop
 80080ec:	20000008 	.word	0x20000008
 80080f0:	08009bc4 	.word	0x08009bc4
 80080f4:	08009be4 	.word	0x08009be4
 80080f8:	08009ba4 	.word	0x08009ba4

080080fc <abort>:
 80080fc:	b508      	push	{r3, lr}
 80080fe:	2006      	movs	r0, #6
 8008100:	f000 fa52 	bl	80085a8 <raise>
 8008104:	2001      	movs	r0, #1
 8008106:	f7fa fb27 	bl	8002758 <_exit>
	...

0800810c <__sflush_r>:
 800810c:	898a      	ldrh	r2, [r1, #12]
 800810e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008112:	4605      	mov	r5, r0
 8008114:	0710      	lsls	r0, r2, #28
 8008116:	460c      	mov	r4, r1
 8008118:	d458      	bmi.n	80081cc <__sflush_r+0xc0>
 800811a:	684b      	ldr	r3, [r1, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dc05      	bgt.n	800812c <__sflush_r+0x20>
 8008120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	dc02      	bgt.n	800812c <__sflush_r+0x20>
 8008126:	2000      	movs	r0, #0
 8008128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800812e:	2e00      	cmp	r6, #0
 8008130:	d0f9      	beq.n	8008126 <__sflush_r+0x1a>
 8008132:	2300      	movs	r3, #0
 8008134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008138:	682f      	ldr	r7, [r5, #0]
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	d032      	beq.n	80081a4 <__sflush_r+0x98>
 800813e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	075a      	lsls	r2, r3, #29
 8008144:	d505      	bpl.n	8008152 <__sflush_r+0x46>
 8008146:	6863      	ldr	r3, [r4, #4]
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800814c:	b10b      	cbz	r3, 8008152 <__sflush_r+0x46>
 800814e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008150:	1ac0      	subs	r0, r0, r3
 8008152:	2300      	movs	r3, #0
 8008154:	4602      	mov	r2, r0
 8008156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008158:	6a21      	ldr	r1, [r4, #32]
 800815a:	4628      	mov	r0, r5
 800815c:	47b0      	blx	r6
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	d106      	bne.n	8008172 <__sflush_r+0x66>
 8008164:	6829      	ldr	r1, [r5, #0]
 8008166:	291d      	cmp	r1, #29
 8008168:	d82c      	bhi.n	80081c4 <__sflush_r+0xb8>
 800816a:	4a2a      	ldr	r2, [pc, #168]	; (8008214 <__sflush_r+0x108>)
 800816c:	40ca      	lsrs	r2, r1
 800816e:	07d6      	lsls	r6, r2, #31
 8008170:	d528      	bpl.n	80081c4 <__sflush_r+0xb8>
 8008172:	2200      	movs	r2, #0
 8008174:	6062      	str	r2, [r4, #4]
 8008176:	04d9      	lsls	r1, r3, #19
 8008178:	6922      	ldr	r2, [r4, #16]
 800817a:	6022      	str	r2, [r4, #0]
 800817c:	d504      	bpl.n	8008188 <__sflush_r+0x7c>
 800817e:	1c42      	adds	r2, r0, #1
 8008180:	d101      	bne.n	8008186 <__sflush_r+0x7a>
 8008182:	682b      	ldr	r3, [r5, #0]
 8008184:	b903      	cbnz	r3, 8008188 <__sflush_r+0x7c>
 8008186:	6560      	str	r0, [r4, #84]	; 0x54
 8008188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800818a:	602f      	str	r7, [r5, #0]
 800818c:	2900      	cmp	r1, #0
 800818e:	d0ca      	beq.n	8008126 <__sflush_r+0x1a>
 8008190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008194:	4299      	cmp	r1, r3
 8008196:	d002      	beq.n	800819e <__sflush_r+0x92>
 8008198:	4628      	mov	r0, r5
 800819a:	f7ff fadb 	bl	8007754 <_free_r>
 800819e:	2000      	movs	r0, #0
 80081a0:	6360      	str	r0, [r4, #52]	; 0x34
 80081a2:	e7c1      	b.n	8008128 <__sflush_r+0x1c>
 80081a4:	6a21      	ldr	r1, [r4, #32]
 80081a6:	2301      	movs	r3, #1
 80081a8:	4628      	mov	r0, r5
 80081aa:	47b0      	blx	r6
 80081ac:	1c41      	adds	r1, r0, #1
 80081ae:	d1c7      	bne.n	8008140 <__sflush_r+0x34>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0c4      	beq.n	8008140 <__sflush_r+0x34>
 80081b6:	2b1d      	cmp	r3, #29
 80081b8:	d001      	beq.n	80081be <__sflush_r+0xb2>
 80081ba:	2b16      	cmp	r3, #22
 80081bc:	d101      	bne.n	80081c2 <__sflush_r+0xb6>
 80081be:	602f      	str	r7, [r5, #0]
 80081c0:	e7b1      	b.n	8008126 <__sflush_r+0x1a>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	e7ad      	b.n	8008128 <__sflush_r+0x1c>
 80081cc:	690f      	ldr	r7, [r1, #16]
 80081ce:	2f00      	cmp	r7, #0
 80081d0:	d0a9      	beq.n	8008126 <__sflush_r+0x1a>
 80081d2:	0793      	lsls	r3, r2, #30
 80081d4:	680e      	ldr	r6, [r1, #0]
 80081d6:	bf08      	it	eq
 80081d8:	694b      	ldreq	r3, [r1, #20]
 80081da:	600f      	str	r7, [r1, #0]
 80081dc:	bf18      	it	ne
 80081de:	2300      	movne	r3, #0
 80081e0:	eba6 0807 	sub.w	r8, r6, r7
 80081e4:	608b      	str	r3, [r1, #8]
 80081e6:	f1b8 0f00 	cmp.w	r8, #0
 80081ea:	dd9c      	ble.n	8008126 <__sflush_r+0x1a>
 80081ec:	6a21      	ldr	r1, [r4, #32]
 80081ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081f0:	4643      	mov	r3, r8
 80081f2:	463a      	mov	r2, r7
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b0      	blx	r6
 80081f8:	2800      	cmp	r0, #0
 80081fa:	dc06      	bgt.n	800820a <__sflush_r+0xfe>
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008202:	81a3      	strh	r3, [r4, #12]
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	e78e      	b.n	8008128 <__sflush_r+0x1c>
 800820a:	4407      	add	r7, r0
 800820c:	eba8 0800 	sub.w	r8, r8, r0
 8008210:	e7e9      	b.n	80081e6 <__sflush_r+0xda>
 8008212:	bf00      	nop
 8008214:	20400001 	.word	0x20400001

08008218 <_fflush_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	690b      	ldr	r3, [r1, #16]
 800821c:	4605      	mov	r5, r0
 800821e:	460c      	mov	r4, r1
 8008220:	b913      	cbnz	r3, 8008228 <_fflush_r+0x10>
 8008222:	2500      	movs	r5, #0
 8008224:	4628      	mov	r0, r5
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	b118      	cbz	r0, 8008232 <_fflush_r+0x1a>
 800822a:	6983      	ldr	r3, [r0, #24]
 800822c:	b90b      	cbnz	r3, 8008232 <_fflush_r+0x1a>
 800822e:	f000 f887 	bl	8008340 <__sinit>
 8008232:	4b14      	ldr	r3, [pc, #80]	; (8008284 <_fflush_r+0x6c>)
 8008234:	429c      	cmp	r4, r3
 8008236:	d11b      	bne.n	8008270 <_fflush_r+0x58>
 8008238:	686c      	ldr	r4, [r5, #4]
 800823a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0ef      	beq.n	8008222 <_fflush_r+0xa>
 8008242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008244:	07d0      	lsls	r0, r2, #31
 8008246:	d404      	bmi.n	8008252 <_fflush_r+0x3a>
 8008248:	0599      	lsls	r1, r3, #22
 800824a:	d402      	bmi.n	8008252 <_fflush_r+0x3a>
 800824c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800824e:	f000 f915 	bl	800847c <__retarget_lock_acquire_recursive>
 8008252:	4628      	mov	r0, r5
 8008254:	4621      	mov	r1, r4
 8008256:	f7ff ff59 	bl	800810c <__sflush_r>
 800825a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800825c:	07da      	lsls	r2, r3, #31
 800825e:	4605      	mov	r5, r0
 8008260:	d4e0      	bmi.n	8008224 <_fflush_r+0xc>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	059b      	lsls	r3, r3, #22
 8008266:	d4dd      	bmi.n	8008224 <_fflush_r+0xc>
 8008268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826a:	f000 f908 	bl	800847e <__retarget_lock_release_recursive>
 800826e:	e7d9      	b.n	8008224 <_fflush_r+0xc>
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <_fflush_r+0x70>)
 8008272:	429c      	cmp	r4, r3
 8008274:	d101      	bne.n	800827a <_fflush_r+0x62>
 8008276:	68ac      	ldr	r4, [r5, #8]
 8008278:	e7df      	b.n	800823a <_fflush_r+0x22>
 800827a:	4b04      	ldr	r3, [pc, #16]	; (800828c <_fflush_r+0x74>)
 800827c:	429c      	cmp	r4, r3
 800827e:	bf08      	it	eq
 8008280:	68ec      	ldreq	r4, [r5, #12]
 8008282:	e7da      	b.n	800823a <_fflush_r+0x22>
 8008284:	08009bc4 	.word	0x08009bc4
 8008288:	08009be4 	.word	0x08009be4
 800828c:	08009ba4 	.word	0x08009ba4

08008290 <std>:
 8008290:	2300      	movs	r3, #0
 8008292:	b510      	push	{r4, lr}
 8008294:	4604      	mov	r4, r0
 8008296:	e9c0 3300 	strd	r3, r3, [r0]
 800829a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800829e:	6083      	str	r3, [r0, #8]
 80082a0:	8181      	strh	r1, [r0, #12]
 80082a2:	6643      	str	r3, [r0, #100]	; 0x64
 80082a4:	81c2      	strh	r2, [r0, #14]
 80082a6:	6183      	str	r3, [r0, #24]
 80082a8:	4619      	mov	r1, r3
 80082aa:	2208      	movs	r2, #8
 80082ac:	305c      	adds	r0, #92	; 0x5c
 80082ae:	f7fb fe17 	bl	8003ee0 <memset>
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <std+0x38>)
 80082b4:	6263      	str	r3, [r4, #36]	; 0x24
 80082b6:	4b05      	ldr	r3, [pc, #20]	; (80082cc <std+0x3c>)
 80082b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80082ba:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <std+0x40>)
 80082bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082be:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <std+0x44>)
 80082c0:	6224      	str	r4, [r4, #32]
 80082c2:	6323      	str	r3, [r4, #48]	; 0x30
 80082c4:	bd10      	pop	{r4, pc}
 80082c6:	bf00      	nop
 80082c8:	080085e1 	.word	0x080085e1
 80082cc:	08008603 	.word	0x08008603
 80082d0:	0800863b 	.word	0x0800863b
 80082d4:	0800865f 	.word	0x0800865f

080082d8 <_cleanup_r>:
 80082d8:	4901      	ldr	r1, [pc, #4]	; (80082e0 <_cleanup_r+0x8>)
 80082da:	f000 b8af 	b.w	800843c <_fwalk_reent>
 80082de:	bf00      	nop
 80082e0:	08008219 	.word	0x08008219

080082e4 <__sfmoreglue>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	1e4a      	subs	r2, r1, #1
 80082e8:	2568      	movs	r5, #104	; 0x68
 80082ea:	4355      	muls	r5, r2
 80082ec:	460e      	mov	r6, r1
 80082ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082f2:	f7ff fa7f 	bl	80077f4 <_malloc_r>
 80082f6:	4604      	mov	r4, r0
 80082f8:	b140      	cbz	r0, 800830c <__sfmoreglue+0x28>
 80082fa:	2100      	movs	r1, #0
 80082fc:	e9c0 1600 	strd	r1, r6, [r0]
 8008300:	300c      	adds	r0, #12
 8008302:	60a0      	str	r0, [r4, #8]
 8008304:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008308:	f7fb fdea 	bl	8003ee0 <memset>
 800830c:	4620      	mov	r0, r4
 800830e:	bd70      	pop	{r4, r5, r6, pc}

08008310 <__sfp_lock_acquire>:
 8008310:	4801      	ldr	r0, [pc, #4]	; (8008318 <__sfp_lock_acquire+0x8>)
 8008312:	f000 b8b3 	b.w	800847c <__retarget_lock_acquire_recursive>
 8008316:	bf00      	nop
 8008318:	200002c0 	.word	0x200002c0

0800831c <__sfp_lock_release>:
 800831c:	4801      	ldr	r0, [pc, #4]	; (8008324 <__sfp_lock_release+0x8>)
 800831e:	f000 b8ae 	b.w	800847e <__retarget_lock_release_recursive>
 8008322:	bf00      	nop
 8008324:	200002c0 	.word	0x200002c0

08008328 <__sinit_lock_acquire>:
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <__sinit_lock_acquire+0x8>)
 800832a:	f000 b8a7 	b.w	800847c <__retarget_lock_acquire_recursive>
 800832e:	bf00      	nop
 8008330:	200002bb 	.word	0x200002bb

08008334 <__sinit_lock_release>:
 8008334:	4801      	ldr	r0, [pc, #4]	; (800833c <__sinit_lock_release+0x8>)
 8008336:	f000 b8a2 	b.w	800847e <__retarget_lock_release_recursive>
 800833a:	bf00      	nop
 800833c:	200002bb 	.word	0x200002bb

08008340 <__sinit>:
 8008340:	b510      	push	{r4, lr}
 8008342:	4604      	mov	r4, r0
 8008344:	f7ff fff0 	bl	8008328 <__sinit_lock_acquire>
 8008348:	69a3      	ldr	r3, [r4, #24]
 800834a:	b11b      	cbz	r3, 8008354 <__sinit+0x14>
 800834c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008350:	f7ff bff0 	b.w	8008334 <__sinit_lock_release>
 8008354:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008358:	6523      	str	r3, [r4, #80]	; 0x50
 800835a:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <__sinit+0x68>)
 800835c:	4a13      	ldr	r2, [pc, #76]	; (80083ac <__sinit+0x6c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	62a2      	str	r2, [r4, #40]	; 0x28
 8008362:	42a3      	cmp	r3, r4
 8008364:	bf04      	itt	eq
 8008366:	2301      	moveq	r3, #1
 8008368:	61a3      	streq	r3, [r4, #24]
 800836a:	4620      	mov	r0, r4
 800836c:	f000 f820 	bl	80083b0 <__sfp>
 8008370:	6060      	str	r0, [r4, #4]
 8008372:	4620      	mov	r0, r4
 8008374:	f000 f81c 	bl	80083b0 <__sfp>
 8008378:	60a0      	str	r0, [r4, #8]
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f818 	bl	80083b0 <__sfp>
 8008380:	2200      	movs	r2, #0
 8008382:	60e0      	str	r0, [r4, #12]
 8008384:	2104      	movs	r1, #4
 8008386:	6860      	ldr	r0, [r4, #4]
 8008388:	f7ff ff82 	bl	8008290 <std>
 800838c:	68a0      	ldr	r0, [r4, #8]
 800838e:	2201      	movs	r2, #1
 8008390:	2109      	movs	r1, #9
 8008392:	f7ff ff7d 	bl	8008290 <std>
 8008396:	68e0      	ldr	r0, [r4, #12]
 8008398:	2202      	movs	r2, #2
 800839a:	2112      	movs	r1, #18
 800839c:	f7ff ff78 	bl	8008290 <std>
 80083a0:	2301      	movs	r3, #1
 80083a2:	61a3      	str	r3, [r4, #24]
 80083a4:	e7d2      	b.n	800834c <__sinit+0xc>
 80083a6:	bf00      	nop
 80083a8:	08009750 	.word	0x08009750
 80083ac:	080082d9 	.word	0x080082d9

080083b0 <__sfp>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	4607      	mov	r7, r0
 80083b4:	f7ff ffac 	bl	8008310 <__sfp_lock_acquire>
 80083b8:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <__sfp+0x84>)
 80083ba:	681e      	ldr	r6, [r3, #0]
 80083bc:	69b3      	ldr	r3, [r6, #24]
 80083be:	b913      	cbnz	r3, 80083c6 <__sfp+0x16>
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7ff ffbd 	bl	8008340 <__sinit>
 80083c6:	3648      	adds	r6, #72	; 0x48
 80083c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	d503      	bpl.n	80083d8 <__sfp+0x28>
 80083d0:	6833      	ldr	r3, [r6, #0]
 80083d2:	b30b      	cbz	r3, 8008418 <__sfp+0x68>
 80083d4:	6836      	ldr	r6, [r6, #0]
 80083d6:	e7f7      	b.n	80083c8 <__sfp+0x18>
 80083d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083dc:	b9d5      	cbnz	r5, 8008414 <__sfp+0x64>
 80083de:	4b16      	ldr	r3, [pc, #88]	; (8008438 <__sfp+0x88>)
 80083e0:	60e3      	str	r3, [r4, #12]
 80083e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083e6:	6665      	str	r5, [r4, #100]	; 0x64
 80083e8:	f000 f847 	bl	800847a <__retarget_lock_init_recursive>
 80083ec:	f7ff ff96 	bl	800831c <__sfp_lock_release>
 80083f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083f8:	6025      	str	r5, [r4, #0]
 80083fa:	61a5      	str	r5, [r4, #24]
 80083fc:	2208      	movs	r2, #8
 80083fe:	4629      	mov	r1, r5
 8008400:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008404:	f7fb fd6c 	bl	8003ee0 <memset>
 8008408:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800840c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008410:	4620      	mov	r0, r4
 8008412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008414:	3468      	adds	r4, #104	; 0x68
 8008416:	e7d9      	b.n	80083cc <__sfp+0x1c>
 8008418:	2104      	movs	r1, #4
 800841a:	4638      	mov	r0, r7
 800841c:	f7ff ff62 	bl	80082e4 <__sfmoreglue>
 8008420:	4604      	mov	r4, r0
 8008422:	6030      	str	r0, [r6, #0]
 8008424:	2800      	cmp	r0, #0
 8008426:	d1d5      	bne.n	80083d4 <__sfp+0x24>
 8008428:	f7ff ff78 	bl	800831c <__sfp_lock_release>
 800842c:	230c      	movs	r3, #12
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	e7ee      	b.n	8008410 <__sfp+0x60>
 8008432:	bf00      	nop
 8008434:	08009750 	.word	0x08009750
 8008438:	ffff0001 	.word	0xffff0001

0800843c <_fwalk_reent>:
 800843c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008440:	4606      	mov	r6, r0
 8008442:	4688      	mov	r8, r1
 8008444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008448:	2700      	movs	r7, #0
 800844a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800844e:	f1b9 0901 	subs.w	r9, r9, #1
 8008452:	d505      	bpl.n	8008460 <_fwalk_reent+0x24>
 8008454:	6824      	ldr	r4, [r4, #0]
 8008456:	2c00      	cmp	r4, #0
 8008458:	d1f7      	bne.n	800844a <_fwalk_reent+0xe>
 800845a:	4638      	mov	r0, r7
 800845c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008460:	89ab      	ldrh	r3, [r5, #12]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d907      	bls.n	8008476 <_fwalk_reent+0x3a>
 8008466:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800846a:	3301      	adds	r3, #1
 800846c:	d003      	beq.n	8008476 <_fwalk_reent+0x3a>
 800846e:	4629      	mov	r1, r5
 8008470:	4630      	mov	r0, r6
 8008472:	47c0      	blx	r8
 8008474:	4307      	orrs	r7, r0
 8008476:	3568      	adds	r5, #104	; 0x68
 8008478:	e7e9      	b.n	800844e <_fwalk_reent+0x12>

0800847a <__retarget_lock_init_recursive>:
 800847a:	4770      	bx	lr

0800847c <__retarget_lock_acquire_recursive>:
 800847c:	4770      	bx	lr

0800847e <__retarget_lock_release_recursive>:
 800847e:	4770      	bx	lr

08008480 <__swhatbuf_r>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	460e      	mov	r6, r1
 8008484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008488:	2900      	cmp	r1, #0
 800848a:	b096      	sub	sp, #88	; 0x58
 800848c:	4614      	mov	r4, r2
 800848e:	461d      	mov	r5, r3
 8008490:	da07      	bge.n	80084a2 <__swhatbuf_r+0x22>
 8008492:	2300      	movs	r3, #0
 8008494:	602b      	str	r3, [r5, #0]
 8008496:	89b3      	ldrh	r3, [r6, #12]
 8008498:	061a      	lsls	r2, r3, #24
 800849a:	d410      	bmi.n	80084be <__swhatbuf_r+0x3e>
 800849c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084a0:	e00e      	b.n	80084c0 <__swhatbuf_r+0x40>
 80084a2:	466a      	mov	r2, sp
 80084a4:	f000 f902 	bl	80086ac <_fstat_r>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	dbf2      	blt.n	8008492 <__swhatbuf_r+0x12>
 80084ac:	9a01      	ldr	r2, [sp, #4]
 80084ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084b6:	425a      	negs	r2, r3
 80084b8:	415a      	adcs	r2, r3
 80084ba:	602a      	str	r2, [r5, #0]
 80084bc:	e7ee      	b.n	800849c <__swhatbuf_r+0x1c>
 80084be:	2340      	movs	r3, #64	; 0x40
 80084c0:	2000      	movs	r0, #0
 80084c2:	6023      	str	r3, [r4, #0]
 80084c4:	b016      	add	sp, #88	; 0x58
 80084c6:	bd70      	pop	{r4, r5, r6, pc}

080084c8 <__smakebuf_r>:
 80084c8:	898b      	ldrh	r3, [r1, #12]
 80084ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084cc:	079d      	lsls	r5, r3, #30
 80084ce:	4606      	mov	r6, r0
 80084d0:	460c      	mov	r4, r1
 80084d2:	d507      	bpl.n	80084e4 <__smakebuf_r+0x1c>
 80084d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	6123      	str	r3, [r4, #16]
 80084dc:	2301      	movs	r3, #1
 80084de:	6163      	str	r3, [r4, #20]
 80084e0:	b002      	add	sp, #8
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
 80084e4:	ab01      	add	r3, sp, #4
 80084e6:	466a      	mov	r2, sp
 80084e8:	f7ff ffca 	bl	8008480 <__swhatbuf_r>
 80084ec:	9900      	ldr	r1, [sp, #0]
 80084ee:	4605      	mov	r5, r0
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7ff f97f 	bl	80077f4 <_malloc_r>
 80084f6:	b948      	cbnz	r0, 800850c <__smakebuf_r+0x44>
 80084f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fc:	059a      	lsls	r2, r3, #22
 80084fe:	d4ef      	bmi.n	80084e0 <__smakebuf_r+0x18>
 8008500:	f023 0303 	bic.w	r3, r3, #3
 8008504:	f043 0302 	orr.w	r3, r3, #2
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	e7e3      	b.n	80084d4 <__smakebuf_r+0xc>
 800850c:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <__smakebuf_r+0x7c>)
 800850e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008510:	89a3      	ldrh	r3, [r4, #12]
 8008512:	6020      	str	r0, [r4, #0]
 8008514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	9b00      	ldr	r3, [sp, #0]
 800851c:	6163      	str	r3, [r4, #20]
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	6120      	str	r0, [r4, #16]
 8008522:	b15b      	cbz	r3, 800853c <__smakebuf_r+0x74>
 8008524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008528:	4630      	mov	r0, r6
 800852a:	f000 f8d1 	bl	80086d0 <_isatty_r>
 800852e:	b128      	cbz	r0, 800853c <__smakebuf_r+0x74>
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f023 0303 	bic.w	r3, r3, #3
 8008536:	f043 0301 	orr.w	r3, r3, #1
 800853a:	81a3      	strh	r3, [r4, #12]
 800853c:	89a0      	ldrh	r0, [r4, #12]
 800853e:	4305      	orrs	r5, r0
 8008540:	81a5      	strh	r5, [r4, #12]
 8008542:	e7cd      	b.n	80084e0 <__smakebuf_r+0x18>
 8008544:	080082d9 	.word	0x080082d9

08008548 <_malloc_usable_size_r>:
 8008548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854c:	1f18      	subs	r0, r3, #4
 800854e:	2b00      	cmp	r3, #0
 8008550:	bfbc      	itt	lt
 8008552:	580b      	ldrlt	r3, [r1, r0]
 8008554:	18c0      	addlt	r0, r0, r3
 8008556:	4770      	bx	lr

08008558 <_raise_r>:
 8008558:	291f      	cmp	r1, #31
 800855a:	b538      	push	{r3, r4, r5, lr}
 800855c:	4604      	mov	r4, r0
 800855e:	460d      	mov	r5, r1
 8008560:	d904      	bls.n	800856c <_raise_r+0x14>
 8008562:	2316      	movs	r3, #22
 8008564:	6003      	str	r3, [r0, #0]
 8008566:	f04f 30ff 	mov.w	r0, #4294967295
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800856e:	b112      	cbz	r2, 8008576 <_raise_r+0x1e>
 8008570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008574:	b94b      	cbnz	r3, 800858a <_raise_r+0x32>
 8008576:	4620      	mov	r0, r4
 8008578:	f000 f830 	bl	80085dc <_getpid_r>
 800857c:	462a      	mov	r2, r5
 800857e:	4601      	mov	r1, r0
 8008580:	4620      	mov	r0, r4
 8008582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008586:	f000 b817 	b.w	80085b8 <_kill_r>
 800858a:	2b01      	cmp	r3, #1
 800858c:	d00a      	beq.n	80085a4 <_raise_r+0x4c>
 800858e:	1c59      	adds	r1, r3, #1
 8008590:	d103      	bne.n	800859a <_raise_r+0x42>
 8008592:	2316      	movs	r3, #22
 8008594:	6003      	str	r3, [r0, #0]
 8008596:	2001      	movs	r0, #1
 8008598:	e7e7      	b.n	800856a <_raise_r+0x12>
 800859a:	2400      	movs	r4, #0
 800859c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085a0:	4628      	mov	r0, r5
 80085a2:	4798      	blx	r3
 80085a4:	2000      	movs	r0, #0
 80085a6:	e7e0      	b.n	800856a <_raise_r+0x12>

080085a8 <raise>:
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <raise+0xc>)
 80085aa:	4601      	mov	r1, r0
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	f7ff bfd3 	b.w	8008558 <_raise_r>
 80085b2:	bf00      	nop
 80085b4:	20000008 	.word	0x20000008

080085b8 <_kill_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4d07      	ldr	r5, [pc, #28]	; (80085d8 <_kill_r+0x20>)
 80085bc:	2300      	movs	r3, #0
 80085be:	4604      	mov	r4, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	4611      	mov	r1, r2
 80085c4:	602b      	str	r3, [r5, #0]
 80085c6:	f7fa f8b7 	bl	8002738 <_kill>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	d102      	bne.n	80085d4 <_kill_r+0x1c>
 80085ce:	682b      	ldr	r3, [r5, #0]
 80085d0:	b103      	cbz	r3, 80085d4 <_kill_r+0x1c>
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
 80085d6:	bf00      	nop
 80085d8:	200002b4 	.word	0x200002b4

080085dc <_getpid_r>:
 80085dc:	f7fa b8a4 	b.w	8002728 <_getpid>

080085e0 <__sread>:
 80085e0:	b510      	push	{r4, lr}
 80085e2:	460c      	mov	r4, r1
 80085e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e8:	f000 f894 	bl	8008714 <_read_r>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	bfab      	itete	ge
 80085f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085f2:	89a3      	ldrhlt	r3, [r4, #12]
 80085f4:	181b      	addge	r3, r3, r0
 80085f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085fa:	bfac      	ite	ge
 80085fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80085fe:	81a3      	strhlt	r3, [r4, #12]
 8008600:	bd10      	pop	{r4, pc}

08008602 <__swrite>:
 8008602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008606:	461f      	mov	r7, r3
 8008608:	898b      	ldrh	r3, [r1, #12]
 800860a:	05db      	lsls	r3, r3, #23
 800860c:	4605      	mov	r5, r0
 800860e:	460c      	mov	r4, r1
 8008610:	4616      	mov	r6, r2
 8008612:	d505      	bpl.n	8008620 <__swrite+0x1e>
 8008614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008618:	2302      	movs	r3, #2
 800861a:	2200      	movs	r2, #0
 800861c:	f000 f868 	bl	80086f0 <_lseek_r>
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800862a:	81a3      	strh	r3, [r4, #12]
 800862c:	4632      	mov	r2, r6
 800862e:	463b      	mov	r3, r7
 8008630:	4628      	mov	r0, r5
 8008632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008636:	f000 b817 	b.w	8008668 <_write_r>

0800863a <__sseek>:
 800863a:	b510      	push	{r4, lr}
 800863c:	460c      	mov	r4, r1
 800863e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008642:	f000 f855 	bl	80086f0 <_lseek_r>
 8008646:	1c43      	adds	r3, r0, #1
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	bf15      	itete	ne
 800864c:	6560      	strne	r0, [r4, #84]	; 0x54
 800864e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008656:	81a3      	strheq	r3, [r4, #12]
 8008658:	bf18      	it	ne
 800865a:	81a3      	strhne	r3, [r4, #12]
 800865c:	bd10      	pop	{r4, pc}

0800865e <__sclose>:
 800865e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008662:	f000 b813 	b.w	800868c <_close_r>
	...

08008668 <_write_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d07      	ldr	r5, [pc, #28]	; (8008688 <_write_r+0x20>)
 800866c:	4604      	mov	r4, r0
 800866e:	4608      	mov	r0, r1
 8008670:	4611      	mov	r1, r2
 8008672:	2200      	movs	r2, #0
 8008674:	602a      	str	r2, [r5, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	f7fa f895 	bl	80027a6 <_write>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d102      	bne.n	8008686 <_write_r+0x1e>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	b103      	cbz	r3, 8008686 <_write_r+0x1e>
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	200002b4 	.word	0x200002b4

0800868c <_close_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4d06      	ldr	r5, [pc, #24]	; (80086a8 <_close_r+0x1c>)
 8008690:	2300      	movs	r3, #0
 8008692:	4604      	mov	r4, r0
 8008694:	4608      	mov	r0, r1
 8008696:	602b      	str	r3, [r5, #0]
 8008698:	f7fa f8a1 	bl	80027de <_close>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_close_r+0x1a>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_close_r+0x1a>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	200002b4 	.word	0x200002b4

080086ac <_fstat_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d07      	ldr	r5, [pc, #28]	; (80086cc <_fstat_r+0x20>)
 80086b0:	2300      	movs	r3, #0
 80086b2:	4604      	mov	r4, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	4611      	mov	r1, r2
 80086b8:	602b      	str	r3, [r5, #0]
 80086ba:	f7fa f89c 	bl	80027f6 <_fstat>
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	d102      	bne.n	80086c8 <_fstat_r+0x1c>
 80086c2:	682b      	ldr	r3, [r5, #0]
 80086c4:	b103      	cbz	r3, 80086c8 <_fstat_r+0x1c>
 80086c6:	6023      	str	r3, [r4, #0]
 80086c8:	bd38      	pop	{r3, r4, r5, pc}
 80086ca:	bf00      	nop
 80086cc:	200002b4 	.word	0x200002b4

080086d0 <_isatty_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d06      	ldr	r5, [pc, #24]	; (80086ec <_isatty_r+0x1c>)
 80086d4:	2300      	movs	r3, #0
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	f7fa f89b 	bl	8002816 <_isatty>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_isatty_r+0x1a>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_isatty_r+0x1a>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	200002b4 	.word	0x200002b4

080086f0 <_lseek_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d07      	ldr	r5, [pc, #28]	; (8008710 <_lseek_r+0x20>)
 80086f4:	4604      	mov	r4, r0
 80086f6:	4608      	mov	r0, r1
 80086f8:	4611      	mov	r1, r2
 80086fa:	2200      	movs	r2, #0
 80086fc:	602a      	str	r2, [r5, #0]
 80086fe:	461a      	mov	r2, r3
 8008700:	f7fa f894 	bl	800282c <_lseek>
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	d102      	bne.n	800870e <_lseek_r+0x1e>
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	b103      	cbz	r3, 800870e <_lseek_r+0x1e>
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	bd38      	pop	{r3, r4, r5, pc}
 8008710:	200002b4 	.word	0x200002b4

08008714 <_read_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4d07      	ldr	r5, [pc, #28]	; (8008734 <_read_r+0x20>)
 8008718:	4604      	mov	r4, r0
 800871a:	4608      	mov	r0, r1
 800871c:	4611      	mov	r1, r2
 800871e:	2200      	movs	r2, #0
 8008720:	602a      	str	r2, [r5, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	f7fa f822 	bl	800276c <_read>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	d102      	bne.n	8008732 <_read_r+0x1e>
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	b103      	cbz	r3, 8008732 <_read_r+0x1e>
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	200002b4 	.word	0x200002b4

08008738 <pow>:
 8008738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800873c:	ec59 8b10 	vmov	r8, r9, d0
 8008740:	ec57 6b11 	vmov	r6, r7, d1
 8008744:	f000 f8a8 	bl	8008898 <__ieee754_pow>
 8008748:	4b4e      	ldr	r3, [pc, #312]	; (8008884 <pow+0x14c>)
 800874a:	f993 3000 	ldrsb.w	r3, [r3]
 800874e:	3301      	adds	r3, #1
 8008750:	ec55 4b10 	vmov	r4, r5, d0
 8008754:	d015      	beq.n	8008782 <pow+0x4a>
 8008756:	4632      	mov	r2, r6
 8008758:	463b      	mov	r3, r7
 800875a:	4630      	mov	r0, r6
 800875c:	4639      	mov	r1, r7
 800875e:	f7f8 f9e5 	bl	8000b2c <__aeabi_dcmpun>
 8008762:	b970      	cbnz	r0, 8008782 <pow+0x4a>
 8008764:	4642      	mov	r2, r8
 8008766:	464b      	mov	r3, r9
 8008768:	4640      	mov	r0, r8
 800876a:	4649      	mov	r1, r9
 800876c:	f7f8 f9de 	bl	8000b2c <__aeabi_dcmpun>
 8008770:	2200      	movs	r2, #0
 8008772:	2300      	movs	r3, #0
 8008774:	b148      	cbz	r0, 800878a <pow+0x52>
 8008776:	4630      	mov	r0, r6
 8008778:	4639      	mov	r1, r7
 800877a:	f7f8 f9a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800877e:	2800      	cmp	r0, #0
 8008780:	d17d      	bne.n	800887e <pow+0x146>
 8008782:	ec45 4b10 	vmov	d0, r4, r5
 8008786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	f7f8 f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008792:	b1e0      	cbz	r0, 80087ce <pow+0x96>
 8008794:	2200      	movs	r2, #0
 8008796:	2300      	movs	r3, #0
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f8 f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d16c      	bne.n	800887e <pow+0x146>
 80087a4:	ec47 6b10 	vmov	d0, r6, r7
 80087a8:	f000 fe55 	bl	8009456 <finite>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d0e8      	beq.n	8008782 <pow+0x4a>
 80087b0:	2200      	movs	r2, #0
 80087b2:	2300      	movs	r3, #0
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f8 f990 	bl	8000adc <__aeabi_dcmplt>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d0e0      	beq.n	8008782 <pow+0x4a>
 80087c0:	f7fb fb64 	bl	8003e8c <__errno>
 80087c4:	2321      	movs	r3, #33	; 0x21
 80087c6:	6003      	str	r3, [r0, #0]
 80087c8:	2400      	movs	r4, #0
 80087ca:	4d2f      	ldr	r5, [pc, #188]	; (8008888 <pow+0x150>)
 80087cc:	e7d9      	b.n	8008782 <pow+0x4a>
 80087ce:	ec45 4b10 	vmov	d0, r4, r5
 80087d2:	f000 fe40 	bl	8009456 <finite>
 80087d6:	bbb8      	cbnz	r0, 8008848 <pow+0x110>
 80087d8:	ec49 8b10 	vmov	d0, r8, r9
 80087dc:	f000 fe3b 	bl	8009456 <finite>
 80087e0:	b390      	cbz	r0, 8008848 <pow+0x110>
 80087e2:	ec47 6b10 	vmov	d0, r6, r7
 80087e6:	f000 fe36 	bl	8009456 <finite>
 80087ea:	b368      	cbz	r0, 8008848 <pow+0x110>
 80087ec:	4622      	mov	r2, r4
 80087ee:	462b      	mov	r3, r5
 80087f0:	4620      	mov	r0, r4
 80087f2:	4629      	mov	r1, r5
 80087f4:	f7f8 f99a 	bl	8000b2c <__aeabi_dcmpun>
 80087f8:	b160      	cbz	r0, 8008814 <pow+0xdc>
 80087fa:	f7fb fb47 	bl	8003e8c <__errno>
 80087fe:	2321      	movs	r3, #33	; 0x21
 8008800:	6003      	str	r3, [r0, #0]
 8008802:	2200      	movs	r2, #0
 8008804:	2300      	movs	r3, #0
 8008806:	4610      	mov	r0, r2
 8008808:	4619      	mov	r1, r3
 800880a:	f7f8 f81f 	bl	800084c <__aeabi_ddiv>
 800880e:	4604      	mov	r4, r0
 8008810:	460d      	mov	r5, r1
 8008812:	e7b6      	b.n	8008782 <pow+0x4a>
 8008814:	f7fb fb3a 	bl	8003e8c <__errno>
 8008818:	2322      	movs	r3, #34	; 0x22
 800881a:	6003      	str	r3, [r0, #0]
 800881c:	2200      	movs	r2, #0
 800881e:	2300      	movs	r3, #0
 8008820:	4640      	mov	r0, r8
 8008822:	4649      	mov	r1, r9
 8008824:	f7f8 f95a 	bl	8000adc <__aeabi_dcmplt>
 8008828:	2400      	movs	r4, #0
 800882a:	b158      	cbz	r0, 8008844 <pow+0x10c>
 800882c:	ec47 6b10 	vmov	d0, r6, r7
 8008830:	f000 fe1c 	bl	800946c <rint>
 8008834:	4632      	mov	r2, r6
 8008836:	ec51 0b10 	vmov	r0, r1, d0
 800883a:	463b      	mov	r3, r7
 800883c:	f7f8 f944 	bl	8000ac8 <__aeabi_dcmpeq>
 8008840:	2800      	cmp	r0, #0
 8008842:	d0c2      	beq.n	80087ca <pow+0x92>
 8008844:	4d11      	ldr	r5, [pc, #68]	; (800888c <pow+0x154>)
 8008846:	e79c      	b.n	8008782 <pow+0x4a>
 8008848:	2200      	movs	r2, #0
 800884a:	2300      	movs	r3, #0
 800884c:	4620      	mov	r0, r4
 800884e:	4629      	mov	r1, r5
 8008850:	f7f8 f93a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008854:	2800      	cmp	r0, #0
 8008856:	d094      	beq.n	8008782 <pow+0x4a>
 8008858:	ec49 8b10 	vmov	d0, r8, r9
 800885c:	f000 fdfb 	bl	8009456 <finite>
 8008860:	2800      	cmp	r0, #0
 8008862:	d08e      	beq.n	8008782 <pow+0x4a>
 8008864:	ec47 6b10 	vmov	d0, r6, r7
 8008868:	f000 fdf5 	bl	8009456 <finite>
 800886c:	2800      	cmp	r0, #0
 800886e:	d088      	beq.n	8008782 <pow+0x4a>
 8008870:	f7fb fb0c 	bl	8003e8c <__errno>
 8008874:	2322      	movs	r3, #34	; 0x22
 8008876:	6003      	str	r3, [r0, #0]
 8008878:	2400      	movs	r4, #0
 800887a:	2500      	movs	r5, #0
 800887c:	e781      	b.n	8008782 <pow+0x4a>
 800887e:	4d04      	ldr	r5, [pc, #16]	; (8008890 <pow+0x158>)
 8008880:	2400      	movs	r4, #0
 8008882:	e77e      	b.n	8008782 <pow+0x4a>
 8008884:	200001dc 	.word	0x200001dc
 8008888:	fff00000 	.word	0xfff00000
 800888c:	7ff00000 	.word	0x7ff00000
 8008890:	3ff00000 	.word	0x3ff00000
 8008894:	00000000 	.word	0x00000000

08008898 <__ieee754_pow>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	ed2d 8b06 	vpush	{d8-d10}
 80088a0:	b08d      	sub	sp, #52	; 0x34
 80088a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80088a6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80088aa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80088ae:	ea56 0100 	orrs.w	r1, r6, r0
 80088b2:	ec53 2b10 	vmov	r2, r3, d0
 80088b6:	f000 84d1 	beq.w	800925c <__ieee754_pow+0x9c4>
 80088ba:	497f      	ldr	r1, [pc, #508]	; (8008ab8 <__ieee754_pow+0x220>)
 80088bc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80088c0:	428c      	cmp	r4, r1
 80088c2:	ee10 8a10 	vmov	r8, s0
 80088c6:	4699      	mov	r9, r3
 80088c8:	dc09      	bgt.n	80088de <__ieee754_pow+0x46>
 80088ca:	d103      	bne.n	80088d4 <__ieee754_pow+0x3c>
 80088cc:	b97a      	cbnz	r2, 80088ee <__ieee754_pow+0x56>
 80088ce:	42a6      	cmp	r6, r4
 80088d0:	dd02      	ble.n	80088d8 <__ieee754_pow+0x40>
 80088d2:	e00c      	b.n	80088ee <__ieee754_pow+0x56>
 80088d4:	428e      	cmp	r6, r1
 80088d6:	dc02      	bgt.n	80088de <__ieee754_pow+0x46>
 80088d8:	428e      	cmp	r6, r1
 80088da:	d110      	bne.n	80088fe <__ieee754_pow+0x66>
 80088dc:	b178      	cbz	r0, 80088fe <__ieee754_pow+0x66>
 80088de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80088e2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80088e6:	ea54 0308 	orrs.w	r3, r4, r8
 80088ea:	f000 84b7 	beq.w	800925c <__ieee754_pow+0x9c4>
 80088ee:	4873      	ldr	r0, [pc, #460]	; (8008abc <__ieee754_pow+0x224>)
 80088f0:	b00d      	add	sp, #52	; 0x34
 80088f2:	ecbd 8b06 	vpop	{d8-d10}
 80088f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	f7ff b931 	b.w	8007b60 <nan>
 80088fe:	f1b9 0f00 	cmp.w	r9, #0
 8008902:	da36      	bge.n	8008972 <__ieee754_pow+0xda>
 8008904:	496e      	ldr	r1, [pc, #440]	; (8008ac0 <__ieee754_pow+0x228>)
 8008906:	428e      	cmp	r6, r1
 8008908:	dc51      	bgt.n	80089ae <__ieee754_pow+0x116>
 800890a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800890e:	428e      	cmp	r6, r1
 8008910:	f340 84af 	ble.w	8009272 <__ieee754_pow+0x9da>
 8008914:	1531      	asrs	r1, r6, #20
 8008916:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800891a:	2914      	cmp	r1, #20
 800891c:	dd0f      	ble.n	800893e <__ieee754_pow+0xa6>
 800891e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008922:	fa20 fc01 	lsr.w	ip, r0, r1
 8008926:	fa0c f101 	lsl.w	r1, ip, r1
 800892a:	4281      	cmp	r1, r0
 800892c:	f040 84a1 	bne.w	8009272 <__ieee754_pow+0x9da>
 8008930:	f00c 0c01 	and.w	ip, ip, #1
 8008934:	f1cc 0102 	rsb	r1, ip, #2
 8008938:	9100      	str	r1, [sp, #0]
 800893a:	b180      	cbz	r0, 800895e <__ieee754_pow+0xc6>
 800893c:	e059      	b.n	80089f2 <__ieee754_pow+0x15a>
 800893e:	2800      	cmp	r0, #0
 8008940:	d155      	bne.n	80089ee <__ieee754_pow+0x156>
 8008942:	f1c1 0114 	rsb	r1, r1, #20
 8008946:	fa46 fc01 	asr.w	ip, r6, r1
 800894a:	fa0c f101 	lsl.w	r1, ip, r1
 800894e:	42b1      	cmp	r1, r6
 8008950:	f040 848c 	bne.w	800926c <__ieee754_pow+0x9d4>
 8008954:	f00c 0c01 	and.w	ip, ip, #1
 8008958:	f1cc 0102 	rsb	r1, ip, #2
 800895c:	9100      	str	r1, [sp, #0]
 800895e:	4959      	ldr	r1, [pc, #356]	; (8008ac4 <__ieee754_pow+0x22c>)
 8008960:	428e      	cmp	r6, r1
 8008962:	d12d      	bne.n	80089c0 <__ieee754_pow+0x128>
 8008964:	2f00      	cmp	r7, #0
 8008966:	da79      	bge.n	8008a5c <__ieee754_pow+0x1c4>
 8008968:	4956      	ldr	r1, [pc, #344]	; (8008ac4 <__ieee754_pow+0x22c>)
 800896a:	2000      	movs	r0, #0
 800896c:	f7f7 ff6e 	bl	800084c <__aeabi_ddiv>
 8008970:	e016      	b.n	80089a0 <__ieee754_pow+0x108>
 8008972:	2100      	movs	r1, #0
 8008974:	9100      	str	r1, [sp, #0]
 8008976:	2800      	cmp	r0, #0
 8008978:	d13b      	bne.n	80089f2 <__ieee754_pow+0x15a>
 800897a:	494f      	ldr	r1, [pc, #316]	; (8008ab8 <__ieee754_pow+0x220>)
 800897c:	428e      	cmp	r6, r1
 800897e:	d1ee      	bne.n	800895e <__ieee754_pow+0xc6>
 8008980:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008984:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008988:	ea53 0308 	orrs.w	r3, r3, r8
 800898c:	f000 8466 	beq.w	800925c <__ieee754_pow+0x9c4>
 8008990:	4b4d      	ldr	r3, [pc, #308]	; (8008ac8 <__ieee754_pow+0x230>)
 8008992:	429c      	cmp	r4, r3
 8008994:	dd0d      	ble.n	80089b2 <__ieee754_pow+0x11a>
 8008996:	2f00      	cmp	r7, #0
 8008998:	f280 8464 	bge.w	8009264 <__ieee754_pow+0x9cc>
 800899c:	2000      	movs	r0, #0
 800899e:	2100      	movs	r1, #0
 80089a0:	ec41 0b10 	vmov	d0, r0, r1
 80089a4:	b00d      	add	sp, #52	; 0x34
 80089a6:	ecbd 8b06 	vpop	{d8-d10}
 80089aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ae:	2102      	movs	r1, #2
 80089b0:	e7e0      	b.n	8008974 <__ieee754_pow+0xdc>
 80089b2:	2f00      	cmp	r7, #0
 80089b4:	daf2      	bge.n	800899c <__ieee754_pow+0x104>
 80089b6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80089ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80089be:	e7ef      	b.n	80089a0 <__ieee754_pow+0x108>
 80089c0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80089c4:	d104      	bne.n	80089d0 <__ieee754_pow+0x138>
 80089c6:	4610      	mov	r0, r2
 80089c8:	4619      	mov	r1, r3
 80089ca:	f7f7 fe15 	bl	80005f8 <__aeabi_dmul>
 80089ce:	e7e7      	b.n	80089a0 <__ieee754_pow+0x108>
 80089d0:	493e      	ldr	r1, [pc, #248]	; (8008acc <__ieee754_pow+0x234>)
 80089d2:	428f      	cmp	r7, r1
 80089d4:	d10d      	bne.n	80089f2 <__ieee754_pow+0x15a>
 80089d6:	f1b9 0f00 	cmp.w	r9, #0
 80089da:	db0a      	blt.n	80089f2 <__ieee754_pow+0x15a>
 80089dc:	ec43 2b10 	vmov	d0, r2, r3
 80089e0:	b00d      	add	sp, #52	; 0x34
 80089e2:	ecbd 8b06 	vpop	{d8-d10}
 80089e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	f000 bc77 	b.w	80092dc <__ieee754_sqrt>
 80089ee:	2100      	movs	r1, #0
 80089f0:	9100      	str	r1, [sp, #0]
 80089f2:	ec43 2b10 	vmov	d0, r2, r3
 80089f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089fa:	f000 fd23 	bl	8009444 <fabs>
 80089fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a02:	ec51 0b10 	vmov	r0, r1, d0
 8008a06:	f1b8 0f00 	cmp.w	r8, #0
 8008a0a:	d12a      	bne.n	8008a62 <__ieee754_pow+0x1ca>
 8008a0c:	b12c      	cbz	r4, 8008a1a <__ieee754_pow+0x182>
 8008a0e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008ac4 <__ieee754_pow+0x22c>
 8008a12:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008a16:	45e6      	cmp	lr, ip
 8008a18:	d123      	bne.n	8008a62 <__ieee754_pow+0x1ca>
 8008a1a:	2f00      	cmp	r7, #0
 8008a1c:	da05      	bge.n	8008a2a <__ieee754_pow+0x192>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	2000      	movs	r0, #0
 8008a24:	4927      	ldr	r1, [pc, #156]	; (8008ac4 <__ieee754_pow+0x22c>)
 8008a26:	f7f7 ff11 	bl	800084c <__aeabi_ddiv>
 8008a2a:	f1b9 0f00 	cmp.w	r9, #0
 8008a2e:	dab7      	bge.n	80089a0 <__ieee754_pow+0x108>
 8008a30:	9b00      	ldr	r3, [sp, #0]
 8008a32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008a36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008a3a:	4323      	orrs	r3, r4
 8008a3c:	d108      	bne.n	8008a50 <__ieee754_pow+0x1b8>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	f7f7 fc1f 	bl	8000288 <__aeabi_dsub>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	e78d      	b.n	800896c <__ieee754_pow+0xd4>
 8008a50:	9b00      	ldr	r3, [sp, #0]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d1a4      	bne.n	80089a0 <__ieee754_pow+0x108>
 8008a56:	4602      	mov	r2, r0
 8008a58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4619      	mov	r1, r3
 8008a60:	e79e      	b.n	80089a0 <__ieee754_pow+0x108>
 8008a62:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008a66:	f10c 35ff 	add.w	r5, ip, #4294967295
 8008a6a:	950a      	str	r5, [sp, #40]	; 0x28
 8008a6c:	9d00      	ldr	r5, [sp, #0]
 8008a6e:	46ac      	mov	ip, r5
 8008a70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a72:	ea5c 0505 	orrs.w	r5, ip, r5
 8008a76:	d0e4      	beq.n	8008a42 <__ieee754_pow+0x1aa>
 8008a78:	4b15      	ldr	r3, [pc, #84]	; (8008ad0 <__ieee754_pow+0x238>)
 8008a7a:	429e      	cmp	r6, r3
 8008a7c:	f340 80fc 	ble.w	8008c78 <__ieee754_pow+0x3e0>
 8008a80:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008a84:	429e      	cmp	r6, r3
 8008a86:	4b10      	ldr	r3, [pc, #64]	; (8008ac8 <__ieee754_pow+0x230>)
 8008a88:	dd07      	ble.n	8008a9a <__ieee754_pow+0x202>
 8008a8a:	429c      	cmp	r4, r3
 8008a8c:	dc0a      	bgt.n	8008aa4 <__ieee754_pow+0x20c>
 8008a8e:	2f00      	cmp	r7, #0
 8008a90:	da84      	bge.n	800899c <__ieee754_pow+0x104>
 8008a92:	a307      	add	r3, pc, #28	; (adr r3, 8008ab0 <__ieee754_pow+0x218>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	e795      	b.n	80089c6 <__ieee754_pow+0x12e>
 8008a9a:	429c      	cmp	r4, r3
 8008a9c:	dbf7      	blt.n	8008a8e <__ieee754_pow+0x1f6>
 8008a9e:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <__ieee754_pow+0x22c>)
 8008aa0:	429c      	cmp	r4, r3
 8008aa2:	dd17      	ble.n	8008ad4 <__ieee754_pow+0x23c>
 8008aa4:	2f00      	cmp	r7, #0
 8008aa6:	dcf4      	bgt.n	8008a92 <__ieee754_pow+0x1fa>
 8008aa8:	e778      	b.n	800899c <__ieee754_pow+0x104>
 8008aaa:	bf00      	nop
 8008aac:	f3af 8000 	nop.w
 8008ab0:	8800759c 	.word	0x8800759c
 8008ab4:	7e37e43c 	.word	0x7e37e43c
 8008ab8:	7ff00000 	.word	0x7ff00000
 8008abc:	08009ba0 	.word	0x08009ba0
 8008ac0:	433fffff 	.word	0x433fffff
 8008ac4:	3ff00000 	.word	0x3ff00000
 8008ac8:	3fefffff 	.word	0x3fefffff
 8008acc:	3fe00000 	.word	0x3fe00000
 8008ad0:	41e00000 	.word	0x41e00000
 8008ad4:	4b64      	ldr	r3, [pc, #400]	; (8008c68 <__ieee754_pow+0x3d0>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f7f7 fbd6 	bl	8000288 <__aeabi_dsub>
 8008adc:	a356      	add	r3, pc, #344	; (adr r3, 8008c38 <__ieee754_pow+0x3a0>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	460d      	mov	r5, r1
 8008ae6:	f7f7 fd87 	bl	80005f8 <__aeabi_dmul>
 8008aea:	a355      	add	r3, pc, #340	; (adr r3, 8008c40 <__ieee754_pow+0x3a8>)
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	4606      	mov	r6, r0
 8008af2:	460f      	mov	r7, r1
 8008af4:	4620      	mov	r0, r4
 8008af6:	4629      	mov	r1, r5
 8008af8:	f7f7 fd7e 	bl	80005f8 <__aeabi_dmul>
 8008afc:	4b5b      	ldr	r3, [pc, #364]	; (8008c6c <__ieee754_pow+0x3d4>)
 8008afe:	4682      	mov	sl, r0
 8008b00:	468b      	mov	fp, r1
 8008b02:	2200      	movs	r2, #0
 8008b04:	4620      	mov	r0, r4
 8008b06:	4629      	mov	r1, r5
 8008b08:	f7f7 fd76 	bl	80005f8 <__aeabi_dmul>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	a14d      	add	r1, pc, #308	; (adr r1, 8008c48 <__ieee754_pow+0x3b0>)
 8008b12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b16:	f7f7 fbb7 	bl	8000288 <__aeabi_dsub>
 8008b1a:	4622      	mov	r2, r4
 8008b1c:	462b      	mov	r3, r5
 8008b1e:	f7f7 fd6b 	bl	80005f8 <__aeabi_dmul>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	2000      	movs	r0, #0
 8008b28:	4951      	ldr	r1, [pc, #324]	; (8008c70 <__ieee754_pow+0x3d8>)
 8008b2a:	f7f7 fbad 	bl	8000288 <__aeabi_dsub>
 8008b2e:	4622      	mov	r2, r4
 8008b30:	4680      	mov	r8, r0
 8008b32:	4689      	mov	r9, r1
 8008b34:	462b      	mov	r3, r5
 8008b36:	4620      	mov	r0, r4
 8008b38:	4629      	mov	r1, r5
 8008b3a:	f7f7 fd5d 	bl	80005f8 <__aeabi_dmul>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4640      	mov	r0, r8
 8008b44:	4649      	mov	r1, r9
 8008b46:	f7f7 fd57 	bl	80005f8 <__aeabi_dmul>
 8008b4a:	a341      	add	r3, pc, #260	; (adr r3, 8008c50 <__ieee754_pow+0x3b8>)
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f7f7 fd52 	bl	80005f8 <__aeabi_dmul>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4650      	mov	r0, sl
 8008b5a:	4659      	mov	r1, fp
 8008b5c:	f7f7 fb94 	bl	8000288 <__aeabi_dsub>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4680      	mov	r8, r0
 8008b66:	4689      	mov	r9, r1
 8008b68:	4630      	mov	r0, r6
 8008b6a:	4639      	mov	r1, r7
 8008b6c:	f7f7 fb8e 	bl	800028c <__adddf3>
 8008b70:	2400      	movs	r4, #0
 8008b72:	4632      	mov	r2, r6
 8008b74:	463b      	mov	r3, r7
 8008b76:	4620      	mov	r0, r4
 8008b78:	460d      	mov	r5, r1
 8008b7a:	f7f7 fb85 	bl	8000288 <__aeabi_dsub>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4640      	mov	r0, r8
 8008b84:	4649      	mov	r1, r9
 8008b86:	f7f7 fb7f 	bl	8000288 <__aeabi_dsub>
 8008b8a:	9b00      	ldr	r3, [sp, #0]
 8008b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	4313      	orrs	r3, r2
 8008b92:	4682      	mov	sl, r0
 8008b94:	468b      	mov	fp, r1
 8008b96:	f040 81f1 	bne.w	8008f7c <__ieee754_pow+0x6e4>
 8008b9a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008c58 <__ieee754_pow+0x3c0>
 8008b9e:	eeb0 8a47 	vmov.f32	s16, s14
 8008ba2:	eef0 8a67 	vmov.f32	s17, s15
 8008ba6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008baa:	2600      	movs	r6, #0
 8008bac:	4632      	mov	r2, r6
 8008bae:	463b      	mov	r3, r7
 8008bb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bb4:	f7f7 fb68 	bl	8000288 <__aeabi_dsub>
 8008bb8:	4622      	mov	r2, r4
 8008bba:	462b      	mov	r3, r5
 8008bbc:	f7f7 fd1c 	bl	80005f8 <__aeabi_dmul>
 8008bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bc4:	4680      	mov	r8, r0
 8008bc6:	4689      	mov	r9, r1
 8008bc8:	4650      	mov	r0, sl
 8008bca:	4659      	mov	r1, fp
 8008bcc:	f7f7 fd14 	bl	80005f8 <__aeabi_dmul>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4640      	mov	r0, r8
 8008bd6:	4649      	mov	r1, r9
 8008bd8:	f7f7 fb58 	bl	800028c <__adddf3>
 8008bdc:	4632      	mov	r2, r6
 8008bde:	463b      	mov	r3, r7
 8008be0:	4680      	mov	r8, r0
 8008be2:	4689      	mov	r9, r1
 8008be4:	4620      	mov	r0, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	f7f7 fd06 	bl	80005f8 <__aeabi_dmul>
 8008bec:	460b      	mov	r3, r1
 8008bee:	4604      	mov	r4, r0
 8008bf0:	460d      	mov	r5, r1
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	f7f7 fb48 	bl	800028c <__adddf3>
 8008bfc:	4b1d      	ldr	r3, [pc, #116]	; (8008c74 <__ieee754_pow+0x3dc>)
 8008bfe:	4299      	cmp	r1, r3
 8008c00:	ec45 4b19 	vmov	d9, r4, r5
 8008c04:	4606      	mov	r6, r0
 8008c06:	460f      	mov	r7, r1
 8008c08:	468b      	mov	fp, r1
 8008c0a:	f340 82fe 	ble.w	800920a <__ieee754_pow+0x972>
 8008c0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008c12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008c16:	4303      	orrs	r3, r0
 8008c18:	f000 81f0 	beq.w	8008ffc <__ieee754_pow+0x764>
 8008c1c:	a310      	add	r3, pc, #64	; (adr r3, 8008c60 <__ieee754_pow+0x3c8>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	ec51 0b18 	vmov	r0, r1, d8
 8008c26:	f7f7 fce7 	bl	80005f8 <__aeabi_dmul>
 8008c2a:	a30d      	add	r3, pc, #52	; (adr r3, 8008c60 <__ieee754_pow+0x3c8>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	e6cb      	b.n	80089ca <__ieee754_pow+0x132>
 8008c32:	bf00      	nop
 8008c34:	f3af 8000 	nop.w
 8008c38:	60000000 	.word	0x60000000
 8008c3c:	3ff71547 	.word	0x3ff71547
 8008c40:	f85ddf44 	.word	0xf85ddf44
 8008c44:	3e54ae0b 	.word	0x3e54ae0b
 8008c48:	55555555 	.word	0x55555555
 8008c4c:	3fd55555 	.word	0x3fd55555
 8008c50:	652b82fe 	.word	0x652b82fe
 8008c54:	3ff71547 	.word	0x3ff71547
 8008c58:	00000000 	.word	0x00000000
 8008c5c:	bff00000 	.word	0xbff00000
 8008c60:	8800759c 	.word	0x8800759c
 8008c64:	7e37e43c 	.word	0x7e37e43c
 8008c68:	3ff00000 	.word	0x3ff00000
 8008c6c:	3fd00000 	.word	0x3fd00000
 8008c70:	3fe00000 	.word	0x3fe00000
 8008c74:	408fffff 	.word	0x408fffff
 8008c78:	4bd7      	ldr	r3, [pc, #860]	; (8008fd8 <__ieee754_pow+0x740>)
 8008c7a:	ea03 0309 	and.w	r3, r3, r9
 8008c7e:	2200      	movs	r2, #0
 8008c80:	b92b      	cbnz	r3, 8008c8e <__ieee754_pow+0x3f6>
 8008c82:	4bd6      	ldr	r3, [pc, #856]	; (8008fdc <__ieee754_pow+0x744>)
 8008c84:	f7f7 fcb8 	bl	80005f8 <__aeabi_dmul>
 8008c88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	1523      	asrs	r3, r4, #20
 8008c90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c94:	4413      	add	r3, r2
 8008c96:	9309      	str	r3, [sp, #36]	; 0x24
 8008c98:	4bd1      	ldr	r3, [pc, #836]	; (8008fe0 <__ieee754_pow+0x748>)
 8008c9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008c9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ca8:	dd08      	ble.n	8008cbc <__ieee754_pow+0x424>
 8008caa:	4bce      	ldr	r3, [pc, #824]	; (8008fe4 <__ieee754_pow+0x74c>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	f340 8163 	ble.w	8008f78 <__ieee754_pow+0x6e0>
 8008cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008cbc:	2400      	movs	r4, #0
 8008cbe:	00e3      	lsls	r3, r4, #3
 8008cc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cc2:	4bc9      	ldr	r3, [pc, #804]	; (8008fe8 <__ieee754_pow+0x750>)
 8008cc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cc8:	ed93 7b00 	vldr	d7, [r3]
 8008ccc:	4629      	mov	r1, r5
 8008cce:	ec53 2b17 	vmov	r2, r3, d7
 8008cd2:	eeb0 8a47 	vmov.f32	s16, s14
 8008cd6:	eef0 8a67 	vmov.f32	s17, s15
 8008cda:	4682      	mov	sl, r0
 8008cdc:	f7f7 fad4 	bl	8000288 <__aeabi_dsub>
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	460f      	mov	r7, r1
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	ec51 0b18 	vmov	r0, r1, d8
 8008cec:	f7f7 face 	bl	800028c <__adddf3>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	49bd      	ldr	r1, [pc, #756]	; (8008fec <__ieee754_pow+0x754>)
 8008cf8:	f7f7 fda8 	bl	800084c <__aeabi_ddiv>
 8008cfc:	ec41 0b19 	vmov	d9, r0, r1
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4630      	mov	r0, r6
 8008d06:	4639      	mov	r1, r7
 8008d08:	f7f7 fc76 	bl	80005f8 <__aeabi_dmul>
 8008d0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008d20:	46ab      	mov	fp, r5
 8008d22:	106d      	asrs	r5, r5, #1
 8008d24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008d28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008d2c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008d30:	2200      	movs	r2, #0
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	4614      	mov	r4, r2
 8008d38:	461d      	mov	r5, r3
 8008d3a:	f7f7 fc5d 	bl	80005f8 <__aeabi_dmul>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4630      	mov	r0, r6
 8008d44:	4639      	mov	r1, r7
 8008d46:	f7f7 fa9f 	bl	8000288 <__aeabi_dsub>
 8008d4a:	ec53 2b18 	vmov	r2, r3, d8
 8008d4e:	4606      	mov	r6, r0
 8008d50:	460f      	mov	r7, r1
 8008d52:	4620      	mov	r0, r4
 8008d54:	4629      	mov	r1, r5
 8008d56:	f7f7 fa97 	bl	8000288 <__aeabi_dsub>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4650      	mov	r0, sl
 8008d60:	4659      	mov	r1, fp
 8008d62:	f7f7 fa91 	bl	8000288 <__aeabi_dsub>
 8008d66:	4642      	mov	r2, r8
 8008d68:	464b      	mov	r3, r9
 8008d6a:	f7f7 fc45 	bl	80005f8 <__aeabi_dmul>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4630      	mov	r0, r6
 8008d74:	4639      	mov	r1, r7
 8008d76:	f7f7 fa87 	bl	8000288 <__aeabi_dsub>
 8008d7a:	ec53 2b19 	vmov	r2, r3, d9
 8008d7e:	f7f7 fc3b 	bl	80005f8 <__aeabi_dmul>
 8008d82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d86:	ec41 0b18 	vmov	d8, r0, r1
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	f7f7 fc33 	bl	80005f8 <__aeabi_dmul>
 8008d92:	a37d      	add	r3, pc, #500	; (adr r3, 8008f88 <__ieee754_pow+0x6f0>)
 8008d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d98:	4604      	mov	r4, r0
 8008d9a:	460d      	mov	r5, r1
 8008d9c:	f7f7 fc2c 	bl	80005f8 <__aeabi_dmul>
 8008da0:	a37b      	add	r3, pc, #492	; (adr r3, 8008f90 <__ieee754_pow+0x6f8>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fa71 	bl	800028c <__adddf3>
 8008daa:	4622      	mov	r2, r4
 8008dac:	462b      	mov	r3, r5
 8008dae:	f7f7 fc23 	bl	80005f8 <__aeabi_dmul>
 8008db2:	a379      	add	r3, pc, #484	; (adr r3, 8008f98 <__ieee754_pow+0x700>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f7f7 fa68 	bl	800028c <__adddf3>
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	462b      	mov	r3, r5
 8008dc0:	f7f7 fc1a 	bl	80005f8 <__aeabi_dmul>
 8008dc4:	a376      	add	r3, pc, #472	; (adr r3, 8008fa0 <__ieee754_pow+0x708>)
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	f7f7 fa5f 	bl	800028c <__adddf3>
 8008dce:	4622      	mov	r2, r4
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	f7f7 fc11 	bl	80005f8 <__aeabi_dmul>
 8008dd6:	a374      	add	r3, pc, #464	; (adr r3, 8008fa8 <__ieee754_pow+0x710>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	f7f7 fa56 	bl	800028c <__adddf3>
 8008de0:	4622      	mov	r2, r4
 8008de2:	462b      	mov	r3, r5
 8008de4:	f7f7 fc08 	bl	80005f8 <__aeabi_dmul>
 8008de8:	a371      	add	r3, pc, #452	; (adr r3, 8008fb0 <__ieee754_pow+0x718>)
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	f7f7 fa4d 	bl	800028c <__adddf3>
 8008df2:	4622      	mov	r2, r4
 8008df4:	4606      	mov	r6, r0
 8008df6:	460f      	mov	r7, r1
 8008df8:	462b      	mov	r3, r5
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	f7f7 fbfb 	bl	80005f8 <__aeabi_dmul>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4630      	mov	r0, r6
 8008e08:	4639      	mov	r1, r7
 8008e0a:	f7f7 fbf5 	bl	80005f8 <__aeabi_dmul>
 8008e0e:	4642      	mov	r2, r8
 8008e10:	4604      	mov	r4, r0
 8008e12:	460d      	mov	r5, r1
 8008e14:	464b      	mov	r3, r9
 8008e16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e1a:	f7f7 fa37 	bl	800028c <__adddf3>
 8008e1e:	ec53 2b18 	vmov	r2, r3, d8
 8008e22:	f7f7 fbe9 	bl	80005f8 <__aeabi_dmul>
 8008e26:	4622      	mov	r2, r4
 8008e28:	462b      	mov	r3, r5
 8008e2a:	f7f7 fa2f 	bl	800028c <__adddf3>
 8008e2e:	4642      	mov	r2, r8
 8008e30:	4682      	mov	sl, r0
 8008e32:	468b      	mov	fp, r1
 8008e34:	464b      	mov	r3, r9
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f7f7 fbdd 	bl	80005f8 <__aeabi_dmul>
 8008e3e:	4b6c      	ldr	r3, [pc, #432]	; (8008ff0 <__ieee754_pow+0x758>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	4606      	mov	r6, r0
 8008e44:	460f      	mov	r7, r1
 8008e46:	f7f7 fa21 	bl	800028c <__adddf3>
 8008e4a:	4652      	mov	r2, sl
 8008e4c:	465b      	mov	r3, fp
 8008e4e:	f7f7 fa1d 	bl	800028c <__adddf3>
 8008e52:	9c04      	ldr	r4, [sp, #16]
 8008e54:	460d      	mov	r5, r1
 8008e56:	4622      	mov	r2, r4
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fbcb 	bl	80005f8 <__aeabi_dmul>
 8008e62:	4b63      	ldr	r3, [pc, #396]	; (8008ff0 <__ieee754_pow+0x758>)
 8008e64:	4680      	mov	r8, r0
 8008e66:	4689      	mov	r9, r1
 8008e68:	2200      	movs	r2, #0
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	f7f7 fa0b 	bl	8000288 <__aeabi_dsub>
 8008e72:	4632      	mov	r2, r6
 8008e74:	463b      	mov	r3, r7
 8008e76:	f7f7 fa07 	bl	8000288 <__aeabi_dsub>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4650      	mov	r0, sl
 8008e80:	4659      	mov	r1, fp
 8008e82:	f7f7 fa01 	bl	8000288 <__aeabi_dsub>
 8008e86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e8a:	f7f7 fbb5 	bl	80005f8 <__aeabi_dmul>
 8008e8e:	4622      	mov	r2, r4
 8008e90:	4606      	mov	r6, r0
 8008e92:	460f      	mov	r7, r1
 8008e94:	462b      	mov	r3, r5
 8008e96:	ec51 0b18 	vmov	r0, r1, d8
 8008e9a:	f7f7 fbad 	bl	80005f8 <__aeabi_dmul>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	4639      	mov	r1, r7
 8008ea6:	f7f7 f9f1 	bl	800028c <__adddf3>
 8008eaa:	4606      	mov	r6, r0
 8008eac:	460f      	mov	r7, r1
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	f7f7 f9e9 	bl	800028c <__adddf3>
 8008eba:	9c04      	ldr	r4, [sp, #16]
 8008ebc:	a33e      	add	r3, pc, #248	; (adr r3, 8008fb8 <__ieee754_pow+0x720>)
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	460d      	mov	r5, r1
 8008ec6:	f7f7 fb97 	bl	80005f8 <__aeabi_dmul>
 8008eca:	4642      	mov	r2, r8
 8008ecc:	ec41 0b18 	vmov	d8, r0, r1
 8008ed0:	464b      	mov	r3, r9
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	f7f7 f9d7 	bl	8000288 <__aeabi_dsub>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	4630      	mov	r0, r6
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	f7f7 f9d1 	bl	8000288 <__aeabi_dsub>
 8008ee6:	a336      	add	r3, pc, #216	; (adr r3, 8008fc0 <__ieee754_pow+0x728>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f7f7 fb84 	bl	80005f8 <__aeabi_dmul>
 8008ef0:	a335      	add	r3, pc, #212	; (adr r3, 8008fc8 <__ieee754_pow+0x730>)
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	460f      	mov	r7, r1
 8008efa:	4620      	mov	r0, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	f7f7 fb7b 	bl	80005f8 <__aeabi_dmul>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4630      	mov	r0, r6
 8008f08:	4639      	mov	r1, r7
 8008f0a:	f7f7 f9bf 	bl	800028c <__adddf3>
 8008f0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f10:	4b38      	ldr	r3, [pc, #224]	; (8008ff4 <__ieee754_pow+0x75c>)
 8008f12:	4413      	add	r3, r2
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	f7f7 f9b8 	bl	800028c <__adddf3>
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f20:	468b      	mov	fp, r1
 8008f22:	f7f7 faff 	bl	8000524 <__aeabi_i2d>
 8008f26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f28:	4b33      	ldr	r3, [pc, #204]	; (8008ff8 <__ieee754_pow+0x760>)
 8008f2a:	4413      	add	r3, r2
 8008f2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f30:	4606      	mov	r6, r0
 8008f32:	460f      	mov	r7, r1
 8008f34:	4652      	mov	r2, sl
 8008f36:	465b      	mov	r3, fp
 8008f38:	ec51 0b18 	vmov	r0, r1, d8
 8008f3c:	f7f7 f9a6 	bl	800028c <__adddf3>
 8008f40:	4642      	mov	r2, r8
 8008f42:	464b      	mov	r3, r9
 8008f44:	f7f7 f9a2 	bl	800028c <__adddf3>
 8008f48:	4632      	mov	r2, r6
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	f7f7 f99e 	bl	800028c <__adddf3>
 8008f50:	9c04      	ldr	r4, [sp, #16]
 8008f52:	4632      	mov	r2, r6
 8008f54:	463b      	mov	r3, r7
 8008f56:	4620      	mov	r0, r4
 8008f58:	460d      	mov	r5, r1
 8008f5a:	f7f7 f995 	bl	8000288 <__aeabi_dsub>
 8008f5e:	4642      	mov	r2, r8
 8008f60:	464b      	mov	r3, r9
 8008f62:	f7f7 f991 	bl	8000288 <__aeabi_dsub>
 8008f66:	ec53 2b18 	vmov	r2, r3, d8
 8008f6a:	f7f7 f98d 	bl	8000288 <__aeabi_dsub>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4650      	mov	r0, sl
 8008f74:	4659      	mov	r1, fp
 8008f76:	e606      	b.n	8008b86 <__ieee754_pow+0x2ee>
 8008f78:	2401      	movs	r4, #1
 8008f7a:	e6a0      	b.n	8008cbe <__ieee754_pow+0x426>
 8008f7c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008fd0 <__ieee754_pow+0x738>
 8008f80:	e60d      	b.n	8008b9e <__ieee754_pow+0x306>
 8008f82:	bf00      	nop
 8008f84:	f3af 8000 	nop.w
 8008f88:	4a454eef 	.word	0x4a454eef
 8008f8c:	3fca7e28 	.word	0x3fca7e28
 8008f90:	93c9db65 	.word	0x93c9db65
 8008f94:	3fcd864a 	.word	0x3fcd864a
 8008f98:	a91d4101 	.word	0xa91d4101
 8008f9c:	3fd17460 	.word	0x3fd17460
 8008fa0:	518f264d 	.word	0x518f264d
 8008fa4:	3fd55555 	.word	0x3fd55555
 8008fa8:	db6fabff 	.word	0xdb6fabff
 8008fac:	3fdb6db6 	.word	0x3fdb6db6
 8008fb0:	33333303 	.word	0x33333303
 8008fb4:	3fe33333 	.word	0x3fe33333
 8008fb8:	e0000000 	.word	0xe0000000
 8008fbc:	3feec709 	.word	0x3feec709
 8008fc0:	dc3a03fd 	.word	0xdc3a03fd
 8008fc4:	3feec709 	.word	0x3feec709
 8008fc8:	145b01f5 	.word	0x145b01f5
 8008fcc:	be3e2fe0 	.word	0xbe3e2fe0
 8008fd0:	00000000 	.word	0x00000000
 8008fd4:	3ff00000 	.word	0x3ff00000
 8008fd8:	7ff00000 	.word	0x7ff00000
 8008fdc:	43400000 	.word	0x43400000
 8008fe0:	0003988e 	.word	0x0003988e
 8008fe4:	000bb679 	.word	0x000bb679
 8008fe8:	08009c08 	.word	0x08009c08
 8008fec:	3ff00000 	.word	0x3ff00000
 8008ff0:	40080000 	.word	0x40080000
 8008ff4:	08009c28 	.word	0x08009c28
 8008ff8:	08009c18 	.word	0x08009c18
 8008ffc:	a3b5      	add	r3, pc, #724	; (adr r3, 80092d4 <__ieee754_pow+0xa3c>)
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	4640      	mov	r0, r8
 8009004:	4649      	mov	r1, r9
 8009006:	f7f7 f941 	bl	800028c <__adddf3>
 800900a:	4622      	mov	r2, r4
 800900c:	ec41 0b1a 	vmov	d10, r0, r1
 8009010:	462b      	mov	r3, r5
 8009012:	4630      	mov	r0, r6
 8009014:	4639      	mov	r1, r7
 8009016:	f7f7 f937 	bl	8000288 <__aeabi_dsub>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	ec51 0b1a 	vmov	r0, r1, d10
 8009022:	f7f7 fd79 	bl	8000b18 <__aeabi_dcmpgt>
 8009026:	2800      	cmp	r0, #0
 8009028:	f47f adf8 	bne.w	8008c1c <__ieee754_pow+0x384>
 800902c:	4aa4      	ldr	r2, [pc, #656]	; (80092c0 <__ieee754_pow+0xa28>)
 800902e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009032:	4293      	cmp	r3, r2
 8009034:	f340 810b 	ble.w	800924e <__ieee754_pow+0x9b6>
 8009038:	151b      	asrs	r3, r3, #20
 800903a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800903e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009042:	fa4a f303 	asr.w	r3, sl, r3
 8009046:	445b      	add	r3, fp
 8009048:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800904c:	4e9d      	ldr	r6, [pc, #628]	; (80092c4 <__ieee754_pow+0xa2c>)
 800904e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009052:	4116      	asrs	r6, r2
 8009054:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009058:	2000      	movs	r0, #0
 800905a:	ea23 0106 	bic.w	r1, r3, r6
 800905e:	f1c2 0214 	rsb	r2, r2, #20
 8009062:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009066:	fa4a fa02 	asr.w	sl, sl, r2
 800906a:	f1bb 0f00 	cmp.w	fp, #0
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	bfb8      	it	lt
 8009078:	f1ca 0a00 	rsblt	sl, sl, #0
 800907c:	f7f7 f904 	bl	8000288 <__aeabi_dsub>
 8009080:	ec41 0b19 	vmov	d9, r0, r1
 8009084:	4642      	mov	r2, r8
 8009086:	464b      	mov	r3, r9
 8009088:	ec51 0b19 	vmov	r0, r1, d9
 800908c:	f7f7 f8fe 	bl	800028c <__adddf3>
 8009090:	2400      	movs	r4, #0
 8009092:	a379      	add	r3, pc, #484	; (adr r3, 8009278 <__ieee754_pow+0x9e0>)
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	4620      	mov	r0, r4
 800909a:	460d      	mov	r5, r1
 800909c:	f7f7 faac 	bl	80005f8 <__aeabi_dmul>
 80090a0:	ec53 2b19 	vmov	r2, r3, d9
 80090a4:	4606      	mov	r6, r0
 80090a6:	460f      	mov	r7, r1
 80090a8:	4620      	mov	r0, r4
 80090aa:	4629      	mov	r1, r5
 80090ac:	f7f7 f8ec 	bl	8000288 <__aeabi_dsub>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4640      	mov	r0, r8
 80090b6:	4649      	mov	r1, r9
 80090b8:	f7f7 f8e6 	bl	8000288 <__aeabi_dsub>
 80090bc:	a370      	add	r3, pc, #448	; (adr r3, 8009280 <__ieee754_pow+0x9e8>)
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	f7f7 fa99 	bl	80005f8 <__aeabi_dmul>
 80090c6:	a370      	add	r3, pc, #448	; (adr r3, 8009288 <__ieee754_pow+0x9f0>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	4680      	mov	r8, r0
 80090ce:	4689      	mov	r9, r1
 80090d0:	4620      	mov	r0, r4
 80090d2:	4629      	mov	r1, r5
 80090d4:	f7f7 fa90 	bl	80005f8 <__aeabi_dmul>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4640      	mov	r0, r8
 80090de:	4649      	mov	r1, r9
 80090e0:	f7f7 f8d4 	bl	800028c <__adddf3>
 80090e4:	4604      	mov	r4, r0
 80090e6:	460d      	mov	r5, r1
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4630      	mov	r0, r6
 80090ee:	4639      	mov	r1, r7
 80090f0:	f7f7 f8cc 	bl	800028c <__adddf3>
 80090f4:	4632      	mov	r2, r6
 80090f6:	463b      	mov	r3, r7
 80090f8:	4680      	mov	r8, r0
 80090fa:	4689      	mov	r9, r1
 80090fc:	f7f7 f8c4 	bl	8000288 <__aeabi_dsub>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4620      	mov	r0, r4
 8009106:	4629      	mov	r1, r5
 8009108:	f7f7 f8be 	bl	8000288 <__aeabi_dsub>
 800910c:	4642      	mov	r2, r8
 800910e:	4606      	mov	r6, r0
 8009110:	460f      	mov	r7, r1
 8009112:	464b      	mov	r3, r9
 8009114:	4640      	mov	r0, r8
 8009116:	4649      	mov	r1, r9
 8009118:	f7f7 fa6e 	bl	80005f8 <__aeabi_dmul>
 800911c:	a35c      	add	r3, pc, #368	; (adr r3, 8009290 <__ieee754_pow+0x9f8>)
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	4604      	mov	r4, r0
 8009124:	460d      	mov	r5, r1
 8009126:	f7f7 fa67 	bl	80005f8 <__aeabi_dmul>
 800912a:	a35b      	add	r3, pc, #364	; (adr r3, 8009298 <__ieee754_pow+0xa00>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	f7f7 f8aa 	bl	8000288 <__aeabi_dsub>
 8009134:	4622      	mov	r2, r4
 8009136:	462b      	mov	r3, r5
 8009138:	f7f7 fa5e 	bl	80005f8 <__aeabi_dmul>
 800913c:	a358      	add	r3, pc, #352	; (adr r3, 80092a0 <__ieee754_pow+0xa08>)
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 f8a3 	bl	800028c <__adddf3>
 8009146:	4622      	mov	r2, r4
 8009148:	462b      	mov	r3, r5
 800914a:	f7f7 fa55 	bl	80005f8 <__aeabi_dmul>
 800914e:	a356      	add	r3, pc, #344	; (adr r3, 80092a8 <__ieee754_pow+0xa10>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f7f7 f898 	bl	8000288 <__aeabi_dsub>
 8009158:	4622      	mov	r2, r4
 800915a:	462b      	mov	r3, r5
 800915c:	f7f7 fa4c 	bl	80005f8 <__aeabi_dmul>
 8009160:	a353      	add	r3, pc, #332	; (adr r3, 80092b0 <__ieee754_pow+0xa18>)
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f7f7 f891 	bl	800028c <__adddf3>
 800916a:	4622      	mov	r2, r4
 800916c:	462b      	mov	r3, r5
 800916e:	f7f7 fa43 	bl	80005f8 <__aeabi_dmul>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4640      	mov	r0, r8
 8009178:	4649      	mov	r1, r9
 800917a:	f7f7 f885 	bl	8000288 <__aeabi_dsub>
 800917e:	4604      	mov	r4, r0
 8009180:	460d      	mov	r5, r1
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4640      	mov	r0, r8
 8009188:	4649      	mov	r1, r9
 800918a:	f7f7 fa35 	bl	80005f8 <__aeabi_dmul>
 800918e:	2200      	movs	r2, #0
 8009190:	ec41 0b19 	vmov	d9, r0, r1
 8009194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009198:	4620      	mov	r0, r4
 800919a:	4629      	mov	r1, r5
 800919c:	f7f7 f874 	bl	8000288 <__aeabi_dsub>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	ec51 0b19 	vmov	r0, r1, d9
 80091a8:	f7f7 fb50 	bl	800084c <__aeabi_ddiv>
 80091ac:	4632      	mov	r2, r6
 80091ae:	4604      	mov	r4, r0
 80091b0:	460d      	mov	r5, r1
 80091b2:	463b      	mov	r3, r7
 80091b4:	4640      	mov	r0, r8
 80091b6:	4649      	mov	r1, r9
 80091b8:	f7f7 fa1e 	bl	80005f8 <__aeabi_dmul>
 80091bc:	4632      	mov	r2, r6
 80091be:	463b      	mov	r3, r7
 80091c0:	f7f7 f864 	bl	800028c <__adddf3>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	4620      	mov	r0, r4
 80091ca:	4629      	mov	r1, r5
 80091cc:	f7f7 f85c 	bl	8000288 <__aeabi_dsub>
 80091d0:	4642      	mov	r2, r8
 80091d2:	464b      	mov	r3, r9
 80091d4:	f7f7 f858 	bl	8000288 <__aeabi_dsub>
 80091d8:	460b      	mov	r3, r1
 80091da:	4602      	mov	r2, r0
 80091dc:	493a      	ldr	r1, [pc, #232]	; (80092c8 <__ieee754_pow+0xa30>)
 80091de:	2000      	movs	r0, #0
 80091e0:	f7f7 f852 	bl	8000288 <__aeabi_dsub>
 80091e4:	e9cd 0100 	strd	r0, r1, [sp]
 80091e8:	9b01      	ldr	r3, [sp, #4]
 80091ea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80091ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091f2:	da2f      	bge.n	8009254 <__ieee754_pow+0x9bc>
 80091f4:	4650      	mov	r0, sl
 80091f6:	ed9d 0b00 	vldr	d0, [sp]
 80091fa:	f000 f9c1 	bl	8009580 <scalbn>
 80091fe:	ec51 0b10 	vmov	r0, r1, d0
 8009202:	ec53 2b18 	vmov	r2, r3, d8
 8009206:	f7ff bbe0 	b.w	80089ca <__ieee754_pow+0x132>
 800920a:	4b30      	ldr	r3, [pc, #192]	; (80092cc <__ieee754_pow+0xa34>)
 800920c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009210:	429e      	cmp	r6, r3
 8009212:	f77f af0b 	ble.w	800902c <__ieee754_pow+0x794>
 8009216:	4b2e      	ldr	r3, [pc, #184]	; (80092d0 <__ieee754_pow+0xa38>)
 8009218:	440b      	add	r3, r1
 800921a:	4303      	orrs	r3, r0
 800921c:	d00b      	beq.n	8009236 <__ieee754_pow+0x99e>
 800921e:	a326      	add	r3, pc, #152	; (adr r3, 80092b8 <__ieee754_pow+0xa20>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	ec51 0b18 	vmov	r0, r1, d8
 8009228:	f7f7 f9e6 	bl	80005f8 <__aeabi_dmul>
 800922c:	a322      	add	r3, pc, #136	; (adr r3, 80092b8 <__ieee754_pow+0xa20>)
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	f7ff bbca 	b.w	80089ca <__ieee754_pow+0x132>
 8009236:	4622      	mov	r2, r4
 8009238:	462b      	mov	r3, r5
 800923a:	f7f7 f825 	bl	8000288 <__aeabi_dsub>
 800923e:	4642      	mov	r2, r8
 8009240:	464b      	mov	r3, r9
 8009242:	f7f7 fc5f 	bl	8000b04 <__aeabi_dcmpge>
 8009246:	2800      	cmp	r0, #0
 8009248:	f43f aef0 	beq.w	800902c <__ieee754_pow+0x794>
 800924c:	e7e7      	b.n	800921e <__ieee754_pow+0x986>
 800924e:	f04f 0a00 	mov.w	sl, #0
 8009252:	e717      	b.n	8009084 <__ieee754_pow+0x7ec>
 8009254:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009258:	4619      	mov	r1, r3
 800925a:	e7d2      	b.n	8009202 <__ieee754_pow+0x96a>
 800925c:	491a      	ldr	r1, [pc, #104]	; (80092c8 <__ieee754_pow+0xa30>)
 800925e:	2000      	movs	r0, #0
 8009260:	f7ff bb9e 	b.w	80089a0 <__ieee754_pow+0x108>
 8009264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009268:	f7ff bb9a 	b.w	80089a0 <__ieee754_pow+0x108>
 800926c:	9000      	str	r0, [sp, #0]
 800926e:	f7ff bb76 	b.w	800895e <__ieee754_pow+0xc6>
 8009272:	2100      	movs	r1, #0
 8009274:	f7ff bb60 	b.w	8008938 <__ieee754_pow+0xa0>
 8009278:	00000000 	.word	0x00000000
 800927c:	3fe62e43 	.word	0x3fe62e43
 8009280:	fefa39ef 	.word	0xfefa39ef
 8009284:	3fe62e42 	.word	0x3fe62e42
 8009288:	0ca86c39 	.word	0x0ca86c39
 800928c:	be205c61 	.word	0xbe205c61
 8009290:	72bea4d0 	.word	0x72bea4d0
 8009294:	3e663769 	.word	0x3e663769
 8009298:	c5d26bf1 	.word	0xc5d26bf1
 800929c:	3ebbbd41 	.word	0x3ebbbd41
 80092a0:	af25de2c 	.word	0xaf25de2c
 80092a4:	3f11566a 	.word	0x3f11566a
 80092a8:	16bebd93 	.word	0x16bebd93
 80092ac:	3f66c16c 	.word	0x3f66c16c
 80092b0:	5555553e 	.word	0x5555553e
 80092b4:	3fc55555 	.word	0x3fc55555
 80092b8:	c2f8f359 	.word	0xc2f8f359
 80092bc:	01a56e1f 	.word	0x01a56e1f
 80092c0:	3fe00000 	.word	0x3fe00000
 80092c4:	000fffff 	.word	0x000fffff
 80092c8:	3ff00000 	.word	0x3ff00000
 80092cc:	4090cbff 	.word	0x4090cbff
 80092d0:	3f6f3400 	.word	0x3f6f3400
 80092d4:	652b82fe 	.word	0x652b82fe
 80092d8:	3c971547 	.word	0x3c971547

080092dc <__ieee754_sqrt>:
 80092dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e0:	ec55 4b10 	vmov	r4, r5, d0
 80092e4:	4e56      	ldr	r6, [pc, #344]	; (8009440 <__ieee754_sqrt+0x164>)
 80092e6:	43ae      	bics	r6, r5
 80092e8:	ee10 0a10 	vmov	r0, s0
 80092ec:	ee10 3a10 	vmov	r3, s0
 80092f0:	4629      	mov	r1, r5
 80092f2:	462a      	mov	r2, r5
 80092f4:	d110      	bne.n	8009318 <__ieee754_sqrt+0x3c>
 80092f6:	ee10 2a10 	vmov	r2, s0
 80092fa:	462b      	mov	r3, r5
 80092fc:	f7f7 f97c 	bl	80005f8 <__aeabi_dmul>
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	4620      	mov	r0, r4
 8009306:	4629      	mov	r1, r5
 8009308:	f7f6 ffc0 	bl	800028c <__adddf3>
 800930c:	4604      	mov	r4, r0
 800930e:	460d      	mov	r5, r1
 8009310:	ec45 4b10 	vmov	d0, r4, r5
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	2d00      	cmp	r5, #0
 800931a:	dc10      	bgt.n	800933e <__ieee754_sqrt+0x62>
 800931c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009320:	4330      	orrs	r0, r6
 8009322:	d0f5      	beq.n	8009310 <__ieee754_sqrt+0x34>
 8009324:	b15d      	cbz	r5, 800933e <__ieee754_sqrt+0x62>
 8009326:	ee10 2a10 	vmov	r2, s0
 800932a:	462b      	mov	r3, r5
 800932c:	ee10 0a10 	vmov	r0, s0
 8009330:	f7f6 ffaa 	bl	8000288 <__aeabi_dsub>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	f7f7 fa88 	bl	800084c <__aeabi_ddiv>
 800933c:	e7e6      	b.n	800930c <__ieee754_sqrt+0x30>
 800933e:	1509      	asrs	r1, r1, #20
 8009340:	d076      	beq.n	8009430 <__ieee754_sqrt+0x154>
 8009342:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009346:	07ce      	lsls	r6, r1, #31
 8009348:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800934c:	bf5e      	ittt	pl
 800934e:	0fda      	lsrpl	r2, r3, #31
 8009350:	005b      	lslpl	r3, r3, #1
 8009352:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009356:	0fda      	lsrs	r2, r3, #31
 8009358:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800935c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009360:	2000      	movs	r0, #0
 8009362:	106d      	asrs	r5, r5, #1
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	f04f 0e16 	mov.w	lr, #22
 800936a:	4684      	mov	ip, r0
 800936c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009370:	eb0c 0401 	add.w	r4, ip, r1
 8009374:	4294      	cmp	r4, r2
 8009376:	bfde      	ittt	le
 8009378:	1b12      	suble	r2, r2, r4
 800937a:	eb04 0c01 	addle.w	ip, r4, r1
 800937e:	1840      	addle	r0, r0, r1
 8009380:	0052      	lsls	r2, r2, #1
 8009382:	f1be 0e01 	subs.w	lr, lr, #1
 8009386:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800938a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800938e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009392:	d1ed      	bne.n	8009370 <__ieee754_sqrt+0x94>
 8009394:	4671      	mov	r1, lr
 8009396:	2720      	movs	r7, #32
 8009398:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800939c:	4562      	cmp	r2, ip
 800939e:	eb04 060e 	add.w	r6, r4, lr
 80093a2:	dc02      	bgt.n	80093aa <__ieee754_sqrt+0xce>
 80093a4:	d113      	bne.n	80093ce <__ieee754_sqrt+0xf2>
 80093a6:	429e      	cmp	r6, r3
 80093a8:	d811      	bhi.n	80093ce <__ieee754_sqrt+0xf2>
 80093aa:	2e00      	cmp	r6, #0
 80093ac:	eb06 0e04 	add.w	lr, r6, r4
 80093b0:	da43      	bge.n	800943a <__ieee754_sqrt+0x15e>
 80093b2:	f1be 0f00 	cmp.w	lr, #0
 80093b6:	db40      	blt.n	800943a <__ieee754_sqrt+0x15e>
 80093b8:	f10c 0801 	add.w	r8, ip, #1
 80093bc:	eba2 020c 	sub.w	r2, r2, ip
 80093c0:	429e      	cmp	r6, r3
 80093c2:	bf88      	it	hi
 80093c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80093c8:	1b9b      	subs	r3, r3, r6
 80093ca:	4421      	add	r1, r4
 80093cc:	46c4      	mov	ip, r8
 80093ce:	0052      	lsls	r2, r2, #1
 80093d0:	3f01      	subs	r7, #1
 80093d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80093d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80093da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80093de:	d1dd      	bne.n	800939c <__ieee754_sqrt+0xc0>
 80093e0:	4313      	orrs	r3, r2
 80093e2:	d006      	beq.n	80093f2 <__ieee754_sqrt+0x116>
 80093e4:	1c4c      	adds	r4, r1, #1
 80093e6:	bf13      	iteet	ne
 80093e8:	3101      	addne	r1, #1
 80093ea:	3001      	addeq	r0, #1
 80093ec:	4639      	moveq	r1, r7
 80093ee:	f021 0101 	bicne.w	r1, r1, #1
 80093f2:	1043      	asrs	r3, r0, #1
 80093f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80093f8:	0849      	lsrs	r1, r1, #1
 80093fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80093fe:	07c2      	lsls	r2, r0, #31
 8009400:	bf48      	it	mi
 8009402:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009406:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800940a:	460c      	mov	r4, r1
 800940c:	463d      	mov	r5, r7
 800940e:	e77f      	b.n	8009310 <__ieee754_sqrt+0x34>
 8009410:	0ada      	lsrs	r2, r3, #11
 8009412:	3815      	subs	r0, #21
 8009414:	055b      	lsls	r3, r3, #21
 8009416:	2a00      	cmp	r2, #0
 8009418:	d0fa      	beq.n	8009410 <__ieee754_sqrt+0x134>
 800941a:	02d7      	lsls	r7, r2, #11
 800941c:	d50a      	bpl.n	8009434 <__ieee754_sqrt+0x158>
 800941e:	f1c1 0420 	rsb	r4, r1, #32
 8009422:	fa23 f404 	lsr.w	r4, r3, r4
 8009426:	1e4d      	subs	r5, r1, #1
 8009428:	408b      	lsls	r3, r1
 800942a:	4322      	orrs	r2, r4
 800942c:	1b41      	subs	r1, r0, r5
 800942e:	e788      	b.n	8009342 <__ieee754_sqrt+0x66>
 8009430:	4608      	mov	r0, r1
 8009432:	e7f0      	b.n	8009416 <__ieee754_sqrt+0x13a>
 8009434:	0052      	lsls	r2, r2, #1
 8009436:	3101      	adds	r1, #1
 8009438:	e7ef      	b.n	800941a <__ieee754_sqrt+0x13e>
 800943a:	46e0      	mov	r8, ip
 800943c:	e7be      	b.n	80093bc <__ieee754_sqrt+0xe0>
 800943e:	bf00      	nop
 8009440:	7ff00000 	.word	0x7ff00000

08009444 <fabs>:
 8009444:	ec51 0b10 	vmov	r0, r1, d0
 8009448:	ee10 2a10 	vmov	r2, s0
 800944c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009450:	ec43 2b10 	vmov	d0, r2, r3
 8009454:	4770      	bx	lr

08009456 <finite>:
 8009456:	b082      	sub	sp, #8
 8009458:	ed8d 0b00 	vstr	d0, [sp]
 800945c:	9801      	ldr	r0, [sp, #4]
 800945e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009462:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009466:	0fc0      	lsrs	r0, r0, #31
 8009468:	b002      	add	sp, #8
 800946a:	4770      	bx	lr

0800946c <rint>:
 800946c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800946e:	ec51 0b10 	vmov	r0, r1, d0
 8009472:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009476:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800947a:	2e13      	cmp	r6, #19
 800947c:	ee10 4a10 	vmov	r4, s0
 8009480:	460b      	mov	r3, r1
 8009482:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009486:	dc58      	bgt.n	800953a <rint+0xce>
 8009488:	2e00      	cmp	r6, #0
 800948a:	da2b      	bge.n	80094e4 <rint+0x78>
 800948c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009490:	4302      	orrs	r2, r0
 8009492:	d023      	beq.n	80094dc <rint+0x70>
 8009494:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009498:	4302      	orrs	r2, r0
 800949a:	4254      	negs	r4, r2
 800949c:	4314      	orrs	r4, r2
 800949e:	0c4b      	lsrs	r3, r1, #17
 80094a0:	0b24      	lsrs	r4, r4, #12
 80094a2:	045b      	lsls	r3, r3, #17
 80094a4:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80094a8:	ea44 0103 	orr.w	r1, r4, r3
 80094ac:	4b32      	ldr	r3, [pc, #200]	; (8009578 <rint+0x10c>)
 80094ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80094b2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4630      	mov	r0, r6
 80094bc:	4639      	mov	r1, r7
 80094be:	f7f6 fee5 	bl	800028c <__adddf3>
 80094c2:	e9cd 0100 	strd	r0, r1, [sp]
 80094c6:	463b      	mov	r3, r7
 80094c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094cc:	4632      	mov	r2, r6
 80094ce:	f7f6 fedb 	bl	8000288 <__aeabi_dsub>
 80094d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094d6:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80094da:	4639      	mov	r1, r7
 80094dc:	ec41 0b10 	vmov	d0, r0, r1
 80094e0:	b003      	add	sp, #12
 80094e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094e4:	4a25      	ldr	r2, [pc, #148]	; (800957c <rint+0x110>)
 80094e6:	4132      	asrs	r2, r6
 80094e8:	ea01 0702 	and.w	r7, r1, r2
 80094ec:	4307      	orrs	r7, r0
 80094ee:	d0f5      	beq.n	80094dc <rint+0x70>
 80094f0:	0851      	lsrs	r1, r2, #1
 80094f2:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80094f6:	4314      	orrs	r4, r2
 80094f8:	d00c      	beq.n	8009514 <rint+0xa8>
 80094fa:	ea23 0201 	bic.w	r2, r3, r1
 80094fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009502:	2e13      	cmp	r6, #19
 8009504:	fa43 f606 	asr.w	r6, r3, r6
 8009508:	bf0c      	ite	eq
 800950a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800950e:	2400      	movne	r4, #0
 8009510:	ea42 0306 	orr.w	r3, r2, r6
 8009514:	4918      	ldr	r1, [pc, #96]	; (8009578 <rint+0x10c>)
 8009516:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800951a:	4622      	mov	r2, r4
 800951c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009520:	4620      	mov	r0, r4
 8009522:	4629      	mov	r1, r5
 8009524:	f7f6 feb2 	bl	800028c <__adddf3>
 8009528:	e9cd 0100 	strd	r0, r1, [sp]
 800952c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009530:	4622      	mov	r2, r4
 8009532:	462b      	mov	r3, r5
 8009534:	f7f6 fea8 	bl	8000288 <__aeabi_dsub>
 8009538:	e7d0      	b.n	80094dc <rint+0x70>
 800953a:	2e33      	cmp	r6, #51	; 0x33
 800953c:	dd07      	ble.n	800954e <rint+0xe2>
 800953e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009542:	d1cb      	bne.n	80094dc <rint+0x70>
 8009544:	ee10 2a10 	vmov	r2, s0
 8009548:	f7f6 fea0 	bl	800028c <__adddf3>
 800954c:	e7c6      	b.n	80094dc <rint+0x70>
 800954e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009552:	f04f 36ff 	mov.w	r6, #4294967295
 8009556:	40d6      	lsrs	r6, r2
 8009558:	4230      	tst	r0, r6
 800955a:	d0bf      	beq.n	80094dc <rint+0x70>
 800955c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009560:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009564:	bf1f      	itttt	ne
 8009566:	ea24 0101 	bicne.w	r1, r4, r1
 800956a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800956e:	fa44 f202 	asrne.w	r2, r4, r2
 8009572:	ea41 0402 	orrne.w	r4, r1, r2
 8009576:	e7cd      	b.n	8009514 <rint+0xa8>
 8009578:	08009c38 	.word	0x08009c38
 800957c:	000fffff 	.word	0x000fffff

08009580 <scalbn>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	ec55 4b10 	vmov	r4, r5, d0
 8009586:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800958a:	4606      	mov	r6, r0
 800958c:	462b      	mov	r3, r5
 800958e:	b99a      	cbnz	r2, 80095b8 <scalbn+0x38>
 8009590:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009594:	4323      	orrs	r3, r4
 8009596:	d036      	beq.n	8009606 <scalbn+0x86>
 8009598:	4b39      	ldr	r3, [pc, #228]	; (8009680 <scalbn+0x100>)
 800959a:	4629      	mov	r1, r5
 800959c:	ee10 0a10 	vmov	r0, s0
 80095a0:	2200      	movs	r2, #0
 80095a2:	f7f7 f829 	bl	80005f8 <__aeabi_dmul>
 80095a6:	4b37      	ldr	r3, [pc, #220]	; (8009684 <scalbn+0x104>)
 80095a8:	429e      	cmp	r6, r3
 80095aa:	4604      	mov	r4, r0
 80095ac:	460d      	mov	r5, r1
 80095ae:	da10      	bge.n	80095d2 <scalbn+0x52>
 80095b0:	a32b      	add	r3, pc, #172	; (adr r3, 8009660 <scalbn+0xe0>)
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	e03a      	b.n	800962e <scalbn+0xae>
 80095b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80095bc:	428a      	cmp	r2, r1
 80095be:	d10c      	bne.n	80095da <scalbn+0x5a>
 80095c0:	ee10 2a10 	vmov	r2, s0
 80095c4:	4620      	mov	r0, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f6 fe60 	bl	800028c <__adddf3>
 80095cc:	4604      	mov	r4, r0
 80095ce:	460d      	mov	r5, r1
 80095d0:	e019      	b.n	8009606 <scalbn+0x86>
 80095d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80095d6:	460b      	mov	r3, r1
 80095d8:	3a36      	subs	r2, #54	; 0x36
 80095da:	4432      	add	r2, r6
 80095dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80095e0:	428a      	cmp	r2, r1
 80095e2:	dd08      	ble.n	80095f6 <scalbn+0x76>
 80095e4:	2d00      	cmp	r5, #0
 80095e6:	a120      	add	r1, pc, #128	; (adr r1, 8009668 <scalbn+0xe8>)
 80095e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ec:	da1c      	bge.n	8009628 <scalbn+0xa8>
 80095ee:	a120      	add	r1, pc, #128	; (adr r1, 8009670 <scalbn+0xf0>)
 80095f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095f4:	e018      	b.n	8009628 <scalbn+0xa8>
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	dd08      	ble.n	800960c <scalbn+0x8c>
 80095fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009602:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009606:	ec45 4b10 	vmov	d0, r4, r5
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009610:	da19      	bge.n	8009646 <scalbn+0xc6>
 8009612:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009616:	429e      	cmp	r6, r3
 8009618:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800961c:	dd0a      	ble.n	8009634 <scalbn+0xb4>
 800961e:	a112      	add	r1, pc, #72	; (adr r1, 8009668 <scalbn+0xe8>)
 8009620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e2      	bne.n	80095ee <scalbn+0x6e>
 8009628:	a30f      	add	r3, pc, #60	; (adr r3, 8009668 <scalbn+0xe8>)
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	f7f6 ffe3 	bl	80005f8 <__aeabi_dmul>
 8009632:	e7cb      	b.n	80095cc <scalbn+0x4c>
 8009634:	a10a      	add	r1, pc, #40	; (adr r1, 8009660 <scalbn+0xe0>)
 8009636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0b8      	beq.n	80095b0 <scalbn+0x30>
 800963e:	a10e      	add	r1, pc, #56	; (adr r1, 8009678 <scalbn+0xf8>)
 8009640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009644:	e7b4      	b.n	80095b0 <scalbn+0x30>
 8009646:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800964a:	3236      	adds	r2, #54	; 0x36
 800964c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009650:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009654:	4620      	mov	r0, r4
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <scalbn+0x108>)
 8009658:	2200      	movs	r2, #0
 800965a:	e7e8      	b.n	800962e <scalbn+0xae>
 800965c:	f3af 8000 	nop.w
 8009660:	c2f8f359 	.word	0xc2f8f359
 8009664:	01a56e1f 	.word	0x01a56e1f
 8009668:	8800759c 	.word	0x8800759c
 800966c:	7e37e43c 	.word	0x7e37e43c
 8009670:	8800759c 	.word	0x8800759c
 8009674:	fe37e43c 	.word	0xfe37e43c
 8009678:	c2f8f359 	.word	0xc2f8f359
 800967c:	81a56e1f 	.word	0x81a56e1f
 8009680:	43500000 	.word	0x43500000
 8009684:	ffff3cb0 	.word	0xffff3cb0
 8009688:	3c900000 	.word	0x3c900000

0800968c <_init>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr

08009698 <_fini>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	bf00      	nop
 800969c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969e:	bc08      	pop	{r3}
 80096a0:	469e      	mov	lr, r3
 80096a2:	4770      	bx	lr
