
VRS-zadanie-cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df4  08002df4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002df4  08002df4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002df4  08002df4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          000000b4  20000008  20000008  00020008  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a49  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b9a  00000000  00000000  00028a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0002a620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000738  00000000  00000000  0002ae30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017016  00000000  00000000  0002b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006cdc  00000000  00000000  0004257e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079d3d  00000000  00000000  0004925a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c2f97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000205c  00000000  00000000  000c2fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d58 	.word	0x08002d58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08002d58 	.word	0x08002d58

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	683a      	ldr	r2, [r7, #0]
 80001e6:	619a      	str	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr

080001f4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	683a      	ldr	r2, [r7, #0]
 8000202:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <resetSegments>:
void setDigit(uint8_t pos);


/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021c:	f7ff ffdc 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000228:	f7ff ffd6 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 800022c:	2102      	movs	r1, #2
 800022e:	480e      	ldr	r0, [pc, #56]	; (8000268 <resetSegments+0x58>)
 8000230:	f7ff ffd2 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000234:	2120      	movs	r1, #32
 8000236:	480c      	ldr	r0, [pc, #48]	; (8000268 <resetSegments+0x58>)
 8000238:	f7ff ffce 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 800023c:	2110      	movs	r1, #16
 800023e:	480a      	ldr	r0, [pc, #40]	; (8000268 <resetSegments+0x58>)
 8000240:	f7ff ffca 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000244:	2101      	movs	r1, #1
 8000246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024a:	f7ff ffc5 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800024e:	2102      	movs	r1, #2
 8000250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000254:	f7ff ffc0 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000258:	2108      	movs	r1, #8
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f7ff ffbb 	bl	80001d8 <LL_GPIO_SetOutputPin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	48000400 	.word	0x48000400

0800026c <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000278:	f7ff ffbc 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 800027c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000284:	f7ff ffb6 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000288:	2102      	movs	r1, #2
 800028a:	480e      	ldr	r0, [pc, #56]	; (80002c4 <setSegments+0x58>)
 800028c:	f7ff ffb2 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000290:	2120      	movs	r1, #32
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <setSegments+0x58>)
 8000294:	f7ff ffae 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000298:	2110      	movs	r1, #16
 800029a:	480a      	ldr	r0, [pc, #40]	; (80002c4 <setSegments+0x58>)
 800029c:	f7ff ffaa 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 80002a0:	2101      	movs	r1, #1
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f7ff ffa5 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 80002aa:	2102      	movs	r1, #2
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f7ff ffa0 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80002b4:	2108      	movs	r1, #8
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ba:	f7ff ff9b 	bl	80001f4 <LL_GPIO_ResetOutputPin>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	48000400 	.word	0x48000400

080002c8 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80002cc:	2104      	movs	r1, #4
 80002ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d2:	f7ff ff8f 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80002d6:	2101      	movs	r1, #1
 80002d8:	480a      	ldr	r0, [pc, #40]	; (8000304 <resetDigits+0x3c>)
 80002da:	f7ff ff8b 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80002de:	2110      	movs	r1, #16
 80002e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e4:	f7ff ff86 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 80002e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	f7ff ff80 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80002f4:	2180      	movs	r1, #128	; 0x80
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fa:	f7ff ff7b 	bl	80001f4 <LL_GPIO_ResetOutputPin>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	48000400 	.word	0x48000400

08000308 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 800030c:	2101      	movs	r1, #1
 800030e:	480d      	ldr	r0, [pc, #52]	; (8000344 <setDigits+0x3c>)
 8000310:	f7ff ff62 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000314:	2110      	movs	r1, #16
 8000316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031a:	f7ff ff5d 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 800031e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000326:	f7ff ff57 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 800032a:	2104      	movs	r1, #4
 800032c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000330:	f7ff ff52 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033a:	f7ff ff4d 	bl	80001d8 <LL_GPIO_SetOutputPin>
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	48000400 	.word	0x48000400

08000348 <set_sign>:

void set_sign(char sign){
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<6))
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	3b30      	subs	r3, #48	; 0x30
 8000356:	4a2e      	ldr	r2, [pc, #184]	; (8000410 <set_sign+0xc8>)
 8000358:	5cd3      	ldrb	r3, [r2, r3]
 800035a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800035e:	2b00      	cmp	r3, #0
 8000360:	d004      	beq.n	800036c <set_sign+0x24>
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000362:	2102      	movs	r1, #2
 8000364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000368:	f7ff ff44 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<5))
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	3b30      	subs	r3, #48	; 0x30
 8000370:	4a27      	ldr	r2, [pc, #156]	; (8000410 <set_sign+0xc8>)
 8000372:	5cd3      	ldrb	r3, [r2, r3]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	2b00      	cmp	r3, #0
 800037a:	d004      	beq.n	8000386 <set_sign+0x3e>
		LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800037c:	2101      	movs	r1, #1
 800037e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000382:	f7ff ff37 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<4))
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	3b30      	subs	r3, #48	; 0x30
 800038a:	4a21      	ldr	r2, [pc, #132]	; (8000410 <set_sign+0xc8>)
 800038c:	5cd3      	ldrb	r3, [r2, r3]
 800038e:	f003 0310 	and.w	r3, r3, #16
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <set_sign+0x5a>
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039e:	f7ff ff29 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<3))
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	3b30      	subs	r3, #48	; 0x30
 80003a6:	4a1a      	ldr	r2, [pc, #104]	; (8000410 <set_sign+0xc8>)
 80003a8:	5cd3      	ldrb	r3, [r2, r3]
 80003aa:	f003 0308 	and.w	r3, r3, #8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d003      	beq.n	80003ba <set_sign+0x72>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80003b2:	2120      	movs	r1, #32
 80003b4:	4817      	ldr	r0, [pc, #92]	; (8000414 <set_sign+0xcc>)
 80003b6:	f7ff ff1d 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<2))
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	3b30      	subs	r3, #48	; 0x30
 80003be:	4a14      	ldr	r2, [pc, #80]	; (8000410 <set_sign+0xc8>)
 80003c0:	5cd3      	ldrb	r3, [r2, r3]
 80003c2:	f003 0304 	and.w	r3, r3, #4
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d005      	beq.n	80003d6 <set_sign+0x8e>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80003ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d2:	f7ff ff0f 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<1))
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	3b30      	subs	r3, #48	; 0x30
 80003da:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <set_sign+0xc8>)
 80003dc:	5cd3      	ldrb	r3, [r2, r3]
 80003de:	f003 0302 	and.w	r3, r3, #2
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d004      	beq.n	80003f0 <set_sign+0xa8>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80003e6:	2108      	movs	r1, #8
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ec:	f7ff ff02 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<0))
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	3b30      	subs	r3, #48	; 0x30
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <set_sign+0xc8>)
 80003f6:	5cd3      	ldrb	r3, [r2, r3]
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d003      	beq.n	8000408 <set_sign+0xc0>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000400:	2110      	movs	r1, #16
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <set_sign+0xcc>)
 8000404:	f7ff fef6 	bl	80001f4 <LL_GPIO_ResetOutputPin>

}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	08002d90 	.word	0x08002d90
 8000414:	48000400 	.word	0x48000400

08000418 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b03      	cmp	r3, #3
 8000426:	d823      	bhi.n	8000470 <setDigit+0x58>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <setDigit+0x18>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000441 	.word	0x08000441
 8000434:	0800044d 	.word	0x0800044d
 8000438:	0800045b 	.word	0x0800045b
 800043c:	08000467 	.word	0x08000467
	{
	case 0:
		DIGIT_4_ON;
 8000440:	2104      	movs	r1, #4
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f7ff fec7 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 800044a:	e011      	b.n	8000470 <setDigit+0x58>
	case 1:
		DIGIT_3_ON;
 800044c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f7ff fec0 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 8000458:	e00a      	b.n	8000470 <setDigit+0x58>
	case 2:
		DIGIT_2_ON;
 800045a:	2110      	movs	r1, #16
 800045c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000460:	f7ff feba 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 8000464:	e004      	b.n	8000470 <setDigit+0x58>
	case 3:
		DIGIT_1_ON;
 8000466:	2101      	movs	r1, #1
 8000468:	4803      	ldr	r0, [pc, #12]	; (8000478 <setDigit+0x60>)
 800046a:	f7ff feb5 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 800046e:	bf00      	nop
	}
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	48000400 	.word	0x48000400

0800047c <display_sign>:
void display_sign(char sign_1,char sign_2, char sign_3,char sign_4)
{
 800047c:	b490      	push	{r4, r7}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4604      	mov	r4, r0
 8000484:	4608      	mov	r0, r1
 8000486:	4611      	mov	r1, r2
 8000488:	461a      	mov	r2, r3
 800048a:	4623      	mov	r3, r4
 800048c:	71fb      	strb	r3, [r7, #7]
 800048e:	4603      	mov	r3, r0
 8000490:	71bb      	strb	r3, [r7, #6]
 8000492:	460b      	mov	r3, r1
 8000494:	717b      	strb	r3, [r7, #5]
 8000496:	4613      	mov	r3, r2
 8000498:	713b      	strb	r3, [r7, #4]
	Display_sign[0] = sign_1;
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <display_sign+0x40>)
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	7013      	strb	r3, [r2, #0]
	Display_sign[1] = sign_2;
 80004a0:	4a06      	ldr	r2, [pc, #24]	; (80004bc <display_sign+0x40>)
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	7053      	strb	r3, [r2, #1]
	Display_sign[2] = sign_3;
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <display_sign+0x40>)
 80004a8:	797b      	ldrb	r3, [r7, #5]
 80004aa:	7093      	strb	r3, [r2, #2]
	Display_sign[3] = sign_4;
 80004ac:	4a03      	ldr	r2, [pc, #12]	; (80004bc <display_sign+0x40>)
 80004ae:	793b      	ldrb	r3, [r7, #4]
 80004b0:	70d3      	strb	r3, [r2, #3]
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc90      	pop	{r4, r7}
 80004ba:	4770      	bx	lr
 80004bc:	20000040 	.word	0x20000040

080004c0 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	e026      	b.n	800051a <updateDisplay+0x5a>
	{

		setDigit(i);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ffa2 	bl	8000418 <setDigit>
		set_sign(Display_sign[3-i]);
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f1c3 0303 	rsb	r3, r3, #3
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <updateDisplay+0x6c>)
 80004dc:	5cd3      	ldrb	r3, [r2, r3]
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff32 	bl	8000348 <set_sign>

		disp_time_saved = disp_time;
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <updateDisplay+0x70>)
 80004e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004ea:	4912      	ldr	r1, [pc, #72]	; (8000534 <updateDisplay+0x74>)
 80004ec:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 80004f0:	bf00      	nop
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <updateDisplay+0x74>)
 80004f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004f8:	1c94      	adds	r4, r2, #2
 80004fa:	f143 0500 	adc.w	r5, r3, #0
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <updateDisplay+0x70>)
 8000500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000504:	42ab      	cmp	r3, r5
 8000506:	bf08      	it	eq
 8000508:	42a2      	cmpeq	r2, r4
 800050a:	d3f2      	bcc.n	80004f2 <updateDisplay+0x32>

		resetDigits();
 800050c:	f7ff fedc 	bl	80002c8 <resetDigits>
		resetSegments();
 8000510:	f7ff fe7e 	bl	8000210 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	3301      	adds	r3, #1
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d9d5      	bls.n	80004cc <updateDisplay+0xc>
	}
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bdb0      	pop	{r4, r5, r7, pc}
 800052a:	bf00      	nop
 800052c:	20000040 	.word	0x20000040
 8000530:	20000028 	.word	0x20000028
 8000534:	20000030 	.word	0x20000030

08000538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <__NVIC_GetPriorityGrouping+0x18>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	f003 0307 	and.w	r3, r3, #7
}
 8000546:	4618      	mov	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	2b00      	cmp	r3, #0
 8000564:	db0b      	blt.n	800057e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	f003 021f 	and.w	r2, r3, #31
 800056c:	4907      	ldr	r1, [pc, #28]	; (800058c <__NVIC_EnableIRQ+0x38>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	095b      	lsrs	r3, r3, #5
 8000574:	2001      	movs	r0, #1
 8000576:	fa00 f202 	lsl.w	r2, r0, r2
 800057a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000e100 	.word	0xe000e100

08000590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	db0a      	blt.n	80005ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	490c      	ldr	r1, [pc, #48]	; (80005dc <__NVIC_SetPriority+0x4c>)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	0112      	lsls	r2, r2, #4
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	440b      	add	r3, r1
 80005b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005b8:	e00a      	b.n	80005d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4908      	ldr	r1, [pc, #32]	; (80005e0 <__NVIC_SetPriority+0x50>)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	f003 030f 	and.w	r3, r3, #15
 80005c6:	3b04      	subs	r3, #4
 80005c8:	0112      	lsls	r2, r2, #4
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	440b      	add	r3, r1
 80005ce:	761a      	strb	r2, [r3, #24]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000e100 	.word	0xe000e100
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	f1c3 0307 	rsb	r3, r3, #7
 80005fe:	2b04      	cmp	r3, #4
 8000600:	bf28      	it	cs
 8000602:	2304      	movcs	r3, #4
 8000604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	3304      	adds	r3, #4
 800060a:	2b06      	cmp	r3, #6
 800060c:	d902      	bls.n	8000614 <NVIC_EncodePriority+0x30>
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	3b03      	subs	r3, #3
 8000612:	e000      	b.n	8000616 <NVIC_EncodePriority+0x32>
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	f04f 32ff 	mov.w	r2, #4294967295
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	43da      	mvns	r2, r3
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	401a      	ands	r2, r3
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062c:	f04f 31ff 	mov.w	r1, #4294967295
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	43d9      	mvns	r1, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	4313      	orrs	r3, r2
         );
}
 800063e:	4618      	mov	r0, r3
 8000640:	3724      	adds	r7, #36	; 0x24
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	4907      	ldr	r1, [pc, #28]	; (8000678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4313      	orrs	r3, r2
 800065e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4013      	ands	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40021000 	.word	0x40021000

0800067c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <LL_SYSCFG_SetEXTISource+0x58>)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	3302      	adds	r3, #2
 800068e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	0c1b      	lsrs	r3, r3, #16
 8000696:	43db      	mvns	r3, r3
 8000698:	ea02 0103 	and.w	r1, r2, r3
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	0c1b      	lsrs	r3, r3, #16
 80006a0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	fa93 f3a3 	rbit	r3, r3
 80006a8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	fab3 f383 	clz	r3, r3
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	fa03 f202 	lsl.w	r2, r3, r2
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <LL_SYSCFG_SetEXTISource+0x58>)
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	430a      	orrs	r2, r1
 80006c2:	3302      	adds	r3, #2
 80006c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40010000 	.word	0x40010000

080006d8 <LL_GPIO_SetPinMode>:
{
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa93 f3a3 	rbit	r3, r3
 80006f2:	613b      	str	r3, [r7, #16]
  return result;
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	fab3 f383 	clz	r3, r3
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	2103      	movs	r1, #3
 8000700:	fa01 f303 	lsl.w	r3, r1, r3
 8000704:	43db      	mvns	r3, r3
 8000706:	401a      	ands	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	fa93 f3a3 	rbit	r3, r3
 8000712:	61bb      	str	r3, [r7, #24]
  return result;
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fab3 f383 	clz	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	431a      	orrs	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_GPIO_SetPinPull>:
{
 8000736:	b480      	push	{r7}
 8000738:	b089      	sub	sp, #36	; 0x24
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68da      	ldr	r2, [r3, #12]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	fa93 f3a3 	rbit	r3, r3
 8000750:	613b      	str	r3, [r7, #16]
  return result;
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	fab3 f383 	clz	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	2103      	movs	r1, #3
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	43db      	mvns	r3, r3
 8000764:	401a      	ands	r2, r3
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	fa93 f3a3 	rbit	r3, r3
 8000770:	61bb      	str	r3, [r7, #24]
  return result;
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	fab3 f383 	clz	r3, r3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	431a      	orrs	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	60da      	str	r2, [r3, #12]
}
 8000788:	bf00      	nop
 800078a:	3724      	adds	r7, #36	; 0x24
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <LL_GPIO_ResetOutputPin>:
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80007d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007d6:	f7ff ff39 	bl	800064c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80007da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007de:	f7ff ff35 	bl	800064c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80007e2:	f641 119f 	movw	r1, #6559	; 0x199f
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f7ff ffd3 	bl	8000794 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 80007ee:	2133      	movs	r1, #51	; 0x33
 80007f0:	482b      	ldr	r0, [pc, #172]	; (80008a0 <MX_GPIO_Init+0xf0>)
 80007f2:	f7ff ffcf 	bl	8000794 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80007f6:	f641 139f 	movw	r3, #6559	; 0x199f
 80007fa:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007fc:	2301      	movs	r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f001 fccc 	bl	80021b0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800081c:	2301      	movs	r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4619      	mov	r1, r3
 8000830:	481b      	ldr	r0, [pc, #108]	; (80008a0 <MX_GPIO_Init+0xf0>)
 8000832:	f001 fcbd 	bl	80021b0 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8000836:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff ff1e 	bl	800067c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 8000840:	2201      	movs	r2, #1
 8000842:	2108      	movs	r1, #8
 8000844:	4816      	ldr	r0, [pc, #88]	; (80008a0 <MX_GPIO_Init+0xf0>)
 8000846:	f7ff ff76 	bl	8000736 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4814      	ldr	r0, [pc, #80]	; (80008a0 <MX_GPIO_Init+0xf0>)
 8000850:	f7ff ff42 	bl	80006d8 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000854:	2308      	movs	r3, #8
 8000856:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800085c:	2301      	movs	r3, #1
 800085e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000862:	2300      	movs	r3, #0
 8000864:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000868:	2302      	movs	r3, #2
 800086a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4618      	mov	r0, r3
 8000874:	f001 faa4 	bl	8001dc0 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8000878:	f7ff fe5e 	bl	8000538 <__NVIC_GetPriorityGrouping>
 800087c:	4603      	mov	r3, r0
 800087e:	2200      	movs	r2, #0
 8000880:	2101      	movs	r1, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff feae 	bl	80005e4 <NVIC_EncodePriority>
 8000888:	4603      	mov	r3, r0
 800088a:	4619      	mov	r1, r3
 800088c:	2009      	movs	r0, #9
 800088e:	f7ff fe7f 	bl	8000590 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8000892:	2009      	movs	r0, #9
 8000894:	f7ff fe5e 	bl	8000554 <__NVIC_EnableIRQ>

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	48000400 	.word	0x48000400

080008a4 <__NVIC_GetPriorityGrouping>:
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <__NVIC_GetPriorityGrouping+0x18>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	f003 0307 	and.w	r3, r3, #7
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_EnableIRQ>:
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	db0b      	blt.n	80008ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f003 021f 	and.w	r2, r3, #31
 80008d8:	4907      	ldr	r1, [pc, #28]	; (80008f8 <__NVIC_EnableIRQ+0x38>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	2001      	movs	r0, #1
 80008e2:	fa00 f202 	lsl.w	r2, r0, r2
 80008e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000e100 	.word	0xe000e100

080008fc <__NVIC_SetPriority>:
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db0a      	blt.n	8000926 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <__NVIC_SetPriority+0x4c>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	440b      	add	r3, r1
 8000920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000924:	e00a      	b.n	800093c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4908      	ldr	r1, [pc, #32]	; (800094c <__NVIC_SetPriority+0x50>)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	3b04      	subs	r3, #4
 8000934:	0112      	lsls	r2, r2, #4
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	440b      	add	r3, r1
 800093a:	761a      	strb	r2, [r3, #24]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <NVIC_EncodePriority>:
{
 8000950:	b480      	push	{r7}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f1c3 0307 	rsb	r3, r3, #7
 800096a:	2b04      	cmp	r3, #4
 800096c:	bf28      	it	cs
 800096e:	2304      	movcs	r3, #4
 8000970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3304      	adds	r3, #4
 8000976:	2b06      	cmp	r3, #6
 8000978:	d902      	bls.n	8000980 <NVIC_EncodePriority+0x30>
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3b03      	subs	r3, #3
 800097e:	e000      	b.n	8000982 <NVIC_EncodePriority+0x32>
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	f04f 32ff 	mov.w	r2, #4294967295
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43da      	mvns	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	401a      	ands	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000998:	f04f 31ff 	mov.w	r1, #4294967295
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	43d9      	mvns	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	4313      	orrs	r3, r2
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3724      	adds	r7, #36	; 0x24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f043 0201 	orr.w	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	601a      	str	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b085      	sub	sp, #20
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000a2a:	f023 0306 	bic.w	r3, r3, #6
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	431a      	orrs	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	60da      	str	r2, [r3, #12]
}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60da      	str	r2, [r3, #12]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f043 0204 	orr.w	r2, r3, #4
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f023 0204 	bic.w	r2, r3, #4
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d101      	bne.n	8000abe <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000aba:	2301      	movs	r3, #1
 8000abc:	e000      	b.n	8000ac0 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d101      	bne.n	8000ae4 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	2b20      	cmp	r3, #32
 8000b04:	d101      	bne.n	8000b0a <LL_I2C_IsActiveFlag_STOP+0x18>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	f043 0220 	orr.w	r2, r3, #32
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	61da      	str	r2, [r3, #28]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	605a      	str	r2, [r3, #4]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	0d5b      	lsrs	r3, r3, #21
 8000b6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <LL_I2C_HandleTransfer+0x48>)
 8000b74:	430b      	orrs	r3, r1
 8000b76:	43db      	mvns	r3, r3
 8000b78:	401a      	ands	r2, r3
 8000b7a:	68b9      	ldr	r1, [r7, #8]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4319      	orrs	r1, r3
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	041b      	lsls	r3, r3, #16
 8000b84:	4319      	orrs	r1, r3
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	4319      	orrs	r1, r3
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	03ff7bff 	.word	0x03ff7bff

08000ba4 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb0:	b2db      	uxtb	r3, r3
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8000bca:	78fa      	ldrb	r2, [r7, #3]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <LL_AHB1_GRP1_EnableClock>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000be6:	695a      	ldr	r2, [r3, #20]
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bf2:	695a      	ldr	r2, [r3, #20]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	40021000 	.word	0x40021000

08000c0c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c16:	69da      	ldr	r2, [r3, #28]
 8000c18:	4907      	ldr	r1, [pc, #28]	; (8000c38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c22:	69da      	ldr	r2, [r3, #28]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4013      	ands	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	40021000 	.word	0x40021000

08000c3c <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	; 0x38
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
 8000c52:	615a      	str	r2, [r3, #20]
 8000c54:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000c66:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000c6a:	f7ff ffb7 	bl	8000bdc <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000c6e:	23c0      	movs	r3, #192	; 0xc0
 8000c70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c72:	2302      	movs	r3, #2
 8000c74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000c82:	2304      	movs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4821      	ldr	r0, [pc, #132]	; (8000d10 <MX_I2C1_Init+0xd4>)
 8000c8c:	f001 fa90 	bl	80021b0 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000c90:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000c94:	f7ff ffba 	bl	8000c0c <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c98:	f7ff fe04 	bl	80008a4 <__NVIC_GetPriorityGrouping>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fe54 	bl	8000950 <NVIC_EncodePriority>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4619      	mov	r1, r3
 8000cac:	201f      	movs	r0, #31
 8000cae:	f7ff fe25 	bl	80008fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cb2:	201f      	movs	r0, #31
 8000cb4:	f7ff fe04 	bl	80008c0 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000cb8:	4816      	ldr	r0, [pc, #88]	; (8000d14 <MX_I2C1_Init+0xd8>)
 8000cba:	f7ff ff3d 	bl	8000b38 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000cbe:	4815      	ldr	r0, [pc, #84]	; (8000d14 <MX_I2C1_Init+0xd8>)
 8000cc0:	f7ff fec1 	bl	8000a46 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <MX_I2C1_Init+0xd8>)
 8000cc6:	f7ff fe96 	bl	80009f6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000cca:	4812      	ldr	r0, [pc, #72]	; (8000d14 <MX_I2C1_Init+0xd8>)
 8000ccc:	f7ff fe83 	bl	80009d6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_I2C1_Init+0xdc>)
 8000cd6:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <MX_I2C1_Init+0xd8>)
 8000cf4:	f001 fb6f 	bl	80023d6 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_I2C1_Init+0xd8>)
 8000cfe:	f7ff fe8a 	bl	8000a16 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8000d02:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_I2C1_Init+0xd8>)
 8000d04:	f7ff fe57 	bl	80009b6 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	3738      	adds	r7, #56	; 0x38
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	48000400 	.word	0x48000400
 8000d14:	40005400 	.word	0x40005400
 8000d18:	2000090e 	.word	0x2000090e

08000d1c <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	4604      	mov	r4, r0
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71bb      	strb	r3, [r7, #6]
 8000d32:	460b      	mov	r3, r1
 8000d34:	717b      	strb	r3, [r7, #5]
 8000d36:	4613      	mov	r3, r2
 8000d38:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8000d3a:	793b      	ldrb	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d46:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000d48:	7979      	ldrb	r1, [r7, #5]
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <i2c_master_write+0x80>)
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2302      	movs	r3, #2
 8000d56:	2200      	movs	r2, #0
 8000d58:	4811      	ldr	r0, [pc, #68]	; (8000da0 <i2c_master_write+0x84>)
 8000d5a:	f7ff fefd 	bl	8000b58 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8000d5e:	79bb      	ldrb	r3, [r7, #6]
 8000d60:	4619      	mov	r1, r3
 8000d62:	480f      	ldr	r0, [pc, #60]	; (8000da0 <i2c_master_write+0x84>)
 8000d64:	f7ff ff2b 	bl	8000bbe <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000d68:	e00a      	b.n	8000d80 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8000d6a:	480d      	ldr	r0, [pc, #52]	; (8000da0 <i2c_master_write+0x84>)
 8000d6c:	f7ff fe9b 	bl	8000aa6 <LL_I2C_IsActiveFlag_TXIS>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d004      	beq.n	8000d80 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4809      	ldr	r0, [pc, #36]	; (8000da0 <i2c_master_write+0x84>)
 8000d7c:	f7ff ff1f 	bl	8000bbe <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000d80:	4807      	ldr	r0, [pc, #28]	; (8000da0 <i2c_master_write+0x84>)
 8000d82:	f7ff feb6 	bl	8000af2 <LL_I2C_IsActiveFlag_STOP>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0ee      	beq.n	8000d6a <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <i2c_master_write+0x84>)
 8000d8e:	f7ff fec3 	bl	8000b18 <LL_I2C_ClearFlag_STOP>
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	80002000 	.word	0x80002000
 8000da0:	40005400 	.word	0x40005400

08000da4 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	4608      	mov	r0, r1
 8000dae:	4611      	mov	r1, r2
 8000db0:	461a      	mov	r2, r3
 8000db2:	4603      	mov	r3, r0
 8000db4:	70fb      	strb	r3, [r7, #3]
 8000db6:	460b      	mov	r3, r1
 8000db8:	70bb      	strb	r3, [r7, #2]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8000dbe:	4a30      	ldr	r2, [pc, #192]	; (8000e80 <i2c_master_read+0xdc>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8000dc4:	7c3b      	ldrb	r3, [r7, #16]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8000dca:	78bb      	ldrb	r3, [r7, #2]
 8000dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dd0:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <i2c_master_read+0xe0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8000dd8:	482b      	ldr	r0, [pc, #172]	; (8000e88 <i2c_master_read+0xe4>)
 8000dda:	f7ff fe44 	bl	8000a66 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000dde:	7879      	ldrb	r1, [r7, #1]
 8000de0:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <i2c_master_read+0xe8>)
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2301      	movs	r3, #1
 8000dec:	2200      	movs	r2, #0
 8000dee:	4826      	ldr	r0, [pc, #152]	; (8000e88 <i2c_master_read+0xe4>)
 8000df0:	f7ff feb2 	bl	8000b58 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000df4:	e00a      	b.n	8000e0c <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8000df6:	4824      	ldr	r0, [pc, #144]	; (8000e88 <i2c_master_read+0xe4>)
 8000df8:	f7ff fe55 	bl	8000aa6 <LL_I2C_IsActiveFlag_TXIS>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d004      	beq.n	8000e0c <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr); //adresa, ktoru chceme citat - posielame do slave zariadenia
 8000e02:	78bb      	ldrb	r3, [r7, #2]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4820      	ldr	r0, [pc, #128]	; (8000e88 <i2c_master_read+0xe4>)
 8000e08:	f7ff fed9 	bl	8000bbe <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000e0c:	481e      	ldr	r0, [pc, #120]	; (8000e88 <i2c_master_read+0xe4>)
 8000e0e:	f7ff fe70 	bl	8000af2 <LL_I2C_IsActiveFlag_STOP>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0ee      	beq.n	8000df6 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8000e18:	481b      	ldr	r0, [pc, #108]	; (8000e88 <i2c_master_read+0xe4>)
 8000e1a:	f7ff fe7d 	bl	8000b18 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8000e1e:	bf00      	nop
 8000e20:	4819      	ldr	r0, [pc, #100]	; (8000e88 <i2c_master_read+0xe4>)
 8000e22:	f7ff fe66 	bl	8000af2 <LL_I2C_IsActiveFlag_STOP>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1f9      	bne.n	8000e20 <i2c_master_read+0x7c>

	//citam register od slejva, LL_I2C_HandleTransfer- dolezita funkcia
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8000e2c:	7879      	ldrb	r1, [r7, #1]
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <i2c_master_read+0xec>)
 8000e32:	9201      	str	r2, [sp, #4]
 8000e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e38:	9200      	str	r2, [sp, #0]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4812      	ldr	r0, [pc, #72]	; (8000e88 <i2c_master_read+0xe4>)
 8000e3e:	f7ff fe8b 	bl	8000b58 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8000e42:	bf00      	nop
 8000e44:	4810      	ldr	r0, [pc, #64]	; (8000e88 <i2c_master_read+0xe4>)
 8000e46:	f7ff fe54 	bl	8000af2 <LL_I2C_IsActiveFlag_STOP>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f9      	beq.n	8000e44 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <i2c_master_read+0xe4>)
 8000e52:	f7ff fe61 	bl	8000b18 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8000e56:	480c      	ldr	r0, [pc, #48]	; (8000e88 <i2c_master_read+0xe4>)
 8000e58:	f7ff fe15 	bl	8000a86 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <i2c_master_read+0xe4>)
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <i2c_master_read+0xe4>)
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <i2c_master_read+0xf0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <i2c_master_read+0xe0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <i2c_master_read+0xdc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000044 	.word	0x20000044
 8000e84:	20000038 	.word	0x20000038
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	80002000 	.word	0x80002000
 8000e90:	80002400 	.word	0x80002400
 8000e94:	20000039 	.word	0x20000039

08000e98 <I2C1_EV_IRQHandler_fun>:


void I2C1_EV_IRQHandler_fun(void)
{
 8000e98:	b598      	push	{r3, r4, r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8000e9c:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <I2C1_EV_IRQHandler_fun+0x50>)
 8000e9e:	f7ff fe15 	bl	8000acc <LL_I2C_IsActiveFlag_RXNE>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d01c      	beq.n	8000ee2 <I2C1_EV_IRQHandler_fun+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <I2C1_EV_IRQHandler_fun+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <I2C1_EV_IRQHandler_fun+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	1c59      	adds	r1, r3, #1
 8000eb4:	b2c8      	uxtb	r0, r1
 8000eb6:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <I2C1_EV_IRQHandler_fun+0x58>)
 8000eb8:	7008      	strb	r0, [r1, #0]
 8000eba:	18d4      	adds	r4, r2, r3
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <I2C1_EV_IRQHandler_fun+0x50>)
 8000ebe:	f7ff fe71 	bl	8000ba4 <LL_I2C_ReceiveData8>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <I2C1_EV_IRQHandler_fun+0x58>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b13      	cmp	r3, #19
 8000ece:	d903      	bls.n	8000ed8 <I2C1_EV_IRQHandler_fun+0x40>
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <I2C1_EV_IRQHandler_fun+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e001      	b.n	8000edc <I2C1_EV_IRQHandler_fun+0x44>
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <I2C1_EV_IRQHandler_fun+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <I2C1_EV_IRQHandler_fun+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ee2:	bf00      	nop
 8000ee4:	bd98      	pop	{r3, r4, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	20000044 	.word	0x20000044
 8000ef0:	20000039 	.word	0x20000039
 8000ef4:	20000038 	.word	0x20000038

08000ef8 <iks01a1_init>:
#include "iks01a1.h"

uint8_t data = 0;

uint8_t iks01a1_init(void){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	LL_mDelay(100);
 8000efe:	2064      	movs	r0, #100	; 0x64
 8000f00:	f001 fec8 	bl	8002c94 <LL_mDelay>
	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8000f04:	200f      	movs	r0, #15
 8000f06:	f000 f82b 	bl	8000f60 <lps25hb_read_byte>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	//val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);

	if(!(val == LPS25HB_WHO_AM_I_VALUE))
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2bbd      	cmp	r3, #189	; 0xbd
 8000f12:	d001      	beq.n	8000f18 <iks01a1_init+0x20>
	{
		return 0; //bad who am I value
 8000f14:	2300      	movs	r3, #0
 8000f16:	e01f      	b.n	8000f58 <iks01a1_init+0x60>
	}

	LL_mDelay(100);
 8000f18:	2064      	movs	r0, #100	; 0x64
 8000f1a:	f001 febb 	bl	8002c94 <LL_mDelay>
	val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f000 f836 	bl	8000f90 <hts221_read_byte>
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]

	if(!(val == HTS221_WHO_AM_I_VALUE))
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2bbc      	cmp	r3, #188	; 0xbc
 8000f2c:	d001      	beq.n	8000f32 <iks01a1_init+0x3a>
	{
		return 0; //bad who am I value
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e012      	b.n	8000f58 <iks01a1_init+0x60>
	}

	ctrl = hts221_read_byte(HTS221_CTRL_REG1);
 8000f32:	2020      	movs	r0, #32
 8000f34:	f000 f82c 	bl	8000f90 <hts221_read_byte>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 7;
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f42:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 2;
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	71bb      	strb	r3, [r7, #6]
	hts221_write_byte(HTS221_CTRL_REG1, ctrl); //active mode
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2020      	movs	r0, #32
 8000f52:	f000 f94f 	bl	80011f4 <hts221_write_byte>
	//uint8_t ctrltest = hts221_read_byte(HTS221_CTRL_REG1);

	//ctrl = ctrltest;

	return 1;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <lps25hb_read_byte>:

uint8_t lps25hb_read_byte(uint8_t reg_addr) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <lps25hb_read_byte+0x2c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, LPS25HB_DEVICE_ADDRESS, 0));
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	2300      	movs	r3, #0
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	23bb      	movs	r3, #187	; 0xbb
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <lps25hb_read_byte+0x2c>)
 8000f7c:	f7ff ff12 	bl	8000da4 <i2c_master_read>
 8000f80:	4603      	mov	r3, r0
 8000f82:	781b      	ldrb	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000003a 	.word	0x2000003a

08000f90 <hts221_read_byte>:

uint8_t hts221_read_byte(uint8_t reg_addr) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <hts221_read_byte+0x2c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, HTS221_DEVICE_ADDRESS, 0));
 8000fa0:	79fa      	ldrb	r2, [r7, #7]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	23be      	movs	r3, #190	; 0xbe
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4804      	ldr	r0, [pc, #16]	; (8000fbc <hts221_read_byte+0x2c>)
 8000fac:	f7ff fefa 	bl	8000da4 <i2c_master_read>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	781b      	ldrb	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000003a 	.word	0x2000003a

08000fc0 <hts221_start_measurement>:

void hts221_start_measurement(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	uint8_t ctrl = hts221_read_byte(HTS221_CTRL_REG2);
 8000fc6:	2021      	movs	r0, #33	; 0x21
 8000fc8:	f7ff ffe2 	bl	8000f90 <hts221_read_byte>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
	ctrl |= 0x1;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	71fb      	strb	r3, [r7, #7]
	hts221_write_byte(HTS221_CTRL_REG2, ctrl); //activate measurement
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2021      	movs	r0, #33	; 0x21
 8000fde:	f000 f909 	bl	80011f4 <hts221_write_byte>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <hts221_get_humidity>:

void hts221_get_humidity(float* out) {
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	uint8_t data[2], h0_rh, h1_rh;
	uint16_t h_out, h0_t0_out, h1_t0_out;



	uint8_t availability = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 8000ff6:	2027      	movs	r0, #39	; 0x27
 8000ff8:	f7ff ffca 	bl	8000f90 <hts221_read_byte>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1) >> 1;
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	75fb      	strb	r3, [r7, #23]

	h0_rh = hts221_read_byte(HTS221_H0_RH)/2;
 8001008:	2030      	movs	r0, #48	; 0x30
 800100a:	f7ff ffc1 	bl	8000f90 <hts221_read_byte>
 800100e:	4603      	mov	r3, r0
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	75bb      	strb	r3, [r7, #22]
	h1_rh = hts221_read_byte(HTS221_H1_RH)/2;
 8001014:	2031      	movs	r0, #49	; 0x31
 8001016:	f7ff ffbb 	bl	8000f90 <hts221_read_byte>
 800101a:	4603      	mov	r3, r0
 800101c:	085b      	lsrs	r3, r3, #1
 800101e:	757b      	strb	r3, [r7, #21]

	hts221_readArray(data, HTS221_H0_T0_OUT, 2);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2202      	movs	r2, #2
 8001026:	2136      	movs	r1, #54	; 0x36
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f8cf 	bl	80011cc <hts221_readArray>
	h0_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 800102e:	7b7b      	ldrb	r3, [r7, #13]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	b21b      	sxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b21b      	sxth	r3, r3
 800103c:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_H1_T0_OUT, 2);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2202      	movs	r2, #2
 8001044:	213a      	movs	r1, #58	; 0x3a
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f8c0 	bl	80011cc <hts221_readArray>
	h1_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	7b3b      	ldrb	r3, [r7, #12]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	823b      	strh	r3, [r7, #16]

	hts221_readArray(data, HTS221_HUMIDITY_ADDR, 2);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2202      	movs	r2, #2
 8001062:	2128      	movs	r1, #40	; 0x28
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f8b1 	bl	80011cc <hts221_readArray>

	h_out = ((uint16_t)data[1]) << 8 | data[0];
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	7b3b      	ldrb	r3, [r7, #12]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	81fb      	strh	r3, [r7, #14]
	*out = (float)((h1_rh-h0_rh)*(h_out-h0_t0_out)/(float)(h1_t0_out-h0_t0_out)+h0_rh);
 800107a:	7d7a      	ldrb	r2, [r7, #21]
 800107c:	7dbb      	ldrb	r3, [r7, #22]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	89f9      	ldrh	r1, [r7, #14]
 8001082:	8a7a      	ldrh	r2, [r7, #18]
 8001084:	1a8a      	subs	r2, r1, r2
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001092:	8a3a      	ldrh	r2, [r7, #16]
 8001094:	8a7b      	ldrh	r3, [r7, #18]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010a4:	7dbb      	ldrb	r3, [r7, #22]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	edc3 7a00 	vstr	s15, [r3]
}
 80010b8:	bf00      	nop
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <hts221_get_temperature>:

void hts221_get_temperature(float* out) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	uint16_t t_out, t0_out, t1_out, t0_degc, t1_degc;

	uint8_t availability = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 80010cc:	2027      	movs	r0, #39	; 0x27
 80010ce:	f7ff ff5f 	bl	8000f90 <hts221_read_byte>
 80010d2:	4603      	mov	r3, r0
 80010d4:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1);
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	75fb      	strb	r3, [r7, #23]

	uint8_t tmp = hts221_read_byte(HTS221_T0_T1_DEGC_MSB);
 80010de:	2035      	movs	r0, #53	; 0x35
 80010e0:	f7ff ff56 	bl	8000f90 <hts221_read_byte>
 80010e4:	4603      	mov	r3, r0
 80010e6:	75bb      	strb	r3, [r7, #22]
	//uint16_t tmp2;

	t0_degc = hts221_read_byte(HTS221_T0_DEGC);
 80010e8:	2032      	movs	r0, #50	; 0x32
 80010ea:	f7ff ff51 	bl	8000f90 <hts221_read_byte>
 80010ee:	4603      	mov	r3, r0
 80010f0:	82bb      	strh	r3, [r7, #20]
	t1_degc = hts221_read_byte(HTS221_T1_DEGC);
 80010f2:	2033      	movs	r0, #51	; 0x33
 80010f4:	f7ff ff4c 	bl	8000f90 <hts221_read_byte>
 80010f8:	4603      	mov	r3, r0
 80010fa:	827b      	strh	r3, [r7, #18]

	t0_degc += ((tmp & 0x3)<<8);
 80010fc:	7dbb      	ldrb	r3, [r7, #22]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001106:	b29a      	uxth	r2, r3
 8001108:	8abb      	ldrh	r3, [r7, #20]
 800110a:	4413      	add	r3, r2
 800110c:	82bb      	strh	r3, [r7, #20]
	t0_degc /= 8;
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	82bb      	strh	r3, [r7, #20]

	//tmp2 = ((tmp & (0x3)<<2))<<6;
	t1_degc += ((tmp & ((0x3)<<2))<<6);
 8001114:	7dbb      	ldrb	r3, [r7, #22]
 8001116:	019b      	lsls	r3, r3, #6
 8001118:	b29b      	uxth	r3, r3
 800111a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800111e:	b29a      	uxth	r2, r3
 8001120:	8a7b      	ldrh	r3, [r7, #18]
 8001122:	4413      	add	r3, r2
 8001124:	827b      	strh	r3, [r7, #18]
	t1_degc /= 8;
 8001126:	8a7b      	ldrh	r3, [r7, #18]
 8001128:	08db      	lsrs	r3, r3, #3
 800112a:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_T0_OUT, 2);
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2202      	movs	r2, #2
 8001132:	213e      	movs	r1, #62	; 0x3e
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f849 	bl	80011cc <hts221_readArray>
	t0_out = ((uint16_t)data[1]) << 8 | data[0];
 800113a:	7a7b      	ldrb	r3, [r7, #9]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7a3b      	ldrb	r3, [r7, #8]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	823b      	strh	r3, [r7, #16]
	hts221_readArray(data, HTS221_T1_OUT, 2);
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	2202      	movs	r2, #2
 8001150:	213c      	movs	r1, #60	; 0x3c
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f83a 	bl	80011cc <hts221_readArray>
	t1_out = ((uint16_t)data[1]) << 8 | data[0];
 8001158:	7a7b      	ldrb	r3, [r7, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	7a3b      	ldrb	r3, [r7, #8]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21b      	sxth	r3, r3
 8001166:	81fb      	strh	r3, [r7, #14]

	hts221_readArray(data, HTS221_TEMPERATURE_ADDR, 2);
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	2202      	movs	r2, #2
 800116e:	212a      	movs	r1, #42	; 0x2a
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f82b 	bl	80011cc <hts221_readArray>

	t_out = ((uint16_t)data[1]) << 8 | data[0];
 8001176:	7a7b      	ldrb	r3, [r7, #9]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	7a3b      	ldrb	r3, [r7, #8]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21b      	sxth	r3, r3
 8001184:	81bb      	strh	r3, [r7, #12]
	*out = (float)((t1_degc - t0_degc)*(t_out-t0_out)/(float)(t1_out-t0_out)+t0_degc);
 8001186:	8a7a      	ldrh	r2, [r7, #18]
 8001188:	8abb      	ldrh	r3, [r7, #20]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	89b9      	ldrh	r1, [r7, #12]
 800118e:	8a3a      	ldrh	r2, [r7, #16]
 8001190:	1a8a      	subs	r2, r1, r2
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800119e:	89fa      	ldrh	r2, [r7, #14]
 80011a0:	8a3b      	ldrh	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011b0:	8abb      	ldrh	r3, [r7, #20]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	edc3 7a00 	vstr	s15, [r3]
}
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <hts221_readArray>:
{
	i2c_master_read(data, length, reg, LSM6DS0_DEVICE_ADDRESS, 1);
}

void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
 80011d8:	4613      	mov	r3, r2
 80011da:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, HTS221_DEVICE_ADDRESS, 1);
 80011dc:	78fa      	ldrb	r2, [r7, #3]
 80011de:	78b9      	ldrb	r1, [r7, #2]
 80011e0:	2301      	movs	r3, #1
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	23be      	movs	r3, #190	; 0xbe
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fddc 	bl	8000da4 <i2c_master_read>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <hts221_write_byte>:
{
	i2c_master_write(value, reg_addr, LSM6DS0_DEVICE_ADDRESS, 0);
}

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	460a      	mov	r2, r1
 80011fe:	71fb      	strb	r3, [r7, #7]
 8001200:	4613      	mov	r3, r2
 8001202:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, HTS221_DEVICE_ADDRESS, 0);
 8001204:	79f9      	ldrb	r1, [r7, #7]
 8001206:	79b8      	ldrb	r0, [r7, #6]
 8001208:	2300      	movs	r3, #0
 800120a:	22be      	movs	r2, #190	; 0xbe
 800120c:	f7ff fd86 	bl	8000d1c <i2c_master_write>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <__NVIC_SetPriorityGrouping>:
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <LL_RCC_HSI_Enable+0x1c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <LL_RCC_HSI_Enable+0x1c>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <LL_RCC_HSI_IsReady+0x20>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b02      	cmp	r3, #2
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000

080012a4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4904      	ldr	r1, [pc, #16]	; (80012cc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <LL_RCC_SetSysClkSource+0x24>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f023 0203 	bic.w	r2, r3, #3
 80012e0:	4904      	ldr	r1, [pc, #16]	; (80012f4 <LL_RCC_SetSysClkSource+0x24>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40021000 	.word	0x40021000

080012f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <LL_RCC_GetSysClkSource+0x18>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <LL_RCC_SetAHBPrescaler+0x24>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001324:	4904      	ldr	r1, [pc, #16]	; (8001338 <LL_RCC_SetAHBPrescaler+0x24>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40021000 	.word	0x40021000

0800133c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800134c:	4904      	ldr	r1, [pc, #16]	; (8001360 <LL_RCC_SetAPB1Prescaler+0x24>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40021000 	.word	0x40021000

08001364 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <LL_RCC_SetAPB2Prescaler+0x24>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001374:	4904      	ldr	r1, [pc, #16]	; (8001388 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000

0800138c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <LL_RCC_SetI2CClockSource+0x2c>)
 8001396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	0e1b      	lsrs	r3, r3, #24
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80013a6:	4904      	ldr	r1, [pc, #16]	; (80013b8 <LL_RCC_SetI2CClockSource+0x2c>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	630b      	str	r3, [r1, #48]	; 0x30
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40021000 	.word	0x40021000

080013bc <LL_APB1_GRP1_EnableClock>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013c6:	69da      	ldr	r2, [r3, #28]
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013d2:	69da      	ldr	r2, [r3, #28]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4013      	ands	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000

080013ec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013f6:	699a      	ldr	r2, [r3, #24]
 80013f8:	4907      	ldr	r1, [pc, #28]	; (8001418 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001402:	699a      	ldr	r2, [r3, #24]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4013      	ands	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40021000 	.word	0x40021000

0800141c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <LL_FLASH_SetLatency+0x24>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 0207 	bic.w	r2, r3, #7
 800142c:	4904      	ldr	r1, [pc, #16]	; (8001440 <LL_FLASH_SetLatency+0x24>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40022000 	.word	0x40022000

08001444 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <LL_FLASH_GetLatency+0x18>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40022000 	.word	0x40022000

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001468:	2001      	movs	r0, #1
 800146a:	f7ff ffbf 	bl	80013ec <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800146e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001472:	f7ff ffa3 	bl	80013bc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001476:	2003      	movs	r0, #3
 8001478:	f7ff fece 	bl	8001218 <__NVIC_SetPriorityGrouping>
  EXTI->RTSR &= ~(EXTI_IMR_MR4);
  EXTI->FTSR |= EXTI_IMR_MR4;*/
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 f8a6 	bl	80015cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Systick_Init();
 8001480:	f000 fad0 	bl	8001a24 <Systick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f7ff f994 	bl	80007b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001488:	f7ff fbd8 	bl	8000c3c <MX_I2C1_Init>
  MX_TIM3_Init();
 800148c:	f000 fadc 	bl	8001a48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  error = 0;
 8001490:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <main+0x148>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
  if(!iks01a1_init()) error = 1;
 8001496:	f7ff fd2f 	bl	8000ef8 <iks01a1_init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <main+0x46>
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <main+0x148>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]


  setSegments();
 80014a6:	f7fe fee1 	bl	800026c <setSegments>
  setDigits();
 80014aa:	f7fe ff2d 	bl	8000308 <setDigits>
  LL_mDelay(2000);
 80014ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014b2:	f001 fbef 	bl	8002c94 <LL_mDelay>
  resetDigits();
 80014b6:	f7fe ff07 	bl	80002c8 <resetDigits>
  resetSegments();
 80014ba:	f7fe fea9 	bl	8000210 <resetSegments>

  mode = 0;
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <main+0x14c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
  float humidity, temperature;
  strcpy(display_text,"0123456789\0");
 80014c4:	4a3a      	ldr	r2, [pc, #232]	; (80015b0 <main+0x150>)
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <main+0x154>)
 80014c8:	cb03      	ldmia	r3!, {r0, r1}
 80014ca:	6010      	str	r0, [r2, #0]
 80014cc:	6051      	str	r1, [r2, #4]
 80014ce:	8819      	ldrh	r1, [r3, #0]
 80014d0:	789b      	ldrb	r3, [r3, #2]
 80014d2:	8111      	strh	r1, [r2, #8]
 80014d4:	7293      	strb	r3, [r2, #10]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(error) {
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <main+0x148>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00d      	beq.n	80014fa <main+0x9a>
		  strcpy(display_text,"I2C_who_am_I_error\0");
 80014de:	4a34      	ldr	r2, [pc, #208]	; (80015b0 <main+0x150>)
 80014e0:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <main+0x158>)
 80014e2:	4615      	mov	r5, r2
 80014e4:	461c      	mov	r4, r3
 80014e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e8:	6028      	str	r0, [r5, #0]
 80014ea:	6069      	str	r1, [r5, #4]
 80014ec:	60aa      	str	r2, [r5, #8]
 80014ee:	60eb      	str	r3, [r5, #12]
 80014f0:	8823      	ldrh	r3, [r4, #0]
 80014f2:	78a2      	ldrb	r2, [r4, #2]
 80014f4:	822b      	strh	r3, [r5, #16]
 80014f6:	4613      	mov	r3, r2
 80014f8:	74ab      	strb	r3, [r5, #18]
	  }
	  hts221_start_measurement();
 80014fa:	f7ff fd61 	bl	8000fc0 <hts221_start_measurement>
	  hts221_get_humidity(&humidity);
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fd72 	bl	8000fea <hts221_get_humidity>
	  hts221_get_temperature(&temperature);
 8001506:	463b      	mov	r3, r7
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fdd9 	bl	80010c0 <hts221_get_temperature>
	  if(disp_time > (saved_time + 500))
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <main+0x15c>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f512 78fa 	adds.w	r8, r2, #500	; 0x1f4
 8001518:	f143 0900 	adc.w	r9, r3, #0
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <main+0x160>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	4599      	cmp	r9, r3
 8001524:	bf08      	it	eq
 8001526:	4590      	cmpeq	r8, r2
 8001528:	d2d5      	bcs.n	80014d6 <main+0x76>
	  	  {

	  		  display_sign(display_text[act_index],display_text[act_index+1],display_text[act_index+2],display_text[act_index+3]);
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <main+0x164>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <main+0x150>)
 8001530:	5cd0      	ldrb	r0, [r2, r3]
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <main+0x164>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <main+0x150>)
 800153a:	5cd1      	ldrb	r1, [r2, r3]
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <main+0x164>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3302      	adds	r3, #2
 8001542:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <main+0x150>)
 8001544:	5cd2      	ldrb	r2, [r2, r3]
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <main+0x164>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3303      	adds	r3, #3
 800154c:	4c18      	ldr	r4, [pc, #96]	; (80015b0 <main+0x150>)
 800154e:	5ce3      	ldrb	r3, [r4, r3]
 8001550:	f7fe ff94 	bl	800047c <display_sign>
	  	  	  saved_time = disp_time;
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <main+0x160>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	4918      	ldr	r1, [pc, #96]	; (80015bc <main+0x15c>)
 800155c:	e9c1 2300 	strd	r2, r3, [r1]

	  	  	  if(right){ //urcovanie smeru
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <main+0x168>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <main+0x114>
	  	  		  act_index++;
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <main+0x164>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <main+0x164>)
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e004      	b.n	800157e <main+0x11e>
	  	  	  } else {
	  	  		  act_index--;
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <main+0x164>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <main+0x164>)
 800157c:	6013      	str	r3, [r2, #0]
	  	  	  }
	  	  	  if(act_index == strlen(display_text)-4) { //17 velkost zobrazovaneho textu, ak dojde nakoniec zmeni smer
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <main+0x150>)
 8001580:	f7fe fe22 	bl	80001c8 <strlen>
 8001584:	4603      	mov	r3, r0
 8001586:	3b04      	subs	r3, #4
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <main+0x164>)
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	4293      	cmp	r3, r2
 800158e:	d102      	bne.n	8001596 <main+0x136>
	  	  		  right = 0;
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <main+0x168>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
	  	  	  }
	  	  	  if (act_index == 0){
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <main+0x164>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d19b      	bne.n	80014d6 <main+0x76>
	  	  		  right = 1;
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <main+0x168>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
	  if(error) {
 80015a4:	e797      	b.n	80014d6 <main+0x76>
 80015a6:	bf00      	nop
 80015a8:	20000049 	.word	0x20000049
 80015ac:	20000048 	.word	0x20000048
 80015b0:	20000058 	.word	0x20000058
 80015b4:	08002d70 	.word	0x08002d70
 80015b8:	08002d7c 	.word	0x08002d7c
 80015bc:	20000050 	.word	0x20000050
 80015c0:	20000028 	.word	0x20000028
 80015c4:	2000003c 	.word	0x2000003c
 80015c8:	20000000 	.word	0x20000000

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff ff23 	bl	800141c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80015d6:	bf00      	nop
 80015d8:	f7ff ff34 	bl	8001444 <LL_FLASH_GetLatency>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1fa      	bne.n	80015d8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80015e2:	f7ff fe3d 	bl	8001260 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80015e6:	bf00      	nop
 80015e8:	f7ff fe4a 	bl	8001280 <LL_RCC_HSI_IsReady>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d1fa      	bne.n	80015e8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80015f2:	2010      	movs	r0, #16
 80015f4:	f7ff fe56 	bl	80012a4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff fe8b 	bl	8001314 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fe9c 	bl	800133c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fead 	bl	8001364 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff fe60 	bl	80012d0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001610:	bf00      	nop
 8001612:	f7ff fe71 	bl	80012f8 <LL_RCC_GetSysClkSource>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1fa      	bne.n	8001612 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <SystemClock_Config+0x68>)
 800161e:	f001 fb2b 	bl	8002c78 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8001622:	4804      	ldr	r0, [pc, #16]	; (8001634 <SystemClock_Config+0x68>)
 8001624:	f001 fb5c 	bl	8002ce0 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001628:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800162c:	f7ff feae 	bl	800138c <LL_RCC_SetI2CClockSource>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	007a1200 	.word	0x007a1200

08001638 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f06f 0201 	mvn.w	r2, #1
 8001646:	611a      	str	r2, [r3, #16]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167e:	e7fe      	b.n	800167e <NMI_Handler+0x4>

08001680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <HardFault_Handler+0x4>

08001686 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <MemManage_Handler+0x4>

0800168c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <BusFault_Handler+0x4>

08001692 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <UsageFault_Handler+0x4>

08001698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */
	disp_time++;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <SysTick_Handler+0x20>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	1c50      	adds	r0, r2, #1
 80016d0:	f143 0100 	adc.w	r1, r3, #0
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <SysTick_Handler+0x20>)
 80016d6:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	20000028 	.word	0x20000028

080016e8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI3_IRQn 0 */
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <TIM3_IRQHandler+0x20>)
 80016fe:	f7ff ffa9 	bl	8001654 <LL_TIM_IsActiveFlag_UPDATE>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <TIM3_IRQHandler+0x14>
		{
			updateDisplay();
 8001708:	f7fe feda 	bl	80004c0 <updateDisplay>
		}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <TIM3_IRQHandler+0x20>)
 800170e:	f7ff ff93 	bl	8001638 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40000400 	.word	0x40000400

0800171c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C1_EV_IRQHandler_fun();
 8001720:	f7ff fbba 	bl	8000e98 <I2C1_EV_IRQHandler_fun>
  /* USER CODE END I2C1_EV_IRQn 0 */
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <SystemInit+0x20>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <SystemInit+0x20>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4907      	ldr	r1, [pc, #28]	; (80017a0 <__NVIC_EnableIRQ+0x38>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	; (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	; (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	; 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <LL_APB1_GRP1_EnableClock>:
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <LL_APB1_GRP1_EnableClock+0x2c>)
 800186a:	69da      	ldr	r2, [r3, #28]
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <LL_APB1_GRP1_EnableClock+0x2c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4013      	ands	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40021000 	.word	0x40021000

08001890 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <LL_SYSTICK_EnableIT+0x1c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <LL_SYSTICK_EnableIT+0x1c>)
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e010 	.word	0xe000e010

080018b0 <LL_TIM_EnableCounter>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f043 0201 	orr.w	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	601a      	str	r2, [r3, #0]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_TIM_EnableARRPreload>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	601a      	str	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_TIM_OC_DisableFast>:
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d028      	beq.n	8001952 <LL_TIM_OC_DisableFast+0x62>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b04      	cmp	r3, #4
 8001904:	d023      	beq.n	800194e <LL_TIM_OC_DisableFast+0x5e>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2b10      	cmp	r3, #16
 800190a:	d01e      	beq.n	800194a <LL_TIM_OC_DisableFast+0x5a>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2b40      	cmp	r3, #64	; 0x40
 8001910:	d019      	beq.n	8001946 <LL_TIM_OC_DisableFast+0x56>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001918:	d013      	beq.n	8001942 <LL_TIM_OC_DisableFast+0x52>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001920:	d00d      	beq.n	800193e <LL_TIM_OC_DisableFast+0x4e>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001928:	d007      	beq.n	800193a <LL_TIM_OC_DisableFast+0x4a>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d101      	bne.n	8001936 <LL_TIM_OC_DisableFast+0x46>
 8001932:	2307      	movs	r3, #7
 8001934:	e00e      	b.n	8001954 <LL_TIM_OC_DisableFast+0x64>
 8001936:	2308      	movs	r3, #8
 8001938:	e00c      	b.n	8001954 <LL_TIM_OC_DisableFast+0x64>
 800193a:	2306      	movs	r3, #6
 800193c:	e00a      	b.n	8001954 <LL_TIM_OC_DisableFast+0x64>
 800193e:	2305      	movs	r3, #5
 8001940:	e008      	b.n	8001954 <LL_TIM_OC_DisableFast+0x64>
 8001942:	2304      	movs	r3, #4
 8001944:	e006      	b.n	8001954 <LL_TIM_OC_DisableFast+0x64>
 8001946:	2303      	movs	r3, #3
 8001948:	e004      	b.n	8001954 <LL_TIM_OC_DisableFast+0x64>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <LL_TIM_OC_DisableFast+0x64>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_TIM_OC_DisableFast+0x64>
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3318      	adds	r3, #24
 800195a:	4619      	mov	r1, r3
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <LL_TIM_OC_DisableFast+0x9c>)
 8001960:	5cd3      	ldrb	r3, [r2, r3]
 8001962:	440b      	add	r3, r1
 8001964:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	4908      	ldr	r1, [pc, #32]	; (8001990 <LL_TIM_OC_DisableFast+0xa0>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	4619      	mov	r1, r3
 8001972:	2304      	movs	r3, #4
 8001974:	408b      	lsls	r3, r1
 8001976:	43db      	mvns	r3, r3
 8001978:	401a      	ands	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	601a      	str	r2, [r3, #0]
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	08002ddc 	.word	0x08002ddc
 8001990:	08002de8 	.word	0x08002de8

08001994 <LL_TIM_SetClockSource>:
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80019a6:	f023 0307 	bic.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	609a      	str	r2, [r3, #8]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_TIM_SetTriggerOutput>:
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_TIM_DisableMasterSlaveMode>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	60da      	str	r2, [r3, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <Systick_Init>:

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void Systick_Init(void){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <Systick_Init+0x20>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0; /* Load the SysTick Counter Value */
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <Systick_Init+0x20>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (SysTick_CTRL_TICKINT_Msk   |  /* Enable SysTick exception */
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <Systick_Init+0x20>)
 8001a36:	2207      	movs	r2, #7
 8001a38:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_ENABLE_Msk) |    /* Enable SysTick system timer */
					 SysTick_CTRL_CLKSOURCE_Msk;   /* Use processor clock source */
	LL_SYSTICK_EnableIT();
 8001a3a:	f7ff ff29 	bl	8001890 <LL_SYSTICK_EnableIT>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08e      	sub	sp, #56	; 0x38
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
 8001a5c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2220      	movs	r2, #32
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 f96f 	bl	8002d48 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f7ff fef8 	bl	8001860 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001a70:	f7ff fe6c 	bl	800174c <__NVIC_GetPriorityGrouping>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2200      	movs	r2, #0
 8001a78:	210f      	movs	r1, #15
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff febc 	bl	80017f8 <NVIC_EncodePriority>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4619      	mov	r1, r3
 8001a84:	201d      	movs	r0, #29
 8001a86:	f7ff fe8d 	bl	80017a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001a8a:	201d      	movs	r0, #29
 8001a8c:	f7ff fe6c 	bl	8001768 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8001a90:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8001a94:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;
 8001a9a:	2313      	movs	r3, #19
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4817      	ldr	r0, [pc, #92]	; (8001b08 <MX_TIM3_Init+0xc0>)
 8001aaa:	f000 fd61 	bl	8002570 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8001aae:	4816      	ldr	r0, [pc, #88]	; (8001b08 <MX_TIM3_Init+0xc0>)
 8001ab0:	f7ff ff0e 	bl	80018d0 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4814      	ldr	r0, [pc, #80]	; (8001b08 <MX_TIM3_Init+0xc0>)
 8001ab8:	f7ff ff6c 	bl	8001994 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8001abc:	2310      	movs	r3, #16
 8001abe:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_TIM3_Init+0xc0>)
 8001ad8:	f000 fdbc 	bl	8002654 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001adc:	2101      	movs	r1, #1
 8001ade:	480a      	ldr	r0, [pc, #40]	; (8001b08 <MX_TIM3_Init+0xc0>)
 8001ae0:	f7ff ff06 	bl	80018f0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4808      	ldr	r0, [pc, #32]	; (8001b08 <MX_TIM3_Init+0xc0>)
 8001ae8:	f7ff ff69 	bl	80019be <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001aec:	4806      	ldr	r0, [pc, #24]	; (8001b08 <MX_TIM3_Init+0xc0>)
 8001aee:	f7ff ff79 	bl	80019e4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM3);
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_TIM3_Init+0xc0>)
 8001af4:	f7ff ff86 	bl	8001a04 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <MX_TIM3_Init+0xc0>)
 8001afa:	f7ff fed9 	bl	80018b0 <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	3738      	adds	r7, #56	; 0x38
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40000400 	.word	0x40000400

08001b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b10:	480d      	ldr	r0, [pc, #52]	; (8001b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b12:	490e      	ldr	r1, [pc, #56]	; (8001b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b14:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <LoopForever+0xe>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b28:	4c0b      	ldr	r4, [pc, #44]	; (8001b58 <LoopForever+0x16>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b36:	f7ff fdf7 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f001 f8e1 	bl	8002d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b3e:	f7ff fc8f 	bl	8001460 <main>

08001b42 <LoopForever>:

LoopForever:
    b LoopForever
 8001b42:	e7fe      	b.n	8001b42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b4c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001b50:	08002dfc 	.word	0x08002dfc
  ldr r2, =_sbss
 8001b54:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001b58:	200000bc 	.word	0x200000bc

08001b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC1_2_IRQHandler>
	...

08001b60 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <LL_EXTI_EnableIT_0_31+0x20>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4904      	ldr	r1, [pc, #16]	; (8001b80 <LL_EXTI_EnableIT_0_31+0x20>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40010400 	.word	0x40010400

08001b84 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <LL_EXTI_EnableIT_32_63+0x20>)
 8001b8e:	6a1a      	ldr	r2, [r3, #32]
 8001b90:	4904      	ldr	r1, [pc, #16]	; (8001ba4 <LL_EXTI_EnableIT_32_63+0x20>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	620b      	str	r3, [r1, #32]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40010400 	.word	0x40010400

08001ba8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <LL_EXTI_DisableIT_0_31+0x24>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	4904      	ldr	r1, [pc, #16]	; (8001bcc <LL_EXTI_DisableIT_0_31+0x24>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <LL_EXTI_DisableIT_32_63+0x24>)
 8001bda:	6a1a      	ldr	r2, [r3, #32]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	4904      	ldr	r1, [pc, #16]	; (8001bf4 <LL_EXTI_DisableIT_32_63+0x24>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	620b      	str	r3, [r1, #32]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4904      	ldr	r1, [pc, #16]	; (8001c18 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]

}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40010400 	.word	0x40010400

08001c1c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <LL_EXTI_EnableEvent_32_63+0x20>)
 8001c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c28:	4904      	ldr	r1, [pc, #16]	; (8001c3c <LL_EXTI_EnableEvent_32_63+0x20>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	40010400 	.word	0x40010400

08001c40 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4904      	ldr	r1, [pc, #16]	; (8001c64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40010400 	.word	0x40010400

08001c68 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <LL_EXTI_DisableEvent_32_63+0x24>)
 8001c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4904      	ldr	r1, [pc, #16]	; (8001c8c <LL_EXTI_DisableEvent_32_63+0x24>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40010400 	.word	0x40010400

08001c90 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	4904      	ldr	r1, [pc, #16]	; (8001cb0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cc0:	4904      	ldr	r1, [pc, #16]	; (8001cd4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	4904      	ldr	r1, [pc, #16]	; (8001cfc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]

}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40010400 	.word	0x40010400

08001d00 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	4904      	ldr	r1, [pc, #16]	; (8001d24 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010400 	.word	0x40010400

08001d28 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	4904      	ldr	r1, [pc, #16]	; (8001d48 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40010400 	.word	0x40010400

08001d4c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d58:	4904      	ldr	r1, [pc, #16]	; (8001d6c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40010400 	.word	0x40010400

08001d70 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	4904      	ldr	r1, [pc, #16]	; (8001d94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	60cb      	str	r3, [r1, #12]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40010400 	.word	0x40010400

08001d98 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4904      	ldr	r1, [pc, #16]	; (8001dbc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7a1b      	ldrb	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80cd 	beq.w	8001f70 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d061      	beq.n	8001ea2 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7a5b      	ldrb	r3, [r3, #9]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d01c      	beq.n	8001e20 <LL_EXTI_Init+0x60>
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	dc25      	bgt.n	8001e36 <LL_EXTI_Init+0x76>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <LL_EXTI_Init+0x34>
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d00b      	beq.n	8001e0a <LL_EXTI_Init+0x4a>
 8001df2:	e020      	b.n	8001e36 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff21 	bl	8001c40 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff feac 	bl	8001b60 <LL_EXTI_EnableIT_0_31>
          break;
 8001e08:	e018      	b.n	8001e3c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff feca 	bl	8001ba8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff feed 	bl	8001bf8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001e1e:	e00d      	b.n	8001e3c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fe9b 	bl	8001b60 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fee2 	bl	8001bf8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001e34:	e002      	b.n	8001e3c <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
          break;
 8001e3a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7a9b      	ldrb	r3, [r3, #10]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d02e      	beq.n	8001ea2 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7a9b      	ldrb	r3, [r3, #10]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d01c      	beq.n	8001e86 <LL_EXTI_Init+0xc6>
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	dc25      	bgt.n	8001e9c <LL_EXTI_Init+0xdc>
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d002      	beq.n	8001e5a <LL_EXTI_Init+0x9a>
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d00b      	beq.n	8001e70 <LL_EXTI_Init+0xb0>
 8001e58:	e020      	b.n	8001e9c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff86 	bl	8001d70 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff11 	bl	8001c90 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001e6e:	e019      	b.n	8001ea4 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff2f 	bl	8001cd8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff52 	bl	8001d28 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e84:	e00e      	b.n	8001ea4 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ff00 	bl	8001c90 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff47 	bl	8001d28 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e9a:	e003      	b.n	8001ea4 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
            break;
 8001ea0:	e000      	b.n	8001ea4 <LL_EXTI_Init+0xe4>
        }
      }
 8001ea2:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d076      	beq.n	8001f9a <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7a5b      	ldrb	r3, [r3, #9]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d01c      	beq.n	8001eee <LL_EXTI_Init+0x12e>
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	dc25      	bgt.n	8001f04 <LL_EXTI_Init+0x144>
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <LL_EXTI_Init+0x102>
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d00b      	beq.n	8001ed8 <LL_EXTI_Init+0x118>
 8001ec0:	e020      	b.n	8001f04 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fece 	bl	8001c68 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fe57 	bl	8001b84 <LL_EXTI_EnableIT_32_63>
          break;
 8001ed6:	e018      	b.n	8001f0a <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fe77 	bl	8001bd0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe98 	bl	8001c1c <LL_EXTI_EnableEvent_32_63>
          break;
 8001eec:	e00d      	b.n	8001f0a <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fe46 	bl	8001b84 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fe8d 	bl	8001c1c <LL_EXTI_EnableEvent_32_63>
          break;
 8001f02:	e002      	b.n	8001f0a <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
          break;
 8001f08:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7a9b      	ldrb	r3, [r3, #10]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d043      	beq.n	8001f9a <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7a9b      	ldrb	r3, [r3, #10]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d01c      	beq.n	8001f54 <LL_EXTI_Init+0x194>
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	dc25      	bgt.n	8001f6a <LL_EXTI_Init+0x1aa>
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d002      	beq.n	8001f28 <LL_EXTI_Init+0x168>
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d00b      	beq.n	8001f3e <LL_EXTI_Init+0x17e>
 8001f26:	e020      	b.n	8001f6a <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff33 	bl	8001d98 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff febc 	bl	8001cb4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001f3c:	e02e      	b.n	8001f9c <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fedc 	bl	8001d00 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fefd 	bl	8001d4c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001f52:	e023      	b.n	8001f9c <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff feab 	bl	8001cb4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fef2 	bl	8001d4c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001f68:	e018      	b.n	8001f9c <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
            break;
 8001f6e:	e015      	b.n	8001f9c <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fe17 	bl	8001ba8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fe5e 	bl	8001c40 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fe21 	bl	8001bd0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fe68 	bl	8001c68 <LL_EXTI_DisableEvent_32_63>
 8001f98:	e000      	b.n	8001f9c <LL_EXTI_Init+0x1dc>
      }
 8001f9a:	bf00      	nop
#endif
  }
  return status;
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <LL_GPIO_SetPinMode>:
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b089      	sub	sp, #36	; 0x24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	613b      	str	r3, [r7, #16]
  return result;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2103      	movs	r1, #3
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	61bb      	str	r3, [r7, #24]
  return result;
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	601a      	str	r2, [r3, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	3724      	adds	r7, #36	; 0x24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_GPIO_SetPinOutputType>:
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	43db      	mvns	r3, r3
 8002018:	401a      	ands	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	431a      	orrs	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_GPIO_SetPinSpeed>:
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	613b      	str	r3, [r7, #16]
  return result;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2103      	movs	r1, #3
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	401a      	ands	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	61bb      	str	r3, [r7, #24]
  return result;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	609a      	str	r2, [r3, #8]
}
 8002086:	bf00      	nop
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_GPIO_SetPinPull>:
{
 8002092:	b480      	push	{r7}
 8002094:	b089      	sub	sp, #36	; 0x24
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	613b      	str	r3, [r7, #16]
  return result;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2103      	movs	r1, #3
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	401a      	ands	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	61bb      	str	r3, [r7, #24]
  return result;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	431a      	orrs	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	60da      	str	r2, [r3, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3724      	adds	r7, #36	; 0x24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_GPIO_SetAFPin_0_7>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	613b      	str	r3, [r7, #16]
  return result;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	210f      	movs	r1, #15
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	401a      	ands	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	61bb      	str	r3, [r7, #24]
  return result;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	431a      	orrs	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	621a      	str	r2, [r3, #32]
}
 8002142:	bf00      	nop
 8002144:	3724      	adds	r7, #36	; 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_GPIO_SetAFPin_8_15>:
{
 800214e:	b480      	push	{r7}
 8002150:	b089      	sub	sp, #36	; 0x24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	613b      	str	r3, [r7, #16]
  return result;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	210f      	movs	r1, #15
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	401a      	ands	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	61bb      	str	r3, [r7, #24]
  return result;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	431a      	orrs	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80021a4:	bf00      	nop
 80021a6:	3724      	adds	r7, #36	; 0x24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	613b      	str	r3, [r7, #16]
  return result;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80021d2:	e051      	b.n	8002278 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d043      	beq.n	8002272 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d003      	beq.n	80021fa <LL_GPIO_Init+0x4a>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d10e      	bne.n	8002218 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	461a      	mov	r2, r3
 8002200:	69b9      	ldr	r1, [r7, #24]
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ff16 	bl	8002034 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	461a      	mov	r2, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fef6 	bl	8002004 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	461a      	mov	r2, r3
 800221e:	69b9      	ldr	r1, [r7, #24]
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff36 	bl	8002092 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d11a      	bne.n	8002264 <LL_GPIO_Init+0xb4>
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	60bb      	str	r3, [r7, #8]
  return result;
 800223a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b07      	cmp	r3, #7
 8002244:	d807      	bhi.n	8002256 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	461a      	mov	r2, r3
 800224c:	69b9      	ldr	r1, [r7, #24]
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff4e 	bl	80020f0 <LL_GPIO_SetAFPin_0_7>
 8002254:	e006      	b.n	8002264 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	461a      	mov	r2, r3
 800225c:	69b9      	ldr	r1, [r7, #24]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ff75 	bl	800214e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	461a      	mov	r2, r3
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff fe9a 	bl	8001fa6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	fa22 f303 	lsr.w	r3, r2, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1a6      	bne.n	80021d4 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <LL_I2C_Enable>:
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_I2C_Disable>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 0201 	bic.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	601a      	str	r2, [r3, #0]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_I2C_ConfigFilters>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	0219      	lsls	r1, r3, #8
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	430b      	orrs	r3, r1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_I2C_SetOwnAddress1>:
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002312:	f023 0307 	bic.w	r3, r3, #7
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	430a      	orrs	r2, r1
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	609a      	str	r2, [r3, #8]
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_I2C_EnableOwnAddress1>:
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	609a      	str	r2, [r3, #8]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_I2C_DisableOwnAddress1>:
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	609a      	str	r2, [r3, #8]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_I2C_SetTiming>:
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	611a      	str	r2, [r3, #16]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_I2C_SetMode>:
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_I2C_AcknowledgeNextData>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	605a      	str	r2, [r3, #4]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff65 	bl	80022b0 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6899      	ldr	r1, [r3, #8]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	461a      	mov	r2, r3
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff6d 	bl	80022d0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4619      	mov	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ffb6 	bl	800236e <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ff44 	bl	8002290 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ffa0 	bl	800234e <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6919      	ldr	r1, [r3, #16]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	461a      	mov	r2, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff70 	bl	80022fe <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff81 	bl	800232e <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffa9 	bl	800238a <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffb6 	bl	80023b0 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <LL_TIM_SetPrescaler>:
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_TIM_SetAutoReload>:
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_TIM_SetRepetitionCounter>:
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_TIM_OC_SetCompareCH1>:
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_TIM_OC_SetCompareCH2>:
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_TIM_OC_SetCompareCH3>:
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_TIM_OC_SetCompareCH4>:
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_TIM_OC_SetCompareCH5>:
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_TIM_OC_SetCompareCH6>:
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f043 0201 	orr.w	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	615a      	str	r2, [r3, #20]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a2f      	ldr	r2, [pc, #188]	; (8002640 <LL_TIM_Init+0xd0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <LL_TIM_Init+0x28>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258e:	d003      	beq.n	8002598 <LL_TIM_Init+0x28>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a2c      	ldr	r2, [pc, #176]	; (8002644 <LL_TIM_Init+0xd4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d106      	bne.n	80025a6 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a25      	ldr	r2, [pc, #148]	; (8002640 <LL_TIM_Init+0xd0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <LL_TIM_Init+0x66>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b4:	d00f      	beq.n	80025d6 <LL_TIM_Init+0x66>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a22      	ldr	r2, [pc, #136]	; (8002644 <LL_TIM_Init+0xd4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00b      	beq.n	80025d6 <LL_TIM_Init+0x66>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a21      	ldr	r2, [pc, #132]	; (8002648 <LL_TIM_Init+0xd8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <LL_TIM_Init+0x66>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a20      	ldr	r2, [pc, #128]	; (800264c <LL_TIM_Init+0xdc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d003      	beq.n	80025d6 <LL_TIM_Init+0x66>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <LL_TIM_Init+0xe0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d106      	bne.n	80025e4 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4619      	mov	r1, r3
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff ff3a 	bl	800246a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff26 	bl	800244e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <LL_TIM_Init+0xd0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00b      	beq.n	8002622 <LL_TIM_Init+0xb2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <LL_TIM_Init+0xd8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <LL_TIM_Init+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a0d      	ldr	r2, [pc, #52]	; (800264c <LL_TIM_Init+0xdc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d003      	beq.n	8002622 <LL_TIM_Init+0xb2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <LL_TIM_Init+0xe0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d105      	bne.n	800262e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	4619      	mov	r1, r3
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff2c 	bl	8002486 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ff8d 	bl	800254e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40012c00 	.word	0x40012c00
 8002644:	40000400 	.word	0x40000400
 8002648:	40014000 	.word	0x40014000
 800264c:	40014400 	.word	0x40014400
 8002650:	40014800 	.word	0x40014800

08002654 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800266a:	d045      	beq.n	80026f8 <LL_TIM_OC_Init+0xa4>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002672:	d848      	bhi.n	8002706 <LL_TIM_OC_Init+0xb2>
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267a:	d036      	beq.n	80026ea <LL_TIM_OC_Init+0x96>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002682:	d840      	bhi.n	8002706 <LL_TIM_OC_Init+0xb2>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268a:	d027      	beq.n	80026dc <LL_TIM_OC_Init+0x88>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002692:	d838      	bhi.n	8002706 <LL_TIM_OC_Init+0xb2>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800269a:	d018      	beq.n	80026ce <LL_TIM_OC_Init+0x7a>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a2:	d830      	bhi.n	8002706 <LL_TIM_OC_Init+0xb2>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d003      	beq.n	80026b2 <LL_TIM_OC_Init+0x5e>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d007      	beq.n	80026c0 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80026b0:	e029      	b.n	8002706 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f82d 	bl	8002714 <OC1Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	75fb      	strb	r3, [r7, #23]
      break;
 80026be:	e023      	b.n	8002708 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f8a0 	bl	8002808 <OC2Config>
 80026c8:	4603      	mov	r3, r0
 80026ca:	75fb      	strb	r3, [r7, #23]
      break;
 80026cc:	e01c      	b.n	8002708 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f917 	bl	8002904 <OC3Config>
 80026d6:	4603      	mov	r3, r0
 80026d8:	75fb      	strb	r3, [r7, #23]
      break;
 80026da:	e015      	b.n	8002708 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f98e 	bl	8002a00 <OC4Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	75fb      	strb	r3, [r7, #23]
      break;
 80026e8:	e00e      	b.n	8002708 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f9ed 	bl	8002acc <OC5Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	75fb      	strb	r3, [r7, #23]
      break;
 80026f6:	e007      	b.n	8002708 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fa44 	bl	8002b88 <OC6Config>
 8002700:	4603      	mov	r3, r0
 8002702:	75fb      	strb	r3, [r7, #23]
      break;
 8002704:	e000      	b.n	8002708 <LL_TIM_OC_Init+0xb4>
      break;
 8002706:	bf00      	nop
  }

  return result;
 8002708:	7dfb      	ldrb	r3, [r7, #23]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f023 0201 	bic.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f023 0202 	bic.w	r2, r3, #2
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0201 	bic.w	r2, r3, #1
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <OC1Config+0xe4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00b      	beq.n	8002792 <OC1Config+0x7e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <OC1Config+0xe8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <OC1Config+0x7e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <OC1Config+0xec>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d003      	beq.n	8002792 <OC1Config+0x7e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <OC1Config+0xf0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d11e      	bne.n	80027d0 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f023 0208 	bic.w	r2, r3, #8
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f023 0204 	bic.w	r2, r3, #4
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4619      	mov	r1, r3
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff fe5d 	bl	80024a2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40014000 	.word	0x40014000
 8002800:	40014400 	.word	0x40014400
 8002804:	40014800 	.word	0x40014800

08002808 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f023 0210 	bic.w	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800283e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	0212      	lsls	r2, r2, #8
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f023 0220 	bic.w	r2, r3, #32
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f023 0210 	bic.w	r2, r3, #16
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a21      	ldr	r2, [pc, #132]	; (80028f4 <OC2Config+0xec>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00b      	beq.n	800288c <OC2Config+0x84>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <OC2Config+0xf0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d007      	beq.n	800288c <OC2Config+0x84>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <OC2Config+0xf4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d003      	beq.n	800288c <OC2Config+0x84>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <OC2Config+0xf8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d11f      	bne.n	80028cc <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	019b      	lsls	r3, r3, #6
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	019b      	lsls	r3, r3, #6
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fded 	bl	80024be <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40014000 	.word	0x40014000
 80028fc:	40014400 	.word	0x40014400
 8002900:	40014800 	.word	0x40014800

08002904 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0303 	bic.w	r3, r3, #3
 8002932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a21      	ldr	r2, [pc, #132]	; (80029f0 <OC3Config+0xec>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00b      	beq.n	8002986 <OC3Config+0x82>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a20      	ldr	r2, [pc, #128]	; (80029f4 <OC3Config+0xf0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <OC3Config+0x82>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <OC3Config+0xf4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d003      	beq.n	8002986 <OC3Config+0x82>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <OC3Config+0xf8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d11f      	bne.n	80029c6 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	029b      	lsls	r3, r3, #10
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	029b      	lsls	r3, r3, #10
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	015b      	lsls	r3, r3, #5
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fd7e 	bl	80024da <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40012c00 	.word	0x40012c00
 80029f4:	40014000 	.word	0x40014000
 80029f8:	40014400 	.word	0x40014400
 80029fc:	40014800 	.word	0x40014800

08002a00 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	0212      	lsls	r2, r2, #8
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	031b      	lsls	r3, r3, #12
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	031b      	lsls	r3, r3, #12
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a15      	ldr	r2, [pc, #84]	; (8002abc <OC4Config+0xbc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00b      	beq.n	8002a84 <OC4Config+0x84>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <OC4Config+0xc0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d007      	beq.n	8002a84 <OC4Config+0x84>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <OC4Config+0xc4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <OC4Config+0x84>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <OC4Config+0xc8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d107      	bne.n	8002a94 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	019b      	lsls	r3, r3, #6
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fd25 	bl	80024f6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40014400 	.word	0x40014400
 8002ac8:	40014800 	.word	0x40014800

08002acc <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <OC5Config+0xac>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00b      	beq.n	8002b40 <OC5Config+0x74>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <OC5Config+0xb0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d007      	beq.n	8002b40 <OC5Config+0x74>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <OC5Config+0xb4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d003      	beq.n	8002b40 <OC5Config+0x74>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <OC5Config+0xb8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d109      	bne.n	8002b54 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fcd6 	bl	8002512 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40014000 	.word	0x40014000
 8002b80:	40014400 	.word	0x40014400
 8002b84:	40014800 	.word	0x40014800

08002b88 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	0212      	lsls	r2, r2, #8
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	051b      	lsls	r3, r3, #20
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	051b      	lsls	r3, r3, #20
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <OC6Config+0xac>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00b      	beq.n	8002bfe <OC6Config+0x76>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <OC6Config+0xb0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <OC6Config+0x76>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <OC6Config+0xb4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d003      	beq.n	8002bfe <OC6Config+0x76>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a11      	ldr	r2, [pc, #68]	; (8002c40 <OC6Config+0xb8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d109      	bne.n	8002c12 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	029b      	lsls	r3, r3, #10
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fc87 	bl	8002532 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40014000 	.word	0x40014000
 8002c3c:	40014400 	.word	0x40014400
 8002c40:	40014800 	.word	0x40014800

08002c44 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <LL_InitTick+0x30>)
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <LL_InitTick+0x30>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <LL_InitTick+0x30>)
 8002c64:	2205      	movs	r2, #5
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002c80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ffdd 	bl	8002c44 <LL_InitTick>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <LL_mDelay+0x48>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002ca2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002caa:	d00c      	beq.n	8002cc6 <LL_mDelay+0x32>
  {
    Delay++;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002cb2:	e008      	b.n	8002cc6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <LL_mDelay+0x48>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <LL_mDelay+0x32>
    {
      Delay--;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f3      	bne.n	8002cb4 <LL_mDelay+0x20>
    }
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000e010 	.word	0xe000e010

08002ce0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <LL_SetSystemCoreClock+0x1c>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6013      	str	r3, [r2, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000004 	.word	0x20000004

08002d00 <__libc_init_array>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	4d0d      	ldr	r5, [pc, #52]	; (8002d38 <__libc_init_array+0x38>)
 8002d04:	4c0d      	ldr	r4, [pc, #52]	; (8002d3c <__libc_init_array+0x3c>)
 8002d06:	1b64      	subs	r4, r4, r5
 8002d08:	10a4      	asrs	r4, r4, #2
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	42a6      	cmp	r6, r4
 8002d0e:	d109      	bne.n	8002d24 <__libc_init_array+0x24>
 8002d10:	4d0b      	ldr	r5, [pc, #44]	; (8002d40 <__libc_init_array+0x40>)
 8002d12:	4c0c      	ldr	r4, [pc, #48]	; (8002d44 <__libc_init_array+0x44>)
 8002d14:	f000 f820 	bl	8002d58 <_init>
 8002d18:	1b64      	subs	r4, r4, r5
 8002d1a:	10a4      	asrs	r4, r4, #2
 8002d1c:	2600      	movs	r6, #0
 8002d1e:	42a6      	cmp	r6, r4
 8002d20:	d105      	bne.n	8002d2e <__libc_init_array+0x2e>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d28:	4798      	blx	r3
 8002d2a:	3601      	adds	r6, #1
 8002d2c:	e7ee      	b.n	8002d0c <__libc_init_array+0xc>
 8002d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d32:	4798      	blx	r3
 8002d34:	3601      	adds	r6, #1
 8002d36:	e7f2      	b.n	8002d1e <__libc_init_array+0x1e>
 8002d38:	08002df4 	.word	0x08002df4
 8002d3c:	08002df4 	.word	0x08002df4
 8002d40:	08002df4 	.word	0x08002df4
 8002d44:	08002df8 	.word	0x08002df8

08002d48 <memset>:
 8002d48:	4402      	add	r2, r0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d100      	bne.n	8002d52 <memset+0xa>
 8002d50:	4770      	bx	lr
 8002d52:	f803 1b01 	strb.w	r1, [r3], #1
 8002d56:	e7f9      	b.n	8002d4c <memset+0x4>

08002d58 <_init>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	bf00      	nop
 8002d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5e:	bc08      	pop	{r3}
 8002d60:	469e      	mov	lr, r3
 8002d62:	4770      	bx	lr

08002d64 <_fini>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	bf00      	nop
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr
