
VRS-zadanie-cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004828  08004828  00014828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f0  080048f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080048f0  080048f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048f0  080048f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000b4  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000124  20000124  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008bd9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb4  00000000  00000000  00028c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  0002a830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000760  00000000  00000000  0002b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017034  00000000  00000000  0002b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006dca  00000000  00000000  000427fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079e25  00000000  00000000  000495c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c33eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002508  00000000  00000000  000c3440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800480c 	.word	0x0800480c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800480c 	.word	0x0800480c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	619a      	str	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <resetSegments>:
void setDigit(uint8_t pos);


/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000b8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b94:	f7ff ffdc 	bl	8000b50 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba0:	f7ff ffd6 	bl	8000b50 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	480e      	ldr	r0, [pc, #56]	; (8000be0 <resetSegments+0x58>)
 8000ba8:	f7ff ffd2 	bl	8000b50 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000bac:	2120      	movs	r1, #32
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <resetSegments+0x58>)
 8000bb0:	f7ff ffce 	bl	8000b50 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	480a      	ldr	r0, [pc, #40]	; (8000be0 <resetSegments+0x58>)
 8000bb8:	f7ff ffca 	bl	8000b50 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f7ff ffc5 	bl	8000b50 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bcc:	f7ff ffc0 	bl	8000b50 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f7ff ffbb 	bl	8000b50 <LL_GPIO_SetOutputPin>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	48000400 	.word	0x48000400

08000be4 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000be8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f7ff ffbc 	bl	8000b6c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f7ff ffb6 	bl	8000b6c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000c00:	2102      	movs	r1, #2
 8000c02:	480e      	ldr	r0, [pc, #56]	; (8000c3c <setSegments+0x58>)
 8000c04:	f7ff ffb2 	bl	8000b6c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000c08:	2120      	movs	r1, #32
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <setSegments+0x58>)
 8000c0c:	f7ff ffae 	bl	8000b6c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000c10:	2110      	movs	r1, #16
 8000c12:	480a      	ldr	r0, [pc, #40]	; (8000c3c <setSegments+0x58>)
 8000c14:	f7ff ffaa 	bl	8000b6c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000c18:	2101      	movs	r1, #1
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f7ff ffa5 	bl	8000b6c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000c22:	2102      	movs	r1, #2
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c28:	f7ff ffa0 	bl	8000b6c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c32:	f7ff ff9b 	bl	8000b6c <LL_GPIO_ResetOutputPin>
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	48000400 	.word	0x48000400

08000c40 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000c44:	2104      	movs	r1, #4
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f7ff ff8f 	bl	8000b6c <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000c4e:	2101      	movs	r1, #1
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <resetDigits+0x3c>)
 8000c52:	f7ff ff8b 	bl	8000b6c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000c56:	2110      	movs	r1, #16
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f7ff ff86 	bl	8000b6c <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8000c60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f7ff ff80 	bl	8000b6c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f7ff ff7b 	bl	8000b6c <LL_GPIO_ResetOutputPin>
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	48000400 	.word	0x48000400

08000c80 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8000c84:	2101      	movs	r1, #1
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <setDigits+0x3c>)
 8000c88:	f7ff ff62 	bl	8000b50 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c92:	f7ff ff5d 	bl	8000b50 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8000c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9e:	f7ff ff57 	bl	8000b50 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f7ff ff52 	bl	8000b50 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f7ff ff4d 	bl	8000b50 <LL_GPIO_SetOutputPin>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	48000400 	.word	0x48000400

08000cc0 <set_sign>:

void set_sign(char sign){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<6))
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	3b30      	subs	r3, #48	; 0x30
 8000cce:	4a2e      	ldr	r2, [pc, #184]	; (8000d88 <set_sign+0xc8>)
 8000cd0:	5cd3      	ldrb	r3, [r2, r3]
 8000cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d004      	beq.n	8000ce4 <set_sign+0x24>
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000cda:	2102      	movs	r1, #2
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f7ff ff44 	bl	8000b6c <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<5))
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	3b30      	subs	r3, #48	; 0x30
 8000ce8:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <set_sign+0xc8>)
 8000cea:	5cd3      	ldrb	r3, [r2, r3]
 8000cec:	f003 0320 	and.w	r3, r3, #32
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <set_sign+0x3e>
		LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f7ff ff37 	bl	8000b6c <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<4))
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	3b30      	subs	r3, #48	; 0x30
 8000d02:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <set_sign+0xc8>)
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	f003 0310 	and.w	r3, r3, #16
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d005      	beq.n	8000d1a <set_sign+0x5a>
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f7ff ff29 	bl	8000b6c <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<3))
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	3b30      	subs	r3, #48	; 0x30
 8000d1e:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <set_sign+0xc8>)
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <set_sign+0x72>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	4817      	ldr	r0, [pc, #92]	; (8000d8c <set_sign+0xcc>)
 8000d2e:	f7ff ff1d 	bl	8000b6c <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<2))
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	3b30      	subs	r3, #48	; 0x30
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <set_sign+0xc8>)
 8000d38:	5cd3      	ldrb	r3, [r2, r3]
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <set_sign+0x8e>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f7ff ff0f 	bl	8000b6c <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<1))
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	3b30      	subs	r3, #48	; 0x30
 8000d52:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <set_sign+0xc8>)
 8000d54:	5cd3      	ldrb	r3, [r2, r3]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d004      	beq.n	8000d68 <set_sign+0xa8>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000d5e:	2108      	movs	r1, #8
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f7ff ff02 	bl	8000b6c <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<0))
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	3b30      	subs	r3, #48	; 0x30
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <set_sign+0xc8>)
 8000d6e:	5cd3      	ldrb	r3, [r2, r3]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <set_sign+0xc0>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000d78:	2110      	movs	r1, #16
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <set_sign+0xcc>)
 8000d7c:	f7ff fef6 	bl	8000b6c <LL_GPIO_ResetOutputPin>

}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	08004848 	.word	0x08004848
 8000d8c:	48000400 	.word	0x48000400

08000d90 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d823      	bhi.n	8000de8 <setDigit+0x58>
 8000da0:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <setDigit+0x18>)
 8000da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da6:	bf00      	nop
 8000da8:	08000db9 	.word	0x08000db9
 8000dac:	08000dc5 	.word	0x08000dc5
 8000db0:	08000dd3 	.word	0x08000dd3
 8000db4:	08000ddf 	.word	0x08000ddf
	{
	case 0:
		DIGIT_4_ON;
 8000db8:	2104      	movs	r1, #4
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f7ff fec7 	bl	8000b50 <LL_GPIO_SetOutputPin>
		break;
 8000dc2:	e011      	b.n	8000de8 <setDigit+0x58>
	case 1:
		DIGIT_3_ON;
 8000dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f7ff fec0 	bl	8000b50 <LL_GPIO_SetOutputPin>
		break;
 8000dd0:	e00a      	b.n	8000de8 <setDigit+0x58>
	case 2:
		DIGIT_2_ON;
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f7ff feba 	bl	8000b50 <LL_GPIO_SetOutputPin>
		break;
 8000ddc:	e004      	b.n	8000de8 <setDigit+0x58>
	case 3:
		DIGIT_1_ON;
 8000dde:	2101      	movs	r1, #1
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <setDigit+0x60>)
 8000de2:	f7ff feb5 	bl	8000b50 <LL_GPIO_SetOutputPin>
		break;
 8000de6:	bf00      	nop
	}
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	48000400 	.word	0x48000400

08000df4 <display_sign>:
void display_sign(char sign_1,char sign_2, char sign_3,char sign_4)
{
 8000df4:	b490      	push	{r4, r7}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	461a      	mov	r2, r3
 8000e02:	4623      	mov	r3, r4
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	4603      	mov	r3, r0
 8000e08:	71bb      	strb	r3, [r7, #6]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	717b      	strb	r3, [r7, #5]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	713b      	strb	r3, [r7, #4]
	Display_sign[0] = sign_1;
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <display_sign+0x40>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	7013      	strb	r3, [r2, #0]
	Display_sign[1] = sign_2;
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <display_sign+0x40>)
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	7053      	strb	r3, [r2, #1]
	Display_sign[2] = sign_3;
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <display_sign+0x40>)
 8000e20:	797b      	ldrb	r3, [r7, #5]
 8000e22:	7093      	strb	r3, [r2, #2]
	Display_sign[3] = sign_4;
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <display_sign+0x40>)
 8000e26:	793b      	ldrb	r3, [r7, #4]
 8000e28:	70d3      	strb	r3, [r2, #3]
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc90      	pop	{r4, r7}
 8000e32:	4770      	bx	lr
 8000e34:	200000a8 	.word	0x200000a8

08000e38 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	e026      	b.n	8000e92 <updateDisplay+0x5a>
	{

		setDigit(i);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ffa2 	bl	8000d90 <setDigit>
		set_sign(Display_sign[3-i]);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f1c3 0303 	rsb	r3, r3, #3
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <updateDisplay+0x6c>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff32 	bl	8000cc0 <set_sign>

		disp_time_saved = disp_time;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <updateDisplay+0x70>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	4912      	ldr	r1, [pc, #72]	; (8000eac <updateDisplay+0x74>)
 8000e64:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 8000e68:	bf00      	nop
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <updateDisplay+0x74>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	1c94      	adds	r4, r2, #2
 8000e72:	f143 0500 	adc.w	r5, r3, #0
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <updateDisplay+0x70>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	42ab      	cmp	r3, r5
 8000e7e:	bf08      	it	eq
 8000e80:	42a2      	cmpeq	r2, r4
 8000e82:	d3f2      	bcc.n	8000e6a <updateDisplay+0x32>

		resetDigits();
 8000e84:	f7ff fedc 	bl	8000c40 <resetDigits>
		resetSegments();
 8000e88:	f7ff fe7e 	bl	8000b88 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d9d5      	bls.n	8000e44 <updateDisplay+0xc>
	}
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200000a8 	.word	0x200000a8
 8000ea8:	20000090 	.word	0x20000090
 8000eac:	20000098 	.word	0x20000098

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fda:	695a      	ldr	r2, [r3, #20]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000ffe:	4a13      	ldr	r2, [pc, #76]	; (800104c <LL_SYSCFG_SetEXTISource+0x58>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	3302      	adds	r3, #2
 8001006:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	0c1b      	lsrs	r3, r3, #16
 800100e:	43db      	mvns	r3, r3
 8001010:	ea02 0103 	and.w	r1, r2, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	0c1b      	lsrs	r3, r3, #16
 8001018:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	fa93 f3a3 	rbit	r3, r3
 8001020:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	fab3 f383 	clz	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	fa03 f202 	lsl.w	r2, r3, r2
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <LL_SYSCFG_SetEXTISource+0x58>)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	430a      	orrs	r2, r1
 800103a:	3302      	adds	r3, #2
 800103c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40010000 	.word	0x40010000

08001050 <LL_GPIO_SetPinMode>:
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa93 f3a3 	rbit	r3, r3
 800106a:	613b      	str	r3, [r7, #16]
  return result;
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	fab3 f383 	clz	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2103      	movs	r1, #3
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	401a      	ands	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	61bb      	str	r3, [r7, #24]
  return result;
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fab3 f383 	clz	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	431a      	orrs	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	bf00      	nop
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_GPIO_SetPinPull>:
{
 80010ae:	b480      	push	{r7}
 80010b0:	b089      	sub	sp, #36	; 0x24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	fa93 f3a3 	rbit	r3, r3
 80010c8:	613b      	str	r3, [r7, #16]
  return result;
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	fab3 f383 	clz	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2103      	movs	r1, #3
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	401a      	ands	r2, r3
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	61bb      	str	r3, [r7, #24]
  return result;
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	fab3 f383 	clz	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	431a      	orrs	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	60da      	str	r2, [r3, #12]
}
 8001100:	bf00      	nop
 8001102:	3724      	adds	r7, #36	; 0x24
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_GPIO_ResetOutputPin>:
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800114a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800114e:	f7ff ff39 	bl	8000fc4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001152:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001156:	f7ff ff35 	bl	8000fc4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 800115a:	f641 119f 	movw	r1, #6559	; 0x199f
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f7ff ffd3 	bl	800110c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8001166:	2133      	movs	r1, #51	; 0x33
 8001168:	482b      	ldr	r0, [pc, #172]	; (8001218 <MX_GPIO_Init+0xf0>)
 800116a:	f7ff ffcf 	bl	800110c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 800116e:	f641 139f 	movw	r3, #6559	; 0x199f
 8001172:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001174:	2301      	movs	r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f001 fdae 	bl	8002cec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001190:	2333      	movs	r3, #51	; 0x33
 8001192:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001194:	2301      	movs	r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	481b      	ldr	r0, [pc, #108]	; (8001218 <MX_GPIO_Init+0xf0>)
 80011aa:	f001 fd9f 	bl	8002cec <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 80011ae:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff ff1e 	bl	8000ff4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2108      	movs	r1, #8
 80011bc:	4816      	ldr	r0, [pc, #88]	; (8001218 <MX_GPIO_Init+0xf0>)
 80011be:	f7ff ff76 	bl	80010ae <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2108      	movs	r1, #8
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <MX_GPIO_Init+0xf0>)
 80011c8:	f7ff ff42 	bl	8001050 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80011cc:	2308      	movs	r3, #8
 80011ce:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80011da:	2300      	movs	r3, #0
 80011dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fb86 	bl	80028fc <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80011f0:	f7ff fe5e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2200      	movs	r2, #0
 80011f8:	2101      	movs	r1, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff feae 	bl	8000f5c <NVIC_EncodePriority>
 8001200:	4603      	mov	r3, r0
 8001202:	4619      	mov	r1, r3
 8001204:	2009      	movs	r0, #9
 8001206:	f7ff fe7f 	bl	8000f08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 800120a:	2009      	movs	r0, #9
 800120c:	f7ff fe5e 	bl	8000ecc <__NVIC_EnableIRQ>

}
 8001210:	bf00      	nop
 8001212:	3728      	adds	r7, #40	; 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	48000400 	.word	0x48000400

0800121c <__NVIC_GetPriorityGrouping>:
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	601a      	str	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013a2:	f023 0306 	bic.w	r3, r3, #6
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	431a      	orrs	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	60da      	str	r2, [r3, #12]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60da      	str	r2, [r3, #12]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f043 0204 	orr.w	r2, r3, #4
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 0204 	bic.w	r2, r3, #4
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b02      	cmp	r3, #2
 8001430:	d101      	bne.n	8001436 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b04      	cmp	r3, #4
 8001456:	d101      	bne.n	800145c <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	2b20      	cmp	r3, #32
 800147c:	d101      	bne.n	8001482 <LL_I2C_IsActiveFlag_STOP+0x18>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	f043 0220 	orr.w	r2, r3, #32
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	61da      	str	r2, [r3, #28]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	0d5b      	lsrs	r3, r3, #21
 80014e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <LL_I2C_HandleTransfer+0x48>)
 80014ec:	430b      	orrs	r3, r1
 80014ee:	43db      	mvns	r3, r3
 80014f0:	401a      	ands	r2, r3
 80014f2:	68b9      	ldr	r1, [r7, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4319      	orrs	r1, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	041b      	lsls	r3, r3, #16
 80014fc:	4319      	orrs	r1, r3
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4319      	orrs	r1, r3
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	430b      	orrs	r3, r1
 8001506:	431a      	orrs	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	03ff7bff 	.word	0x03ff7bff

0800151c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	b2db      	uxtb	r3, r3
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_AHB1_GRP1_EnableClock>:
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4313      	orrs	r3, r2
 8001566:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4013      	ands	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000

08001584 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800158e:	69da      	ldr	r2, [r3, #28]
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4313      	orrs	r3, r2
 8001596:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800159a:	69da      	ldr	r2, [r3, #28]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4013      	ands	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000

080015b4 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	; 0x38
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	615a      	str	r2, [r3, #20]
 80015cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80015de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80015e2:	f7ff ffb7 	bl	8001554 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80015e6:	23c0      	movs	r3, #192	; 0xc0
 80015e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015ea:	2302      	movs	r3, #2
 80015ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80015f2:	2301      	movs	r3, #1
 80015f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80015fa:	2304      	movs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4821      	ldr	r0, [pc, #132]	; (8001688 <MX_I2C1_Init+0xd4>)
 8001604:	f001 fb72 	bl	8002cec <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001608:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800160c:	f7ff ffba 	bl	8001584 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001610:	f7ff fe04 	bl	800121c <__NVIC_GetPriorityGrouping>
 8001614:	4603      	mov	r3, r0
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fe54 	bl	80012c8 <NVIC_EncodePriority>
 8001620:	4603      	mov	r3, r0
 8001622:	4619      	mov	r1, r3
 8001624:	201f      	movs	r0, #31
 8001626:	f7ff fe25 	bl	8001274 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800162a:	201f      	movs	r0, #31
 800162c:	f7ff fe04 	bl	8001238 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001630:	4816      	ldr	r0, [pc, #88]	; (800168c <MX_I2C1_Init+0xd8>)
 8001632:	f7ff ff3d 	bl	80014b0 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <MX_I2C1_Init+0xd8>)
 8001638:	f7ff fec1 	bl	80013be <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800163c:	4813      	ldr	r0, [pc, #76]	; (800168c <MX_I2C1_Init+0xd8>)
 800163e:	f7ff fe96 	bl	800136e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001642:	4812      	ldr	r0, [pc, #72]	; (800168c <MX_I2C1_Init+0xd8>)
 8001644:	f7ff fe83 	bl	800134e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_I2C1_Init+0xdc>)
 800164e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001658:	2302      	movs	r3, #2
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	4808      	ldr	r0, [pc, #32]	; (800168c <MX_I2C1_Init+0xd8>)
 800166c:	f001 fc51 	bl	8002f12 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_I2C1_Init+0xd8>)
 8001676:	f7ff fe8a 	bl	800138e <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800167a:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_I2C1_Init+0xd8>)
 800167c:	f7ff fe57 	bl	800132e <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3738      	adds	r7, #56	; 0x38
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	48000400 	.word	0x48000400
 800168c:	40005400 	.word	0x40005400
 8001690:	2000090e 	.word	0x2000090e

08001694 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b085      	sub	sp, #20
 8001698:	af02      	add	r7, sp, #8
 800169a:	4604      	mov	r4, r0
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4623      	mov	r3, r4
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	4603      	mov	r3, r0
 80016a8:	71bb      	strb	r3, [r7, #6]
 80016aa:	460b      	mov	r3, r1
 80016ac:	717b      	strb	r3, [r7, #5]
 80016ae:	4613      	mov	r3, r2
 80016b0:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80016b2:	793b      	ldrb	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80016b8:	79bb      	ldrb	r3, [r7, #6]
 80016ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016be:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80016c0:	7979      	ldrb	r1, [r7, #5]
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <i2c_master_write+0x80>)
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2302      	movs	r3, #2
 80016ce:	2200      	movs	r2, #0
 80016d0:	4811      	ldr	r0, [pc, #68]	; (8001718 <i2c_master_write+0x84>)
 80016d2:	f7ff fefd 	bl	80014d0 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	4619      	mov	r1, r3
 80016da:	480f      	ldr	r0, [pc, #60]	; (8001718 <i2c_master_write+0x84>)
 80016dc:	f7ff ff2b 	bl	8001536 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80016e0:	e00a      	b.n	80016f8 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80016e2:	480d      	ldr	r0, [pc, #52]	; (8001718 <i2c_master_write+0x84>)
 80016e4:	f7ff fe9b 	bl	800141e <LL_I2C_IsActiveFlag_TXIS>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4619      	mov	r1, r3
 80016f2:	4809      	ldr	r0, [pc, #36]	; (8001718 <i2c_master_write+0x84>)
 80016f4:	f7ff ff1f 	bl	8001536 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <i2c_master_write+0x84>)
 80016fa:	f7ff feb6 	bl	800146a <LL_I2C_IsActiveFlag_STOP>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ee      	beq.n	80016e2 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <i2c_master_write+0x84>)
 8001706:	f7ff fec3 	bl	8001490 <LL_I2C_ClearFlag_STOP>
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	bf00      	nop
 8001714:	80002000 	.word	0x80002000
 8001718:	40005400 	.word	0x40005400

0800171c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af02      	add	r7, sp, #8
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4603      	mov	r3, r0
 800172c:	70fb      	strb	r3, [r7, #3]
 800172e:	460b      	mov	r3, r1
 8001730:	70bb      	strb	r3, [r7, #2]
 8001732:	4613      	mov	r3, r2
 8001734:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001736:	4a30      	ldr	r2, [pc, #192]	; (80017f8 <i2c_master_read+0xdc>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6013      	str	r3, [r2, #0]

	if(read_flag)
 800173c:	7c3b      	ldrb	r3, [r7, #16]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001742:	78bb      	ldrb	r3, [r7, #2]
 8001744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001748:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800174a:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <i2c_master_read+0xe0>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001750:	482b      	ldr	r0, [pc, #172]	; (8001800 <i2c_master_read+0xe4>)
 8001752:	f7ff fe44 	bl	80013de <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001756:	7879      	ldrb	r1, [r7, #1]
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <i2c_master_read+0xe8>)
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	2200      	movs	r2, #0
 8001766:	4826      	ldr	r0, [pc, #152]	; (8001800 <i2c_master_read+0xe4>)
 8001768:	f7ff feb2 	bl	80014d0 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800176c:	e00a      	b.n	8001784 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800176e:	4824      	ldr	r0, [pc, #144]	; (8001800 <i2c_master_read+0xe4>)
 8001770:	f7ff fe55 	bl	800141e <LL_I2C_IsActiveFlag_TXIS>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr); //adresa, ktoru chceme citat - posielame do slave zariadenia
 800177a:	78bb      	ldrb	r3, [r7, #2]
 800177c:	4619      	mov	r1, r3
 800177e:	4820      	ldr	r0, [pc, #128]	; (8001800 <i2c_master_read+0xe4>)
 8001780:	f7ff fed9 	bl	8001536 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001784:	481e      	ldr	r0, [pc, #120]	; (8001800 <i2c_master_read+0xe4>)
 8001786:	f7ff fe70 	bl	800146a <LL_I2C_IsActiveFlag_STOP>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0ee      	beq.n	800176e <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001790:	481b      	ldr	r0, [pc, #108]	; (8001800 <i2c_master_read+0xe4>)
 8001792:	f7ff fe7d 	bl	8001490 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001796:	bf00      	nop
 8001798:	4819      	ldr	r0, [pc, #100]	; (8001800 <i2c_master_read+0xe4>)
 800179a:	f7ff fe66 	bl	800146a <LL_I2C_IsActiveFlag_STOP>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f9      	bne.n	8001798 <i2c_master_read+0x7c>

	//citam register od slejva, LL_I2C_HandleTransfer- dolezita funkcia
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80017a4:	7879      	ldrb	r1, [r7, #1]
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	4a17      	ldr	r2, [pc, #92]	; (8001808 <i2c_master_read+0xec>)
 80017aa:	9201      	str	r2, [sp, #4]
 80017ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b0:	9200      	str	r2, [sp, #0]
 80017b2:	2200      	movs	r2, #0
 80017b4:	4812      	ldr	r0, [pc, #72]	; (8001800 <i2c_master_read+0xe4>)
 80017b6:	f7ff fe8b 	bl	80014d0 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80017ba:	bf00      	nop
 80017bc:	4810      	ldr	r0, [pc, #64]	; (8001800 <i2c_master_read+0xe4>)
 80017be:	f7ff fe54 	bl	800146a <LL_I2C_IsActiveFlag_STOP>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f9      	beq.n	80017bc <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <i2c_master_read+0xe4>)
 80017ca:	f7ff fe61 	bl	8001490 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <i2c_master_read+0xe4>)
 80017d0:	f7ff fe15 	bl	80013fe <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <i2c_master_read+0xe4>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	4a09      	ldr	r2, [pc, #36]	; (8001800 <i2c_master_read+0xe4>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <i2c_master_read+0xf0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <i2c_master_read+0xe0>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 80017ec:	4b02      	ldr	r3, [pc, #8]	; (80017f8 <i2c_master_read+0xdc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200000ac 	.word	0x200000ac
 80017fc:	200000a0 	.word	0x200000a0
 8001800:	40005400 	.word	0x40005400
 8001804:	80002000 	.word	0x80002000
 8001808:	80002400 	.word	0x80002400
 800180c:	200000a1 	.word	0x200000a1

08001810 <I2C1_EV_IRQHandler_fun>:


void I2C1_EV_IRQHandler_fun(void)
{
 8001810:	b598      	push	{r3, r4, r7, lr}
 8001812:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001814:	4812      	ldr	r0, [pc, #72]	; (8001860 <I2C1_EV_IRQHandler_fun+0x50>)
 8001816:	f7ff fe15 	bl	8001444 <LL_I2C_IsActiveFlag_RXNE>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d01c      	beq.n	800185a <I2C1_EV_IRQHandler_fun+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <I2C1_EV_IRQHandler_fun+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <I2C1_EV_IRQHandler_fun+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	1c59      	adds	r1, r3, #1
 800182c:	b2c8      	uxtb	r0, r1
 800182e:	490e      	ldr	r1, [pc, #56]	; (8001868 <I2C1_EV_IRQHandler_fun+0x58>)
 8001830:	7008      	strb	r0, [r1, #0]
 8001832:	18d4      	adds	r4, r2, r3
 8001834:	480a      	ldr	r0, [pc, #40]	; (8001860 <I2C1_EV_IRQHandler_fun+0x50>)
 8001836:	f7ff fe71 	bl	800151c <LL_I2C_ReceiveData8>
 800183a:	4603      	mov	r3, r0
 800183c:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <I2C1_EV_IRQHandler_fun+0x58>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b13      	cmp	r3, #19
 8001846:	d903      	bls.n	8001850 <I2C1_EV_IRQHandler_fun+0x40>
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <I2C1_EV_IRQHandler_fun+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e001      	b.n	8001854 <I2C1_EV_IRQHandler_fun+0x44>
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <I2C1_EV_IRQHandler_fun+0x58>)
 8001852:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <I2C1_EV_IRQHandler_fun+0x5c>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
	}
}
 800185a:	bf00      	nop
 800185c:	bd98      	pop	{r3, r4, r7, pc}
 800185e:	bf00      	nop
 8001860:	40005400 	.word	0x40005400
 8001864:	200000ac 	.word	0x200000ac
 8001868:	200000a1 	.word	0x200000a1
 800186c:	200000a0 	.word	0x200000a0

08001870 <iks01a1_init>:
#include "iks01a1.h"

uint8_t data = 0;

uint8_t iks01a1_init(void){
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	LL_mDelay(100);
 8001876:	2064      	movs	r0, #100	; 0x64
 8001878:	f001 ffaa 	bl	80037d0 <LL_mDelay>
	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 800187c:	200f      	movs	r0, #15
 800187e:	f000 f9df 	bl	8001c40 <lps25hb_read_byte>
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	//val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);

	if(!(val == LPS25HB_WHO_AM_I_VALUE))
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2bbd      	cmp	r3, #189	; 0xbd
 800188a:	d001      	beq.n	8001890 <iks01a1_init+0x20>
	{
		return 0; //bad who am I value
 800188c:	2300      	movs	r3, #0
 800188e:	e029      	b.n	80018e4 <iks01a1_init+0x74>
	}

	ctrl = hts221_read_byte(LPS25HB_CTRL_REG1);
 8001890:	2020      	movs	r0, #32
 8001892:	f000 f9ed 	bl	8001c70 <hts221_read_byte>
 8001896:	4603      	mov	r3, r0
 8001898:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 7;
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a0:	71bb      	strb	r3, [r7, #6]
	lps25hb_write_byte(LPS25HB_CTRL_REG1, ctrl); //active mode
 80018a2:	79bb      	ldrb	r3, [r7, #6]
 80018a4:	4619      	mov	r1, r3
 80018a6:	2020      	movs	r0, #32
 80018a8:	f000 fa34 	bl	8001d14 <lps25hb_write_byte>


	LL_mDelay(100);
 80018ac:	2064      	movs	r0, #100	; 0x64
 80018ae:	f001 ff8f 	bl	80037d0 <LL_mDelay>
	val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 80018b2:	200f      	movs	r0, #15
 80018b4:	f000 f9dc 	bl	8001c70 <hts221_read_byte>
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]

	if(!(val == HTS221_WHO_AM_I_VALUE))
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	2bbc      	cmp	r3, #188	; 0xbc
 80018c0:	d001      	beq.n	80018c6 <iks01a1_init+0x56>
	{
		return 0; //bad who am I value
 80018c2:	2300      	movs	r3, #0
 80018c4:	e00e      	b.n	80018e4 <iks01a1_init+0x74>
	}

	ctrl = hts221_read_byte(HTS221_CTRL_REG1);
 80018c6:	2020      	movs	r0, #32
 80018c8:	f000 f9d2 	bl	8001c70 <hts221_read_byte>
 80018cc:	4603      	mov	r3, r0
 80018ce:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 7;
 80018d0:	79bb      	ldrb	r3, [r7, #6]
 80018d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018d6:	71bb      	strb	r3, [r7, #6]
	hts221_write_byte(HTS221_CTRL_REG1, ctrl); //active mode
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	4619      	mov	r1, r3
 80018dc:	2020      	movs	r0, #32
 80018de:	f000 fa07 	bl	8001cf0 <hts221_write_byte>
	//uint8_t ctrltest = hts221_read_byte(HTS221_CTRL_REG1);

	//ctrl = ctrltest;

	return 1;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <hts221_start_measurement>:

void hts221_start_measurement(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
	uint8_t ctrl = hts221_read_byte(LPS25HB_CTRL_REG2);
 80018f2:	2021      	movs	r0, #33	; 0x21
 80018f4:	f000 f9bc 	bl	8001c70 <hts221_read_byte>
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
	ctrl |= 0x1;
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	71fb      	strb	r3, [r7, #7]
	lps25hb_write_byte(LPS25HB_CTRL_REG2, ctrl); //activate measurement
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4619      	mov	r1, r3
 8001908:	2021      	movs	r0, #33	; 0x21
 800190a:	f000 fa03 	bl	8001d14 <lps25hb_write_byte>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <lps25hb_start_measurement>:

void lps25hb_start_measurement(void) {
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
	uint8_t ctrl = hts221_read_byte(HTS221_CTRL_REG2);
 800191c:	2021      	movs	r0, #33	; 0x21
 800191e:	f000 f9a7 	bl	8001c70 <hts221_read_byte>
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
	ctrl |= 0x1;
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	71fb      	strb	r3, [r7, #7]
	hts221_write_byte(HTS221_CTRL_REG2, ctrl); //activate measurement
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	4619      	mov	r1, r3
 8001932:	2021      	movs	r0, #33	; 0x21
 8001934:	f000 f9dc 	bl	8001cf0 <hts221_write_byte>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <hts221_get_humidity>:

void hts221_get_humidity(float* out) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	uint8_t data[2], h0_rh, h1_rh;
	uint16_t h_out, h0_t0_out, h1_t0_out;



	uint8_t availability = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 800194c:	2027      	movs	r0, #39	; 0x27
 800194e:	f000 f98f 	bl	8001c70 <hts221_read_byte>
 8001952:	4603      	mov	r3, r0
 8001954:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1) >> 1;
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]

	h0_rh = hts221_read_byte(HTS221_H0_RH)/2;
 800195e:	2030      	movs	r0, #48	; 0x30
 8001960:	f000 f986 	bl	8001c70 <hts221_read_byte>
 8001964:	4603      	mov	r3, r0
 8001966:	085b      	lsrs	r3, r3, #1
 8001968:	75bb      	strb	r3, [r7, #22]
	h1_rh = hts221_read_byte(HTS221_H1_RH)/2;
 800196a:	2031      	movs	r0, #49	; 0x31
 800196c:	f000 f980 	bl	8001c70 <hts221_read_byte>
 8001970:	4603      	mov	r3, r0
 8001972:	085b      	lsrs	r3, r3, #1
 8001974:	757b      	strb	r3, [r7, #21]

	hts221_readArray(data, HTS221_H0_T0_OUT, 2);
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2202      	movs	r2, #2
 800197c:	2136      	movs	r1, #54	; 0x36
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f98e 	bl	8001ca0 <hts221_readArray>
	h0_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 8001984:	7b7b      	ldrb	r3, [r7, #13]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b21a      	sxth	r2, r3
 800198a:	7b3b      	ldrb	r3, [r7, #12]
 800198c:	b21b      	sxth	r3, r3
 800198e:	4313      	orrs	r3, r2
 8001990:	b21b      	sxth	r3, r3
 8001992:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_H1_T0_OUT, 2);
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2202      	movs	r2, #2
 800199a:	213a      	movs	r1, #58	; 0x3a
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f97f 	bl	8001ca0 <hts221_readArray>
	h1_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 80019a2:	7b7b      	ldrb	r3, [r7, #13]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	7b3b      	ldrb	r3, [r7, #12]
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	823b      	strh	r3, [r7, #16]

	hts221_readArray(data, HTS221_HUMIDITY_ADDR, 2);
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	2202      	movs	r2, #2
 80019b8:	2128      	movs	r1, #40	; 0x28
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f970 	bl	8001ca0 <hts221_readArray>

	h_out = ((uint16_t)data[1]) << 8 | data[0];
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	7b3b      	ldrb	r3, [r7, #12]
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	81fb      	strh	r3, [r7, #14]
	*out = (float)((h1_rh-h0_rh)*(h_out-h0_t0_out)/(float)(h1_t0_out-h0_t0_out)+h0_rh);
 80019d0:	7d7a      	ldrb	r2, [r7, #21]
 80019d2:	7dbb      	ldrb	r3, [r7, #22]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	89f9      	ldrh	r1, [r7, #14]
 80019d8:	8a7a      	ldrh	r2, [r7, #18]
 80019da:	1a8a      	subs	r2, r1, r2
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019e8:	8a3a      	ldrh	r2, [r7, #16]
 80019ea:	8a7b      	ldrh	r3, [r7, #18]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019fa:	7dbb      	ldrb	r3, [r7, #22]
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <hts221_get_temperature>:

void hts221_get_temperature(float* out) {
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	uint16_t t_out, t0_out, t1_out, t0_degc, t1_degc;

	uint8_t availability = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 8001a22:	2027      	movs	r0, #39	; 0x27
 8001a24:	f000 f924 	bl	8001c70 <hts221_read_byte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1);
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	75fb      	strb	r3, [r7, #23]

	uint8_t tmp = hts221_read_byte(HTS221_T0_T1_DEGC_MSB);
 8001a34:	2035      	movs	r0, #53	; 0x35
 8001a36:	f000 f91b 	bl	8001c70 <hts221_read_byte>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	75bb      	strb	r3, [r7, #22]
	//uint16_t tmp2;

	t0_degc = hts221_read_byte(HTS221_T0_DEGC);
 8001a3e:	2032      	movs	r0, #50	; 0x32
 8001a40:	f000 f916 	bl	8001c70 <hts221_read_byte>
 8001a44:	4603      	mov	r3, r0
 8001a46:	82bb      	strh	r3, [r7, #20]
	t1_degc = hts221_read_byte(HTS221_T1_DEGC);
 8001a48:	2033      	movs	r0, #51	; 0x33
 8001a4a:	f000 f911 	bl	8001c70 <hts221_read_byte>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	827b      	strh	r3, [r7, #18]

	t0_degc += ((tmp & 0x3)<<8);
 8001a52:	7dbb      	ldrb	r3, [r7, #22]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	8abb      	ldrh	r3, [r7, #20]
 8001a60:	4413      	add	r3, r2
 8001a62:	82bb      	strh	r3, [r7, #20]
	t0_degc /= 8;
 8001a64:	8abb      	ldrh	r3, [r7, #20]
 8001a66:	08db      	lsrs	r3, r3, #3
 8001a68:	82bb      	strh	r3, [r7, #20]

	//tmp2 = ((tmp & (0x3)<<2))<<6;
	t1_degc += ((tmp & ((0x3)<<2))<<6);
 8001a6a:	7dbb      	ldrb	r3, [r7, #22]
 8001a6c:	019b      	lsls	r3, r3, #6
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	8a7b      	ldrh	r3, [r7, #18]
 8001a78:	4413      	add	r3, r2
 8001a7a:	827b      	strh	r3, [r7, #18]
	t1_degc /= 8;
 8001a7c:	8a7b      	ldrh	r3, [r7, #18]
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_T0_OUT, 2);
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	2202      	movs	r2, #2
 8001a88:	213e      	movs	r1, #62	; 0x3e
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f908 	bl	8001ca0 <hts221_readArray>
	t0_out = ((uint16_t)data[1]) << 8 | data[0];
 8001a90:	7a7b      	ldrb	r3, [r7, #9]
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	7a3b      	ldrb	r3, [r7, #8]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	823b      	strh	r3, [r7, #16]
	hts221_readArray(data, HTS221_T1_OUT, 2);
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	213c      	movs	r1, #60	; 0x3c
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f8f9 	bl	8001ca0 <hts221_readArray>
	t1_out = ((uint16_t)data[1]) << 8 | data[0];
 8001aae:	7a7b      	ldrb	r3, [r7, #9]
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	7a3b      	ldrb	r3, [r7, #8]
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	81fb      	strh	r3, [r7, #14]

	hts221_readArray(data, HTS221_TEMPERATURE_ADDR, 2);
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	212a      	movs	r1, #42	; 0x2a
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f8ea 	bl	8001ca0 <hts221_readArray>

	t_out = ((uint16_t)data[1]) << 8 | data[0];
 8001acc:	7a7b      	ldrb	r3, [r7, #9]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	b21a      	sxth	r2, r3
 8001ad2:	7a3b      	ldrb	r3, [r7, #8]
 8001ad4:	b21b      	sxth	r3, r3
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	81bb      	strh	r3, [r7, #12]
	*out = (float)((t1_degc - t0_degc)*(t_out-t0_out)/(float)(t1_out-t0_out)+t0_degc);
 8001adc:	8a7a      	ldrh	r2, [r7, #18]
 8001ade:	8abb      	ldrh	r3, [r7, #20]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	89b9      	ldrh	r1, [r7, #12]
 8001ae4:	8a3a      	ldrh	r2, [r7, #16]
 8001ae6:	1a8a      	subs	r2, r1, r2
 8001ae8:	fb02 f303 	mul.w	r3, r2, r3
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001af4:	89fa      	ldrh	r2, [r7, #14]
 8001af6:	8a3b      	ldrh	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b06:	8abb      	ldrh	r3, [r7, #20]
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	edc3 7a00 	vstr	s15, [r3]
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <lps25hb_get_pressure>:

void lps25hb_get_pressure(float* out) { //pressure in mBAR
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pressure;// ref_pressure;

	uint8_t availability = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	75fb      	strb	r3, [r7, #23]
	availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001b30:	2027      	movs	r0, #39	; 0x27
 8001b32:	f000 f885 	bl	8001c40 <lps25hb_read_byte>
 8001b36:	4603      	mov	r3, r0
 8001b38:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1)>>1;
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDR, 3);
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	2203      	movs	r2, #3
 8001b48:	2128      	movs	r1, #40	; 0x28
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f8bc 	bl	8001cc8 <lps25hb_readArray>
	pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	041b      	lsls	r3, r3, #16
 8001b54:	7b7a      	ldrb	r2, [r7, #13]
 8001b56:	0212      	lsls	r2, r2, #8
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	7b3a      	ldrb	r2, [r7, #12]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]

	/*lps25hb_readArray(data, LPS25HB_REF_PRESSURE_ADDR, 3);
	ref_pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];*/

	*out =  (float)(pressure)/(float)(4096);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b6a:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001b80 <lps25hb_get_pressure+0x5c>
 8001b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	edc3 7a00 	vstr	s15, [r3]
}
 8001b78:	bf00      	nop
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	45800000 	.word	0x45800000
 8001b84:	00000000 	.word	0x00000000

08001b88 <lps25hb_get_altitude>:

void lps25hb_get_altitude(float* out) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pressure;

	uint8_t availability = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	75fb      	strb	r3, [r7, #23]
	availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001b94:	2027      	movs	r0, #39	; 0x27
 8001b96:	f000 f853 	bl	8001c40 <lps25hb_read_byte>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1)>>1;
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	75fb      	strb	r3, [r7, #23]

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDR, 3);
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	2203      	movs	r2, #3
 8001bac:	2128      	movs	r1, #40	; 0x28
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f88a 	bl	8001cc8 <lps25hb_readArray>
	pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8001bb4:	7bbb      	ldrb	r3, [r7, #14]
 8001bb6:	041b      	lsls	r3, r3, #16
 8001bb8:	7b7a      	ldrb	r2, [r7, #13]
 8001bba:	0212      	lsls	r2, r2, #8
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	7b3a      	ldrb	r2, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

	*out = 44330*(1-pow((float)(pressure)/(float)(4096*1013.25f),(1/5.255f)));
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bce:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001c38 <lps25hb_get_altitude+0xb0>
 8001bd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bd6:	ee16 0a90 	vmov	r0, s13
 8001bda:	f7fe fc61 	bl	80004a0 <__aeabi_f2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001c28 <lps25hb_get_altitude+0xa0>
 8001be6:	ec43 2b10 	vmov	d0, r2, r3
 8001bea:	f001 fe59 	bl	80038a0 <pow>
 8001bee:	ec53 2b10 	vmov	r2, r3, d0
 8001bf2:	f04f 0000 	mov.w	r0, #0
 8001bf6:	4911      	ldr	r1, [pc, #68]	; (8001c3c <lps25hb_get_altitude+0xb4>)
 8001bf8:	f7fe faf2 	bl	80001e0 <__aeabi_dsub>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	a30a      	add	r3, pc, #40	; (adr r3, 8001c30 <lps25hb_get_altitude+0xa8>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	f7fe fca1 	bl	8000550 <__aeabi_dmul>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f7fe ff4b 	bl	8000ab0 <__aeabi_d2f>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	c0000000 	.word	0xc0000000
 8001c2c:	3fc85b95 	.word	0x3fc85b95
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40e5a540 	.word	0x40e5a540
 8001c38:	4a7d5000 	.word	0x4a7d5000
 8001c3c:	3ff00000 	.word	0x3ff00000

08001c40 <lps25hb_read_byte>:

uint8_t lps25hb_read_byte(uint8_t reg_addr) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <lps25hb_read_byte+0x2c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, LPS25HB_DEVICE_ADDRESS, 0));
 8001c50:	79fa      	ldrb	r2, [r7, #7]
 8001c52:	2300      	movs	r3, #0
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	23bb      	movs	r3, #187	; 0xbb
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4804      	ldr	r0, [pc, #16]	; (8001c6c <lps25hb_read_byte+0x2c>)
 8001c5c:	f7ff fd5e 	bl	800171c <i2c_master_read>
 8001c60:	4603      	mov	r3, r0
 8001c62:	781b      	ldrb	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200000a2 	.word	0x200000a2

08001c70 <hts221_read_byte>:

uint8_t hts221_read_byte(uint8_t reg_addr) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <hts221_read_byte+0x2c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, HTS221_DEVICE_ADDRESS, 0));
 8001c80:	79fa      	ldrb	r2, [r7, #7]
 8001c82:	2300      	movs	r3, #0
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	23be      	movs	r3, #190	; 0xbe
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4804      	ldr	r0, [pc, #16]	; (8001c9c <hts221_read_byte+0x2c>)
 8001c8c:	f7ff fd46 	bl	800171c <i2c_master_read>
 8001c90:	4603      	mov	r3, r0
 8001c92:	781b      	ldrb	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200000a2 	.word	0x200000a2

08001ca0 <hts221_readArray>:
{
	i2c_master_read(data, length, reg, LSM6DS0_DEVICE_ADDRESS, 1);
}

void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
 8001cac:	4613      	mov	r3, r2
 8001cae:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, HTS221_DEVICE_ADDRESS, 1);
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	78b9      	ldrb	r1, [r7, #2]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	23be      	movs	r3, #190	; 0xbe
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fd2e 	bl	800171c <i2c_master_read>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <lps25hb_readArray>:

void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, LPS25HB_DEVICE_ADDRESS, 1);
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	78b9      	ldrb	r1, [r7, #2]
 8001cdc:	2301      	movs	r3, #1
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	23bb      	movs	r3, #187	; 0xbb
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fd1a 	bl	800171c <i2c_master_read>
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <hts221_write_byte>:
{
	i2c_master_write(value, reg_addr, LSM6DS0_DEVICE_ADDRESS, 0);
}

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	460a      	mov	r2, r1
 8001cfa:	71fb      	strb	r3, [r7, #7]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, HTS221_DEVICE_ADDRESS, 0);
 8001d00:	79f9      	ldrb	r1, [r7, #7]
 8001d02:	79b8      	ldrb	r0, [r7, #6]
 8001d04:	2300      	movs	r3, #0
 8001d06:	22be      	movs	r2, #190	; 0xbe
 8001d08:	f7ff fcc4 	bl	8001694 <i2c_master_write>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	71fb      	strb	r3, [r7, #7]
 8001d20:	4613      	mov	r3, r2
 8001d22:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS25HB_DEVICE_ADDRESS, 0);
 8001d24:	79f9      	ldrb	r1, [r7, #7]
 8001d26:	79b8      	ldrb	r0, [r7, #6]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	22bb      	movs	r2, #187	; 0xbb
 8001d2c:	f7ff fcb2 	bl	8001694 <i2c_master_write>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <__NVIC_SetPriorityGrouping>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <LL_RCC_HSI_Enable+0x1c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <LL_RCC_HSI_Enable+0x1c>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000

08001da0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <LL_RCC_HSI_IsReady+0x20>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4904      	ldr	r1, [pc, #16]	; (8001dec <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000

08001df0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <LL_RCC_SetSysClkSource+0x24>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f023 0203 	bic.w	r2, r3, #3
 8001e00:	4904      	ldr	r1, [pc, #16]	; (8001e14 <LL_RCC_SetSysClkSource+0x24>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	40021000 	.word	0x40021000

08001e18 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <LL_RCC_GetSysClkSource+0x18>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000

08001e34 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <LL_RCC_SetAHBPrescaler+0x24>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e44:	4904      	ldr	r1, [pc, #16]	; (8001e58 <LL_RCC_SetAHBPrescaler+0x24>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40021000 	.word	0x40021000

08001e5c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6c:	4904      	ldr	r1, [pc, #16]	; (8001e80 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	40021000 	.word	0x40021000

08001e84 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e94:	4904      	ldr	r1, [pc, #16]	; (8001ea8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000

08001eac <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <LL_RCC_SetI2CClockSource+0x2c>)
 8001eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	0e1b      	lsrs	r3, r3, #24
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ec6:	4904      	ldr	r1, [pc, #16]	; (8001ed8 <LL_RCC_SetI2CClockSource+0x2c>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40021000 	.word	0x40021000

08001edc <LL_APB1_GRP1_EnableClock>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	4907      	ldr	r1, [pc, #28]	; (8001f08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ef2:	69da      	ldr	r2, [r3, #28]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40021000 	.word	0x40021000

08001f0c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4013      	ands	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000

08001f3c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <LL_FLASH_SetLatency+0x24>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 0207 	bic.w	r2, r3, #7
 8001f4c:	4904      	ldr	r1, [pc, #16]	; (8001f60 <LL_FLASH_SetLatency+0x24>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40022000 	.word	0x40022000

08001f64 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <LL_FLASH_GetLatency+0x18>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40022000 	.word	0x40022000

08001f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7ff ffbf 	bl	8001f0c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001f8e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001f92:	f7ff ffa3 	bl	8001edc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f96:	2003      	movs	r0, #3
 8001f98:	f7ff fece 	bl	8001d38 <__NVIC_SetPriorityGrouping>
  EXTI->RTSR &= ~(EXTI_IMR_MR4);
  EXTI->FTSR |= EXTI_IMR_MR4;*/
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f9c:	f000 f8b4 	bl	8002108 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Systick_Init();
 8001fa0:	f000 fade 	bl	8002560 <Systick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa4:	f7ff f8c0 	bl	8001128 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001fa8:	f7ff fb04 	bl	80015b4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001fac:	f000 faea 	bl	8002584 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  error = 0;
 8001fb0:	4b4c      	ldr	r3, [pc, #304]	; (80020e4 <main+0x164>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
  if(!iks01a1_init()) error = 1;
 8001fb6:	f7ff fc5b 	bl	8001870 <iks01a1_init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <main+0x46>
 8001fc0:	4b48      	ldr	r3, [pc, #288]	; (80020e4 <main+0x164>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]


  setSegments();
 8001fc6:	f7fe fe0d 	bl	8000be4 <setSegments>
  setDigits();
 8001fca:	f7fe fe59 	bl	8000c80 <setDigits>
  LL_mDelay(2000);
 8001fce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fd2:	f001 fbfd 	bl	80037d0 <LL_mDelay>
  resetDigits();
 8001fd6:	f7fe fe33 	bl	8000c40 <resetDigits>
  resetSegments();
 8001fda:	f7fe fdd5 	bl	8000b88 <resetSegments>

  mode = 0;
 8001fde:	4b42      	ldr	r3, [pc, #264]	; (80020e8 <main+0x168>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
  float humidity, temperature, pressure, altitude;
  strcpy(display_text,"0123456789\0");
 8001fe4:	4a41      	ldr	r2, [pc, #260]	; (80020ec <main+0x16c>)
 8001fe6:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <main+0x170>)
 8001fe8:	cb03      	ldmia	r3!, {r0, r1}
 8001fea:	6010      	str	r0, [r2, #0]
 8001fec:	6051      	str	r1, [r2, #4]
 8001fee:	8819      	ldrh	r1, [r3, #0]
 8001ff0:	789b      	ldrb	r3, [r3, #2]
 8001ff2:	8111      	strh	r1, [r2, #8]
 8001ff4:	7293      	strb	r3, [r2, #10]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(error) {
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <main+0x164>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00e      	beq.n	800201c <main+0x9c>
		  strcpy(display_text,"I2C_who_am_I_error\0");
 8001ffe:	4a3b      	ldr	r2, [pc, #236]	; (80020ec <main+0x16c>)
 8002000:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <main+0x174>)
 8002002:	4615      	mov	r5, r2
 8002004:	461c      	mov	r4, r3
 8002006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002008:	6028      	str	r0, [r5, #0]
 800200a:	6069      	str	r1, [r5, #4]
 800200c:	60aa      	str	r2, [r5, #8]
 800200e:	60eb      	str	r3, [r5, #12]
 8002010:	8823      	ldrh	r3, [r4, #0]
 8002012:	78a2      	ldrb	r2, [r4, #2]
 8002014:	822b      	strh	r3, [r5, #16]
 8002016:	4613      	mov	r3, r2
 8002018:	74ab      	strb	r3, [r5, #18]
 800201a:	e017      	b.n	800204c <main+0xcc>
	  } else {
	  hts221_start_measurement();
 800201c:	f7ff fc66 	bl	80018ec <hts221_start_measurement>
	  lps25hb_start_measurement();
 8002020:	f7ff fc79 	bl	8001916 <lps25hb_start_measurement>
	  hts221_get_humidity(&humidity);
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fc89 	bl	8001940 <hts221_get_humidity>
	  hts221_get_temperature(&temperature);
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fcef 	bl	8001a16 <hts221_get_temperature>
	  lps25hb_get_pressure(&pressure);
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fd72 	bl	8001b24 <lps25hb_get_pressure>
	  lps25hb_start_measurement();
 8002040:	f7ff fc69 	bl	8001916 <lps25hb_start_measurement>
	  lps25hb_get_altitude(&altitude);
 8002044:	463b      	mov	r3, r7
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fd9e 	bl	8001b88 <lps25hb_get_altitude>
	  }

	  if(disp_time > (saved_time + 500))
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <main+0x178>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f512 78fa 	adds.w	r8, r2, #500	; 0x1f4
 8002056:	f143 0900 	adc.w	r9, r3, #0
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <main+0x17c>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	4599      	cmp	r9, r3
 8002062:	bf08      	it	eq
 8002064:	4590      	cmpeq	r8, r2
 8002066:	d2c6      	bcs.n	8001ff6 <main+0x76>
	  	  {

	  		  display_sign(display_text[act_index],display_text[act_index+1],display_text[act_index+2],display_text[act_index+3]);
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <main+0x180>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <main+0x16c>)
 800206e:	5cd0      	ldrb	r0, [r2, r3]
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <main+0x180>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <main+0x16c>)
 8002078:	5cd1      	ldrb	r1, [r2, r3]
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <main+0x180>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3302      	adds	r3, #2
 8002080:	4a1a      	ldr	r2, [pc, #104]	; (80020ec <main+0x16c>)
 8002082:	5cd2      	ldrb	r2, [r2, r3]
 8002084:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <main+0x180>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3303      	adds	r3, #3
 800208a:	4c18      	ldr	r4, [pc, #96]	; (80020ec <main+0x16c>)
 800208c:	5ce3      	ldrb	r3, [r4, r3]
 800208e:	f7fe feb1 	bl	8000df4 <display_sign>
	  	  	  saved_time = disp_time;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <main+0x17c>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	4917      	ldr	r1, [pc, #92]	; (80020f8 <main+0x178>)
 800209a:	e9c1 2300 	strd	r2, r3, [r1]

	  	  	  if(right){ //urcovanie smeru
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <main+0x184>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <main+0x132>
	  	  		  act_index++;
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <main+0x180>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <main+0x180>)
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e004      	b.n	80020bc <main+0x13c>
	  	  	  } else {
	  	  		  act_index--;
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <main+0x180>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	4a11      	ldr	r2, [pc, #68]	; (8002100 <main+0x180>)
 80020ba:	6013      	str	r3, [r2, #0]
	  	  	  }
	  	  	  if(act_index == strlen(display_text)-4) { //17 velkost zobrazovaneho textu, ak dojde nakoniec zmeni smer
 80020bc:	480b      	ldr	r0, [pc, #44]	; (80020ec <main+0x16c>)
 80020be:	f7fe f883 	bl	80001c8 <strlen>
 80020c2:	4603      	mov	r3, r0
 80020c4:	3b04      	subs	r3, #4
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <main+0x180>)
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d102      	bne.n	80020d4 <main+0x154>
	  	  		  right = 0;
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <main+0x184>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
	  	  	  }
	  	  	  if (act_index == 0){
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <main+0x180>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d18c      	bne.n	8001ff6 <main+0x76>
	  	  		  right = 1;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <main+0x184>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
	  if(error) {
 80020e2:	e788      	b.n	8001ff6 <main+0x76>
 80020e4:	200000b1 	.word	0x200000b1
 80020e8:	200000b0 	.word	0x200000b0
 80020ec:	200000c0 	.word	0x200000c0
 80020f0:	08004828 	.word	0x08004828
 80020f4:	08004834 	.word	0x08004834
 80020f8:	200000b8 	.word	0x200000b8
 80020fc:	20000090 	.word	0x20000090
 8002100:	200000a4 	.word	0x200000a4
 8002104:	20000000 	.word	0x20000000

08002108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff ff15 	bl	8001f3c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002112:	bf00      	nop
 8002114:	f7ff ff26 	bl	8001f64 <LL_FLASH_GetLatency>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1fa      	bne.n	8002114 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800211e:	f7ff fe2f 	bl	8001d80 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002122:	bf00      	nop
 8002124:	f7ff fe3c 	bl	8001da0 <LL_RCC_HSI_IsReady>
 8002128:	4603      	mov	r3, r0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d1fa      	bne.n	8002124 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800212e:	2010      	movs	r0, #16
 8002130:	f7ff fe48 	bl	8001dc4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002134:	2000      	movs	r0, #0
 8002136:	f7ff fe7d 	bl	8001e34 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800213a:	2000      	movs	r0, #0
 800213c:	f7ff fe8e 	bl	8001e5c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff fe9f 	bl	8001e84 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff fe52 	bl	8001df0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800214c:	bf00      	nop
 800214e:	f7ff fe63 	bl	8001e18 <LL_RCC_GetSysClkSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1fa      	bne.n	800214e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8002158:	4805      	ldr	r0, [pc, #20]	; (8002170 <SystemClock_Config+0x68>)
 800215a:	f001 fb2b 	bl	80037b4 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800215e:	4804      	ldr	r0, [pc, #16]	; (8002170 <SystemClock_Config+0x68>)
 8002160:	f001 fb5c 	bl	800381c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8002164:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002168:	f7ff fea0 	bl	8001eac <LL_RCC_SetI2CClockSource>
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	007a1200 	.word	0x007a1200

08002174 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f06f 0201 	mvn.w	r2, #1
 8002182:	611a      	str	r2, [r3, #16]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <NMI_Handler+0x4>

080021bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <HardFault_Handler+0x4>

080021c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <MemManage_Handler+0x4>

080021c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <BusFault_Handler+0x4>

080021ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <UsageFault_Handler+0x4>

080021d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */
	disp_time++;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <SysTick_Handler+0x20>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	1c50      	adds	r0, r2, #1
 800220c:	f143 0100 	adc.w	r1, r3, #0
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <SysTick_Handler+0x20>)
 8002212:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	20000090 	.word	0x20000090

08002224 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI3_IRQn 0 */
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8002238:	4806      	ldr	r0, [pc, #24]	; (8002254 <TIM3_IRQHandler+0x20>)
 800223a:	f7ff ffa9 	bl	8002190 <LL_TIM_IsActiveFlag_UPDATE>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <TIM3_IRQHandler+0x14>
		{
			updateDisplay();
 8002244:	f7fe fdf8 	bl	8000e38 <updateDisplay>
		}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <TIM3_IRQHandler+0x20>)
 800224a:	f7ff ff93 	bl	8002174 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40000400 	.word	0x40000400

08002258 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C1_EV_IRQHandler_fun();
 800225c:	f7ff fad8 	bl	8001810 <I2C1_EV_IRQHandler_fun>
  /* USER CODE END I2C1_EV_IRQn 0 */
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <SystemInit+0x20>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <SystemInit+0x20>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_GetPriorityGrouping>:
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_EnableIRQ>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <__NVIC_EnableIRQ+0x38>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <LL_APB1_GRP1_EnableClock>:
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	4907      	ldr	r1, [pc, #28]	; (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4013      	ands	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	40021000 	.word	0x40021000

080023cc <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <LL_SYSTICK_EnableIT+0x1c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <LL_SYSTICK_EnableIT+0x1c>)
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <LL_TIM_EnableCounter>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_TIM_EnableARRPreload>:
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	601a      	str	r2, [r3, #0]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_TIM_OC_DisableFast>:
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d028      	beq.n	800248e <LL_TIM_OC_DisableFast+0x62>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d023      	beq.n	800248a <LL_TIM_OC_DisableFast+0x5e>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b10      	cmp	r3, #16
 8002446:	d01e      	beq.n	8002486 <LL_TIM_OC_DisableFast+0x5a>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b40      	cmp	r3, #64	; 0x40
 800244c:	d019      	beq.n	8002482 <LL_TIM_OC_DisableFast+0x56>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002454:	d013      	beq.n	800247e <LL_TIM_OC_DisableFast+0x52>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245c:	d00d      	beq.n	800247a <LL_TIM_OC_DisableFast+0x4e>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002464:	d007      	beq.n	8002476 <LL_TIM_OC_DisableFast+0x4a>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d101      	bne.n	8002472 <LL_TIM_OC_DisableFast+0x46>
 800246e:	2307      	movs	r3, #7
 8002470:	e00e      	b.n	8002490 <LL_TIM_OC_DisableFast+0x64>
 8002472:	2308      	movs	r3, #8
 8002474:	e00c      	b.n	8002490 <LL_TIM_OC_DisableFast+0x64>
 8002476:	2306      	movs	r3, #6
 8002478:	e00a      	b.n	8002490 <LL_TIM_OC_DisableFast+0x64>
 800247a:	2305      	movs	r3, #5
 800247c:	e008      	b.n	8002490 <LL_TIM_OC_DisableFast+0x64>
 800247e:	2304      	movs	r3, #4
 8002480:	e006      	b.n	8002490 <LL_TIM_OC_DisableFast+0x64>
 8002482:	2303      	movs	r3, #3
 8002484:	e004      	b.n	8002490 <LL_TIM_OC_DisableFast+0x64>
 8002486:	2302      	movs	r3, #2
 8002488:	e002      	b.n	8002490 <LL_TIM_OC_DisableFast+0x64>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <LL_TIM_OC_DisableFast+0x64>
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3318      	adds	r3, #24
 8002496:	4619      	mov	r1, r3
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <LL_TIM_OC_DisableFast+0x9c>)
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	440b      	add	r3, r1
 80024a0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	4908      	ldr	r1, [pc, #32]	; (80024cc <LL_TIM_OC_DisableFast+0xa0>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	4619      	mov	r1, r3
 80024ae:	2304      	movs	r3, #4
 80024b0:	408b      	lsls	r3, r1
 80024b2:	43db      	mvns	r3, r3
 80024b4:	401a      	ands	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	601a      	str	r2, [r3, #0]
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	08004894 	.word	0x08004894
 80024cc:	080048a0 	.word	0x080048a0

080024d0 <LL_TIM_SetClockSource>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80024e2:	f023 0307 	bic.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	609a      	str	r2, [r3, #8]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_TIM_SetTriggerOutput>:
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	605a      	str	r2, [r3, #4]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_TIM_DisableMasterSlaveMode>:
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	60da      	str	r2, [r3, #12]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <Systick_Init>:

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void Systick_Init(void){
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <Systick_Init+0x20>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0; /* Load the SysTick Counter Value */
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <Systick_Init+0x20>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (SysTick_CTRL_TICKINT_Msk   |  /* Enable SysTick exception */
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <Systick_Init+0x20>)
 8002572:	2207      	movs	r2, #7
 8002574:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_ENABLE_Msk) |    /* Enable SysTick system timer */
					 SysTick_CTRL_CLKSOURCE_Msk;   /* Use processor clock source */
	LL_SYSTICK_EnableIT();
 8002576:	f7ff ff29 	bl	80023cc <LL_SYSTICK_EnableIT>
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	e000e010 	.word	0xe000e010

08002584 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	; 0x38
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800258a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
 8002598:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	2220      	movs	r2, #32
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 f975 	bl	8003890 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80025a6:	2002      	movs	r0, #2
 80025a8:	f7ff fef8 	bl	800239c <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80025ac:	f7ff fe6c 	bl	8002288 <__NVIC_GetPriorityGrouping>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2200      	movs	r2, #0
 80025b4:	210f      	movs	r1, #15
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff febc 	bl	8002334 <NVIC_EncodePriority>
 80025bc:	4603      	mov	r3, r0
 80025be:	4619      	mov	r1, r3
 80025c0:	201d      	movs	r0, #29
 80025c2:	f7ff fe8d 	bl	80022e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80025c6:	201d      	movs	r0, #29
 80025c8:	f7ff fe6c 	bl	80022a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 80025cc:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80025d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80025d2:	2300      	movs	r3, #0
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;
 80025d6:	2313      	movs	r3, #19
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80025da:	2300      	movs	r3, #0
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80025de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e2:	4619      	mov	r1, r3
 80025e4:	4817      	ldr	r0, [pc, #92]	; (8002644 <MX_TIM3_Init+0xc0>)
 80025e6:	f000 fd61 	bl	80030ac <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80025ea:	4816      	ldr	r0, [pc, #88]	; (8002644 <MX_TIM3_Init+0xc0>)
 80025ec:	f7ff ff0e 	bl	800240c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80025f0:	2100      	movs	r1, #0
 80025f2:	4814      	ldr	r0, [pc, #80]	; (8002644 <MX_TIM3_Init+0xc0>)
 80025f4:	f7ff ff6c 	bl	80024d0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 80025f8:	2310      	movs	r3, #16
 80025fa:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	461a      	mov	r2, r3
 8002610:	2101      	movs	r1, #1
 8002612:	480c      	ldr	r0, [pc, #48]	; (8002644 <MX_TIM3_Init+0xc0>)
 8002614:	f000 fdbc 	bl	8003190 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002618:	2101      	movs	r1, #1
 800261a:	480a      	ldr	r0, [pc, #40]	; (8002644 <MX_TIM3_Init+0xc0>)
 800261c:	f7ff ff06 	bl	800242c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002620:	2100      	movs	r1, #0
 8002622:	4808      	ldr	r0, [pc, #32]	; (8002644 <MX_TIM3_Init+0xc0>)
 8002624:	f7ff ff69 	bl	80024fa <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002628:	4806      	ldr	r0, [pc, #24]	; (8002644 <MX_TIM3_Init+0xc0>)
 800262a:	f7ff ff79 	bl	8002520 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM3);
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_TIM3_Init+0xc0>)
 8002630:	f7ff ff86 	bl	8002540 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002634:	4803      	ldr	r0, [pc, #12]	; (8002644 <MX_TIM3_Init+0xc0>)
 8002636:	f7ff fed9 	bl	80023ec <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	3738      	adds	r7, #56	; 0x38
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40000400 	.word	0x40000400

08002648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002680 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800264c:	480d      	ldr	r0, [pc, #52]	; (8002684 <LoopForever+0x6>)
  ldr r1, =_edata
 800264e:	490e      	ldr	r1, [pc, #56]	; (8002688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002650:	4a0e      	ldr	r2, [pc, #56]	; (800268c <LoopForever+0xe>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002654:	e002      	b.n	800265c <LoopCopyDataInit>

08002656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265a:	3304      	adds	r3, #4

0800265c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800265c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002660:	d3f9      	bcc.n	8002656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002664:	4c0b      	ldr	r4, [pc, #44]	; (8002694 <LoopForever+0x16>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002668:	e001      	b.n	800266e <LoopFillZerobss>

0800266a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800266c:	3204      	adds	r2, #4

0800266e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002670:	d3fb      	bcc.n	800266a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002672:	f7ff fdf7 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002676:	f001 f8e7 	bl	8003848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800267a:	f7ff fc81 	bl	8001f80 <main>

0800267e <LoopForever>:

LoopForever:
    b LoopForever
 800267e:	e7fe      	b.n	800267e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002680:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002688:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800268c:	080048f8 	.word	0x080048f8
  ldr r2, =_sbss
 8002690:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002694:	20000124 	.word	0x20000124

08002698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC1_2_IRQHandler>
	...

0800269c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <LL_EXTI_EnableIT_0_31+0x20>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4904      	ldr	r1, [pc, #16]	; (80026bc <LL_EXTI_EnableIT_0_31+0x20>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40010400 	.word	0x40010400

080026c0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80026ca:	6a1a      	ldr	r2, [r3, #32]
 80026cc:	4904      	ldr	r1, [pc, #16]	; (80026e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	620b      	str	r3, [r1, #32]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40010400 	.word	0x40010400

080026e4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <LL_EXTI_DisableIT_0_31+0x24>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	4904      	ldr	r1, [pc, #16]	; (8002708 <LL_EXTI_DisableIT_0_31+0x24>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40010400 	.word	0x40010400

0800270c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <LL_EXTI_DisableIT_32_63+0x24>)
 8002716:	6a1a      	ldr	r2, [r3, #32]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	43db      	mvns	r3, r3
 800271c:	4904      	ldr	r1, [pc, #16]	; (8002730 <LL_EXTI_DisableIT_32_63+0x24>)
 800271e:	4013      	ands	r3, r2
 8002720:	620b      	str	r3, [r1, #32]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40010400 	.word	0x40010400

08002734 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <LL_EXTI_EnableEvent_0_31+0x20>)
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4904      	ldr	r1, [pc, #16]	; (8002754 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]

}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	40010400 	.word	0x40010400

08002758 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002764:	4904      	ldr	r1, [pc, #16]	; (8002778 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4313      	orrs	r3, r2
 800276a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40010400 	.word	0x40010400

0800277c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	43db      	mvns	r3, r3
 800278c:	4904      	ldr	r1, [pc, #16]	; (80027a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800278e:	4013      	ands	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40010400 	.word	0x40010400

080027a4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80027ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	4904      	ldr	r1, [pc, #16]	; (80027c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40010400 	.word	0x40010400

080027cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	4904      	ldr	r1, [pc, #16]	; (80027ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40010400 	.word	0x40010400

080027f0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80027fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027fc:	4904      	ldr	r1, [pc, #16]	; (8002810 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4313      	orrs	r3, r2
 8002802:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40010400 	.word	0x40010400

08002814 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	43db      	mvns	r3, r3
 8002824:	4904      	ldr	r1, [pc, #16]	; (8002838 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002826:	4013      	ands	r3, r2
 8002828:	608b      	str	r3, [r1, #8]

}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40010400 	.word	0x40010400

0800283c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	43db      	mvns	r3, r3
 800284c:	4904      	ldr	r1, [pc, #16]	; (8002860 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800284e:	4013      	ands	r3, r2
 8002850:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40010400 	.word	0x40010400

08002864 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	4904      	ldr	r1, [pc, #16]	; (8002884 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4313      	orrs	r3, r2
 8002876:	60cb      	str	r3, [r1, #12]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40010400 	.word	0x40010400

08002888 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002894:	4904      	ldr	r1, [pc, #16]	; (80028a8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4313      	orrs	r3, r2
 800289a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40010400 	.word	0x40010400

080028ac <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	4904      	ldr	r1, [pc, #16]	; (80028d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80028be:	4013      	ands	r3, r2
 80028c0:	60cb      	str	r3, [r1, #12]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40010400 	.word	0x40010400

080028d4 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	4904      	ldr	r1, [pc, #16]	; (80028f8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40010400 	.word	0x40010400

080028fc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7a1b      	ldrb	r3, [r3, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80cd 	beq.w	8002aac <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d061      	beq.n	80029de <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7a5b      	ldrb	r3, [r3, #9]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d01c      	beq.n	800295c <LL_EXTI_Init+0x60>
 8002922:	2b02      	cmp	r3, #2
 8002924:	dc25      	bgt.n	8002972 <LL_EXTI_Init+0x76>
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <LL_EXTI_Init+0x34>
 800292a:	2b01      	cmp	r3, #1
 800292c:	d00b      	beq.n	8002946 <LL_EXTI_Init+0x4a>
 800292e:	e020      	b.n	8002972 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff21 	bl	800277c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff feac 	bl	800269c <LL_EXTI_EnableIT_0_31>
          break;
 8002944:	e018      	b.n	8002978 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff feca 	bl	80026e4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff feed 	bl	8002734 <LL_EXTI_EnableEvent_0_31>
          break;
 800295a:	e00d      	b.n	8002978 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fe9b 	bl	800269c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fee2 	bl	8002734 <LL_EXTI_EnableEvent_0_31>
          break;
 8002970:	e002      	b.n	8002978 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
          break;
 8002976:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7a9b      	ldrb	r3, [r3, #10]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02e      	beq.n	80029de <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7a9b      	ldrb	r3, [r3, #10]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d01c      	beq.n	80029c2 <LL_EXTI_Init+0xc6>
 8002988:	2b03      	cmp	r3, #3
 800298a:	dc25      	bgt.n	80029d8 <LL_EXTI_Init+0xdc>
 800298c:	2b01      	cmp	r3, #1
 800298e:	d002      	beq.n	8002996 <LL_EXTI_Init+0x9a>
 8002990:	2b02      	cmp	r3, #2
 8002992:	d00b      	beq.n	80029ac <LL_EXTI_Init+0xb0>
 8002994:	e020      	b.n	80029d8 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff86 	bl	80028ac <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff11 	bl	80027cc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80029aa:	e019      	b.n	80029e0 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff2f 	bl	8002814 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff52 	bl	8002864 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80029c0:	e00e      	b.n	80029e0 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ff00 	bl	80027cc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff47 	bl	8002864 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80029d6:	e003      	b.n	80029e0 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
            break;
 80029dc:	e000      	b.n	80029e0 <LL_EXTI_Init+0xe4>
        }
      }
 80029de:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d076      	beq.n	8002ad6 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7a5b      	ldrb	r3, [r3, #9]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d01c      	beq.n	8002a2a <LL_EXTI_Init+0x12e>
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	dc25      	bgt.n	8002a40 <LL_EXTI_Init+0x144>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <LL_EXTI_Init+0x102>
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d00b      	beq.n	8002a14 <LL_EXTI_Init+0x118>
 80029fc:	e020      	b.n	8002a40 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fece 	bl	80027a4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fe57 	bl	80026c0 <LL_EXTI_EnableIT_32_63>
          break;
 8002a12:	e018      	b.n	8002a46 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fe77 	bl	800270c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fe98 	bl	8002758 <LL_EXTI_EnableEvent_32_63>
          break;
 8002a28:	e00d      	b.n	8002a46 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fe46 	bl	80026c0 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fe8d 	bl	8002758 <LL_EXTI_EnableEvent_32_63>
          break;
 8002a3e:	e002      	b.n	8002a46 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
          break;
 8002a44:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7a9b      	ldrb	r3, [r3, #10]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d043      	beq.n	8002ad6 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7a9b      	ldrb	r3, [r3, #10]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d01c      	beq.n	8002a90 <LL_EXTI_Init+0x194>
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	dc25      	bgt.n	8002aa6 <LL_EXTI_Init+0x1aa>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d002      	beq.n	8002a64 <LL_EXTI_Init+0x168>
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d00b      	beq.n	8002a7a <LL_EXTI_Init+0x17e>
 8002a62:	e020      	b.n	8002aa6 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff33 	bl	80028d4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff febc 	bl	80027f0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002a78:	e02e      	b.n	8002ad8 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fedc 	bl	800283c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fefd 	bl	8002888 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002a8e:	e023      	b.n	8002ad8 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff feab 	bl	80027f0 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fef2 	bl	8002888 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002aa4:	e018      	b.n	8002ad8 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
            break;
 8002aaa:	e015      	b.n	8002ad8 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fe17 	bl	80026e4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fe5e 	bl	800277c <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fe21 	bl	800270c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fe68 	bl	80027a4 <LL_EXTI_DisableEvent_32_63>
 8002ad4:	e000      	b.n	8002ad8 <LL_EXTI_Init+0x1dc>
      }
 8002ad6:	bf00      	nop
#endif
  }
  return status;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <LL_GPIO_SetPinMode>:
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b089      	sub	sp, #36	; 0x24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	613b      	str	r3, [r7, #16]
  return result;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2103      	movs	r1, #3
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	401a      	ands	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	61bb      	str	r3, [r7, #24]
  return result;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	601a      	str	r2, [r3, #0]
}
 8002b34:	bf00      	nop
 8002b36:	3724      	adds	r7, #36	; 0x24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_GPIO_SetPinOutputType>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	401a      	ands	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	605a      	str	r2, [r3, #4]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_GPIO_SetPinSpeed>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	613b      	str	r3, [r7, #16]
  return result;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2103      	movs	r1, #3
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	61bb      	str	r3, [r7, #24]
  return result;
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	609a      	str	r2, [r3, #8]
}
 8002bc2:	bf00      	nop
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_GPIO_SetPinPull>:
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b089      	sub	sp, #36	; 0x24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	613b      	str	r3, [r7, #16]
  return result;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	2103      	movs	r1, #3
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	61bb      	str	r3, [r7, #24]
  return result;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	60da      	str	r2, [r3, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3724      	adds	r7, #36	; 0x24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_GPIO_SetAFPin_0_7>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	613b      	str	r3, [r7, #16]
  return result;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	210f      	movs	r1, #15
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	61bb      	str	r3, [r7, #24]
  return result;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	621a      	str	r2, [r3, #32]
}
 8002c7e:	bf00      	nop
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_GPIO_SetAFPin_8_15>:
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b089      	sub	sp, #36	; 0x24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	613b      	str	r3, [r7, #16]
  return result;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	210f      	movs	r1, #15
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	61bb      	str	r3, [r7, #24]
  return result;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ce0:	bf00      	nop
 8002ce2:	3724      	adds	r7, #36	; 0x24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	613b      	str	r3, [r7, #16]
  return result;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002d0e:	e051      	b.n	8002db4 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d043      	beq.n	8002dae <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d003      	beq.n	8002d36 <LL_GPIO_Init+0x4a>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d10e      	bne.n	8002d54 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	69b9      	ldr	r1, [r7, #24]
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ff16 	bl	8002b70 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff fef6 	bl	8002b40 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	69b9      	ldr	r1, [r7, #24]
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff36 	bl	8002bce <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d11a      	bne.n	8002da0 <LL_GPIO_Init+0xb4>
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	60bb      	str	r3, [r7, #8]
  return result;
 8002d76:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b07      	cmp	r3, #7
 8002d80:	d807      	bhi.n	8002d92 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	461a      	mov	r2, r3
 8002d88:	69b9      	ldr	r1, [r7, #24]
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ff4e 	bl	8002c2c <LL_GPIO_SetAFPin_0_7>
 8002d90:	e006      	b.n	8002da0 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	461a      	mov	r2, r3
 8002d98:	69b9      	ldr	r1, [r7, #24]
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ff75 	bl	8002c8a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	461a      	mov	r2, r3
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fe9a 	bl	8002ae2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3301      	adds	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1a6      	bne.n	8002d10 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <LL_I2C_Enable>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	601a      	str	r2, [r3, #0]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_I2C_Disable>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 0201 	bic.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	601a      	str	r2, [r3, #0]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_I2C_ConfigFilters>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0219      	lsls	r1, r3, #8
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	430b      	orrs	r3, r1
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	601a      	str	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_I2C_SetOwnAddress1>:
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e4e:	f023 0307 	bic.w	r3, r3, #7
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_I2C_EnableOwnAddress1>:
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_I2C_DisableOwnAddress1>:
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_I2C_SetTiming>:
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	611a      	str	r2, [r3, #16]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_I2C_SetMode>:
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	601a      	str	r2, [r3, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_I2C_AcknowledgeNextData>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	605a      	str	r2, [r3, #4]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff65 	bl	8002dec <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff6d 	bl	8002e0c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ffb6 	bl	8002eaa <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ff44 	bl	8002dcc <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ffa0 	bl	8002e8a <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6919      	ldr	r1, [r3, #16]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	461a      	mov	r2, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ff70 	bl	8002e3a <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ff81 	bl	8002e6a <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ffa9 	bl	8002ec6 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ffb6 	bl	8002eec <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <LL_TIM_SetPrescaler>:
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_TIM_SetAutoReload>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <LL_TIM_SetRepetitionCounter>:
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_TIM_OC_SetCompareCH1>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_TIM_OC_SetCompareCH2>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	639a      	str	r2, [r3, #56]	; 0x38
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_TIM_OC_SetCompareCH3>:
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <LL_TIM_OC_SetCompareCH4>:
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_TIM_OC_SetCompareCH5>:
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <LL_TIM_OC_SetCompareCH6>:
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	615a      	str	r2, [r3, #20]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a2f      	ldr	r2, [pc, #188]	; (800317c <LL_TIM_Init+0xd0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d007      	beq.n	80030d4 <LL_TIM_Init+0x28>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ca:	d003      	beq.n	80030d4 <LL_TIM_Init+0x28>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <LL_TIM_Init+0xd4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d106      	bne.n	80030e2 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a25      	ldr	r2, [pc, #148]	; (800317c <LL_TIM_Init+0xd0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <LL_TIM_Init+0x66>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d00f      	beq.n	8003112 <LL_TIM_Init+0x66>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a22      	ldr	r2, [pc, #136]	; (8003180 <LL_TIM_Init+0xd4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00b      	beq.n	8003112 <LL_TIM_Init+0x66>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a21      	ldr	r2, [pc, #132]	; (8003184 <LL_TIM_Init+0xd8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <LL_TIM_Init+0x66>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a20      	ldr	r2, [pc, #128]	; (8003188 <LL_TIM_Init+0xdc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <LL_TIM_Init+0x66>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <LL_TIM_Init+0xe0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d106      	bne.n	8003120 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff3a 	bl	8002fa6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ff26 	bl	8002f8a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a0e      	ldr	r2, [pc, #56]	; (800317c <LL_TIM_Init+0xd0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00b      	beq.n	800315e <LL_TIM_Init+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a0e      	ldr	r2, [pc, #56]	; (8003184 <LL_TIM_Init+0xd8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <LL_TIM_Init+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a0d      	ldr	r2, [pc, #52]	; (8003188 <LL_TIM_Init+0xdc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <LL_TIM_Init+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a0c      	ldr	r2, [pc, #48]	; (800318c <LL_TIM_Init+0xe0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d105      	bne.n	800316a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff2c 	bl	8002fc2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ff8d 	bl	800308a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400
 8003184:	40014000 	.word	0x40014000
 8003188:	40014400 	.word	0x40014400
 800318c:	40014800 	.word	0x40014800

08003190 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a6:	d045      	beq.n	8003234 <LL_TIM_OC_Init+0xa4>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ae:	d848      	bhi.n	8003242 <LL_TIM_OC_Init+0xb2>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b6:	d036      	beq.n	8003226 <LL_TIM_OC_Init+0x96>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031be:	d840      	bhi.n	8003242 <LL_TIM_OC_Init+0xb2>
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c6:	d027      	beq.n	8003218 <LL_TIM_OC_Init+0x88>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ce:	d838      	bhi.n	8003242 <LL_TIM_OC_Init+0xb2>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d6:	d018      	beq.n	800320a <LL_TIM_OC_Init+0x7a>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031de:	d830      	bhi.n	8003242 <LL_TIM_OC_Init+0xb2>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d003      	beq.n	80031ee <LL_TIM_OC_Init+0x5e>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d007      	beq.n	80031fc <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80031ec:	e029      	b.n	8003242 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f82d 	bl	8003250 <OC1Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	75fb      	strb	r3, [r7, #23]
      break;
 80031fa:	e023      	b.n	8003244 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f8a0 	bl	8003344 <OC2Config>
 8003204:	4603      	mov	r3, r0
 8003206:	75fb      	strb	r3, [r7, #23]
      break;
 8003208:	e01c      	b.n	8003244 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f917 	bl	8003440 <OC3Config>
 8003212:	4603      	mov	r3, r0
 8003214:	75fb      	strb	r3, [r7, #23]
      break;
 8003216:	e015      	b.n	8003244 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f98e 	bl	800353c <OC4Config>
 8003220:	4603      	mov	r3, r0
 8003222:	75fb      	strb	r3, [r7, #23]
      break;
 8003224:	e00e      	b.n	8003244 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f9ed 	bl	8003608 <OC5Config>
 800322e:	4603      	mov	r3, r0
 8003230:	75fb      	strb	r3, [r7, #23]
      break;
 8003232:	e007      	b.n	8003244 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fa44 	bl	80036c4 <OC6Config>
 800323c:	4603      	mov	r3, r0
 800323e:	75fb      	strb	r3, [r7, #23]
      break;
 8003240:	e000      	b.n	8003244 <LL_TIM_OC_Init+0xb4>
      break;
 8003242:	bf00      	nop
  }

  return result;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f023 0201 	bic.w	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f023 0202 	bic.w	r2, r3, #2
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f023 0201 	bic.w	r2, r3, #1
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a20      	ldr	r2, [pc, #128]	; (8003334 <OC1Config+0xe4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00b      	beq.n	80032ce <OC1Config+0x7e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <OC1Config+0xe8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <OC1Config+0x7e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1e      	ldr	r2, [pc, #120]	; (800333c <OC1Config+0xec>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <OC1Config+0x7e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <OC1Config+0xf0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d11e      	bne.n	800330c <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 0208 	bic.w	r2, r3, #8
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 0204 	bic.w	r2, r3, #4
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4619      	mov	r1, r3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff fe5d 	bl	8002fde <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800

08003344 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f023 0210 	bic.w	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800337a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	0212      	lsls	r2, r2, #8
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0220 	bic.w	r2, r3, #32
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f023 0210 	bic.w	r2, r3, #16
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a21      	ldr	r2, [pc, #132]	; (8003430 <OC2Config+0xec>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00b      	beq.n	80033c8 <OC2Config+0x84>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a20      	ldr	r2, [pc, #128]	; (8003434 <OC2Config+0xf0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d007      	beq.n	80033c8 <OC2Config+0x84>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <OC2Config+0xf4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d003      	beq.n	80033c8 <OC2Config+0x84>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a1e      	ldr	r2, [pc, #120]	; (800343c <OC2Config+0xf8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d11f      	bne.n	8003408 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	019b      	lsls	r3, r3, #6
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	019b      	lsls	r3, r3, #6
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff fded 	bl	8002ffa <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40014000 	.word	0x40014000
 8003438:	40014400 	.word	0x40014400
 800343c:	40014800 	.word	0x40014800

08003440 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a21      	ldr	r2, [pc, #132]	; (800352c <OC3Config+0xec>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00b      	beq.n	80034c2 <OC3Config+0x82>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a20      	ldr	r2, [pc, #128]	; (8003530 <OC3Config+0xf0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d007      	beq.n	80034c2 <OC3Config+0x82>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <OC3Config+0xf4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d003      	beq.n	80034c2 <OC3Config+0x82>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1e      	ldr	r2, [pc, #120]	; (8003538 <OC3Config+0xf8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d11f      	bne.n	8003502 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	029b      	lsls	r3, r3, #10
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	029b      	lsls	r3, r3, #10
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	015b      	lsls	r3, r3, #5
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	4619      	mov	r1, r3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff fd7e 	bl	8003016 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400
 8003538:	40014800 	.word	0x40014800

0800353c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	0212      	lsls	r2, r2, #8
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	031b      	lsls	r3, r3, #12
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	031b      	lsls	r3, r3, #12
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <OC4Config+0xbc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <OC4Config+0x84>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a14      	ldr	r2, [pc, #80]	; (80035fc <OC4Config+0xc0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <OC4Config+0x84>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a13      	ldr	r2, [pc, #76]	; (8003600 <OC4Config+0xc4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <OC4Config+0x84>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a12      	ldr	r2, [pc, #72]	; (8003604 <OC4Config+0xc8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d107      	bne.n	80035d0 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	019b      	lsls	r3, r3, #6
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff fd25 	bl	8003032 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40012c00 	.word	0x40012c00
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800

08003608 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	4313      	orrs	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	041b      	lsls	r3, r3, #16
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	041b      	lsls	r3, r3, #16
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <OC5Config+0xac>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00b      	beq.n	800367c <OC5Config+0x74>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <OC5Config+0xb0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d007      	beq.n	800367c <OC5Config+0x74>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a13      	ldr	r2, [pc, #76]	; (80036bc <OC5Config+0xb4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <OC5Config+0x74>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <OC5Config+0xb8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d109      	bne.n	8003690 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fcd6 	bl	800304e <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40014000 	.word	0x40014000
 80036bc:	40014400 	.word	0x40014400
 80036c0:	40014800 	.word	0x40014800

080036c4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	0212      	lsls	r2, r2, #8
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	051b      	lsls	r3, r3, #20
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	051b      	lsls	r3, r3, #20
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a14      	ldr	r2, [pc, #80]	; (8003770 <OC6Config+0xac>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <OC6Config+0x76>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a13      	ldr	r2, [pc, #76]	; (8003774 <OC6Config+0xb0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <OC6Config+0x76>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a12      	ldr	r2, [pc, #72]	; (8003778 <OC6Config+0xb4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <OC6Config+0x76>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a11      	ldr	r2, [pc, #68]	; (800377c <OC6Config+0xb8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d109      	bne.n	800374e <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	029b      	lsls	r3, r3, #10
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4619      	mov	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fc87 	bl	800306e <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40014000 	.word	0x40014000
 8003778:	40014400 	.word	0x40014400
 800377c:	40014800 	.word	0x40014800

08003780 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <LL_InitTick+0x30>)
 8003794:	3b01      	subs	r3, #1
 8003796:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <LL_InitTick+0x30>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <LL_InitTick+0x30>)
 80037a0:	2205      	movs	r2, #5
 80037a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000e010 	.word	0xe000e010

080037b4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80037bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ffdd 	bl	8003780 <LL_InitTick>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <LL_mDelay+0x48>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80037de:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d00c      	beq.n	8003802 <LL_mDelay+0x32>
  {
    Delay++;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3301      	adds	r3, #1
 80037ec:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80037ee:	e008      	b.n	8003802 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <LL_mDelay+0x48>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <LL_mDelay+0x32>
    {
      Delay--;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f3      	bne.n	80037f0 <LL_mDelay+0x20>
    }
  }
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000e010 	.word	0xe000e010

0800381c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <LL_SetSystemCoreClock+0x1c>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6013      	str	r3, [r2, #0]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000004 	.word	0x20000004

0800383c <__errno>:
 800383c:	4b01      	ldr	r3, [pc, #4]	; (8003844 <__errno+0x8>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000008 	.word	0x20000008

08003848 <__libc_init_array>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4d0d      	ldr	r5, [pc, #52]	; (8003880 <__libc_init_array+0x38>)
 800384c:	4c0d      	ldr	r4, [pc, #52]	; (8003884 <__libc_init_array+0x3c>)
 800384e:	1b64      	subs	r4, r4, r5
 8003850:	10a4      	asrs	r4, r4, #2
 8003852:	2600      	movs	r6, #0
 8003854:	42a6      	cmp	r6, r4
 8003856:	d109      	bne.n	800386c <__libc_init_array+0x24>
 8003858:	4d0b      	ldr	r5, [pc, #44]	; (8003888 <__libc_init_array+0x40>)
 800385a:	4c0c      	ldr	r4, [pc, #48]	; (800388c <__libc_init_array+0x44>)
 800385c:	f000 ffd6 	bl	800480c <_init>
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	10a4      	asrs	r4, r4, #2
 8003864:	2600      	movs	r6, #0
 8003866:	42a6      	cmp	r6, r4
 8003868:	d105      	bne.n	8003876 <__libc_init_array+0x2e>
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003870:	4798      	blx	r3
 8003872:	3601      	adds	r6, #1
 8003874:	e7ee      	b.n	8003854 <__libc_init_array+0xc>
 8003876:	f855 3b04 	ldr.w	r3, [r5], #4
 800387a:	4798      	blx	r3
 800387c:	3601      	adds	r6, #1
 800387e:	e7f2      	b.n	8003866 <__libc_init_array+0x1e>
 8003880:	080048f0 	.word	0x080048f0
 8003884:	080048f0 	.word	0x080048f0
 8003888:	080048f0 	.word	0x080048f0
 800388c:	080048f4 	.word	0x080048f4

08003890 <memset>:
 8003890:	4402      	add	r2, r0
 8003892:	4603      	mov	r3, r0
 8003894:	4293      	cmp	r3, r2
 8003896:	d100      	bne.n	800389a <memset+0xa>
 8003898:	4770      	bx	lr
 800389a:	f803 1b01 	strb.w	r1, [r3], #1
 800389e:	e7f9      	b.n	8003894 <memset+0x4>

080038a0 <pow>:
 80038a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038a4:	ec59 8b10 	vmov	r8, r9, d0
 80038a8:	ec57 6b11 	vmov	r6, r7, d1
 80038ac:	f000 f8a8 	bl	8003a00 <__ieee754_pow>
 80038b0:	4b4e      	ldr	r3, [pc, #312]	; (80039ec <pow+0x14c>)
 80038b2:	f993 3000 	ldrsb.w	r3, [r3]
 80038b6:	3301      	adds	r3, #1
 80038b8:	ec55 4b10 	vmov	r4, r5, d0
 80038bc:	d015      	beq.n	80038ea <pow+0x4a>
 80038be:	4632      	mov	r2, r6
 80038c0:	463b      	mov	r3, r7
 80038c2:	4630      	mov	r0, r6
 80038c4:	4639      	mov	r1, r7
 80038c6:	f7fd f8dd 	bl	8000a84 <__aeabi_dcmpun>
 80038ca:	b970      	cbnz	r0, 80038ea <pow+0x4a>
 80038cc:	4642      	mov	r2, r8
 80038ce:	464b      	mov	r3, r9
 80038d0:	4640      	mov	r0, r8
 80038d2:	4649      	mov	r1, r9
 80038d4:	f7fd f8d6 	bl	8000a84 <__aeabi_dcmpun>
 80038d8:	2200      	movs	r2, #0
 80038da:	2300      	movs	r3, #0
 80038dc:	b148      	cbz	r0, 80038f2 <pow+0x52>
 80038de:	4630      	mov	r0, r6
 80038e0:	4639      	mov	r1, r7
 80038e2:	f7fd f89d 	bl	8000a20 <__aeabi_dcmpeq>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d17d      	bne.n	80039e6 <pow+0x146>
 80038ea:	ec45 4b10 	vmov	d0, r4, r5
 80038ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038f2:	4640      	mov	r0, r8
 80038f4:	4649      	mov	r1, r9
 80038f6:	f7fd f893 	bl	8000a20 <__aeabi_dcmpeq>
 80038fa:	b1e0      	cbz	r0, 8003936 <pow+0x96>
 80038fc:	2200      	movs	r2, #0
 80038fe:	2300      	movs	r3, #0
 8003900:	4630      	mov	r0, r6
 8003902:	4639      	mov	r1, r7
 8003904:	f7fd f88c 	bl	8000a20 <__aeabi_dcmpeq>
 8003908:	2800      	cmp	r0, #0
 800390a:	d16c      	bne.n	80039e6 <pow+0x146>
 800390c:	ec47 6b10 	vmov	d0, r6, r7
 8003910:	f000 fe55 	bl	80045be <finite>
 8003914:	2800      	cmp	r0, #0
 8003916:	d0e8      	beq.n	80038ea <pow+0x4a>
 8003918:	2200      	movs	r2, #0
 800391a:	2300      	movs	r3, #0
 800391c:	4630      	mov	r0, r6
 800391e:	4639      	mov	r1, r7
 8003920:	f7fd f888 	bl	8000a34 <__aeabi_dcmplt>
 8003924:	2800      	cmp	r0, #0
 8003926:	d0e0      	beq.n	80038ea <pow+0x4a>
 8003928:	f7ff ff88 	bl	800383c <__errno>
 800392c:	2321      	movs	r3, #33	; 0x21
 800392e:	6003      	str	r3, [r0, #0]
 8003930:	2400      	movs	r4, #0
 8003932:	4d2f      	ldr	r5, [pc, #188]	; (80039f0 <pow+0x150>)
 8003934:	e7d9      	b.n	80038ea <pow+0x4a>
 8003936:	ec45 4b10 	vmov	d0, r4, r5
 800393a:	f000 fe40 	bl	80045be <finite>
 800393e:	bbb8      	cbnz	r0, 80039b0 <pow+0x110>
 8003940:	ec49 8b10 	vmov	d0, r8, r9
 8003944:	f000 fe3b 	bl	80045be <finite>
 8003948:	b390      	cbz	r0, 80039b0 <pow+0x110>
 800394a:	ec47 6b10 	vmov	d0, r6, r7
 800394e:	f000 fe36 	bl	80045be <finite>
 8003952:	b368      	cbz	r0, 80039b0 <pow+0x110>
 8003954:	4622      	mov	r2, r4
 8003956:	462b      	mov	r3, r5
 8003958:	4620      	mov	r0, r4
 800395a:	4629      	mov	r1, r5
 800395c:	f7fd f892 	bl	8000a84 <__aeabi_dcmpun>
 8003960:	b160      	cbz	r0, 800397c <pow+0xdc>
 8003962:	f7ff ff6b 	bl	800383c <__errno>
 8003966:	2321      	movs	r3, #33	; 0x21
 8003968:	6003      	str	r3, [r0, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	2300      	movs	r3, #0
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	f7fc ff17 	bl	80007a4 <__aeabi_ddiv>
 8003976:	4604      	mov	r4, r0
 8003978:	460d      	mov	r5, r1
 800397a:	e7b6      	b.n	80038ea <pow+0x4a>
 800397c:	f7ff ff5e 	bl	800383c <__errno>
 8003980:	2322      	movs	r3, #34	; 0x22
 8003982:	6003      	str	r3, [r0, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	2300      	movs	r3, #0
 8003988:	4640      	mov	r0, r8
 800398a:	4649      	mov	r1, r9
 800398c:	f7fd f852 	bl	8000a34 <__aeabi_dcmplt>
 8003990:	2400      	movs	r4, #0
 8003992:	b158      	cbz	r0, 80039ac <pow+0x10c>
 8003994:	ec47 6b10 	vmov	d0, r6, r7
 8003998:	f000 fe26 	bl	80045e8 <rint>
 800399c:	4632      	mov	r2, r6
 800399e:	ec51 0b10 	vmov	r0, r1, d0
 80039a2:	463b      	mov	r3, r7
 80039a4:	f7fd f83c 	bl	8000a20 <__aeabi_dcmpeq>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d0c2      	beq.n	8003932 <pow+0x92>
 80039ac:	4d11      	ldr	r5, [pc, #68]	; (80039f4 <pow+0x154>)
 80039ae:	e79c      	b.n	80038ea <pow+0x4a>
 80039b0:	2200      	movs	r2, #0
 80039b2:	2300      	movs	r3, #0
 80039b4:	4620      	mov	r0, r4
 80039b6:	4629      	mov	r1, r5
 80039b8:	f7fd f832 	bl	8000a20 <__aeabi_dcmpeq>
 80039bc:	2800      	cmp	r0, #0
 80039be:	d094      	beq.n	80038ea <pow+0x4a>
 80039c0:	ec49 8b10 	vmov	d0, r8, r9
 80039c4:	f000 fdfb 	bl	80045be <finite>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d08e      	beq.n	80038ea <pow+0x4a>
 80039cc:	ec47 6b10 	vmov	d0, r6, r7
 80039d0:	f000 fdf5 	bl	80045be <finite>
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d088      	beq.n	80038ea <pow+0x4a>
 80039d8:	f7ff ff30 	bl	800383c <__errno>
 80039dc:	2322      	movs	r3, #34	; 0x22
 80039de:	6003      	str	r3, [r0, #0]
 80039e0:	2400      	movs	r4, #0
 80039e2:	2500      	movs	r5, #0
 80039e4:	e781      	b.n	80038ea <pow+0x4a>
 80039e6:	4d04      	ldr	r5, [pc, #16]	; (80039f8 <pow+0x158>)
 80039e8:	2400      	movs	r4, #0
 80039ea:	e77e      	b.n	80038ea <pow+0x4a>
 80039ec:	2000006c 	.word	0x2000006c
 80039f0:	fff00000 	.word	0xfff00000
 80039f4:	7ff00000 	.word	0x7ff00000
 80039f8:	3ff00000 	.word	0x3ff00000
 80039fc:	00000000 	.word	0x00000000

08003a00 <__ieee754_pow>:
 8003a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a04:	ed2d 8b06 	vpush	{d8-d10}
 8003a08:	b08d      	sub	sp, #52	; 0x34
 8003a0a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003a0e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8003a12:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003a16:	ea56 0100 	orrs.w	r1, r6, r0
 8003a1a:	ec53 2b10 	vmov	r2, r3, d0
 8003a1e:	f000 84d1 	beq.w	80043c4 <__ieee754_pow+0x9c4>
 8003a22:	497f      	ldr	r1, [pc, #508]	; (8003c20 <__ieee754_pow+0x220>)
 8003a24:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8003a28:	428c      	cmp	r4, r1
 8003a2a:	ee10 8a10 	vmov	r8, s0
 8003a2e:	4699      	mov	r9, r3
 8003a30:	dc09      	bgt.n	8003a46 <__ieee754_pow+0x46>
 8003a32:	d103      	bne.n	8003a3c <__ieee754_pow+0x3c>
 8003a34:	b97a      	cbnz	r2, 8003a56 <__ieee754_pow+0x56>
 8003a36:	42a6      	cmp	r6, r4
 8003a38:	dd02      	ble.n	8003a40 <__ieee754_pow+0x40>
 8003a3a:	e00c      	b.n	8003a56 <__ieee754_pow+0x56>
 8003a3c:	428e      	cmp	r6, r1
 8003a3e:	dc02      	bgt.n	8003a46 <__ieee754_pow+0x46>
 8003a40:	428e      	cmp	r6, r1
 8003a42:	d110      	bne.n	8003a66 <__ieee754_pow+0x66>
 8003a44:	b178      	cbz	r0, 8003a66 <__ieee754_pow+0x66>
 8003a46:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003a4a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003a4e:	ea54 0308 	orrs.w	r3, r4, r8
 8003a52:	f000 84b7 	beq.w	80043c4 <__ieee754_pow+0x9c4>
 8003a56:	4873      	ldr	r0, [pc, #460]	; (8003c24 <__ieee754_pow+0x224>)
 8003a58:	b00d      	add	sp, #52	; 0x34
 8003a5a:	ecbd 8b06 	vpop	{d8-d10}
 8003a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a62:	f000 bdb9 	b.w	80045d8 <nan>
 8003a66:	f1b9 0f00 	cmp.w	r9, #0
 8003a6a:	da36      	bge.n	8003ada <__ieee754_pow+0xda>
 8003a6c:	496e      	ldr	r1, [pc, #440]	; (8003c28 <__ieee754_pow+0x228>)
 8003a6e:	428e      	cmp	r6, r1
 8003a70:	dc51      	bgt.n	8003b16 <__ieee754_pow+0x116>
 8003a72:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8003a76:	428e      	cmp	r6, r1
 8003a78:	f340 84af 	ble.w	80043da <__ieee754_pow+0x9da>
 8003a7c:	1531      	asrs	r1, r6, #20
 8003a7e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003a82:	2914      	cmp	r1, #20
 8003a84:	dd0f      	ble.n	8003aa6 <__ieee754_pow+0xa6>
 8003a86:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8003a8a:	fa20 fc01 	lsr.w	ip, r0, r1
 8003a8e:	fa0c f101 	lsl.w	r1, ip, r1
 8003a92:	4281      	cmp	r1, r0
 8003a94:	f040 84a1 	bne.w	80043da <__ieee754_pow+0x9da>
 8003a98:	f00c 0c01 	and.w	ip, ip, #1
 8003a9c:	f1cc 0102 	rsb	r1, ip, #2
 8003aa0:	9100      	str	r1, [sp, #0]
 8003aa2:	b180      	cbz	r0, 8003ac6 <__ieee754_pow+0xc6>
 8003aa4:	e059      	b.n	8003b5a <__ieee754_pow+0x15a>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d155      	bne.n	8003b56 <__ieee754_pow+0x156>
 8003aaa:	f1c1 0114 	rsb	r1, r1, #20
 8003aae:	fa46 fc01 	asr.w	ip, r6, r1
 8003ab2:	fa0c f101 	lsl.w	r1, ip, r1
 8003ab6:	42b1      	cmp	r1, r6
 8003ab8:	f040 848c 	bne.w	80043d4 <__ieee754_pow+0x9d4>
 8003abc:	f00c 0c01 	and.w	ip, ip, #1
 8003ac0:	f1cc 0102 	rsb	r1, ip, #2
 8003ac4:	9100      	str	r1, [sp, #0]
 8003ac6:	4959      	ldr	r1, [pc, #356]	; (8003c2c <__ieee754_pow+0x22c>)
 8003ac8:	428e      	cmp	r6, r1
 8003aca:	d12d      	bne.n	8003b28 <__ieee754_pow+0x128>
 8003acc:	2f00      	cmp	r7, #0
 8003ace:	da79      	bge.n	8003bc4 <__ieee754_pow+0x1c4>
 8003ad0:	4956      	ldr	r1, [pc, #344]	; (8003c2c <__ieee754_pow+0x22c>)
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f7fc fe66 	bl	80007a4 <__aeabi_ddiv>
 8003ad8:	e016      	b.n	8003b08 <__ieee754_pow+0x108>
 8003ada:	2100      	movs	r1, #0
 8003adc:	9100      	str	r1, [sp, #0]
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d13b      	bne.n	8003b5a <__ieee754_pow+0x15a>
 8003ae2:	494f      	ldr	r1, [pc, #316]	; (8003c20 <__ieee754_pow+0x220>)
 8003ae4:	428e      	cmp	r6, r1
 8003ae6:	d1ee      	bne.n	8003ac6 <__ieee754_pow+0xc6>
 8003ae8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003aec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003af0:	ea53 0308 	orrs.w	r3, r3, r8
 8003af4:	f000 8466 	beq.w	80043c4 <__ieee754_pow+0x9c4>
 8003af8:	4b4d      	ldr	r3, [pc, #308]	; (8003c30 <__ieee754_pow+0x230>)
 8003afa:	429c      	cmp	r4, r3
 8003afc:	dd0d      	ble.n	8003b1a <__ieee754_pow+0x11a>
 8003afe:	2f00      	cmp	r7, #0
 8003b00:	f280 8464 	bge.w	80043cc <__ieee754_pow+0x9cc>
 8003b04:	2000      	movs	r0, #0
 8003b06:	2100      	movs	r1, #0
 8003b08:	ec41 0b10 	vmov	d0, r0, r1
 8003b0c:	b00d      	add	sp, #52	; 0x34
 8003b0e:	ecbd 8b06 	vpop	{d8-d10}
 8003b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b16:	2102      	movs	r1, #2
 8003b18:	e7e0      	b.n	8003adc <__ieee754_pow+0xdc>
 8003b1a:	2f00      	cmp	r7, #0
 8003b1c:	daf2      	bge.n	8003b04 <__ieee754_pow+0x104>
 8003b1e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8003b22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003b26:	e7ef      	b.n	8003b08 <__ieee754_pow+0x108>
 8003b28:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003b2c:	d104      	bne.n	8003b38 <__ieee754_pow+0x138>
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	f7fc fd0d 	bl	8000550 <__aeabi_dmul>
 8003b36:	e7e7      	b.n	8003b08 <__ieee754_pow+0x108>
 8003b38:	493e      	ldr	r1, [pc, #248]	; (8003c34 <__ieee754_pow+0x234>)
 8003b3a:	428f      	cmp	r7, r1
 8003b3c:	d10d      	bne.n	8003b5a <__ieee754_pow+0x15a>
 8003b3e:	f1b9 0f00 	cmp.w	r9, #0
 8003b42:	db0a      	blt.n	8003b5a <__ieee754_pow+0x15a>
 8003b44:	ec43 2b10 	vmov	d0, r2, r3
 8003b48:	b00d      	add	sp, #52	; 0x34
 8003b4a:	ecbd 8b06 	vpop	{d8-d10}
 8003b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b52:	f000 bc77 	b.w	8004444 <__ieee754_sqrt>
 8003b56:	2100      	movs	r1, #0
 8003b58:	9100      	str	r1, [sp, #0]
 8003b5a:	ec43 2b10 	vmov	d0, r2, r3
 8003b5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b62:	f000 fd23 	bl	80045ac <fabs>
 8003b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b6a:	ec51 0b10 	vmov	r0, r1, d0
 8003b6e:	f1b8 0f00 	cmp.w	r8, #0
 8003b72:	d12a      	bne.n	8003bca <__ieee754_pow+0x1ca>
 8003b74:	b12c      	cbz	r4, 8003b82 <__ieee754_pow+0x182>
 8003b76:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8003c2c <__ieee754_pow+0x22c>
 8003b7a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8003b7e:	45e6      	cmp	lr, ip
 8003b80:	d123      	bne.n	8003bca <__ieee754_pow+0x1ca>
 8003b82:	2f00      	cmp	r7, #0
 8003b84:	da05      	bge.n	8003b92 <__ieee754_pow+0x192>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	4927      	ldr	r1, [pc, #156]	; (8003c2c <__ieee754_pow+0x22c>)
 8003b8e:	f7fc fe09 	bl	80007a4 <__aeabi_ddiv>
 8003b92:	f1b9 0f00 	cmp.w	r9, #0
 8003b96:	dab7      	bge.n	8003b08 <__ieee754_pow+0x108>
 8003b98:	9b00      	ldr	r3, [sp, #0]
 8003b9a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003b9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003ba2:	4323      	orrs	r3, r4
 8003ba4:	d108      	bne.n	8003bb8 <__ieee754_pow+0x1b8>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4610      	mov	r0, r2
 8003bac:	4619      	mov	r1, r3
 8003bae:	f7fc fb17 	bl	80001e0 <__aeabi_dsub>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	e78d      	b.n	8003ad4 <__ieee754_pow+0xd4>
 8003bb8:	9b00      	ldr	r3, [sp, #0]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d1a4      	bne.n	8003b08 <__ieee754_pow+0x108>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	e79e      	b.n	8003b08 <__ieee754_pow+0x108>
 8003bca:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8003bce:	f10c 35ff 	add.w	r5, ip, #4294967295
 8003bd2:	950a      	str	r5, [sp, #40]	; 0x28
 8003bd4:	9d00      	ldr	r5, [sp, #0]
 8003bd6:	46ac      	mov	ip, r5
 8003bd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003bda:	ea5c 0505 	orrs.w	r5, ip, r5
 8003bde:	d0e4      	beq.n	8003baa <__ieee754_pow+0x1aa>
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <__ieee754_pow+0x238>)
 8003be2:	429e      	cmp	r6, r3
 8003be4:	f340 80fc 	ble.w	8003de0 <__ieee754_pow+0x3e0>
 8003be8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003bec:	429e      	cmp	r6, r3
 8003bee:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <__ieee754_pow+0x230>)
 8003bf0:	dd07      	ble.n	8003c02 <__ieee754_pow+0x202>
 8003bf2:	429c      	cmp	r4, r3
 8003bf4:	dc0a      	bgt.n	8003c0c <__ieee754_pow+0x20c>
 8003bf6:	2f00      	cmp	r7, #0
 8003bf8:	da84      	bge.n	8003b04 <__ieee754_pow+0x104>
 8003bfa:	a307      	add	r3, pc, #28	; (adr r3, 8003c18 <__ieee754_pow+0x218>)
 8003bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c00:	e795      	b.n	8003b2e <__ieee754_pow+0x12e>
 8003c02:	429c      	cmp	r4, r3
 8003c04:	dbf7      	blt.n	8003bf6 <__ieee754_pow+0x1f6>
 8003c06:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <__ieee754_pow+0x22c>)
 8003c08:	429c      	cmp	r4, r3
 8003c0a:	dd17      	ble.n	8003c3c <__ieee754_pow+0x23c>
 8003c0c:	2f00      	cmp	r7, #0
 8003c0e:	dcf4      	bgt.n	8003bfa <__ieee754_pow+0x1fa>
 8003c10:	e778      	b.n	8003b04 <__ieee754_pow+0x104>
 8003c12:	bf00      	nop
 8003c14:	f3af 8000 	nop.w
 8003c18:	8800759c 	.word	0x8800759c
 8003c1c:	7e37e43c 	.word	0x7e37e43c
 8003c20:	7ff00000 	.word	0x7ff00000
 8003c24:	080048a9 	.word	0x080048a9
 8003c28:	433fffff 	.word	0x433fffff
 8003c2c:	3ff00000 	.word	0x3ff00000
 8003c30:	3fefffff 	.word	0x3fefffff
 8003c34:	3fe00000 	.word	0x3fe00000
 8003c38:	41e00000 	.word	0x41e00000
 8003c3c:	4b64      	ldr	r3, [pc, #400]	; (8003dd0 <__ieee754_pow+0x3d0>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f7fc face 	bl	80001e0 <__aeabi_dsub>
 8003c44:	a356      	add	r3, pc, #344	; (adr r3, 8003da0 <__ieee754_pow+0x3a0>)
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	460d      	mov	r5, r1
 8003c4e:	f7fc fc7f 	bl	8000550 <__aeabi_dmul>
 8003c52:	a355      	add	r3, pc, #340	; (adr r3, 8003da8 <__ieee754_pow+0x3a8>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	4606      	mov	r6, r0
 8003c5a:	460f      	mov	r7, r1
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	4629      	mov	r1, r5
 8003c60:	f7fc fc76 	bl	8000550 <__aeabi_dmul>
 8003c64:	4b5b      	ldr	r3, [pc, #364]	; (8003dd4 <__ieee754_pow+0x3d4>)
 8003c66:	4682      	mov	sl, r0
 8003c68:	468b      	mov	fp, r1
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	4629      	mov	r1, r5
 8003c70:	f7fc fc6e 	bl	8000550 <__aeabi_dmul>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	a14d      	add	r1, pc, #308	; (adr r1, 8003db0 <__ieee754_pow+0x3b0>)
 8003c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c7e:	f7fc faaf 	bl	80001e0 <__aeabi_dsub>
 8003c82:	4622      	mov	r2, r4
 8003c84:	462b      	mov	r3, r5
 8003c86:	f7fc fc63 	bl	8000550 <__aeabi_dmul>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	2000      	movs	r0, #0
 8003c90:	4951      	ldr	r1, [pc, #324]	; (8003dd8 <__ieee754_pow+0x3d8>)
 8003c92:	f7fc faa5 	bl	80001e0 <__aeabi_dsub>
 8003c96:	4622      	mov	r2, r4
 8003c98:	4680      	mov	r8, r0
 8003c9a:	4689      	mov	r9, r1
 8003c9c:	462b      	mov	r3, r5
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	f7fc fc55 	bl	8000550 <__aeabi_dmul>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4640      	mov	r0, r8
 8003cac:	4649      	mov	r1, r9
 8003cae:	f7fc fc4f 	bl	8000550 <__aeabi_dmul>
 8003cb2:	a341      	add	r3, pc, #260	; (adr r3, 8003db8 <__ieee754_pow+0x3b8>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fc fc4a 	bl	8000550 <__aeabi_dmul>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4650      	mov	r0, sl
 8003cc2:	4659      	mov	r1, fp
 8003cc4:	f7fc fa8c 	bl	80001e0 <__aeabi_dsub>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4680      	mov	r8, r0
 8003cce:	4689      	mov	r9, r1
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	4639      	mov	r1, r7
 8003cd4:	f7fc fa86 	bl	80001e4 <__adddf3>
 8003cd8:	2400      	movs	r4, #0
 8003cda:	4632      	mov	r2, r6
 8003cdc:	463b      	mov	r3, r7
 8003cde:	4620      	mov	r0, r4
 8003ce0:	460d      	mov	r5, r1
 8003ce2:	f7fc fa7d 	bl	80001e0 <__aeabi_dsub>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4640      	mov	r0, r8
 8003cec:	4649      	mov	r1, r9
 8003cee:	f7fc fa77 	bl	80001e0 <__aeabi_dsub>
 8003cf2:	9b00      	ldr	r3, [sp, #0]
 8003cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	4682      	mov	sl, r0
 8003cfc:	468b      	mov	fp, r1
 8003cfe:	f040 81f1 	bne.w	80040e4 <__ieee754_pow+0x6e4>
 8003d02:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8003dc0 <__ieee754_pow+0x3c0>
 8003d06:	eeb0 8a47 	vmov.f32	s16, s14
 8003d0a:	eef0 8a67 	vmov.f32	s17, s15
 8003d0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003d12:	2600      	movs	r6, #0
 8003d14:	4632      	mov	r2, r6
 8003d16:	463b      	mov	r3, r7
 8003d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d1c:	f7fc fa60 	bl	80001e0 <__aeabi_dsub>
 8003d20:	4622      	mov	r2, r4
 8003d22:	462b      	mov	r3, r5
 8003d24:	f7fc fc14 	bl	8000550 <__aeabi_dmul>
 8003d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d2c:	4680      	mov	r8, r0
 8003d2e:	4689      	mov	r9, r1
 8003d30:	4650      	mov	r0, sl
 8003d32:	4659      	mov	r1, fp
 8003d34:	f7fc fc0c 	bl	8000550 <__aeabi_dmul>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	4649      	mov	r1, r9
 8003d40:	f7fc fa50 	bl	80001e4 <__adddf3>
 8003d44:	4632      	mov	r2, r6
 8003d46:	463b      	mov	r3, r7
 8003d48:	4680      	mov	r8, r0
 8003d4a:	4689      	mov	r9, r1
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	4629      	mov	r1, r5
 8003d50:	f7fc fbfe 	bl	8000550 <__aeabi_dmul>
 8003d54:	460b      	mov	r3, r1
 8003d56:	4604      	mov	r4, r0
 8003d58:	460d      	mov	r5, r1
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4649      	mov	r1, r9
 8003d5e:	4640      	mov	r0, r8
 8003d60:	f7fc fa40 	bl	80001e4 <__adddf3>
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <__ieee754_pow+0x3dc>)
 8003d66:	4299      	cmp	r1, r3
 8003d68:	ec45 4b19 	vmov	d9, r4, r5
 8003d6c:	4606      	mov	r6, r0
 8003d6e:	460f      	mov	r7, r1
 8003d70:	468b      	mov	fp, r1
 8003d72:	f340 82fe 	ble.w	8004372 <__ieee754_pow+0x972>
 8003d76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003d7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003d7e:	4303      	orrs	r3, r0
 8003d80:	f000 81f0 	beq.w	8004164 <__ieee754_pow+0x764>
 8003d84:	a310      	add	r3, pc, #64	; (adr r3, 8003dc8 <__ieee754_pow+0x3c8>)
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	ec51 0b18 	vmov	r0, r1, d8
 8003d8e:	f7fc fbdf 	bl	8000550 <__aeabi_dmul>
 8003d92:	a30d      	add	r3, pc, #52	; (adr r3, 8003dc8 <__ieee754_pow+0x3c8>)
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	e6cb      	b.n	8003b32 <__ieee754_pow+0x132>
 8003d9a:	bf00      	nop
 8003d9c:	f3af 8000 	nop.w
 8003da0:	60000000 	.word	0x60000000
 8003da4:	3ff71547 	.word	0x3ff71547
 8003da8:	f85ddf44 	.word	0xf85ddf44
 8003dac:	3e54ae0b 	.word	0x3e54ae0b
 8003db0:	55555555 	.word	0x55555555
 8003db4:	3fd55555 	.word	0x3fd55555
 8003db8:	652b82fe 	.word	0x652b82fe
 8003dbc:	3ff71547 	.word	0x3ff71547
 8003dc0:	00000000 	.word	0x00000000
 8003dc4:	bff00000 	.word	0xbff00000
 8003dc8:	8800759c 	.word	0x8800759c
 8003dcc:	7e37e43c 	.word	0x7e37e43c
 8003dd0:	3ff00000 	.word	0x3ff00000
 8003dd4:	3fd00000 	.word	0x3fd00000
 8003dd8:	3fe00000 	.word	0x3fe00000
 8003ddc:	408fffff 	.word	0x408fffff
 8003de0:	4bd7      	ldr	r3, [pc, #860]	; (8004140 <__ieee754_pow+0x740>)
 8003de2:	ea03 0309 	and.w	r3, r3, r9
 8003de6:	2200      	movs	r2, #0
 8003de8:	b92b      	cbnz	r3, 8003df6 <__ieee754_pow+0x3f6>
 8003dea:	4bd6      	ldr	r3, [pc, #856]	; (8004144 <__ieee754_pow+0x744>)
 8003dec:	f7fc fbb0 	bl	8000550 <__aeabi_dmul>
 8003df0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003df4:	460c      	mov	r4, r1
 8003df6:	1523      	asrs	r3, r4, #20
 8003df8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003dfc:	4413      	add	r3, r2
 8003dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8003e00:	4bd1      	ldr	r3, [pc, #836]	; (8004148 <__ieee754_pow+0x748>)
 8003e02:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003e06:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003e0a:	429c      	cmp	r4, r3
 8003e0c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003e10:	dd08      	ble.n	8003e24 <__ieee754_pow+0x424>
 8003e12:	4bce      	ldr	r3, [pc, #824]	; (800414c <__ieee754_pow+0x74c>)
 8003e14:	429c      	cmp	r4, r3
 8003e16:	f340 8163 	ble.w	80040e0 <__ieee754_pow+0x6e0>
 8003e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e20:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003e24:	2400      	movs	r4, #0
 8003e26:	00e3      	lsls	r3, r4, #3
 8003e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e2a:	4bc9      	ldr	r3, [pc, #804]	; (8004150 <__ieee754_pow+0x750>)
 8003e2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003e30:	ed93 7b00 	vldr	d7, [r3]
 8003e34:	4629      	mov	r1, r5
 8003e36:	ec53 2b17 	vmov	r2, r3, d7
 8003e3a:	eeb0 8a47 	vmov.f32	s16, s14
 8003e3e:	eef0 8a67 	vmov.f32	s17, s15
 8003e42:	4682      	mov	sl, r0
 8003e44:	f7fc f9cc 	bl	80001e0 <__aeabi_dsub>
 8003e48:	4652      	mov	r2, sl
 8003e4a:	4606      	mov	r6, r0
 8003e4c:	460f      	mov	r7, r1
 8003e4e:	462b      	mov	r3, r5
 8003e50:	ec51 0b18 	vmov	r0, r1, d8
 8003e54:	f7fc f9c6 	bl	80001e4 <__adddf3>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	49bd      	ldr	r1, [pc, #756]	; (8004154 <__ieee754_pow+0x754>)
 8003e60:	f7fc fca0 	bl	80007a4 <__aeabi_ddiv>
 8003e64:	ec41 0b19 	vmov	d9, r0, r1
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	4639      	mov	r1, r7
 8003e70:	f7fc fb6e 	bl	8000550 <__aeabi_dmul>
 8003e74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003e78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e80:	2300      	movs	r3, #0
 8003e82:	9304      	str	r3, [sp, #16]
 8003e84:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003e88:	46ab      	mov	fp, r5
 8003e8a:	106d      	asrs	r5, r5, #1
 8003e8c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003e90:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003e94:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8003e98:	2200      	movs	r2, #0
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	4614      	mov	r4, r2
 8003ea0:	461d      	mov	r5, r3
 8003ea2:	f7fc fb55 	bl	8000550 <__aeabi_dmul>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4630      	mov	r0, r6
 8003eac:	4639      	mov	r1, r7
 8003eae:	f7fc f997 	bl	80001e0 <__aeabi_dsub>
 8003eb2:	ec53 2b18 	vmov	r2, r3, d8
 8003eb6:	4606      	mov	r6, r0
 8003eb8:	460f      	mov	r7, r1
 8003eba:	4620      	mov	r0, r4
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	f7fc f98f 	bl	80001e0 <__aeabi_dsub>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4650      	mov	r0, sl
 8003ec8:	4659      	mov	r1, fp
 8003eca:	f7fc f989 	bl	80001e0 <__aeabi_dsub>
 8003ece:	4642      	mov	r2, r8
 8003ed0:	464b      	mov	r3, r9
 8003ed2:	f7fc fb3d 	bl	8000550 <__aeabi_dmul>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4630      	mov	r0, r6
 8003edc:	4639      	mov	r1, r7
 8003ede:	f7fc f97f 	bl	80001e0 <__aeabi_dsub>
 8003ee2:	ec53 2b19 	vmov	r2, r3, d9
 8003ee6:	f7fc fb33 	bl	8000550 <__aeabi_dmul>
 8003eea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003eee:	ec41 0b18 	vmov	d8, r0, r1
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f7fc fb2b 	bl	8000550 <__aeabi_dmul>
 8003efa:	a37d      	add	r3, pc, #500	; (adr r3, 80040f0 <__ieee754_pow+0x6f0>)
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	4604      	mov	r4, r0
 8003f02:	460d      	mov	r5, r1
 8003f04:	f7fc fb24 	bl	8000550 <__aeabi_dmul>
 8003f08:	a37b      	add	r3, pc, #492	; (adr r3, 80040f8 <__ieee754_pow+0x6f8>)
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	f7fc f969 	bl	80001e4 <__adddf3>
 8003f12:	4622      	mov	r2, r4
 8003f14:	462b      	mov	r3, r5
 8003f16:	f7fc fb1b 	bl	8000550 <__aeabi_dmul>
 8003f1a:	a379      	add	r3, pc, #484	; (adr r3, 8004100 <__ieee754_pow+0x700>)
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f7fc f960 	bl	80001e4 <__adddf3>
 8003f24:	4622      	mov	r2, r4
 8003f26:	462b      	mov	r3, r5
 8003f28:	f7fc fb12 	bl	8000550 <__aeabi_dmul>
 8003f2c:	a376      	add	r3, pc, #472	; (adr r3, 8004108 <__ieee754_pow+0x708>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f7fc f957 	bl	80001e4 <__adddf3>
 8003f36:	4622      	mov	r2, r4
 8003f38:	462b      	mov	r3, r5
 8003f3a:	f7fc fb09 	bl	8000550 <__aeabi_dmul>
 8003f3e:	a374      	add	r3, pc, #464	; (adr r3, 8004110 <__ieee754_pow+0x710>)
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f7fc f94e 	bl	80001e4 <__adddf3>
 8003f48:	4622      	mov	r2, r4
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	f7fc fb00 	bl	8000550 <__aeabi_dmul>
 8003f50:	a371      	add	r3, pc, #452	; (adr r3, 8004118 <__ieee754_pow+0x718>)
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f7fc f945 	bl	80001e4 <__adddf3>
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	460f      	mov	r7, r1
 8003f60:	462b      	mov	r3, r5
 8003f62:	4620      	mov	r0, r4
 8003f64:	4629      	mov	r1, r5
 8003f66:	f7fc faf3 	bl	8000550 <__aeabi_dmul>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4630      	mov	r0, r6
 8003f70:	4639      	mov	r1, r7
 8003f72:	f7fc faed 	bl	8000550 <__aeabi_dmul>
 8003f76:	4642      	mov	r2, r8
 8003f78:	4604      	mov	r4, r0
 8003f7a:	460d      	mov	r5, r1
 8003f7c:	464b      	mov	r3, r9
 8003f7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f82:	f7fc f92f 	bl	80001e4 <__adddf3>
 8003f86:	ec53 2b18 	vmov	r2, r3, d8
 8003f8a:	f7fc fae1 	bl	8000550 <__aeabi_dmul>
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	f7fc f927 	bl	80001e4 <__adddf3>
 8003f96:	4642      	mov	r2, r8
 8003f98:	4682      	mov	sl, r0
 8003f9a:	468b      	mov	fp, r1
 8003f9c:	464b      	mov	r3, r9
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	f7fc fad5 	bl	8000550 <__aeabi_dmul>
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <__ieee754_pow+0x758>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4606      	mov	r6, r0
 8003fac:	460f      	mov	r7, r1
 8003fae:	f7fc f919 	bl	80001e4 <__adddf3>
 8003fb2:	4652      	mov	r2, sl
 8003fb4:	465b      	mov	r3, fp
 8003fb6:	f7fc f915 	bl	80001e4 <__adddf3>
 8003fba:	9c04      	ldr	r4, [sp, #16]
 8003fbc:	460d      	mov	r5, r1
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	f7fc fac3 	bl	8000550 <__aeabi_dmul>
 8003fca:	4b63      	ldr	r3, [pc, #396]	; (8004158 <__ieee754_pow+0x758>)
 8003fcc:	4680      	mov	r8, r0
 8003fce:	4689      	mov	r9, r1
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	f7fc f903 	bl	80001e0 <__aeabi_dsub>
 8003fda:	4632      	mov	r2, r6
 8003fdc:	463b      	mov	r3, r7
 8003fde:	f7fc f8ff 	bl	80001e0 <__aeabi_dsub>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4650      	mov	r0, sl
 8003fe8:	4659      	mov	r1, fp
 8003fea:	f7fc f8f9 	bl	80001e0 <__aeabi_dsub>
 8003fee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ff2:	f7fc faad 	bl	8000550 <__aeabi_dmul>
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	460f      	mov	r7, r1
 8003ffc:	462b      	mov	r3, r5
 8003ffe:	ec51 0b18 	vmov	r0, r1, d8
 8004002:	f7fc faa5 	bl	8000550 <__aeabi_dmul>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4630      	mov	r0, r6
 800400c:	4639      	mov	r1, r7
 800400e:	f7fc f8e9 	bl	80001e4 <__adddf3>
 8004012:	4606      	mov	r6, r0
 8004014:	460f      	mov	r7, r1
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4640      	mov	r0, r8
 800401c:	4649      	mov	r1, r9
 800401e:	f7fc f8e1 	bl	80001e4 <__adddf3>
 8004022:	9c04      	ldr	r4, [sp, #16]
 8004024:	a33e      	add	r3, pc, #248	; (adr r3, 8004120 <__ieee754_pow+0x720>)
 8004026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402a:	4620      	mov	r0, r4
 800402c:	460d      	mov	r5, r1
 800402e:	f7fc fa8f 	bl	8000550 <__aeabi_dmul>
 8004032:	4642      	mov	r2, r8
 8004034:	ec41 0b18 	vmov	d8, r0, r1
 8004038:	464b      	mov	r3, r9
 800403a:	4620      	mov	r0, r4
 800403c:	4629      	mov	r1, r5
 800403e:	f7fc f8cf 	bl	80001e0 <__aeabi_dsub>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4630      	mov	r0, r6
 8004048:	4639      	mov	r1, r7
 800404a:	f7fc f8c9 	bl	80001e0 <__aeabi_dsub>
 800404e:	a336      	add	r3, pc, #216	; (adr r3, 8004128 <__ieee754_pow+0x728>)
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	f7fc fa7c 	bl	8000550 <__aeabi_dmul>
 8004058:	a335      	add	r3, pc, #212	; (adr r3, 8004130 <__ieee754_pow+0x730>)
 800405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405e:	4606      	mov	r6, r0
 8004060:	460f      	mov	r7, r1
 8004062:	4620      	mov	r0, r4
 8004064:	4629      	mov	r1, r5
 8004066:	f7fc fa73 	bl	8000550 <__aeabi_dmul>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4630      	mov	r0, r6
 8004070:	4639      	mov	r1, r7
 8004072:	f7fc f8b7 	bl	80001e4 <__adddf3>
 8004076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004078:	4b38      	ldr	r3, [pc, #224]	; (800415c <__ieee754_pow+0x75c>)
 800407a:	4413      	add	r3, r2
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f7fc f8b0 	bl	80001e4 <__adddf3>
 8004084:	4682      	mov	sl, r0
 8004086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004088:	468b      	mov	fp, r1
 800408a:	f7fc f9f7 	bl	800047c <__aeabi_i2d>
 800408e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004090:	4b33      	ldr	r3, [pc, #204]	; (8004160 <__ieee754_pow+0x760>)
 8004092:	4413      	add	r3, r2
 8004094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004098:	4606      	mov	r6, r0
 800409a:	460f      	mov	r7, r1
 800409c:	4652      	mov	r2, sl
 800409e:	465b      	mov	r3, fp
 80040a0:	ec51 0b18 	vmov	r0, r1, d8
 80040a4:	f7fc f89e 	bl	80001e4 <__adddf3>
 80040a8:	4642      	mov	r2, r8
 80040aa:	464b      	mov	r3, r9
 80040ac:	f7fc f89a 	bl	80001e4 <__adddf3>
 80040b0:	4632      	mov	r2, r6
 80040b2:	463b      	mov	r3, r7
 80040b4:	f7fc f896 	bl	80001e4 <__adddf3>
 80040b8:	9c04      	ldr	r4, [sp, #16]
 80040ba:	4632      	mov	r2, r6
 80040bc:	463b      	mov	r3, r7
 80040be:	4620      	mov	r0, r4
 80040c0:	460d      	mov	r5, r1
 80040c2:	f7fc f88d 	bl	80001e0 <__aeabi_dsub>
 80040c6:	4642      	mov	r2, r8
 80040c8:	464b      	mov	r3, r9
 80040ca:	f7fc f889 	bl	80001e0 <__aeabi_dsub>
 80040ce:	ec53 2b18 	vmov	r2, r3, d8
 80040d2:	f7fc f885 	bl	80001e0 <__aeabi_dsub>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4650      	mov	r0, sl
 80040dc:	4659      	mov	r1, fp
 80040de:	e606      	b.n	8003cee <__ieee754_pow+0x2ee>
 80040e0:	2401      	movs	r4, #1
 80040e2:	e6a0      	b.n	8003e26 <__ieee754_pow+0x426>
 80040e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004138 <__ieee754_pow+0x738>
 80040e8:	e60d      	b.n	8003d06 <__ieee754_pow+0x306>
 80040ea:	bf00      	nop
 80040ec:	f3af 8000 	nop.w
 80040f0:	4a454eef 	.word	0x4a454eef
 80040f4:	3fca7e28 	.word	0x3fca7e28
 80040f8:	93c9db65 	.word	0x93c9db65
 80040fc:	3fcd864a 	.word	0x3fcd864a
 8004100:	a91d4101 	.word	0xa91d4101
 8004104:	3fd17460 	.word	0x3fd17460
 8004108:	518f264d 	.word	0x518f264d
 800410c:	3fd55555 	.word	0x3fd55555
 8004110:	db6fabff 	.word	0xdb6fabff
 8004114:	3fdb6db6 	.word	0x3fdb6db6
 8004118:	33333303 	.word	0x33333303
 800411c:	3fe33333 	.word	0x3fe33333
 8004120:	e0000000 	.word	0xe0000000
 8004124:	3feec709 	.word	0x3feec709
 8004128:	dc3a03fd 	.word	0xdc3a03fd
 800412c:	3feec709 	.word	0x3feec709
 8004130:	145b01f5 	.word	0x145b01f5
 8004134:	be3e2fe0 	.word	0xbe3e2fe0
 8004138:	00000000 	.word	0x00000000
 800413c:	3ff00000 	.word	0x3ff00000
 8004140:	7ff00000 	.word	0x7ff00000
 8004144:	43400000 	.word	0x43400000
 8004148:	0003988e 	.word	0x0003988e
 800414c:	000bb679 	.word	0x000bb679
 8004150:	080048b0 	.word	0x080048b0
 8004154:	3ff00000 	.word	0x3ff00000
 8004158:	40080000 	.word	0x40080000
 800415c:	080048d0 	.word	0x080048d0
 8004160:	080048c0 	.word	0x080048c0
 8004164:	a3b5      	add	r3, pc, #724	; (adr r3, 800443c <__ieee754_pow+0xa3c>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	4640      	mov	r0, r8
 800416c:	4649      	mov	r1, r9
 800416e:	f7fc f839 	bl	80001e4 <__adddf3>
 8004172:	4622      	mov	r2, r4
 8004174:	ec41 0b1a 	vmov	d10, r0, r1
 8004178:	462b      	mov	r3, r5
 800417a:	4630      	mov	r0, r6
 800417c:	4639      	mov	r1, r7
 800417e:	f7fc f82f 	bl	80001e0 <__aeabi_dsub>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	ec51 0b1a 	vmov	r0, r1, d10
 800418a:	f7fc fc71 	bl	8000a70 <__aeabi_dcmpgt>
 800418e:	2800      	cmp	r0, #0
 8004190:	f47f adf8 	bne.w	8003d84 <__ieee754_pow+0x384>
 8004194:	4aa4      	ldr	r2, [pc, #656]	; (8004428 <__ieee754_pow+0xa28>)
 8004196:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800419a:	4293      	cmp	r3, r2
 800419c:	f340 810b 	ble.w	80043b6 <__ieee754_pow+0x9b6>
 80041a0:	151b      	asrs	r3, r3, #20
 80041a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80041a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80041aa:	fa4a f303 	asr.w	r3, sl, r3
 80041ae:	445b      	add	r3, fp
 80041b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80041b4:	4e9d      	ldr	r6, [pc, #628]	; (800442c <__ieee754_pow+0xa2c>)
 80041b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80041ba:	4116      	asrs	r6, r2
 80041bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80041c0:	2000      	movs	r0, #0
 80041c2:	ea23 0106 	bic.w	r1, r3, r6
 80041c6:	f1c2 0214 	rsb	r2, r2, #20
 80041ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80041ce:	fa4a fa02 	asr.w	sl, sl, r2
 80041d2:	f1bb 0f00 	cmp.w	fp, #0
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4620      	mov	r0, r4
 80041dc:	4629      	mov	r1, r5
 80041de:	bfb8      	it	lt
 80041e0:	f1ca 0a00 	rsblt	sl, sl, #0
 80041e4:	f7fb fffc 	bl	80001e0 <__aeabi_dsub>
 80041e8:	ec41 0b19 	vmov	d9, r0, r1
 80041ec:	4642      	mov	r2, r8
 80041ee:	464b      	mov	r3, r9
 80041f0:	ec51 0b19 	vmov	r0, r1, d9
 80041f4:	f7fb fff6 	bl	80001e4 <__adddf3>
 80041f8:	2400      	movs	r4, #0
 80041fa:	a379      	add	r3, pc, #484	; (adr r3, 80043e0 <__ieee754_pow+0x9e0>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	4620      	mov	r0, r4
 8004202:	460d      	mov	r5, r1
 8004204:	f7fc f9a4 	bl	8000550 <__aeabi_dmul>
 8004208:	ec53 2b19 	vmov	r2, r3, d9
 800420c:	4606      	mov	r6, r0
 800420e:	460f      	mov	r7, r1
 8004210:	4620      	mov	r0, r4
 8004212:	4629      	mov	r1, r5
 8004214:	f7fb ffe4 	bl	80001e0 <__aeabi_dsub>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4640      	mov	r0, r8
 800421e:	4649      	mov	r1, r9
 8004220:	f7fb ffde 	bl	80001e0 <__aeabi_dsub>
 8004224:	a370      	add	r3, pc, #448	; (adr r3, 80043e8 <__ieee754_pow+0x9e8>)
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	f7fc f991 	bl	8000550 <__aeabi_dmul>
 800422e:	a370      	add	r3, pc, #448	; (adr r3, 80043f0 <__ieee754_pow+0x9f0>)
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	4680      	mov	r8, r0
 8004236:	4689      	mov	r9, r1
 8004238:	4620      	mov	r0, r4
 800423a:	4629      	mov	r1, r5
 800423c:	f7fc f988 	bl	8000550 <__aeabi_dmul>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4640      	mov	r0, r8
 8004246:	4649      	mov	r1, r9
 8004248:	f7fb ffcc 	bl	80001e4 <__adddf3>
 800424c:	4604      	mov	r4, r0
 800424e:	460d      	mov	r5, r1
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4630      	mov	r0, r6
 8004256:	4639      	mov	r1, r7
 8004258:	f7fb ffc4 	bl	80001e4 <__adddf3>
 800425c:	4632      	mov	r2, r6
 800425e:	463b      	mov	r3, r7
 8004260:	4680      	mov	r8, r0
 8004262:	4689      	mov	r9, r1
 8004264:	f7fb ffbc 	bl	80001e0 <__aeabi_dsub>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4620      	mov	r0, r4
 800426e:	4629      	mov	r1, r5
 8004270:	f7fb ffb6 	bl	80001e0 <__aeabi_dsub>
 8004274:	4642      	mov	r2, r8
 8004276:	4606      	mov	r6, r0
 8004278:	460f      	mov	r7, r1
 800427a:	464b      	mov	r3, r9
 800427c:	4640      	mov	r0, r8
 800427e:	4649      	mov	r1, r9
 8004280:	f7fc f966 	bl	8000550 <__aeabi_dmul>
 8004284:	a35c      	add	r3, pc, #368	; (adr r3, 80043f8 <__ieee754_pow+0x9f8>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	4604      	mov	r4, r0
 800428c:	460d      	mov	r5, r1
 800428e:	f7fc f95f 	bl	8000550 <__aeabi_dmul>
 8004292:	a35b      	add	r3, pc, #364	; (adr r3, 8004400 <__ieee754_pow+0xa00>)
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f7fb ffa2 	bl	80001e0 <__aeabi_dsub>
 800429c:	4622      	mov	r2, r4
 800429e:	462b      	mov	r3, r5
 80042a0:	f7fc f956 	bl	8000550 <__aeabi_dmul>
 80042a4:	a358      	add	r3, pc, #352	; (adr r3, 8004408 <__ieee754_pow+0xa08>)
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f7fb ff9b 	bl	80001e4 <__adddf3>
 80042ae:	4622      	mov	r2, r4
 80042b0:	462b      	mov	r3, r5
 80042b2:	f7fc f94d 	bl	8000550 <__aeabi_dmul>
 80042b6:	a356      	add	r3, pc, #344	; (adr r3, 8004410 <__ieee754_pow+0xa10>)
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f7fb ff90 	bl	80001e0 <__aeabi_dsub>
 80042c0:	4622      	mov	r2, r4
 80042c2:	462b      	mov	r3, r5
 80042c4:	f7fc f944 	bl	8000550 <__aeabi_dmul>
 80042c8:	a353      	add	r3, pc, #332	; (adr r3, 8004418 <__ieee754_pow+0xa18>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f7fb ff89 	bl	80001e4 <__adddf3>
 80042d2:	4622      	mov	r2, r4
 80042d4:	462b      	mov	r3, r5
 80042d6:	f7fc f93b 	bl	8000550 <__aeabi_dmul>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4640      	mov	r0, r8
 80042e0:	4649      	mov	r1, r9
 80042e2:	f7fb ff7d 	bl	80001e0 <__aeabi_dsub>
 80042e6:	4604      	mov	r4, r0
 80042e8:	460d      	mov	r5, r1
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4640      	mov	r0, r8
 80042f0:	4649      	mov	r1, r9
 80042f2:	f7fc f92d 	bl	8000550 <__aeabi_dmul>
 80042f6:	2200      	movs	r2, #0
 80042f8:	ec41 0b19 	vmov	d9, r0, r1
 80042fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004300:	4620      	mov	r0, r4
 8004302:	4629      	mov	r1, r5
 8004304:	f7fb ff6c 	bl	80001e0 <__aeabi_dsub>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	ec51 0b19 	vmov	r0, r1, d9
 8004310:	f7fc fa48 	bl	80007a4 <__aeabi_ddiv>
 8004314:	4632      	mov	r2, r6
 8004316:	4604      	mov	r4, r0
 8004318:	460d      	mov	r5, r1
 800431a:	463b      	mov	r3, r7
 800431c:	4640      	mov	r0, r8
 800431e:	4649      	mov	r1, r9
 8004320:	f7fc f916 	bl	8000550 <__aeabi_dmul>
 8004324:	4632      	mov	r2, r6
 8004326:	463b      	mov	r3, r7
 8004328:	f7fb ff5c 	bl	80001e4 <__adddf3>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4620      	mov	r0, r4
 8004332:	4629      	mov	r1, r5
 8004334:	f7fb ff54 	bl	80001e0 <__aeabi_dsub>
 8004338:	4642      	mov	r2, r8
 800433a:	464b      	mov	r3, r9
 800433c:	f7fb ff50 	bl	80001e0 <__aeabi_dsub>
 8004340:	460b      	mov	r3, r1
 8004342:	4602      	mov	r2, r0
 8004344:	493a      	ldr	r1, [pc, #232]	; (8004430 <__ieee754_pow+0xa30>)
 8004346:	2000      	movs	r0, #0
 8004348:	f7fb ff4a 	bl	80001e0 <__aeabi_dsub>
 800434c:	e9cd 0100 	strd	r0, r1, [sp]
 8004350:	9b01      	ldr	r3, [sp, #4]
 8004352:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800435a:	da2f      	bge.n	80043bc <__ieee754_pow+0x9bc>
 800435c:	4650      	mov	r0, sl
 800435e:	ed9d 0b00 	vldr	d0, [sp]
 8004362:	f000 f9cd 	bl	8004700 <scalbn>
 8004366:	ec51 0b10 	vmov	r0, r1, d0
 800436a:	ec53 2b18 	vmov	r2, r3, d8
 800436e:	f7ff bbe0 	b.w	8003b32 <__ieee754_pow+0x132>
 8004372:	4b30      	ldr	r3, [pc, #192]	; (8004434 <__ieee754_pow+0xa34>)
 8004374:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004378:	429e      	cmp	r6, r3
 800437a:	f77f af0b 	ble.w	8004194 <__ieee754_pow+0x794>
 800437e:	4b2e      	ldr	r3, [pc, #184]	; (8004438 <__ieee754_pow+0xa38>)
 8004380:	440b      	add	r3, r1
 8004382:	4303      	orrs	r3, r0
 8004384:	d00b      	beq.n	800439e <__ieee754_pow+0x99e>
 8004386:	a326      	add	r3, pc, #152	; (adr r3, 8004420 <__ieee754_pow+0xa20>)
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	ec51 0b18 	vmov	r0, r1, d8
 8004390:	f7fc f8de 	bl	8000550 <__aeabi_dmul>
 8004394:	a322      	add	r3, pc, #136	; (adr r3, 8004420 <__ieee754_pow+0xa20>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7ff bbca 	b.w	8003b32 <__ieee754_pow+0x132>
 800439e:	4622      	mov	r2, r4
 80043a0:	462b      	mov	r3, r5
 80043a2:	f7fb ff1d 	bl	80001e0 <__aeabi_dsub>
 80043a6:	4642      	mov	r2, r8
 80043a8:	464b      	mov	r3, r9
 80043aa:	f7fc fb57 	bl	8000a5c <__aeabi_dcmpge>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	f43f aef0 	beq.w	8004194 <__ieee754_pow+0x794>
 80043b4:	e7e7      	b.n	8004386 <__ieee754_pow+0x986>
 80043b6:	f04f 0a00 	mov.w	sl, #0
 80043ba:	e717      	b.n	80041ec <__ieee754_pow+0x7ec>
 80043bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043c0:	4619      	mov	r1, r3
 80043c2:	e7d2      	b.n	800436a <__ieee754_pow+0x96a>
 80043c4:	491a      	ldr	r1, [pc, #104]	; (8004430 <__ieee754_pow+0xa30>)
 80043c6:	2000      	movs	r0, #0
 80043c8:	f7ff bb9e 	b.w	8003b08 <__ieee754_pow+0x108>
 80043cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043d0:	f7ff bb9a 	b.w	8003b08 <__ieee754_pow+0x108>
 80043d4:	9000      	str	r0, [sp, #0]
 80043d6:	f7ff bb76 	b.w	8003ac6 <__ieee754_pow+0xc6>
 80043da:	2100      	movs	r1, #0
 80043dc:	f7ff bb60 	b.w	8003aa0 <__ieee754_pow+0xa0>
 80043e0:	00000000 	.word	0x00000000
 80043e4:	3fe62e43 	.word	0x3fe62e43
 80043e8:	fefa39ef 	.word	0xfefa39ef
 80043ec:	3fe62e42 	.word	0x3fe62e42
 80043f0:	0ca86c39 	.word	0x0ca86c39
 80043f4:	be205c61 	.word	0xbe205c61
 80043f8:	72bea4d0 	.word	0x72bea4d0
 80043fc:	3e663769 	.word	0x3e663769
 8004400:	c5d26bf1 	.word	0xc5d26bf1
 8004404:	3ebbbd41 	.word	0x3ebbbd41
 8004408:	af25de2c 	.word	0xaf25de2c
 800440c:	3f11566a 	.word	0x3f11566a
 8004410:	16bebd93 	.word	0x16bebd93
 8004414:	3f66c16c 	.word	0x3f66c16c
 8004418:	5555553e 	.word	0x5555553e
 800441c:	3fc55555 	.word	0x3fc55555
 8004420:	c2f8f359 	.word	0xc2f8f359
 8004424:	01a56e1f 	.word	0x01a56e1f
 8004428:	3fe00000 	.word	0x3fe00000
 800442c:	000fffff 	.word	0x000fffff
 8004430:	3ff00000 	.word	0x3ff00000
 8004434:	4090cbff 	.word	0x4090cbff
 8004438:	3f6f3400 	.word	0x3f6f3400
 800443c:	652b82fe 	.word	0x652b82fe
 8004440:	3c971547 	.word	0x3c971547

08004444 <__ieee754_sqrt>:
 8004444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004448:	ec55 4b10 	vmov	r4, r5, d0
 800444c:	4e56      	ldr	r6, [pc, #344]	; (80045a8 <__ieee754_sqrt+0x164>)
 800444e:	43ae      	bics	r6, r5
 8004450:	ee10 0a10 	vmov	r0, s0
 8004454:	ee10 3a10 	vmov	r3, s0
 8004458:	4629      	mov	r1, r5
 800445a:	462a      	mov	r2, r5
 800445c:	d110      	bne.n	8004480 <__ieee754_sqrt+0x3c>
 800445e:	ee10 2a10 	vmov	r2, s0
 8004462:	462b      	mov	r3, r5
 8004464:	f7fc f874 	bl	8000550 <__aeabi_dmul>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4620      	mov	r0, r4
 800446e:	4629      	mov	r1, r5
 8004470:	f7fb feb8 	bl	80001e4 <__adddf3>
 8004474:	4604      	mov	r4, r0
 8004476:	460d      	mov	r5, r1
 8004478:	ec45 4b10 	vmov	d0, r4, r5
 800447c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004480:	2d00      	cmp	r5, #0
 8004482:	dc10      	bgt.n	80044a6 <__ieee754_sqrt+0x62>
 8004484:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004488:	4330      	orrs	r0, r6
 800448a:	d0f5      	beq.n	8004478 <__ieee754_sqrt+0x34>
 800448c:	b15d      	cbz	r5, 80044a6 <__ieee754_sqrt+0x62>
 800448e:	ee10 2a10 	vmov	r2, s0
 8004492:	462b      	mov	r3, r5
 8004494:	ee10 0a10 	vmov	r0, s0
 8004498:	f7fb fea2 	bl	80001e0 <__aeabi_dsub>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	f7fc f980 	bl	80007a4 <__aeabi_ddiv>
 80044a4:	e7e6      	b.n	8004474 <__ieee754_sqrt+0x30>
 80044a6:	1509      	asrs	r1, r1, #20
 80044a8:	d076      	beq.n	8004598 <__ieee754_sqrt+0x154>
 80044aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80044ae:	07ce      	lsls	r6, r1, #31
 80044b0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80044b4:	bf5e      	ittt	pl
 80044b6:	0fda      	lsrpl	r2, r3, #31
 80044b8:	005b      	lslpl	r3, r3, #1
 80044ba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80044be:	0fda      	lsrs	r2, r3, #31
 80044c0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80044c4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80044c8:	2000      	movs	r0, #0
 80044ca:	106d      	asrs	r5, r5, #1
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	f04f 0e16 	mov.w	lr, #22
 80044d2:	4684      	mov	ip, r0
 80044d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044d8:	eb0c 0401 	add.w	r4, ip, r1
 80044dc:	4294      	cmp	r4, r2
 80044de:	bfde      	ittt	le
 80044e0:	1b12      	suble	r2, r2, r4
 80044e2:	eb04 0c01 	addle.w	ip, r4, r1
 80044e6:	1840      	addle	r0, r0, r1
 80044e8:	0052      	lsls	r2, r2, #1
 80044ea:	f1be 0e01 	subs.w	lr, lr, #1
 80044ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80044f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80044f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80044fa:	d1ed      	bne.n	80044d8 <__ieee754_sqrt+0x94>
 80044fc:	4671      	mov	r1, lr
 80044fe:	2720      	movs	r7, #32
 8004500:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004504:	4562      	cmp	r2, ip
 8004506:	eb04 060e 	add.w	r6, r4, lr
 800450a:	dc02      	bgt.n	8004512 <__ieee754_sqrt+0xce>
 800450c:	d113      	bne.n	8004536 <__ieee754_sqrt+0xf2>
 800450e:	429e      	cmp	r6, r3
 8004510:	d811      	bhi.n	8004536 <__ieee754_sqrt+0xf2>
 8004512:	2e00      	cmp	r6, #0
 8004514:	eb06 0e04 	add.w	lr, r6, r4
 8004518:	da43      	bge.n	80045a2 <__ieee754_sqrt+0x15e>
 800451a:	f1be 0f00 	cmp.w	lr, #0
 800451e:	db40      	blt.n	80045a2 <__ieee754_sqrt+0x15e>
 8004520:	f10c 0801 	add.w	r8, ip, #1
 8004524:	eba2 020c 	sub.w	r2, r2, ip
 8004528:	429e      	cmp	r6, r3
 800452a:	bf88      	it	hi
 800452c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004530:	1b9b      	subs	r3, r3, r6
 8004532:	4421      	add	r1, r4
 8004534:	46c4      	mov	ip, r8
 8004536:	0052      	lsls	r2, r2, #1
 8004538:	3f01      	subs	r7, #1
 800453a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800453e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004542:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004546:	d1dd      	bne.n	8004504 <__ieee754_sqrt+0xc0>
 8004548:	4313      	orrs	r3, r2
 800454a:	d006      	beq.n	800455a <__ieee754_sqrt+0x116>
 800454c:	1c4c      	adds	r4, r1, #1
 800454e:	bf13      	iteet	ne
 8004550:	3101      	addne	r1, #1
 8004552:	3001      	addeq	r0, #1
 8004554:	4639      	moveq	r1, r7
 8004556:	f021 0101 	bicne.w	r1, r1, #1
 800455a:	1043      	asrs	r3, r0, #1
 800455c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004560:	0849      	lsrs	r1, r1, #1
 8004562:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004566:	07c2      	lsls	r2, r0, #31
 8004568:	bf48      	it	mi
 800456a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800456e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8004572:	460c      	mov	r4, r1
 8004574:	463d      	mov	r5, r7
 8004576:	e77f      	b.n	8004478 <__ieee754_sqrt+0x34>
 8004578:	0ada      	lsrs	r2, r3, #11
 800457a:	3815      	subs	r0, #21
 800457c:	055b      	lsls	r3, r3, #21
 800457e:	2a00      	cmp	r2, #0
 8004580:	d0fa      	beq.n	8004578 <__ieee754_sqrt+0x134>
 8004582:	02d7      	lsls	r7, r2, #11
 8004584:	d50a      	bpl.n	800459c <__ieee754_sqrt+0x158>
 8004586:	f1c1 0420 	rsb	r4, r1, #32
 800458a:	fa23 f404 	lsr.w	r4, r3, r4
 800458e:	1e4d      	subs	r5, r1, #1
 8004590:	408b      	lsls	r3, r1
 8004592:	4322      	orrs	r2, r4
 8004594:	1b41      	subs	r1, r0, r5
 8004596:	e788      	b.n	80044aa <__ieee754_sqrt+0x66>
 8004598:	4608      	mov	r0, r1
 800459a:	e7f0      	b.n	800457e <__ieee754_sqrt+0x13a>
 800459c:	0052      	lsls	r2, r2, #1
 800459e:	3101      	adds	r1, #1
 80045a0:	e7ef      	b.n	8004582 <__ieee754_sqrt+0x13e>
 80045a2:	46e0      	mov	r8, ip
 80045a4:	e7be      	b.n	8004524 <__ieee754_sqrt+0xe0>
 80045a6:	bf00      	nop
 80045a8:	7ff00000 	.word	0x7ff00000

080045ac <fabs>:
 80045ac:	ec51 0b10 	vmov	r0, r1, d0
 80045b0:	ee10 2a10 	vmov	r2, s0
 80045b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80045b8:	ec43 2b10 	vmov	d0, r2, r3
 80045bc:	4770      	bx	lr

080045be <finite>:
 80045be:	b082      	sub	sp, #8
 80045c0:	ed8d 0b00 	vstr	d0, [sp]
 80045c4:	9801      	ldr	r0, [sp, #4]
 80045c6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80045ca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80045ce:	0fc0      	lsrs	r0, r0, #31
 80045d0:	b002      	add	sp, #8
 80045d2:	4770      	bx	lr
 80045d4:	0000      	movs	r0, r0
	...

080045d8 <nan>:
 80045d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80045e0 <nan+0x8>
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	00000000 	.word	0x00000000
 80045e4:	7ff80000 	.word	0x7ff80000

080045e8 <rint>:
 80045e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ea:	ec51 0b10 	vmov	r0, r1, d0
 80045ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80045f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80045f6:	2e13      	cmp	r6, #19
 80045f8:	ee10 4a10 	vmov	r4, s0
 80045fc:	460b      	mov	r3, r1
 80045fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8004602:	dc58      	bgt.n	80046b6 <rint+0xce>
 8004604:	2e00      	cmp	r6, #0
 8004606:	da2b      	bge.n	8004660 <rint+0x78>
 8004608:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800460c:	4302      	orrs	r2, r0
 800460e:	d023      	beq.n	8004658 <rint+0x70>
 8004610:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004614:	4302      	orrs	r2, r0
 8004616:	4254      	negs	r4, r2
 8004618:	4314      	orrs	r4, r2
 800461a:	0c4b      	lsrs	r3, r1, #17
 800461c:	0b24      	lsrs	r4, r4, #12
 800461e:	045b      	lsls	r3, r3, #17
 8004620:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8004624:	ea44 0103 	orr.w	r1, r4, r3
 8004628:	4b32      	ldr	r3, [pc, #200]	; (80046f4 <rint+0x10c>)
 800462a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800462e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4630      	mov	r0, r6
 8004638:	4639      	mov	r1, r7
 800463a:	f7fb fdd3 	bl	80001e4 <__adddf3>
 800463e:	e9cd 0100 	strd	r0, r1, [sp]
 8004642:	463b      	mov	r3, r7
 8004644:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004648:	4632      	mov	r2, r6
 800464a:	f7fb fdc9 	bl	80001e0 <__aeabi_dsub>
 800464e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004652:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8004656:	4639      	mov	r1, r7
 8004658:	ec41 0b10 	vmov	d0, r0, r1
 800465c:	b003      	add	sp, #12
 800465e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004660:	4a25      	ldr	r2, [pc, #148]	; (80046f8 <rint+0x110>)
 8004662:	4132      	asrs	r2, r6
 8004664:	ea01 0702 	and.w	r7, r1, r2
 8004668:	4307      	orrs	r7, r0
 800466a:	d0f5      	beq.n	8004658 <rint+0x70>
 800466c:	0851      	lsrs	r1, r2, #1
 800466e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8004672:	4314      	orrs	r4, r2
 8004674:	d00c      	beq.n	8004690 <rint+0xa8>
 8004676:	ea23 0201 	bic.w	r2, r3, r1
 800467a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800467e:	2e13      	cmp	r6, #19
 8004680:	fa43 f606 	asr.w	r6, r3, r6
 8004684:	bf0c      	ite	eq
 8004686:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800468a:	2400      	movne	r4, #0
 800468c:	ea42 0306 	orr.w	r3, r2, r6
 8004690:	4918      	ldr	r1, [pc, #96]	; (80046f4 <rint+0x10c>)
 8004692:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004696:	4622      	mov	r2, r4
 8004698:	e9d5 4500 	ldrd	r4, r5, [r5]
 800469c:	4620      	mov	r0, r4
 800469e:	4629      	mov	r1, r5
 80046a0:	f7fb fda0 	bl	80001e4 <__adddf3>
 80046a4:	e9cd 0100 	strd	r0, r1, [sp]
 80046a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046ac:	4622      	mov	r2, r4
 80046ae:	462b      	mov	r3, r5
 80046b0:	f7fb fd96 	bl	80001e0 <__aeabi_dsub>
 80046b4:	e7d0      	b.n	8004658 <rint+0x70>
 80046b6:	2e33      	cmp	r6, #51	; 0x33
 80046b8:	dd07      	ble.n	80046ca <rint+0xe2>
 80046ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80046be:	d1cb      	bne.n	8004658 <rint+0x70>
 80046c0:	ee10 2a10 	vmov	r2, s0
 80046c4:	f7fb fd8e 	bl	80001e4 <__adddf3>
 80046c8:	e7c6      	b.n	8004658 <rint+0x70>
 80046ca:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80046ce:	f04f 36ff 	mov.w	r6, #4294967295
 80046d2:	40d6      	lsrs	r6, r2
 80046d4:	4230      	tst	r0, r6
 80046d6:	d0bf      	beq.n	8004658 <rint+0x70>
 80046d8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80046dc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80046e0:	bf1f      	itttt	ne
 80046e2:	ea24 0101 	bicne.w	r1, r4, r1
 80046e6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80046ea:	fa44 f202 	asrne.w	r2, r4, r2
 80046ee:	ea41 0402 	orrne.w	r4, r1, r2
 80046f2:	e7cd      	b.n	8004690 <rint+0xa8>
 80046f4:	080048e0 	.word	0x080048e0
 80046f8:	000fffff 	.word	0x000fffff
 80046fc:	00000000 	.word	0x00000000

08004700 <scalbn>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	ec55 4b10 	vmov	r4, r5, d0
 8004706:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800470a:	4606      	mov	r6, r0
 800470c:	462b      	mov	r3, r5
 800470e:	b99a      	cbnz	r2, 8004738 <scalbn+0x38>
 8004710:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004714:	4323      	orrs	r3, r4
 8004716:	d036      	beq.n	8004786 <scalbn+0x86>
 8004718:	4b39      	ldr	r3, [pc, #228]	; (8004800 <scalbn+0x100>)
 800471a:	4629      	mov	r1, r5
 800471c:	ee10 0a10 	vmov	r0, s0
 8004720:	2200      	movs	r2, #0
 8004722:	f7fb ff15 	bl	8000550 <__aeabi_dmul>
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <scalbn+0x104>)
 8004728:	429e      	cmp	r6, r3
 800472a:	4604      	mov	r4, r0
 800472c:	460d      	mov	r5, r1
 800472e:	da10      	bge.n	8004752 <scalbn+0x52>
 8004730:	a32b      	add	r3, pc, #172	; (adr r3, 80047e0 <scalbn+0xe0>)
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	e03a      	b.n	80047ae <scalbn+0xae>
 8004738:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800473c:	428a      	cmp	r2, r1
 800473e:	d10c      	bne.n	800475a <scalbn+0x5a>
 8004740:	ee10 2a10 	vmov	r2, s0
 8004744:	4620      	mov	r0, r4
 8004746:	4629      	mov	r1, r5
 8004748:	f7fb fd4c 	bl	80001e4 <__adddf3>
 800474c:	4604      	mov	r4, r0
 800474e:	460d      	mov	r5, r1
 8004750:	e019      	b.n	8004786 <scalbn+0x86>
 8004752:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004756:	460b      	mov	r3, r1
 8004758:	3a36      	subs	r2, #54	; 0x36
 800475a:	4432      	add	r2, r6
 800475c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004760:	428a      	cmp	r2, r1
 8004762:	dd08      	ble.n	8004776 <scalbn+0x76>
 8004764:	2d00      	cmp	r5, #0
 8004766:	a120      	add	r1, pc, #128	; (adr r1, 80047e8 <scalbn+0xe8>)
 8004768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800476c:	da1c      	bge.n	80047a8 <scalbn+0xa8>
 800476e:	a120      	add	r1, pc, #128	; (adr r1, 80047f0 <scalbn+0xf0>)
 8004770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004774:	e018      	b.n	80047a8 <scalbn+0xa8>
 8004776:	2a00      	cmp	r2, #0
 8004778:	dd08      	ble.n	800478c <scalbn+0x8c>
 800477a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800477e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004782:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004786:	ec45 4b10 	vmov	d0, r4, r5
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004790:	da19      	bge.n	80047c6 <scalbn+0xc6>
 8004792:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004796:	429e      	cmp	r6, r3
 8004798:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800479c:	dd0a      	ble.n	80047b4 <scalbn+0xb4>
 800479e:	a112      	add	r1, pc, #72	; (adr r1, 80047e8 <scalbn+0xe8>)
 80047a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e2      	bne.n	800476e <scalbn+0x6e>
 80047a8:	a30f      	add	r3, pc, #60	; (adr r3, 80047e8 <scalbn+0xe8>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f7fb fecf 	bl	8000550 <__aeabi_dmul>
 80047b2:	e7cb      	b.n	800474c <scalbn+0x4c>
 80047b4:	a10a      	add	r1, pc, #40	; (adr r1, 80047e0 <scalbn+0xe0>)
 80047b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0b8      	beq.n	8004730 <scalbn+0x30>
 80047be:	a10e      	add	r1, pc, #56	; (adr r1, 80047f8 <scalbn+0xf8>)
 80047c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047c4:	e7b4      	b.n	8004730 <scalbn+0x30>
 80047c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80047ca:	3236      	adds	r2, #54	; 0x36
 80047cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80047d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80047d4:	4620      	mov	r0, r4
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <scalbn+0x108>)
 80047d8:	2200      	movs	r2, #0
 80047da:	e7e8      	b.n	80047ae <scalbn+0xae>
 80047dc:	f3af 8000 	nop.w
 80047e0:	c2f8f359 	.word	0xc2f8f359
 80047e4:	01a56e1f 	.word	0x01a56e1f
 80047e8:	8800759c 	.word	0x8800759c
 80047ec:	7e37e43c 	.word	0x7e37e43c
 80047f0:	8800759c 	.word	0x8800759c
 80047f4:	fe37e43c 	.word	0xfe37e43c
 80047f8:	c2f8f359 	.word	0xc2f8f359
 80047fc:	81a56e1f 	.word	0x81a56e1f
 8004800:	43500000 	.word	0x43500000
 8004804:	ffff3cb0 	.word	0xffff3cb0
 8004808:	3c900000 	.word	0x3c900000

0800480c <_init>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr

08004818 <_fini>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr
