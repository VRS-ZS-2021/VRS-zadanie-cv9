
VRS-zadanie-cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000953c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  080096d0  080096d0  000196d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c70  08009c70  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009c70  08009c70  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c70  08009c70  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c70  08009c70  00019c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c74  08009c74  00019c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000000e4  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7de  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002004  00000000  00000000  0002a9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002c9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000818  00000000  00000000  0002d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018278  00000000  00000000  0002db20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007bb5  00000000  00000000  00045d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b60a  00000000  00000000  0004d94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c8f57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b8c  00000000  00000000  000c8fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096b4 	.word	0x080096b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080096b4 	.word	0x080096b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	619a      	str	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <resetSegments>:
void setDigit(uint8_t pos);


/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f7ff ffdc 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f7ff ffd6 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000d48:	2102      	movs	r1, #2
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <resetSegments+0x58>)
 8000d4c:	f7ff ffd2 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000d50:	2120      	movs	r1, #32
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <resetSegments+0x58>)
 8000d54:	f7ff ffce 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000d58:	2110      	movs	r1, #16
 8000d5a:	480a      	ldr	r0, [pc, #40]	; (8000d84 <resetSegments+0x58>)
 8000d5c:	f7ff ffca 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000d60:	2101      	movs	r1, #1
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f7ff ffc5 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f7ff ffc0 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000d74:	2108      	movs	r1, #8
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f7ff ffbb 	bl	8000cf4 <LL_GPIO_SetOutputPin>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	48000400 	.word	0x48000400

08000d88 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f7ff ffbc 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f7ff ffb6 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000da4:	2102      	movs	r1, #2
 8000da6:	480e      	ldr	r0, [pc, #56]	; (8000de0 <setSegments+0x58>)
 8000da8:	f7ff ffb2 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000dac:	2120      	movs	r1, #32
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <setSegments+0x58>)
 8000db0:	f7ff ffae 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000db4:	2110      	movs	r1, #16
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <setSegments+0x58>)
 8000db8:	f7ff ffaa 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f7ff ffa5 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f7ff ffa0 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000dd0:	2108      	movs	r1, #8
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd6:	f7ff ff9b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	48000400 	.word	0x48000400

08000de4 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000de8:	2104      	movs	r1, #4
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f7ff ff8f 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000df2:	2101      	movs	r1, #1
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <resetDigits+0x3c>)
 8000df6:	f7ff ff8b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f7ff ff86 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8000e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f7ff ff80 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f7ff ff7b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	48000400 	.word	0x48000400

08000e24 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8000e28:	2101      	movs	r1, #1
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <setDigits+0x3c>)
 8000e2c:	f7ff ff62 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000e30:	2110      	movs	r1, #16
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f7ff ff5d 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8000e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f7ff ff57 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8000e46:	2104      	movs	r1, #4
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f7ff ff52 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e56:	f7ff ff4d 	bl	8000cf4 <LL_GPIO_SetOutputPin>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	48000400 	.word	0x48000400

08000e64 <set_sign>:

void set_sign(char sign){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<6))
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	3b30      	subs	r3, #48	; 0x30
 8000e72:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <set_sign+0xc8>)
 8000e74:	5cd3      	ldrb	r3, [r2, r3]
 8000e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d004      	beq.n	8000e88 <set_sign+0x24>
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000e7e:	2102      	movs	r1, #2
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f7ff ff44 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<5))
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	3b30      	subs	r3, #48	; 0x30
 8000e8c:	4a27      	ldr	r2, [pc, #156]	; (8000f2c <set_sign+0xc8>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	f003 0320 	and.w	r3, r3, #32
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d004      	beq.n	8000ea2 <set_sign+0x3e>
		LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f7ff ff37 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<4))
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	3b30      	subs	r3, #48	; 0x30
 8000ea6:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <set_sign+0xc8>)
 8000ea8:	5cd3      	ldrb	r3, [r2, r3]
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <set_sign+0x5a>
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f7ff ff29 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<3))
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	3b30      	subs	r3, #48	; 0x30
 8000ec2:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <set_sign+0xc8>)
 8000ec4:	5cd3      	ldrb	r3, [r2, r3]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <set_sign+0x72>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4817      	ldr	r0, [pc, #92]	; (8000f30 <set_sign+0xcc>)
 8000ed2:	f7ff ff1d 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<2))
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	3b30      	subs	r3, #48	; 0x30
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <set_sign+0xc8>)
 8000edc:	5cd3      	ldrb	r3, [r2, r3]
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d005      	beq.n	8000ef2 <set_sign+0x8e>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000ee6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f7ff ff0f 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<1))
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	3b30      	subs	r3, #48	; 0x30
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <set_sign+0xc8>)
 8000ef8:	5cd3      	ldrb	r3, [r2, r3]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <set_sign+0xa8>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000f02:	2108      	movs	r1, #8
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f7ff ff02 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<0))
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	3b30      	subs	r3, #48	; 0x30
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <set_sign+0xc8>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <set_sign+0xc0>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <set_sign+0xcc>)
 8000f20:	f7ff fef6 	bl	8000d10 <LL_GPIO_ResetOutputPin>

}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	08009714 	.word	0x08009714
 8000f30:	48000400 	.word	0x48000400

08000f34 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d823      	bhi.n	8000f8c <setDigit+0x58>
 8000f44:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <setDigit+0x18>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f5d 	.word	0x08000f5d
 8000f50:	08000f69 	.word	0x08000f69
 8000f54:	08000f77 	.word	0x08000f77
 8000f58:	08000f83 	.word	0x08000f83
	{
	case 0:
		DIGIT_4_ON;
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f7ff fec7 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f66:	e011      	b.n	8000f8c <setDigit+0x58>
	case 1:
		DIGIT_3_ON;
 8000f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f7ff fec0 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f74:	e00a      	b.n	8000f8c <setDigit+0x58>
	case 2:
		DIGIT_2_ON;
 8000f76:	2110      	movs	r1, #16
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f7ff feba 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f80:	e004      	b.n	8000f8c <setDigit+0x58>
	case 3:
		DIGIT_1_ON;
 8000f82:	2101      	movs	r1, #1
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <setDigit+0x60>)
 8000f86:	f7ff feb5 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f8a:	bf00      	nop
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	48000400 	.word	0x48000400

08000f98 <display_sign>:
void display_sign(char sign_1,char sign_2, char sign_3,char sign_4)
{
 8000f98:	b490      	push	{r4, r7}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	4603      	mov	r3, r0
 8000fac:	71bb      	strb	r3, [r7, #6]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	717b      	strb	r3, [r7, #5]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	713b      	strb	r3, [r7, #4]
	Display_sign[0] = sign_1;
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <display_sign+0x40>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	7013      	strb	r3, [r2, #0]
	Display_sign[1] = sign_2;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <display_sign+0x40>)
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	7053      	strb	r3, [r2, #1]
	Display_sign[2] = sign_3;
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <display_sign+0x40>)
 8000fc4:	797b      	ldrb	r3, [r7, #5]
 8000fc6:	7093      	strb	r3, [r2, #2]
	Display_sign[3] = sign_4;
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <display_sign+0x40>)
 8000fca:	793b      	ldrb	r3, [r7, #4]
 8000fcc:	70d3      	strb	r3, [r2, #3]
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc90      	pop	{r4, r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	20000224 	.word	0x20000224

08000fdc <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8000fdc:	b5b0      	push	{r4, r5, r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	e026      	b.n	8001036 <updateDisplay+0x5a>
	{

		setDigit(i);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffa2 	bl	8000f34 <setDigit>
		set_sign(Display_sign[3-i]);
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f1c3 0303 	rsb	r3, r3, #3
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <updateDisplay+0x6c>)
 8000ff8:	5cd3      	ldrb	r3, [r2, r3]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff32 	bl	8000e64 <set_sign>

		disp_time_saved = disp_time;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <updateDisplay+0x70>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	4912      	ldr	r1, [pc, #72]	; (8001050 <updateDisplay+0x74>)
 8001008:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 800100c:	bf00      	nop
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <updateDisplay+0x74>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	1c94      	adds	r4, r2, #2
 8001016:	f143 0500 	adc.w	r5, r3, #0
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <updateDisplay+0x70>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	42ab      	cmp	r3, r5
 8001022:	bf08      	it	eq
 8001024:	42a2      	cmpeq	r2, r4
 8001026:	d3f2      	bcc.n	800100e <updateDisplay+0x32>

		resetDigits();
 8001028:	f7ff fedc 	bl	8000de4 <resetDigits>
		resetSegments();
 800102c:	f7ff fe7e 	bl	8000d2c <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	3301      	adds	r3, #1
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d9d5      	bls.n	8000fe8 <updateDisplay+0xc>
	}
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bdb0      	pop	{r4, r5, r7, pc}
 8001046:	bf00      	nop
 8001048:	20000224 	.word	0x20000224
 800104c:	20000200 	.word	0x20000200
 8001050:	20000208 	.word	0x20000208

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001172:	695a      	ldr	r2, [r3, #20]
 8001174:	4907      	ldr	r1, [pc, #28]	; (8001194 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800117e:	695a      	ldr	r2, [r3, #20]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4013      	ands	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000

08001198 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <LL_SYSCFG_SetEXTISource+0x58>)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	3302      	adds	r3, #2
 80011aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	0c1b      	lsrs	r3, r3, #16
 80011b2:	43db      	mvns	r3, r3
 80011b4:	ea02 0103 	and.w	r1, r2, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	0c1b      	lsrs	r3, r3, #16
 80011bc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	fab3 f383 	clz	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	fa03 f202 	lsl.w	r2, r3, r2
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <LL_SYSCFG_SetEXTISource+0x58>)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	430a      	orrs	r2, r1
 80011de:	3302      	adds	r3, #2
 80011e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40010000 	.word	0x40010000

080011f4 <LL_GPIO_SetPinMode>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	613b      	str	r3, [r7, #16]
  return result;
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2103      	movs	r1, #3
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	401a      	ands	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	61bb      	str	r3, [r7, #24]
  return result;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	431a      	orrs	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	601a      	str	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_GPIO_SetPinPull>:
{
 8001252:	b480      	push	{r7}
 8001254:	b089      	sub	sp, #36	; 0x24
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	613b      	str	r3, [r7, #16]
  return result;
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	fab3 f383 	clz	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2103      	movs	r1, #3
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	401a      	ands	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	61bb      	str	r3, [r7, #24]
  return result;
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	431a      	orrs	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	60da      	str	r2, [r3, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3724      	adds	r7, #36	; 0x24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_GPIO_ResetOutputPin>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012f2:	f7ff ff39 	bl	8001168 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80012fa:	f7ff ff35 	bl	8001168 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80012fe:	f641 119f 	movw	r1, #6559	; 0x199f
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f7ff ffd3 	bl	80012b0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 800130a:	2133      	movs	r1, #51	; 0x33
 800130c:	482b      	ldr	r0, [pc, #172]	; (80013bc <MX_GPIO_Init+0xf0>)
 800130e:	f7ff ffcf 	bl	80012b0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001312:	f641 139f 	movw	r3, #6559	; 0x199f
 8001316:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001318:	2301      	movs	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f002 f818 	bl	8003364 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001334:	2333      	movs	r3, #51	; 0x33
 8001336:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001338:	2301      	movs	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4619      	mov	r1, r3
 800134c:	481b      	ldr	r0, [pc, #108]	; (80013bc <MX_GPIO_Init+0xf0>)
 800134e:	f002 f809 	bl	8003364 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001352:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff ff1e 	bl	8001198 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 800135c:	2201      	movs	r2, #1
 800135e:	2108      	movs	r1, #8
 8001360:	4816      	ldr	r0, [pc, #88]	; (80013bc <MX_GPIO_Init+0xf0>)
 8001362:	f7ff ff76 	bl	8001252 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8001366:	2200      	movs	r2, #0
 8001368:	2108      	movs	r1, #8
 800136a:	4814      	ldr	r0, [pc, #80]	; (80013bc <MX_GPIO_Init+0xf0>)
 800136c:	f7ff ff42 	bl	80011f4 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001370:	2308      	movs	r3, #8
 8001372:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001378:	2301      	movs	r3, #1
 800137a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800137e:	2300      	movs	r3, #0
 8001380:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001384:	2302      	movs	r3, #2
 8001386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fdf0 	bl	8002f74 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001394:	f7ff fe5e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 8001398:	4603      	mov	r3, r0
 800139a:	2200      	movs	r2, #0
 800139c:	2101      	movs	r1, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff feae 	bl	8001100 <NVIC_EncodePriority>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4619      	mov	r1, r3
 80013a8:	2009      	movs	r0, #9
 80013aa:	f7ff fe7f 	bl	80010ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80013ae:	2009      	movs	r0, #9
 80013b0:	f7ff fe5e 	bl	8001070 <__NVIC_EnableIRQ>

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	48000400 	.word	0x48000400

080013c0 <__NVIC_GetPriorityGrouping>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <__NVIC_EnableIRQ+0x38>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001546:	f023 0306 	bic.w	r3, r3, #6
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	430a      	orrs	r2, r1
 8001550:	431a      	orrs	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	60da      	str	r2, [r3, #12]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60da      	str	r2, [r3, #12]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f043 0204 	orr.w	r2, r3, #4
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	601a      	str	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 0204 	bic.w	r2, r3, #4
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d101      	bne.n	80015da <LL_I2C_IsActiveFlag_TXIS+0x18>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d101      	bne.n	8001600 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0320 	and.w	r3, r3, #32
 800161e:	2b20      	cmp	r3, #32
 8001620:	d101      	bne.n	8001626 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	f043 0220 	orr.w	r2, r3, #32
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	61da      	str	r2, [r3, #28]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	0d5b      	lsrs	r3, r3, #21
 800168a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <LL_I2C_HandleTransfer+0x48>)
 8001690:	430b      	orrs	r3, r1
 8001692:	43db      	mvns	r3, r3
 8001694:	401a      	ands	r2, r3
 8001696:	68b9      	ldr	r1, [r7, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4319      	orrs	r1, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	4319      	orrs	r1, r3
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4319      	orrs	r1, r3
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	430b      	orrs	r3, r1
 80016aa:	431a      	orrs	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	03ff7bff 	.word	0x03ff7bff

080016c0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	b2db      	uxtb	r3, r3
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_AHB1_GRP1_EnableClock>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4013      	ands	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000

08001728 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001732:	69da      	ldr	r2, [r3, #28]
 8001734:	4907      	ldr	r1, [pc, #28]	; (8001754 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4313      	orrs	r3, r2
 800173a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <LL_APB1_GRP1_EnableClock+0x2c>)
 800173e:	69da      	ldr	r2, [r3, #28]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40021000 	.word	0x40021000

08001758 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08e      	sub	sp, #56	; 0x38
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	615a      	str	r2, [r3, #20]
 8001770:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001782:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001786:	f7ff ffb7 	bl	80016f8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800178a:	23c0      	movs	r3, #192	; 0xc0
 800178c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800178e:	2302      	movs	r3, #2
 8001790:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001796:	2301      	movs	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800179a:	2301      	movs	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800179e:	2304      	movs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4821      	ldr	r0, [pc, #132]	; (800182c <MX_I2C1_Init+0xd4>)
 80017a8:	f001 fddc 	bl	8003364 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80017ac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80017b0:	f7ff ffba 	bl	8001728 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017b4:	f7ff fe04 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe54 	bl	800146c <NVIC_EncodePriority>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4619      	mov	r1, r3
 80017c8:	201f      	movs	r0, #31
 80017ca:	f7ff fe25 	bl	8001418 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017ce:	201f      	movs	r0, #31
 80017d0:	f7ff fe04 	bl	80013dc <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80017d4:	4816      	ldr	r0, [pc, #88]	; (8001830 <MX_I2C1_Init+0xd8>)
 80017d6:	f7ff ff3d 	bl	8001654 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80017da:	4815      	ldr	r0, [pc, #84]	; (8001830 <MX_I2C1_Init+0xd8>)
 80017dc:	f7ff fec1 	bl	8001562 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80017e0:	4813      	ldr	r0, [pc, #76]	; (8001830 <MX_I2C1_Init+0xd8>)
 80017e2:	f7ff fe96 	bl	8001512 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80017e6:	4812      	ldr	r0, [pc, #72]	; (8001830 <MX_I2C1_Init+0xd8>)
 80017e8:	f7ff fe83 	bl	80014f2 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_I2C1_Init+0xdc>)
 80017f2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4619      	mov	r1, r3
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <MX_I2C1_Init+0xd8>)
 8001810:	f001 febb 	bl	800358a <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_I2C1_Init+0xd8>)
 800181a:	f7ff fe8a 	bl	8001532 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800181e:	4804      	ldr	r0, [pc, #16]	; (8001830 <MX_I2C1_Init+0xd8>)
 8001820:	f7ff fe57 	bl	80014d2 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3738      	adds	r7, #56	; 0x38
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	48000400 	.word	0x48000400
 8001830:	40005400 	.word	0x40005400
 8001834:	2000090e 	.word	0x2000090e

08001838 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b085      	sub	sp, #20
 800183c:	af02      	add	r7, sp, #8
 800183e:	4604      	mov	r4, r0
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4623      	mov	r3, r4
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	4603      	mov	r3, r0
 800184c:	71bb      	strb	r3, [r7, #6]
 800184e:	460b      	mov	r3, r1
 8001850:	717b      	strb	r3, [r7, #5]
 8001852:	4613      	mov	r3, r2
 8001854:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001856:	793b      	ldrb	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001862:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001864:	7979      	ldrb	r1, [r7, #5]
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <i2c_master_write+0x80>)
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2302      	movs	r3, #2
 8001872:	2200      	movs	r2, #0
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <i2c_master_write+0x84>)
 8001876:	f7ff fefd 	bl	8001674 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	4619      	mov	r1, r3
 800187e:	480f      	ldr	r0, [pc, #60]	; (80018bc <i2c_master_write+0x84>)
 8001880:	f7ff ff2b 	bl	80016da <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001884:	e00a      	b.n	800189c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <i2c_master_write+0x84>)
 8001888:	f7ff fe9b 	bl	80015c2 <LL_I2C_IsActiveFlag_TXIS>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4619      	mov	r1, r3
 8001896:	4809      	ldr	r0, [pc, #36]	; (80018bc <i2c_master_write+0x84>)
 8001898:	f7ff ff1f 	bl	80016da <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800189c:	4807      	ldr	r0, [pc, #28]	; (80018bc <i2c_master_write+0x84>)
 800189e:	f7ff feb6 	bl	800160e <LL_I2C_IsActiveFlag_STOP>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ee      	beq.n	8001886 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <i2c_master_write+0x84>)
 80018aa:	f7ff fec3 	bl	8001634 <LL_I2C_ClearFlag_STOP>
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd90      	pop	{r4, r7, pc}
 80018b6:	bf00      	nop
 80018b8:	80002000 	.word	0x80002000
 80018bc:	40005400 	.word	0x40005400

080018c0 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	4603      	mov	r3, r0
 80018d0:	70fb      	strb	r3, [r7, #3]
 80018d2:	460b      	mov	r3, r1
 80018d4:	70bb      	strb	r3, [r7, #2]
 80018d6:	4613      	mov	r3, r2
 80018d8:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80018da:	4a30      	ldr	r2, [pc, #192]	; (800199c <i2c_master_read+0xdc>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80018e0:	7c3b      	ldrb	r3, [r7, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 80018e6:	78bb      	ldrb	r3, [r7, #2]
 80018e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ec:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <i2c_master_read+0xe0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80018f4:	482b      	ldr	r0, [pc, #172]	; (80019a4 <i2c_master_read+0xe4>)
 80018f6:	f7ff fe44 	bl	8001582 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80018fa:	7879      	ldrb	r1, [r7, #1]
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <i2c_master_read+0xe8>)
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2301      	movs	r3, #1
 8001908:	2200      	movs	r2, #0
 800190a:	4826      	ldr	r0, [pc, #152]	; (80019a4 <i2c_master_read+0xe4>)
 800190c:	f7ff feb2 	bl	8001674 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001910:	e00a      	b.n	8001928 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001912:	4824      	ldr	r0, [pc, #144]	; (80019a4 <i2c_master_read+0xe4>)
 8001914:	f7ff fe55 	bl	80015c2 <LL_I2C_IsActiveFlag_TXIS>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr); //adresa, ktoru chceme citat - posielame do slave zariadenia
 800191e:	78bb      	ldrb	r3, [r7, #2]
 8001920:	4619      	mov	r1, r3
 8001922:	4820      	ldr	r0, [pc, #128]	; (80019a4 <i2c_master_read+0xe4>)
 8001924:	f7ff fed9 	bl	80016da <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001928:	481e      	ldr	r0, [pc, #120]	; (80019a4 <i2c_master_read+0xe4>)
 800192a:	f7ff fe70 	bl	800160e <LL_I2C_IsActiveFlag_STOP>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ee      	beq.n	8001912 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001934:	481b      	ldr	r0, [pc, #108]	; (80019a4 <i2c_master_read+0xe4>)
 8001936:	f7ff fe7d 	bl	8001634 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 800193a:	bf00      	nop
 800193c:	4819      	ldr	r0, [pc, #100]	; (80019a4 <i2c_master_read+0xe4>)
 800193e:	f7ff fe66 	bl	800160e <LL_I2C_IsActiveFlag_STOP>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f9      	bne.n	800193c <i2c_master_read+0x7c>

	//citam register od slejva, LL_I2C_HandleTransfer- dolezita funkcia
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001948:	7879      	ldrb	r1, [r7, #1]
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	4a17      	ldr	r2, [pc, #92]	; (80019ac <i2c_master_read+0xec>)
 800194e:	9201      	str	r2, [sp, #4]
 8001950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	2200      	movs	r2, #0
 8001958:	4812      	ldr	r0, [pc, #72]	; (80019a4 <i2c_master_read+0xe4>)
 800195a:	f7ff fe8b 	bl	8001674 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800195e:	bf00      	nop
 8001960:	4810      	ldr	r0, [pc, #64]	; (80019a4 <i2c_master_read+0xe4>)
 8001962:	f7ff fe54 	bl	800160e <LL_I2C_IsActiveFlag_STOP>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f9      	beq.n	8001960 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <i2c_master_read+0xe4>)
 800196e:	f7ff fe61 	bl	8001634 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001972:	480c      	ldr	r0, [pc, #48]	; (80019a4 <i2c_master_read+0xe4>)
 8001974:	f7ff fe15 	bl	80015a2 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <i2c_master_read+0xe4>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <i2c_master_read+0xe4>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <i2c_master_read+0xf0>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <i2c_master_read+0xe0>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <i2c_master_read+0xdc>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000228 	.word	0x20000228
 80019a0:	20000210 	.word	0x20000210
 80019a4:	40005400 	.word	0x40005400
 80019a8:	80002000 	.word	0x80002000
 80019ac:	80002400 	.word	0x80002400
 80019b0:	20000211 	.word	0x20000211

080019b4 <I2C1_EV_IRQHandler_fun>:


void I2C1_EV_IRQHandler_fun(void)
{
 80019b4:	b598      	push	{r3, r4, r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80019b8:	4812      	ldr	r0, [pc, #72]	; (8001a04 <I2C1_EV_IRQHandler_fun+0x50>)
 80019ba:	f7ff fe15 	bl	80015e8 <LL_I2C_IsActiveFlag_RXNE>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01c      	beq.n	80019fe <I2C1_EV_IRQHandler_fun+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80019c4:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <I2C1_EV_IRQHandler_fun+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <I2C1_EV_IRQHandler_fun+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	1c59      	adds	r1, r3, #1
 80019d0:	b2c8      	uxtb	r0, r1
 80019d2:	490e      	ldr	r1, [pc, #56]	; (8001a0c <I2C1_EV_IRQHandler_fun+0x58>)
 80019d4:	7008      	strb	r0, [r1, #0]
 80019d6:	18d4      	adds	r4, r2, r3
 80019d8:	480a      	ldr	r0, [pc, #40]	; (8001a04 <I2C1_EV_IRQHandler_fun+0x50>)
 80019da:	f7ff fe71 	bl	80016c0 <LL_I2C_ReceiveData8>
 80019de:	4603      	mov	r3, r0
 80019e0:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <I2C1_EV_IRQHandler_fun+0x58>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b13      	cmp	r3, #19
 80019ea:	d903      	bls.n	80019f4 <I2C1_EV_IRQHandler_fun+0x40>
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <I2C1_EV_IRQHandler_fun+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
 80019f2:	e001      	b.n	80019f8 <I2C1_EV_IRQHandler_fun+0x44>
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <I2C1_EV_IRQHandler_fun+0x58>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <I2C1_EV_IRQHandler_fun+0x5c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
	}
}
 80019fe:	bf00      	nop
 8001a00:	bd98      	pop	{r3, r4, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40005400 	.word	0x40005400
 8001a08:	20000228 	.word	0x20000228
 8001a0c:	20000211 	.word	0x20000211
 8001a10:	20000210 	.word	0x20000210

08001a14 <iks01a1_init>:
#include "iks01a1.h"

uint8_t data = 0;

uint8_t iks01a1_init(void){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	LL_mDelay(500);
 8001a1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a1e:	f002 fa13 	bl	8003e48 <LL_mDelay>
	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8001a22:	200f      	movs	r0, #15
 8001a24:	f000 fa2c 	bl	8001e80 <lps25hb_read_byte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
	//val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);

	if(!(val == LPS25HB_WHO_AM_I_VALUE))
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	2bbd      	cmp	r3, #189	; 0xbd
 8001a30:	d001      	beq.n	8001a36 <iks01a1_init+0x22>
	{
		return 0; //bad who am I value
 8001a32:	2300      	movs	r3, #0
 8001a34:	e02a      	b.n	8001a8c <iks01a1_init+0x78>
	}

	ctrl = hts221_read_byte(LPS25HB_CTRL_REG1);
 8001a36:	2020      	movs	r0, #32
 8001a38:	f000 fa3a 	bl	8001eb0 <hts221_read_byte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 7;
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a46:	71bb      	strb	r3, [r7, #6]
	lps25hb_write_byte(LPS25HB_CTRL_REG1, ctrl); //active mode
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	2020      	movs	r0, #32
 8001a4e:	f000 fa81 	bl	8001f54 <lps25hb_write_byte>


	LL_mDelay(500);
 8001a52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a56:	f002 f9f7 	bl	8003e48 <LL_mDelay>
	val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f000 fa28 	bl	8001eb0 <hts221_read_byte>
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]

	if(!(val == HTS221_WHO_AM_I_VALUE))
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2bbc      	cmp	r3, #188	; 0xbc
 8001a68:	d001      	beq.n	8001a6e <iks01a1_init+0x5a>
	{
		return 0; //bad who am I value
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e00e      	b.n	8001a8c <iks01a1_init+0x78>
	}

	ctrl = hts221_read_byte(HTS221_CTRL_REG1);
 8001a6e:	2020      	movs	r0, #32
 8001a70:	f000 fa1e 	bl	8001eb0 <hts221_read_byte>
 8001a74:	4603      	mov	r3, r0
 8001a76:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 7;
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a7e:	71bb      	strb	r3, [r7, #6]
	hts221_write_byte(HTS221_CTRL_REG1, ctrl); //active mode
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	4619      	mov	r1, r3
 8001a84:	2020      	movs	r0, #32
 8001a86:	f000 fa53 	bl	8001f30 <hts221_write_byte>
	//uint8_t ctrltest = hts221_read_byte(HTS221_CTRL_REG1);

	//ctrl = ctrltest;

	return 1;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <hts221_start_measurement>:

void hts221_start_measurement(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
	uint8_t ctrl = hts221_read_byte(LPS25HB_CTRL_REG2);
 8001a9a:	2021      	movs	r0, #33	; 0x21
 8001a9c:	f000 fa08 	bl	8001eb0 <hts221_read_byte>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
	ctrl |= 0x1;
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	71fb      	strb	r3, [r7, #7]
	lps25hb_write_byte(LPS25HB_CTRL_REG2, ctrl); //activate measurement
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	2021      	movs	r0, #33	; 0x21
 8001ab2:	f000 fa4f 	bl	8001f54 <lps25hb_write_byte>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <lps25hb_start_measurement>:

void lps25hb_start_measurement(void) {
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
	uint8_t ctrl = hts221_read_byte(HTS221_CTRL_REG2);
 8001ac4:	2021      	movs	r0, #33	; 0x21
 8001ac6:	f000 f9f3 	bl	8001eb0 <hts221_read_byte>
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
	ctrl |= 0x1;
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	71fb      	strb	r3, [r7, #7]
	hts221_write_byte(HTS221_CTRL_REG2, ctrl); //activate measurement
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	2021      	movs	r0, #33	; 0x21
 8001adc:	f000 fa28 	bl	8001f30 <hts221_write_byte>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <hts221_get_humidity>:

void hts221_get_humidity(float* out) { //humidity measurement (%)
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	uint8_t data[2], h0_rh, h1_rh;
	int16_t h_out, h0_t0_out, h1_t0_out;



	uint8_t availability = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 8001af4:	2027      	movs	r0, #39	; 0x27
 8001af6:	f000 f9db 	bl	8001eb0 <hts221_read_byte>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1) >> 1;
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10a      	bne.n	8001b22 <hts221_get_humidity+0x3a>
		hts221_start_measurement();
 8001b0c:	f7ff ffc2 	bl	8001a94 <hts221_start_measurement>
		availability = hts221_read_byte(HTS221_STATUS_REG);
 8001b10:	2027      	movs	r0, #39	; 0x27
 8001b12:	f000 f9cd 	bl	8001eb0 <hts221_read_byte>
 8001b16:	4603      	mov	r3, r0
 8001b18:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(0x1<<1);
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	75fb      	strb	r3, [r7, #23]
	}

	h0_rh = hts221_read_byte(HTS221_H0_RH)/2;
 8001b22:	2030      	movs	r0, #48	; 0x30
 8001b24:	f000 f9c4 	bl	8001eb0 <hts221_read_byte>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	75bb      	strb	r3, [r7, #22]
	h1_rh = hts221_read_byte(HTS221_H1_RH)/2;
 8001b2e:	2031      	movs	r0, #49	; 0x31
 8001b30:	f000 f9be 	bl	8001eb0 <hts221_read_byte>
 8001b34:	4603      	mov	r3, r0
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	757b      	strb	r3, [r7, #21]

	hts221_readArray(data, HTS221_H0_T0_OUT, 2);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	2202      	movs	r2, #2
 8001b40:	2136      	movs	r1, #54	; 0x36
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f9cc 	bl	8001ee0 <hts221_readArray>
	h0_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 8001b48:	7b7b      	ldrb	r3, [r7, #13]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	7b3b      	ldrb	r3, [r7, #12]
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_H1_T0_OUT, 2);
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	213a      	movs	r1, #58	; 0x3a
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f9be 	bl	8001ee0 <hts221_readArray>
	h1_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 8001b64:	7b7b      	ldrb	r3, [r7, #13]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	7b3b      	ldrb	r3, [r7, #12]
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	823b      	strh	r3, [r7, #16]

	hts221_readArray(data, HTS221_HUMIDITY_ADDR, 2);
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	2202      	movs	r2, #2
 8001b78:	2128      	movs	r1, #40	; 0x28
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f9b0 	bl	8001ee0 <hts221_readArray>

	h_out = ((uint16_t)data[1]) << 8 | data[0];
 8001b80:	7b7b      	ldrb	r3, [r7, #13]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	7b3b      	ldrb	r3, [r7, #12]
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	81fb      	strh	r3, [r7, #14]
	*out = (float)((h1_rh-h0_rh)*(h_out-h0_t0_out)/(float)(h1_t0_out-h0_t0_out)+h0_rh);
 8001b8e:	7d7a      	ldrb	r2, [r7, #21]
 8001b90:	7dbb      	ldrb	r3, [r7, #22]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001b98:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b9c:	1a8a      	subs	r2, r1, r2
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001baa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001bae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bc0:	7dbb      	ldrb	r3, [r7, #22]
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
}
 8001bd4:	bf00      	nop
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <hts221_get_temperature>:

void hts221_get_temperature(float* out) { //temperature measurement (°C)
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	int16_t t_out, t0_out, t1_out, t0_degc, t1_degc;

	uint8_t availability = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 8001be8:	2027      	movs	r0, #39	; 0x27
 8001bea:	f000 f961 	bl	8001eb0 <hts221_read_byte>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1);
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <hts221_get_temperature+0x3a>
		hts221_start_measurement();
 8001c00:	f7ff ff48 	bl	8001a94 <hts221_start_measurement>
		availability = hts221_read_byte(HTS221_STATUS_REG);
 8001c04:	2027      	movs	r0, #39	; 0x27
 8001c06:	f000 f953 	bl	8001eb0 <hts221_read_byte>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1);
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
	}

	uint8_t tmp = hts221_read_byte(HTS221_T0_T1_DEGC_MSB);
 8001c16:	2035      	movs	r0, #53	; 0x35
 8001c18:	f000 f94a 	bl	8001eb0 <hts221_read_byte>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	75bb      	strb	r3, [r7, #22]
	uint16_t tmp2;

	t0_degc = hts221_read_byte(HTS221_T0_DEGC);
 8001c20:	2032      	movs	r0, #50	; 0x32
 8001c22:	f000 f945 	bl	8001eb0 <hts221_read_byte>
 8001c26:	4603      	mov	r3, r0
 8001c28:	82bb      	strh	r3, [r7, #20]
	t1_degc = hts221_read_byte(HTS221_T1_DEGC);
 8001c2a:	2033      	movs	r0, #51	; 0x33
 8001c2c:	f000 f940 	bl	8001eb0 <hts221_read_byte>
 8001c30:	4603      	mov	r3, r0
 8001c32:	827b      	strh	r3, [r7, #18]

	t0_degc += ((tmp & 0x3)<<8);
 8001c34:	7dbb      	ldrb	r3, [r7, #22]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	8abb      	ldrh	r3, [r7, #20]
 8001c42:	4413      	add	r3, r2
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	82bb      	strh	r3, [r7, #20]
	t0_degc /= 8;
 8001c48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da00      	bge.n	8001c52 <hts221_get_temperature+0x76>
 8001c50:	3307      	adds	r3, #7
 8001c52:	10db      	asrs	r3, r3, #3
 8001c54:	82bb      	strh	r3, [r7, #20]

	tmp2 = ((tmp & (0x3)<<2))<<6;
 8001c56:	7dbb      	ldrb	r3, [r7, #22]
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c60:	823b      	strh	r3, [r7, #16]
	t1_degc += ((tmp & ((0x3)<<2))<<6);
 8001c62:	7dbb      	ldrb	r3, [r7, #22]
 8001c64:	019b      	lsls	r3, r3, #6
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	8a7b      	ldrh	r3, [r7, #18]
 8001c70:	4413      	add	r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	827b      	strh	r3, [r7, #18]
	t1_degc /= 8;
 8001c76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da00      	bge.n	8001c80 <hts221_get_temperature+0xa4>
 8001c7e:	3307      	adds	r3, #7
 8001c80:	10db      	asrs	r3, r3, #3
 8001c82:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_T0_OUT, 2);
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	2202      	movs	r2, #2
 8001c8a:	213c      	movs	r1, #60	; 0x3c
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f927 	bl	8001ee0 <hts221_readArray>
	t0_out = (((uint16_t)data[1]) << 8) | data[0];
 8001c92:	7a7b      	ldrb	r3, [r7, #9]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	7a3b      	ldrb	r3, [r7, #8]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	81fb      	strh	r3, [r7, #14]
	hts221_readArray(data, HTS221_T1_OUT, 2);
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	213e      	movs	r1, #62	; 0x3e
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f919 	bl	8001ee0 <hts221_readArray>
	t1_out = (((uint16_t)data[1]) << 8) | data[0];
 8001cae:	7a7b      	ldrb	r3, [r7, #9]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	7a3b      	ldrb	r3, [r7, #8]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	81bb      	strh	r3, [r7, #12]

	hts221_readArray(data, HTS221_TEMPERATURE_ADDR, 2);
 8001cbc:	f107 0308 	add.w	r3, r7, #8
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	212a      	movs	r1, #42	; 0x2a
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f90b 	bl	8001ee0 <hts221_readArray>

	t_out = ((uint16_t)data[1]) << 8 | data[0];
 8001cca:	7a7b      	ldrb	r3, [r7, #9]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	7a3b      	ldrb	r3, [r7, #8]
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	817b      	strh	r3, [r7, #10]
	*out = (float)((t1_degc - t0_degc)*(t_out-t0_out)/(float)(t1_out-t0_out)+t0_degc);
 8001cd8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001cdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001ce6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cea:	1a8a      	subs	r2, r1, r2
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cf8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001cfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a00 	vstr	s15, [r3]
}
 8001d24:	bf00      	nop
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <lps25hb_get_pressure>:

void lps25hb_get_pressure(float* out) { //pressure measurement (hPa = mBAR)
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pressure;// ref_pressure;

	uint8_t availability = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	75fb      	strb	r3, [r7, #23]
	availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001d38:	2027      	movs	r0, #39	; 0x27
 8001d3a:	f000 f8a1 	bl	8001e80 <lps25hb_read_byte>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1)>>1;
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10a      	bne.n	8001d66 <lps25hb_get_pressure+0x3a>
		lps25hb_start_measurement();
 8001d50:	f7ff feb5 	bl	8001abe <lps25hb_start_measurement>
		availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001d54:	2027      	movs	r0, #39	; 0x27
 8001d56:	f000 f893 	bl	8001e80 <lps25hb_read_byte>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1<<1);
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	75fb      	strb	r3, [r7, #23]
	}

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDR, 3);
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	2128      	movs	r1, #40	; 0x28
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f8ca 	bl	8001f08 <lps25hb_readArray>
	pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8001d74:	7bbb      	ldrb	r3, [r7, #14]
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	7b7a      	ldrb	r2, [r7, #13]
 8001d7a:	0212      	lsls	r2, r2, #8
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	7b3a      	ldrb	r2, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

	/*lps25hb_readArray(data, LPS25HB_REF_PRESSURE_ADDR, 3);
	ref_pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];*/

	*out =  (float)(pressure)/(float)(4096);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d8e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001da4 <lps25hb_get_pressure+0x78>
 8001d92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	edc3 7a00 	vstr	s15, [r3]
}
 8001d9c:	bf00      	nop
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	45800000 	.word	0x45800000

08001da8 <lps25hb_get_altitude>:

void lps25hb_get_altitude(float* out) { //altitude measurement (m.n.m./AMSL)
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pressure;

	uint8_t availability = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	75fb      	strb	r3, [r7, #23]
	availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001db4:	2027      	movs	r0, #39	; 0x27
 8001db6:	f000 f863 	bl	8001e80 <lps25hb_read_byte>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1)>>1;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <lps25hb_get_altitude+0x3a>
		lps25hb_start_measurement();
 8001dcc:	f7ff fe77 	bl	8001abe <lps25hb_start_measurement>
		availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001dd0:	2027      	movs	r0, #39	; 0x27
 8001dd2:	f000 f855 	bl	8001e80 <lps25hb_read_byte>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1<<1);
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	75fb      	strb	r3, [r7, #23]
	}

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDR, 3);
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	2203      	movs	r2, #3
 8001de8:	2128      	movs	r1, #40	; 0x28
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f88c 	bl	8001f08 <lps25hb_readArray>
	pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8001df0:	7bbb      	ldrb	r3, [r7, #14]
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	7b7a      	ldrb	r2, [r7, #13]
 8001df6:	0212      	lsls	r2, r2, #8
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	7b3a      	ldrb	r2, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]

	*out = 44330*(1-pow((float)(pressure)/(float)(4096*1013.25f),(1/5.255f)));
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e0a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001e78 <lps25hb_get_altitude+0xd0>
 8001e0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e12:	ee16 0a90 	vmov	r0, s13
 8001e16:	f7fe fb97 	bl	8000548 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001e68 <lps25hb_get_altitude+0xc0>
 8001e22:	ec43 2b10 	vmov	d0, r2, r3
 8001e26:	f006 fc9b 	bl	8008760 <pow>
 8001e2a:	ec53 2b10 	vmov	r2, r3, d0
 8001e2e:	f04f 0000 	mov.w	r0, #0
 8001e32:	4912      	ldr	r1, [pc, #72]	; (8001e7c <lps25hb_get_altitude+0xd4>)
 8001e34:	f7fe fa28 	bl	8000288 <__aeabi_dsub>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	a30b      	add	r3, pc, #44	; (adr r3, 8001e70 <lps25hb_get_altitude+0xc8>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f7fe fbd7 	bl	80005f8 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7fe fec9 	bl	8000be8 <__aeabi_d2f>
 8001e56:	4602      	mov	r2, r0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	601a      	str	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	f3af 8000 	nop.w
 8001e68:	c0000000 	.word	0xc0000000
 8001e6c:	3fc85b95 	.word	0x3fc85b95
 8001e70:	00000000 	.word	0x00000000
 8001e74:	40e5a540 	.word	0x40e5a540
 8001e78:	4a7d5000 	.word	0x4a7d5000
 8001e7c:	3ff00000 	.word	0x3ff00000

08001e80 <lps25hb_read_byte>:

uint8_t lps25hb_read_byte(uint8_t reg_addr) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <lps25hb_read_byte+0x2c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, LPS25HB_DEVICE_ADDRESS, 0));
 8001e90:	79fa      	ldrb	r2, [r7, #7]
 8001e92:	2300      	movs	r3, #0
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	23bb      	movs	r3, #187	; 0xbb
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4804      	ldr	r0, [pc, #16]	; (8001eac <lps25hb_read_byte+0x2c>)
 8001e9c:	f7ff fd10 	bl	80018c0 <i2c_master_read>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	781b      	ldrb	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000212 	.word	0x20000212

08001eb0 <hts221_read_byte>:

uint8_t hts221_read_byte(uint8_t reg_addr) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <hts221_read_byte+0x2c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, HTS221_DEVICE_ADDRESS, 0));
 8001ec0:	79fa      	ldrb	r2, [r7, #7]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	23be      	movs	r3, #190	; 0xbe
 8001ec8:	2101      	movs	r1, #1
 8001eca:	4804      	ldr	r0, [pc, #16]	; (8001edc <hts221_read_byte+0x2c>)
 8001ecc:	f7ff fcf8 	bl	80018c0 <i2c_master_read>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	781b      	ldrb	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000212 	.word	0x20000212

08001ee0 <hts221_readArray>:
{
	i2c_master_read(data, length, reg, LSM6DS0_DEVICE_ADDRESS, 1);
}

void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
 8001eec:	4613      	mov	r3, r2
 8001eee:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, HTS221_DEVICE_ADDRESS, 1);
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	78b9      	ldrb	r1, [r7, #2]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	23be      	movs	r3, #190	; 0xbe
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fce0 	bl	80018c0 <i2c_master_read>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <lps25hb_readArray>:

void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70fb      	strb	r3, [r7, #3]
 8001f14:	4613      	mov	r3, r2
 8001f16:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, LPS25HB_DEVICE_ADDRESS, 1);
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	78b9      	ldrb	r1, [r7, #2]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	23bb      	movs	r3, #187	; 0xbb
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fccc 	bl	80018c0 <i2c_master_read>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <hts221_write_byte>:
{
	i2c_master_write(value, reg_addr, LSM6DS0_DEVICE_ADDRESS, 0);
}

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, HTS221_DEVICE_ADDRESS, 0);
 8001f40:	79f9      	ldrb	r1, [r7, #7]
 8001f42:	79b8      	ldrb	r0, [r7, #6]
 8001f44:	2300      	movs	r3, #0
 8001f46:	22be      	movs	r2, #190	; 0xbe
 8001f48:	f7ff fc76 	bl	8001838 <i2c_master_write>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	71fb      	strb	r3, [r7, #7]
 8001f60:	4613      	mov	r3, r2
 8001f62:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS25HB_DEVICE_ADDRESS, 0);
 8001f64:	79f9      	ldrb	r1, [r7, #7]
 8001f66:	79b8      	ldrb	r0, [r7, #6]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	22bb      	movs	r2, #187	; 0xbb
 8001f6c:	f7ff fc64 	bl	8001838 <i2c_master_write>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <__NVIC_SetPriorityGrouping>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <LL_RCC_HSI_Enable+0x1c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <LL_RCC_HSI_Enable+0x1c>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <LL_RCC_HSI_IsReady+0x20>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	40021000 	.word	0x40021000

08002004 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4904      	ldr	r1, [pc, #16]	; (800202c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000

08002030 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <LL_RCC_SetSysClkSource+0x24>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 0203 	bic.w	r2, r3, #3
 8002040:	4904      	ldr	r1, [pc, #16]	; (8002054 <LL_RCC_SetSysClkSource+0x24>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40021000 	.word	0x40021000

08002058 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <LL_RCC_GetSysClkSource+0x18>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <LL_RCC_SetAHBPrescaler+0x24>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002084:	4904      	ldr	r1, [pc, #16]	; (8002098 <LL_RCC_SetAHBPrescaler+0x24>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000

0800209c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ac:	4904      	ldr	r1, [pc, #16]	; (80020c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000

080020c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d4:	4904      	ldr	r1, [pc, #16]	; (80020e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40021000 	.word	0x40021000

080020ec <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <LL_RCC_SetI2CClockSource+0x2c>)
 80020f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	0e1b      	lsrs	r3, r3, #24
 80020fc:	43db      	mvns	r3, r3
 80020fe:	401a      	ands	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002106:	4904      	ldr	r1, [pc, #16]	; (8002118 <LL_RCC_SetI2CClockSource+0x2c>)
 8002108:	4313      	orrs	r3, r2
 800210a:	630b      	str	r3, [r1, #48]	; 0x30
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40021000 	.word	0x40021000

0800211c <LL_APB1_GRP1_EnableClock>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <LL_APB1_GRP1_EnableClock+0x2c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4313      	orrs	r3, r2
 800212e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4013      	ands	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40021000 	.word	0x40021000

0800214c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4313      	orrs	r3, r2
 800215e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4013      	ands	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40021000 	.word	0x40021000

0800217c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <LL_FLASH_SetLatency+0x24>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0207 	bic.w	r2, r3, #7
 800218c:	4904      	ldr	r1, [pc, #16]	; (80021a0 <LL_FLASH_SetLatency+0x24>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40022000 	.word	0x40022000

080021a4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <LL_FLASH_GetLatency+0x18>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40022000 	.word	0x40022000

080021c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021c4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f7ff ffc0 	bl	800214c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80021cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80021d0:	f7ff ffa4 	bl	800211c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f7ff fecf 	bl	8001f78 <__NVIC_SetPriorityGrouping>
  EXTI->RTSR &= ~(EXTI_IMR_MR4);
  EXTI->FTSR |= EXTI_IMR_MR4;*/
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021da:	f000 f96b 	bl	80024b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Systick_Init();
 80021de:	f000 fcfb 	bl	8002bd8 <Systick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021e2:	f7ff f873 	bl	80012cc <MX_GPIO_Init>
  MX_I2C1_Init();
 80021e6:	f7ff fab7 	bl	8001758 <MX_I2C1_Init>
  MX_TIM3_Init();
 80021ea:	f000 fd07 	bl	8002bfc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  error = 0;
 80021ee:	4b97      	ldr	r3, [pc, #604]	; (800244c <main+0x28c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
  if(!iks01a1_init()) error = 1;
 80021f4:	f7ff fc0e 	bl	8001a14 <iks01a1_init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <main+0x44>
 80021fe:	4b93      	ldr	r3, [pc, #588]	; (800244c <main+0x28c>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]


  setSegments();
 8002204:	f7fe fdc0 	bl	8000d88 <setSegments>
  setDigits();
 8002208:	f7fe fe0c 	bl	8000e24 <setDigits>
  LL_mDelay(2000);
 800220c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002210:	f001 fe1a 	bl	8003e48 <LL_mDelay>
  resetDigits();
 8002214:	f7fe fde6 	bl	8000de4 <resetDigits>
  resetSegments();
 8002218:	f7fe fd88 	bl	8000d2c <resetSegments>

  mode = 0;
 800221c:	4b8c      	ldr	r3, [pc, #560]	; (8002450 <main+0x290>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(error) {
 8002222:	4b8a      	ldr	r3, [pc, #552]	; (800244c <main+0x28c>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00e      	beq.n	8002248 <main+0x88>
		  strcpy(display_text,"I2C_who_am_I_error\0");
 800222a:	4a8a      	ldr	r2, [pc, #552]	; (8002454 <main+0x294>)
 800222c:	4b8a      	ldr	r3, [pc, #552]	; (8002458 <main+0x298>)
 800222e:	4615      	mov	r5, r2
 8002230:	461c      	mov	r4, r3
 8002232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002234:	6028      	str	r0, [r5, #0]
 8002236:	6069      	str	r1, [r5, #4]
 8002238:	60aa      	str	r2, [r5, #8]
 800223a:	60eb      	str	r3, [r5, #12]
 800223c:	8823      	ldrh	r3, [r4, #0]
 800223e:	78a2      	ldrb	r2, [r4, #2]
 8002240:	822b      	strh	r3, [r5, #16]
 8002242:	4613      	mov	r3, r2
 8002244:	74ab      	strb	r3, [r5, #18]
 8002246:	e0b3      	b.n	80023b0 <main+0x1f0>
	  } else {
		  hts221_start_measurement();
 8002248:	f7ff fc24 	bl	8001a94 <hts221_start_measurement>
		  lps25hb_start_measurement();
 800224c:	f7ff fc37 	bl	8001abe <lps25hb_start_measurement>
		  hts221_get_humidity(&humidity);
 8002250:	4882      	ldr	r0, [pc, #520]	; (800245c <main+0x29c>)
 8002252:	f7ff fc49 	bl	8001ae8 <hts221_get_humidity>
		  hts221_get_temperature(&temperature);
 8002256:	4882      	ldr	r0, [pc, #520]	; (8002460 <main+0x2a0>)
 8002258:	f7ff fcc0 	bl	8001bdc <hts221_get_temperature>
		  lps25hb_get_pressure(&pressure);
 800225c:	4881      	ldr	r0, [pc, #516]	; (8002464 <main+0x2a4>)
 800225e:	f7ff fd65 	bl	8001d2c <lps25hb_get_pressure>
		  lps25hb_start_measurement();
 8002262:	f7ff fc2c 	bl	8001abe <lps25hb_start_measurement>
		  lps25hb_get_altitude(&altitude);
 8002266:	4880      	ldr	r0, [pc, #512]	; (8002468 <main+0x2a8>)
 8002268:	f7ff fd9e 	bl	8001da8 <lps25hb_get_altitude>

		  if (mode == 0) {
 800226c:	4b78      	ldr	r3, [pc, #480]	; (8002450 <main+0x290>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d124      	bne.n	80022be <main+0xfe>
			  if(temperature>=100){
 8002274:	4b7a      	ldr	r3, [pc, #488]	; (8002460 <main+0x2a0>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800246c <main+0x2ac>
 800227e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002286:	db02      	blt.n	800228e <main+0xce>
				temperature=99.9;
 8002288:	4b75      	ldr	r3, [pc, #468]	; (8002460 <main+0x2a0>)
 800228a:	4a79      	ldr	r2, [pc, #484]	; (8002470 <main+0x2b0>)
 800228c:	601a      	str	r2, [r3, #0]
			  }
			  if(temperature<=-100){
 800228e:	4b74      	ldr	r3, [pc, #464]	; (8002460 <main+0x2a0>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002474 <main+0x2b4>
 8002298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d802      	bhi.n	80022a8 <main+0xe8>
				temperature=-99.9;
 80022a2:	4b6f      	ldr	r3, [pc, #444]	; (8002460 <main+0x2a0>)
 80022a4:	4a74      	ldr	r2, [pc, #464]	; (8002478 <main+0x2b8>)
 80022a6:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "TEMP_%2.1f", temperature);
 80022a8:	4b6d      	ldr	r3, [pc, #436]	; (8002460 <main+0x2a0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f94b 	bl	8000548 <__aeabi_f2d>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4971      	ldr	r1, [pc, #452]	; (800247c <main+0x2bc>)
 80022b8:	4866      	ldr	r0, [pc, #408]	; (8002454 <main+0x294>)
 80022ba:	f002 fcad 	bl	8004c18 <siprintf>

		   }

		   if (mode == 1){
 80022be:	4b64      	ldr	r3, [pc, #400]	; (8002450 <main+0x290>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d123      	bne.n	800230e <main+0x14e>
			  if(humidity>=100){
 80022c6:	4b65      	ldr	r3, [pc, #404]	; (800245c <main+0x29c>)
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800246c <main+0x2ac>
 80022d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	db02      	blt.n	80022e0 <main+0x120>
				humidity=99;
 80022da:	4b60      	ldr	r3, [pc, #384]	; (800245c <main+0x29c>)
 80022dc:	4a68      	ldr	r2, [pc, #416]	; (8002480 <main+0x2c0>)
 80022de:	601a      	str	r2, [r3, #0]
			  }
			  if(humidity<0){
 80022e0:	4b5e      	ldr	r3, [pc, #376]	; (800245c <main+0x29c>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ee:	d503      	bpl.n	80022f8 <main+0x138>
				humidity = 0;
 80022f0:	4b5a      	ldr	r3, [pc, #360]	; (800245c <main+0x29c>)
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "HUM_%2.0f", humidity);
 80022f8:	4b58      	ldr	r3, [pc, #352]	; (800245c <main+0x29c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f923 	bl	8000548 <__aeabi_f2d>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	495f      	ldr	r1, [pc, #380]	; (8002484 <main+0x2c4>)
 8002308:	4852      	ldr	r0, [pc, #328]	; (8002454 <main+0x294>)
 800230a:	f002 fc85 	bl	8004c18 <siprintf>
		   }


		   if (mode == 2){
 800230e:	4b50      	ldr	r3, [pc, #320]	; (8002450 <main+0x290>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d123      	bne.n	800235e <main+0x19e>
			  if(pressure>=10000){
 8002316:	4b53      	ldr	r3, [pc, #332]	; (8002464 <main+0x2a4>)
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8002488 <main+0x2c8>
 8002320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002328:	db02      	blt.n	8002330 <main+0x170>
				pressure=9999.99;
 800232a:	4b4e      	ldr	r3, [pc, #312]	; (8002464 <main+0x2a4>)
 800232c:	4a57      	ldr	r2, [pc, #348]	; (800248c <main+0x2cc>)
 800232e:	601a      	str	r2, [r3, #0]
			  }
			  if(pressure<0){
 8002330:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <main+0x2a4>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	d503      	bpl.n	8002348 <main+0x188>
				pressure = 0;
 8002340:	4b48      	ldr	r3, [pc, #288]	; (8002464 <main+0x2a4>)
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "BAR_%4.2f", pressure);
 8002348:	4b46      	ldr	r3, [pc, #280]	; (8002464 <main+0x2a4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f8fb 	bl	8000548 <__aeabi_f2d>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	494e      	ldr	r1, [pc, #312]	; (8002490 <main+0x2d0>)
 8002358:	483e      	ldr	r0, [pc, #248]	; (8002454 <main+0x294>)
 800235a:	f002 fc5d 	bl	8004c18 <siprintf>

		   }

		   if(mode == 3){
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <main+0x290>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d124      	bne.n	80023b0 <main+0x1f0>
			  if(altitude>=10000){
 8002366:	4b40      	ldr	r3, [pc, #256]	; (8002468 <main+0x2a8>)
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002488 <main+0x2c8>
 8002370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	db02      	blt.n	8002380 <main+0x1c0>
				altitude = 9999.9;
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <main+0x2a8>)
 800237c:	4a45      	ldr	r2, [pc, #276]	; (8002494 <main+0x2d4>)
 800237e:	601a      	str	r2, [r3, #0]
			  }
			  if(altitude<=-10000){
 8002380:	4b39      	ldr	r3, [pc, #228]	; (8002468 <main+0x2a8>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002498 <main+0x2d8>
 800238a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002392:	d802      	bhi.n	800239a <main+0x1da>
				altitude = -9999.9;
 8002394:	4b34      	ldr	r3, [pc, #208]	; (8002468 <main+0x2a8>)
 8002396:	4a41      	ldr	r2, [pc, #260]	; (800249c <main+0x2dc>)
 8002398:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "ALT_%4.1f", altitude);
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <main+0x2a8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f8d2 	bl	8000548 <__aeabi_f2d>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	493d      	ldr	r1, [pc, #244]	; (80024a0 <main+0x2e0>)
 80023aa:	482a      	ldr	r0, [pc, #168]	; (8002454 <main+0x294>)
 80023ac:	f002 fc34 	bl	8004c18 <siprintf>
		   }
	  }

	  if(disp_time > (saved_time + 500))
 80023b0:	4b3c      	ldr	r3, [pc, #240]	; (80024a4 <main+0x2e4>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f512 78fa 	adds.w	r8, r2, #500	; 0x1f4
 80023ba:	f143 0900 	adc.w	r9, r3, #0
 80023be:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <main+0x2e8>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	4599      	cmp	r9, r3
 80023c6:	bf08      	it	eq
 80023c8:	4590      	cmpeq	r8, r2
 80023ca:	f4bf af2a 	bcs.w	8002222 <main+0x62>
	  	  {

	  		  display_sign(display_text[act_index],display_text[act_index+1],display_text[act_index+2],display_text[act_index+3]);
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <main+0x2ec>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a20      	ldr	r2, [pc, #128]	; (8002454 <main+0x294>)
 80023d4:	5cd0      	ldrb	r0, [r2, r3]
 80023d6:	4b35      	ldr	r3, [pc, #212]	; (80024ac <main+0x2ec>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <main+0x294>)
 80023de:	5cd1      	ldrb	r1, [r2, r3]
 80023e0:	4b32      	ldr	r3, [pc, #200]	; (80024ac <main+0x2ec>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3302      	adds	r3, #2
 80023e6:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <main+0x294>)
 80023e8:	5cd2      	ldrb	r2, [r2, r3]
 80023ea:	4b30      	ldr	r3, [pc, #192]	; (80024ac <main+0x2ec>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3303      	adds	r3, #3
 80023f0:	4c18      	ldr	r4, [pc, #96]	; (8002454 <main+0x294>)
 80023f2:	5ce3      	ldrb	r3, [r4, r3]
 80023f4:	f7fe fdd0 	bl	8000f98 <display_sign>
	  	  	  saved_time = disp_time;
 80023f8:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <main+0x2e8>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	4929      	ldr	r1, [pc, #164]	; (80024a4 <main+0x2e4>)
 8002400:	e9c1 2300 	strd	r2, r3, [r1]

	  	  	  if(right){ //urcovanie smeru
 8002404:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <main+0x2f0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <main+0x258>
	  	  		  act_index++;
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <main+0x2ec>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a26      	ldr	r2, [pc, #152]	; (80024ac <main+0x2ec>)
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e004      	b.n	8002422 <main+0x262>
	  	  	  } else {
	  	  		  act_index--;
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <main+0x2ec>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3b01      	subs	r3, #1
 800241e:	4a23      	ldr	r2, [pc, #140]	; (80024ac <main+0x2ec>)
 8002420:	6013      	str	r3, [r2, #0]
	  	  	  }
	  	  	  if(act_index == strlen(display_text)-4) {
 8002422:	480c      	ldr	r0, [pc, #48]	; (8002454 <main+0x294>)
 8002424:	f7fd fed4 	bl	80001d0 <strlen>
 8002428:	4603      	mov	r3, r0
 800242a:	3b04      	subs	r3, #4
 800242c:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <main+0x2ec>)
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	4293      	cmp	r3, r2
 8002432:	d102      	bne.n	800243a <main+0x27a>
	  	  		  right = 0;
 8002434:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <main+0x2f0>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
	  	  	  }
	  	  	  if (act_index == 0){
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <main+0x2ec>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f47f aeef 	bne.w	8002222 <main+0x62>
	  	  		  right = 1;
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <main+0x2f0>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]
	  if(error) {
 800244a:	e6ea      	b.n	8002222 <main+0x62>
 800244c:	20000244 	.word	0x20000244
 8002450:	2000023c 	.word	0x2000023c
 8002454:	20000250 	.word	0x20000250
 8002458:	080096d0 	.word	0x080096d0
 800245c:	20000238 	.word	0x20000238
 8002460:	20000230 	.word	0x20000230
 8002464:	20000234 	.word	0x20000234
 8002468:	20000240 	.word	0x20000240
 800246c:	42c80000 	.word	0x42c80000
 8002470:	42c7cccd 	.word	0x42c7cccd
 8002474:	c2c80000 	.word	0xc2c80000
 8002478:	c2c7cccd 	.word	0xc2c7cccd
 800247c:	080096e4 	.word	0x080096e4
 8002480:	42c60000 	.word	0x42c60000
 8002484:	080096f0 	.word	0x080096f0
 8002488:	461c4000 	.word	0x461c4000
 800248c:	461c3ff6 	.word	0x461c3ff6
 8002490:	080096fc 	.word	0x080096fc
 8002494:	461c3f9a 	.word	0x461c3f9a
 8002498:	c61c4000 	.word	0xc61c4000
 800249c:	c61c3f9a 	.word	0xc61c3f9a
 80024a0:	08009708 	.word	0x08009708
 80024a4:	20000248 	.word	0x20000248
 80024a8:	20000200 	.word	0x20000200
 80024ac:	20000214 	.word	0x20000214
 80024b0:	20000000 	.word	0x20000000

080024b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7ff fe5f 	bl	800217c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80024be:	bf00      	nop
 80024c0:	f7ff fe70 	bl	80021a4 <LL_FLASH_GetLatency>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1fa      	bne.n	80024c0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80024ca:	f7ff fd79 	bl	8001fc0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80024ce:	bf00      	nop
 80024d0:	f7ff fd86 	bl	8001fe0 <LL_RCC_HSI_IsReady>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d1fa      	bne.n	80024d0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80024da:	2010      	movs	r0, #16
 80024dc:	f7ff fd92 	bl	8002004 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7ff fdc7 	bl	8002074 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7ff fdd8 	bl	800209c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7ff fde9 	bl	80020c4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7ff fd9c 	bl	8002030 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80024f8:	bf00      	nop
 80024fa:	f7ff fdad 	bl	8002058 <LL_RCC_GetSysClkSource>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1fa      	bne.n	80024fa <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <SystemClock_Config+0x68>)
 8002506:	f001 fc91 	bl	8003e2c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800250a:	4804      	ldr	r0, [pc, #16]	; (800251c <SystemClock_Config+0x68>)
 800250c:	f001 fcc2 	bl	8003e94 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8002510:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002514:	f7ff fdea 	bl	80020ec <LL_RCC_SetI2CClockSource>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	007a1200 	.word	0x007a1200

08002520 <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint16_t samples_window, uint16_t samples_required)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	70fb      	strb	r3, [r7, #3]
 8002532:	460b      	mov	r3, r1
 8002534:	70bb      	strb	r3, [r7, #2]
 8002536:	4613      	mov	r3, r2
 8002538:	803b      	strh	r3, [r7, #0]
	//type your code for "checkButtonState" implementation here:
	uint16_t detection = 0, timeout = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	81fb      	strh	r3, [r7, #14]
 800253e:	2300      	movs	r3, #0
 8002540:	81bb      	strh	r3, [r7, #12]
	while(timeout <= samples_window){ // cyklus bezi pokial nedocita potrebny pocet vzoriek a ak nahodou nastane detekcia funkcia sa ukonci a vrati 1
 8002542:	e020      	b.n	8002586 <checkButtonState+0x66>
		uint8_t actual_value = BUTTON_READ_VALUE;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <checkButtonState+0x90>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	72fb      	strb	r3, [r7, #11]
		if((actual_value && edge) || (!(actual_value) && !(edge))) {
 8002550:	7afb      	ldrb	r3, [r7, #11]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <checkButtonState+0x3c>
 8002556:	78bb      	ldrb	r3, [r7, #2]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <checkButtonState+0x48>
 800255c:	7afb      	ldrb	r3, [r7, #11]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <checkButtonState+0x50>
 8002562:	78bb      	ldrb	r3, [r7, #2]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d103      	bne.n	8002570 <checkButtonState+0x50>
			detection++;
 8002568:	89fb      	ldrh	r3, [r7, #14]
 800256a:	3301      	adds	r3, #1
 800256c:	81fb      	strh	r3, [r7, #14]
 800256e:	e001      	b.n	8002574 <checkButtonState+0x54>
		}
		else{
			detection = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	81fb      	strh	r3, [r7, #14]
		}

		timeout++;
 8002574:	89bb      	ldrh	r3, [r7, #12]
 8002576:	3301      	adds	r3, #1
 8002578:	81bb      	strh	r3, [r7, #12]

		if(detection == samples_required){
 800257a:	89fa      	ldrh	r2, [r7, #14]
 800257c:	8b3b      	ldrh	r3, [r7, #24]
 800257e:	429a      	cmp	r2, r3
 8002580:	d101      	bne.n	8002586 <checkButtonState+0x66>
			return 1;
 8002582:	2301      	movs	r3, #1
 8002584:	e00e      	b.n	80025a4 <checkButtonState+0x84>
	while(timeout <= samples_window){ // cyklus bezi pokial nedocita potrebny pocet vzoriek a ak nahodou nastane detekcia funkcia sa ukonci a vrati 1
 8002586:	89ba      	ldrh	r2, [r7, #12]
 8002588:	883b      	ldrh	r3, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d9da      	bls.n	8002544 <checkButtonState+0x24>
		}
	}
	if (((timeout > samples_window) && (detection != samples_required))){ //ak cyklus dobehol a nenapocitali sme dostatocny pocet vzoriek iducich po sebe vrati 0
 800258e:	89ba      	ldrh	r2, [r7, #12]
 8002590:	883b      	ldrh	r3, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d905      	bls.n	80025a2 <checkButtonState+0x82>
 8002596:	89fa      	ldrh	r2, [r7, #14]
 8002598:	8b3b      	ldrh	r3, [r7, #24]
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <checkButtonState+0x82>
		return 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <checkButtonState+0x84>
	}
	return 0;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	48000400 	.word	0x48000400

080025b4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4013      	ands	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40010400 	.word	0x40010400

080025e0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6153      	str	r3, [r2, #20]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40010400 	.word	0x40010400

08002600 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f06f 0201 	mvn.w	r2, #1
 800260e:	611a      	str	r2, [r3, #16]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <NMI_Handler+0x4>

08002648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <HardFault_Handler+0x4>

0800264e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <MemManage_Handler+0x4>

08002654 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <BusFault_Handler+0x4>

0800265a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <UsageFault_Handler+0x4>

08002660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */
	disp_time++;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <SysTick_Handler+0x20>)
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	1c50      	adds	r0, r2, #1
 8002698:	f143 0100 	adc.w	r1, r3, #0
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <SysTick_Handler+0x20>)
 800269e:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	20000200 	.word	0x20000200

080026b0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET) {
 80026b6:	2008      	movs	r0, #8
 80026b8:	f7ff ff7c 	bl	80025b4 <LL_EXTI_IsActiveFlag_0_31>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d022      	beq.n	8002708 <EXTI3_IRQHandler+0x58>
		  if(checkButtonState(GPIOB,
 80026c2:	f44f 7361 	mov.w	r3, #900	; 0x384
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026cc:	2200      	movs	r2, #0
 80026ce:	2103      	movs	r1, #3
 80026d0:	480f      	ldr	r0, [pc, #60]	; (8002710 <EXTI3_IRQHandler+0x60>)
 80026d2:	f7ff ff25 	bl	8002520 <checkButtonState>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d012      	beq.n	8002702 <EXTI3_IRQHandler+0x52>
							3,
							0,
							1000,
							900)) {
			  mode++;
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <EXTI3_IRQHandler+0x64>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <EXTI3_IRQHandler+0x64>)
 80026e6:	701a      	strb	r2, [r3, #0]
			  if(mode >= 4) mode = 0;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <EXTI3_IRQHandler+0x64>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d902      	bls.n	80026f6 <EXTI3_IRQHandler+0x46>
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <EXTI3_IRQHandler+0x64>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
			  act_index=0, right=1;
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <EXTI3_IRQHandler+0x68>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <EXTI3_IRQHandler+0x6c>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

		  }
		  LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8002702:	2008      	movs	r0, #8
 8002704:	f7ff ff6c 	bl	80025e0 <LL_EXTI_ClearFlag_0_31>
	  }
  /* USER CODE END EXTI3_IRQn 0 */
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	48000400 	.word	0x48000400
 8002714:	2000023c 	.word	0x2000023c
 8002718:	20000214 	.word	0x20000214
 800271c:	20000000 	.word	0x20000000

08002720 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8002724:	4806      	ldr	r0, [pc, #24]	; (8002740 <TIM3_IRQHandler+0x20>)
 8002726:	f7ff ff79 	bl	800261c <LL_TIM_IsActiveFlag_UPDATE>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <TIM3_IRQHandler+0x14>
		{
			updateDisplay();
 8002730:	f7fe fc54 	bl	8000fdc <updateDisplay>
		}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <TIM3_IRQHandler+0x20>)
 8002736:	f7ff ff63 	bl	8002600 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40000400 	.word	0x40000400

08002744 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C1_EV_IRQHandler_fun();
 8002748:	f7ff f934 	bl	80019b4 <I2C1_EV_IRQHandler_fun>
  /* USER CODE END I2C1_EV_IRQn 0 */
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
	return 1;
 8002754:	2301      	movs	r3, #1
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_kill>:

int _kill(int pid, int sig)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800276a:	f001 fba3 	bl	8003eb4 <__errno>
 800276e:	4603      	mov	r3, r0
 8002770:	2216      	movs	r2, #22
 8002772:	601a      	str	r2, [r3, #0]
	return -1;
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_exit>:

void _exit (int status)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ffe7 	bl	8002760 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002792:	e7fe      	b.n	8002792 <_exit+0x12>

08002794 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e00a      	b.n	80027bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027a6:	f3af 8000 	nop.w
 80027aa:	4601      	mov	r1, r0
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	60ba      	str	r2, [r7, #8]
 80027b2:	b2ca      	uxtb	r2, r1
 80027b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3301      	adds	r3, #1
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	dbf0      	blt.n	80027a6 <_read+0x12>
	}

return len;
 80027c4:	687b      	ldr	r3, [r7, #4]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e009      	b.n	80027f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	60ba      	str	r2, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	dbf1      	blt.n	80027e0 <_write+0x12>
	}
	return len;
 80027fc:	687b      	ldr	r3, [r7, #4]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_close>:

int _close(int file)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
	return -1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800282e:	605a      	str	r2, [r3, #4]
	return 0;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <_isatty>:

int _isatty(int file)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	return 1;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
	return 0;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <_sbrk+0x5c>)
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <_sbrk+0x60>)
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <_sbrk+0x64>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <_sbrk+0x64>)
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <_sbrk+0x68>)
 8002890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <_sbrk+0x64>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	d207      	bcs.n	80028b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028a0:	f001 fb08 	bl	8003eb4 <__errno>
 80028a4:	4603      	mov	r3, r0
 80028a6:	220c      	movs	r2, #12
 80028a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295
 80028ae:	e009      	b.n	80028c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <_sbrk+0x64>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <_sbrk+0x64>)
 80028c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028c2:	68fb      	ldr	r3, [r7, #12]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20003000 	.word	0x20003000
 80028d0:	00000400 	.word	0x00000400
 80028d4:	20000218 	.word	0x20000218
 80028d8:	200002c8 	.word	0x200002c8

080028dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <SystemInit+0x20>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <SystemInit+0x20>)
 80028e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_GetPriorityGrouping>:
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_EnableIRQ>:
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	db0b      	blt.n	8002946 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	4907      	ldr	r1, [pc, #28]	; (8002954 <__NVIC_EnableIRQ+0x38>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2001      	movs	r0, #1
 800293e:	fa00 f202 	lsl.w	r2, r0, r2
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <LL_APB1_GRP1_EnableClock>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40021000 	.word	0x40021000

08002a44 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <LL_SYSTICK_EnableIT+0x1c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <LL_SYSTICK_EnableIT+0x1c>)
 8002a4e:	f043 0302 	orr.w	r3, r3, #2
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <LL_TIM_EnableCounter>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	601a      	str	r2, [r3, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_TIM_EnableARRPreload>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_TIM_OC_DisableFast>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d028      	beq.n	8002b06 <LL_TIM_OC_DisableFast+0x62>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d023      	beq.n	8002b02 <LL_TIM_OC_DisableFast+0x5e>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d01e      	beq.n	8002afe <LL_TIM_OC_DisableFast+0x5a>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b40      	cmp	r3, #64	; 0x40
 8002ac4:	d019      	beq.n	8002afa <LL_TIM_OC_DisableFast+0x56>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002acc:	d013      	beq.n	8002af6 <LL_TIM_OC_DisableFast+0x52>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad4:	d00d      	beq.n	8002af2 <LL_TIM_OC_DisableFast+0x4e>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002adc:	d007      	beq.n	8002aee <LL_TIM_OC_DisableFast+0x4a>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d101      	bne.n	8002aea <LL_TIM_OC_DisableFast+0x46>
 8002ae6:	2307      	movs	r3, #7
 8002ae8:	e00e      	b.n	8002b08 <LL_TIM_OC_DisableFast+0x64>
 8002aea:	2308      	movs	r3, #8
 8002aec:	e00c      	b.n	8002b08 <LL_TIM_OC_DisableFast+0x64>
 8002aee:	2306      	movs	r3, #6
 8002af0:	e00a      	b.n	8002b08 <LL_TIM_OC_DisableFast+0x64>
 8002af2:	2305      	movs	r3, #5
 8002af4:	e008      	b.n	8002b08 <LL_TIM_OC_DisableFast+0x64>
 8002af6:	2304      	movs	r3, #4
 8002af8:	e006      	b.n	8002b08 <LL_TIM_OC_DisableFast+0x64>
 8002afa:	2303      	movs	r3, #3
 8002afc:	e004      	b.n	8002b08 <LL_TIM_OC_DisableFast+0x64>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e002      	b.n	8002b08 <LL_TIM_OC_DisableFast+0x64>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <LL_TIM_OC_DisableFast+0x64>
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	4619      	mov	r1, r3
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <LL_TIM_OC_DisableFast+0x9c>)
 8002b14:	5cd3      	ldrb	r3, [r2, r3]
 8002b16:	440b      	add	r3, r1
 8002b18:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	4908      	ldr	r1, [pc, #32]	; (8002b44 <LL_TIM_OC_DisableFast+0xa0>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	4619      	mov	r1, r3
 8002b26:	2304      	movs	r3, #4
 8002b28:	408b      	lsls	r3, r1
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	601a      	str	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	08009760 	.word	0x08009760
 8002b44:	0800976c 	.word	0x0800976c

08002b48 <LL_TIM_SetClockSource>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002b5a:	f023 0307 	bic.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_TIM_SetTriggerOutput>:
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	605a      	str	r2, [r3, #4]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_TIM_DisableMasterSlaveMode>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f043 0201 	orr.w	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <Systick_Init>:

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void Systick_Init(void){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <Systick_Init+0x20>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0; /* Load the SysTick Counter Value */
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <Systick_Init+0x20>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (SysTick_CTRL_TICKINT_Msk   |  /* Enable SysTick exception */
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <Systick_Init+0x20>)
 8002bea:	2207      	movs	r2, #7
 8002bec:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_ENABLE_Msk) |    /* Enable SysTick system timer */
					 SysTick_CTRL_CLKSOURCE_Msk;   /* Use processor clock source */
	LL_SYSTICK_EnableIT();
 8002bee:	f7ff ff29 	bl	8002a44 <LL_SYSTICK_EnableIT>
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	e000e010 	.word	0xe000e010

08002bfc <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08e      	sub	sp, #56	; 0x38
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	60da      	str	r2, [r3, #12]
 8002c10:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	2220      	movs	r2, #32
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 f975 	bl	8003f08 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002c1e:	2002      	movs	r0, #2
 8002c20:	f7ff fef8 	bl	8002a14 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002c24:	f7ff fe6c 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	210f      	movs	r1, #15
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff febc 	bl	80029ac <NVIC_EncodePriority>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4619      	mov	r1, r3
 8002c38:	201d      	movs	r0, #29
 8002c3a:	f7ff fe8d 	bl	8002958 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002c3e:	201d      	movs	r0, #29
 8002c40:	f7ff fe6c 	bl	800291c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8002c44:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002c48:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;
 8002c4e:	2313      	movs	r3, #19
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c52:	2300      	movs	r3, #0
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4817      	ldr	r0, [pc, #92]	; (8002cbc <MX_TIM3_Init+0xc0>)
 8002c5e:	f000 fd61 	bl	8003724 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002c62:	4816      	ldr	r0, [pc, #88]	; (8002cbc <MX_TIM3_Init+0xc0>)
 8002c64:	f7ff ff0e 	bl	8002a84 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4814      	ldr	r0, [pc, #80]	; (8002cbc <MX_TIM3_Init+0xc0>)
 8002c6c:	f7ff ff6c 	bl	8002b48 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002c70:	2310      	movs	r3, #16
 8002c72:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	461a      	mov	r2, r3
 8002c88:	2101      	movs	r1, #1
 8002c8a:	480c      	ldr	r0, [pc, #48]	; (8002cbc <MX_TIM3_Init+0xc0>)
 8002c8c:	f000 fdbc 	bl	8003808 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002c90:	2101      	movs	r1, #1
 8002c92:	480a      	ldr	r0, [pc, #40]	; (8002cbc <MX_TIM3_Init+0xc0>)
 8002c94:	f7ff ff06 	bl	8002aa4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4808      	ldr	r0, [pc, #32]	; (8002cbc <MX_TIM3_Init+0xc0>)
 8002c9c:	f7ff ff69 	bl	8002b72 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002ca0:	4806      	ldr	r0, [pc, #24]	; (8002cbc <MX_TIM3_Init+0xc0>)
 8002ca2:	f7ff ff79 	bl	8002b98 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM3);
 8002ca6:	4805      	ldr	r0, [pc, #20]	; (8002cbc <MX_TIM3_Init+0xc0>)
 8002ca8:	f7ff ff86 	bl	8002bb8 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002cac:	4803      	ldr	r0, [pc, #12]	; (8002cbc <MX_TIM3_Init+0xc0>)
 8002cae:	f7ff fed9 	bl	8002a64 <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 8002cb2:	bf00      	nop
 8002cb4:	3738      	adds	r7, #56	; 0x38
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40000400 	.word	0x40000400

08002cc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cf8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cc4:	480d      	ldr	r0, [pc, #52]	; (8002cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8002cc6:	490e      	ldr	r1, [pc, #56]	; (8002d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cc8:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <LoopForever+0xe>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ccc:	e002      	b.n	8002cd4 <LoopCopyDataInit>

08002cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cd2:	3304      	adds	r3, #4

08002cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cd8:	d3f9      	bcc.n	8002cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cda:	4a0b      	ldr	r2, [pc, #44]	; (8002d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cdc:	4c0b      	ldr	r4, [pc, #44]	; (8002d0c <LoopForever+0x16>)
  movs r3, #0
 8002cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce0:	e001      	b.n	8002ce6 <LoopFillZerobss>

08002ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ce4:	3204      	adds	r2, #4

08002ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ce8:	d3fb      	bcc.n	8002ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cea:	f7ff fdf7 	bl	80028dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cee:	f001 f8e7 	bl	8003ec0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cf2:	f7ff fa65 	bl	80021c0 <main>

08002cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8002cf6:	e7fe      	b.n	8002cf6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cf8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d00:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002d04:	08009c78 	.word	0x08009c78
  ldr r2, =_sbss
 8002d08:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d0c:	200002c4 	.word	0x200002c4

08002d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d10:	e7fe      	b.n	8002d10 <ADC1_2_IRQHandler>
	...

08002d14 <LL_EXTI_EnableIT_0_31>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <LL_EXTI_EnableIT_0_31+0x20>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4904      	ldr	r1, [pc, #16]	; (8002d34 <LL_EXTI_EnableIT_0_31+0x20>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40010400 	.word	0x40010400

08002d38 <LL_EXTI_EnableIT_32_63>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <LL_EXTI_EnableIT_32_63+0x20>)
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	4904      	ldr	r1, [pc, #16]	; (8002d58 <LL_EXTI_EnableIT_32_63+0x20>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	620b      	str	r3, [r1, #32]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	40010400 	.word	0x40010400

08002d5c <LL_EXTI_DisableIT_0_31>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <LL_EXTI_DisableIT_0_31+0x24>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	4904      	ldr	r1, [pc, #16]	; (8002d80 <LL_EXTI_DisableIT_0_31+0x24>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40010400 	.word	0x40010400

08002d84 <LL_EXTI_DisableIT_32_63>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <LL_EXTI_DisableIT_32_63+0x24>)
 8002d8e:	6a1a      	ldr	r2, [r3, #32]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	4904      	ldr	r1, [pc, #16]	; (8002da8 <LL_EXTI_DisableIT_32_63+0x24>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	620b      	str	r3, [r1, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40010400 	.word	0x40010400

08002dac <LL_EXTI_EnableEvent_0_31>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4904      	ldr	r1, [pc, #16]	; (8002dcc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <LL_EXTI_EnableEvent_32_63>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ddc:	4904      	ldr	r1, [pc, #16]	; (8002df0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40010400 	.word	0x40010400

08002df4 <LL_EXTI_DisableEvent_0_31>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	4904      	ldr	r1, [pc, #16]	; (8002e18 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40010400 	.word	0x40010400

08002e1c <LL_EXTI_DisableEvent_32_63>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	4904      	ldr	r1, [pc, #16]	; (8002e40 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40010400 	.word	0x40010400

08002e44 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	4904      	ldr	r1, [pc, #16]	; (8002e64 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40010400 	.word	0x40010400

08002e68 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e74:	4904      	ldr	r1, [pc, #16]	; (8002e88 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40010400 	.word	0x40010400

08002e8c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40010400 	.word	0x40010400

08002eb4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	4904      	ldr	r1, [pc, #16]	; (8002ed8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40010400 	.word	0x40010400

08002edc <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	4904      	ldr	r1, [pc, #16]	; (8002efc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60cb      	str	r3, [r1, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40010400 	.word	0x40010400

08002f00 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	4904      	ldr	r1, [pc, #16]	; (8002f20 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40010400 	.word	0x40010400

08002f24 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4904      	ldr	r1, [pc, #16]	; (8002f48 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	60cb      	str	r3, [r1, #12]
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010400 	.word	0x40010400

08002f4c <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	4904      	ldr	r1, [pc, #16]	; (8002f70 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40010400 	.word	0x40010400

08002f74 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	7a1b      	ldrb	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80cd 	beq.w	8003124 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d061      	beq.n	8003056 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	7a5b      	ldrb	r3, [r3, #9]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d01c      	beq.n	8002fd4 <LL_EXTI_Init+0x60>
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	dc25      	bgt.n	8002fea <LL_EXTI_Init+0x76>
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <LL_EXTI_Init+0x34>
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d00b      	beq.n	8002fbe <LL_EXTI_Init+0x4a>
 8002fa6:	e020      	b.n	8002fea <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ff21 	bl	8002df4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff feac 	bl	8002d14 <LL_EXTI_EnableIT_0_31>
          break;
 8002fbc:	e018      	b.n	8002ff0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff feca 	bl	8002d5c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff feed 	bl	8002dac <LL_EXTI_EnableEvent_0_31>
          break;
 8002fd2:	e00d      	b.n	8002ff0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fe9b 	bl	8002d14 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fee2 	bl	8002dac <LL_EXTI_EnableEvent_0_31>
          break;
 8002fe8:	e002      	b.n	8002ff0 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
          break;
 8002fee:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7a9b      	ldrb	r3, [r3, #10]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d02e      	beq.n	8003056 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7a9b      	ldrb	r3, [r3, #10]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d01c      	beq.n	800303a <LL_EXTI_Init+0xc6>
 8003000:	2b03      	cmp	r3, #3
 8003002:	dc25      	bgt.n	8003050 <LL_EXTI_Init+0xdc>
 8003004:	2b01      	cmp	r3, #1
 8003006:	d002      	beq.n	800300e <LL_EXTI_Init+0x9a>
 8003008:	2b02      	cmp	r3, #2
 800300a:	d00b      	beq.n	8003024 <LL_EXTI_Init+0xb0>
 800300c:	e020      	b.n	8003050 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff ff86 	bl	8002f24 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff11 	bl	8002e44 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003022:	e019      	b.n	8003058 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff2f 	bl	8002e8c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff ff52 	bl	8002edc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003038:	e00e      	b.n	8003058 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff ff00 	bl	8002e44 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff47 	bl	8002edc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800304e:	e003      	b.n	8003058 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
            break;
 8003054:	e000      	b.n	8003058 <LL_EXTI_Init+0xe4>
        }
      }
 8003056:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d076      	beq.n	800314e <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7a5b      	ldrb	r3, [r3, #9]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d01c      	beq.n	80030a2 <LL_EXTI_Init+0x12e>
 8003068:	2b02      	cmp	r3, #2
 800306a:	dc25      	bgt.n	80030b8 <LL_EXTI_Init+0x144>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <LL_EXTI_Init+0x102>
 8003070:	2b01      	cmp	r3, #1
 8003072:	d00b      	beq.n	800308c <LL_EXTI_Init+0x118>
 8003074:	e020      	b.n	80030b8 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fece 	bl	8002e1c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fe57 	bl	8002d38 <LL_EXTI_EnableIT_32_63>
          break;
 800308a:	e018      	b.n	80030be <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fe77 	bl	8002d84 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fe98 	bl	8002dd0 <LL_EXTI_EnableEvent_32_63>
          break;
 80030a0:	e00d      	b.n	80030be <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fe46 	bl	8002d38 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fe8d 	bl	8002dd0 <LL_EXTI_EnableEvent_32_63>
          break;
 80030b6:	e002      	b.n	80030be <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
          break;
 80030bc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7a9b      	ldrb	r3, [r3, #10]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d043      	beq.n	800314e <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7a9b      	ldrb	r3, [r3, #10]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d01c      	beq.n	8003108 <LL_EXTI_Init+0x194>
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	dc25      	bgt.n	800311e <LL_EXTI_Init+0x1aa>
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d002      	beq.n	80030dc <LL_EXTI_Init+0x168>
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d00b      	beq.n	80030f2 <LL_EXTI_Init+0x17e>
 80030da:	e020      	b.n	800311e <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff33 	bl	8002f4c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff febc 	bl	8002e68 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80030f0:	e02e      	b.n	8003150 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fedc 	bl	8002eb4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fefd 	bl	8002f00 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003106:	e023      	b.n	8003150 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff feab 	bl	8002e68 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fef2 	bl	8002f00 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800311c:	e018      	b.n	8003150 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
            break;
 8003122:	e015      	b.n	8003150 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fe17 	bl	8002d5c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fe5e 	bl	8002df4 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fe21 	bl	8002d84 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fe68 	bl	8002e1c <LL_EXTI_DisableEvent_32_63>
 800314c:	e000      	b.n	8003150 <LL_EXTI_Init+0x1dc>
      }
 800314e:	bf00      	nop
#endif
  }
  return status;
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <LL_GPIO_SetPinMode>:
{
 800315a:	b480      	push	{r7}
 800315c:	b089      	sub	sp, #36	; 0x24
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	613b      	str	r3, [r7, #16]
  return result;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2103      	movs	r1, #3
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	401a      	ands	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	61bb      	str	r3, [r7, #24]
  return result;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	431a      	orrs	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	601a      	str	r2, [r3, #0]
}
 80031ac:	bf00      	nop
 80031ae:	3724      	adds	r7, #36	; 0x24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_GPIO_SetPinOutputType>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	401a      	ands	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	431a      	orrs	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	605a      	str	r2, [r3, #4]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_GPIO_SetPinSpeed>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	613b      	str	r3, [r7, #16]
  return result;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	2103      	movs	r1, #3
 8003210:	fa01 f303 	lsl.w	r3, r1, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	401a      	ands	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	61bb      	str	r3, [r7, #24]
  return result;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	431a      	orrs	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	609a      	str	r2, [r3, #8]
}
 800323a:	bf00      	nop
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_GPIO_SetPinPull>:
{
 8003246:	b480      	push	{r7}
 8003248:	b089      	sub	sp, #36	; 0x24
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	613b      	str	r3, [r7, #16]
  return result;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	2103      	movs	r1, #3
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	401a      	ands	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	61bb      	str	r3, [r7, #24]
  return result;
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	431a      	orrs	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	60da      	str	r2, [r3, #12]
}
 8003298:	bf00      	nop
 800329a:	3724      	adds	r7, #36	; 0x24
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_GPIO_SetAFPin_0_7>:
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a1a      	ldr	r2, [r3, #32]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	613b      	str	r3, [r7, #16]
  return result;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	210f      	movs	r1, #15
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	401a      	ands	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	61bb      	str	r3, [r7, #24]
  return result;
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	431a      	orrs	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	621a      	str	r2, [r3, #32]
}
 80032f6:	bf00      	nop
 80032f8:	3724      	adds	r7, #36	; 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <LL_GPIO_SetAFPin_8_15>:
{
 8003302:	b480      	push	{r7}
 8003304:	b089      	sub	sp, #36	; 0x24
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	613b      	str	r3, [r7, #16]
  return result;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	210f      	movs	r1, #15
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	401a      	ands	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	61bb      	str	r3, [r7, #24]
  return result;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	fab3 f383 	clz	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	431a      	orrs	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003358:	bf00      	nop
 800335a:	3724      	adds	r7, #36	; 0x24
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	613b      	str	r3, [r7, #16]
  return result;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003386:	e051      	b.n	800342c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fa01 f303 	lsl.w	r3, r1, r3
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d043      	beq.n	8003426 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d003      	beq.n	80033ae <LL_GPIO_Init+0x4a>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d10e      	bne.n	80033cc <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	461a      	mov	r2, r3
 80033b4:	69b9      	ldr	r1, [r7, #24]
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ff16 	bl	80031e8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	461a      	mov	r2, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff fef6 	bl	80031b8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	461a      	mov	r2, r3
 80033d2:	69b9      	ldr	r1, [r7, #24]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff36 	bl	8003246 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d11a      	bne.n	8003418 <LL_GPIO_Init+0xb4>
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	60bb      	str	r3, [r7, #8]
  return result;
 80033ee:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b07      	cmp	r3, #7
 80033f8:	d807      	bhi.n	800340a <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	461a      	mov	r2, r3
 8003400:	69b9      	ldr	r1, [r7, #24]
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ff4e 	bl	80032a4 <LL_GPIO_SetAFPin_0_7>
 8003408:	e006      	b.n	8003418 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	461a      	mov	r2, r3
 8003410:	69b9      	ldr	r1, [r7, #24]
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ff75 	bl	8003302 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	461a      	mov	r2, r3
 800341e:	69b9      	ldr	r1, [r7, #24]
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fe9a 	bl	800315a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3301      	adds	r3, #1
 800342a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1a6      	bne.n	8003388 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <LL_I2C_Enable>:
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f043 0201 	orr.w	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	601a      	str	r2, [r3, #0]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <LL_I2C_Disable>:
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 0201 	bic.w	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	601a      	str	r2, [r3, #0]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_I2C_ConfigFilters>:
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	0219      	lsls	r1, r3, #8
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	430b      	orrs	r3, r1
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	601a      	str	r2, [r3, #0]
}
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <LL_I2C_SetOwnAddress1>:
{
 80034b2:	b480      	push	{r7}
 80034b4:	b085      	sub	sp, #20
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80034c6:	f023 0307 	bic.w	r3, r3, #7
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	609a      	str	r2, [r3, #8]
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <LL_I2C_EnableOwnAddress1>:
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	609a      	str	r2, [r3, #8]
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_I2C_DisableOwnAddress1>:
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_I2C_SetTiming>:
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	611a      	str	r2, [r3, #16]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_I2C_SetMode>:
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	601a      	str	r2, [r3, #0]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_I2C_AcknowledgeNextData>:
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	605a      	str	r2, [r3, #4]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ff65 	bl	8003464 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6899      	ldr	r1, [r3, #8]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	461a      	mov	r2, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff6d 	bl	8003484 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ffb6 	bl	8003522 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ff44 	bl	8003444 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ffa0 	bl	8003502 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6919      	ldr	r1, [r3, #16]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	461a      	mov	r2, r3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff70 	bl	80034b2 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ff81 	bl	80034e2 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ffa9 	bl	800353e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ffb6 	bl	8003564 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <LL_TIM_SetPrescaler>:
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <LL_TIM_SetAutoReload>:
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <LL_TIM_SetRepetitionCounter>:
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_TIM_OC_SetCompareCH1>:
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <LL_TIM_OC_SetCompareCH2>:
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <LL_TIM_OC_SetCompareCH3>:
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_TIM_OC_SetCompareCH4>:
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_TIM_OC_SetCompareCH5>:
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	659a      	str	r2, [r3, #88]	; 0x58
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <LL_TIM_OC_SetCompareCH6>:
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	615a      	str	r2, [r3, #20]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a2f      	ldr	r2, [pc, #188]	; (80037f4 <LL_TIM_Init+0xd0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <LL_TIM_Init+0x28>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003742:	d003      	beq.n	800374c <LL_TIM_Init+0x28>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a2c      	ldr	r2, [pc, #176]	; (80037f8 <LL_TIM_Init+0xd4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d106      	bne.n	800375a <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a25      	ldr	r2, [pc, #148]	; (80037f4 <LL_TIM_Init+0xd0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <LL_TIM_Init+0x66>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d00f      	beq.n	800378a <LL_TIM_Init+0x66>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <LL_TIM_Init+0xd4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00b      	beq.n	800378a <LL_TIM_Init+0x66>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a21      	ldr	r2, [pc, #132]	; (80037fc <LL_TIM_Init+0xd8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d007      	beq.n	800378a <LL_TIM_Init+0x66>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a20      	ldr	r2, [pc, #128]	; (8003800 <LL_TIM_Init+0xdc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d003      	beq.n	800378a <LL_TIM_Init+0x66>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1f      	ldr	r2, [pc, #124]	; (8003804 <LL_TIM_Init+0xe0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d106      	bne.n	8003798 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ff3a 	bl	800361e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff26 	bl	8003602 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <LL_TIM_Init+0xd0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <LL_TIM_Init+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <LL_TIM_Init+0xd8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <LL_TIM_Init+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <LL_TIM_Init+0xdc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <LL_TIM_Init+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <LL_TIM_Init+0xe0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d105      	bne.n	80037e2 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff2c 	bl	800363a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ff8d 	bl	8003702 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40014000 	.word	0x40014000
 8003800:	40014400 	.word	0x40014400
 8003804:	40014800 	.word	0x40014800

08003808 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800381e:	d045      	beq.n	80038ac <LL_TIM_OC_Init+0xa4>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003826:	d848      	bhi.n	80038ba <LL_TIM_OC_Init+0xb2>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382e:	d036      	beq.n	800389e <LL_TIM_OC_Init+0x96>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003836:	d840      	bhi.n	80038ba <LL_TIM_OC_Init+0xb2>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383e:	d027      	beq.n	8003890 <LL_TIM_OC_Init+0x88>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003846:	d838      	bhi.n	80038ba <LL_TIM_OC_Init+0xb2>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384e:	d018      	beq.n	8003882 <LL_TIM_OC_Init+0x7a>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003856:	d830      	bhi.n	80038ba <LL_TIM_OC_Init+0xb2>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d003      	beq.n	8003866 <LL_TIM_OC_Init+0x5e>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b10      	cmp	r3, #16
 8003862:	d007      	beq.n	8003874 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8003864:	e029      	b.n	80038ba <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f82d 	bl	80038c8 <OC1Config>
 800386e:	4603      	mov	r3, r0
 8003870:	75fb      	strb	r3, [r7, #23]
      break;
 8003872:	e023      	b.n	80038bc <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f8a0 	bl	80039bc <OC2Config>
 800387c:	4603      	mov	r3, r0
 800387e:	75fb      	strb	r3, [r7, #23]
      break;
 8003880:	e01c      	b.n	80038bc <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f917 	bl	8003ab8 <OC3Config>
 800388a:	4603      	mov	r3, r0
 800388c:	75fb      	strb	r3, [r7, #23]
      break;
 800388e:	e015      	b.n	80038bc <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f98e 	bl	8003bb4 <OC4Config>
 8003898:	4603      	mov	r3, r0
 800389a:	75fb      	strb	r3, [r7, #23]
      break;
 800389c:	e00e      	b.n	80038bc <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f9ed 	bl	8003c80 <OC5Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]
      break;
 80038aa:	e007      	b.n	80038bc <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 fa44 	bl	8003d3c <OC6Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	75fb      	strb	r3, [r7, #23]
      break;
 80038b8:	e000      	b.n	80038bc <LL_TIM_OC_Init+0xb4>
      break;
 80038ba:	bf00      	nop
  }

  return result;
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f023 0201 	bic.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f023 0202 	bic.w	r2, r3, #2
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a20      	ldr	r2, [pc, #128]	; (80039ac <OC1Config+0xe4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00b      	beq.n	8003946 <OC1Config+0x7e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <OC1Config+0xe8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d007      	beq.n	8003946 <OC1Config+0x7e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <OC1Config+0xec>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d003      	beq.n	8003946 <OC1Config+0x7e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <OC1Config+0xf0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d11e      	bne.n	8003984 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f023 0208 	bic.w	r2, r3, #8
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f023 0204 	bic.w	r2, r3, #4
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4619      	mov	r1, r3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fe5d 	bl	8003656 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40014000 	.word	0x40014000
 80039b4:	40014400 	.word	0x40014400
 80039b8:	40014800 	.word	0x40014800

080039bc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f023 0210 	bic.w	r2, r3, #16
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	0212      	lsls	r2, r2, #8
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 0220 	bic.w	r2, r3, #32
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f023 0210 	bic.w	r2, r3, #16
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <OC2Config+0xec>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00b      	beq.n	8003a40 <OC2Config+0x84>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a20      	ldr	r2, [pc, #128]	; (8003aac <OC2Config+0xf0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d007      	beq.n	8003a40 <OC2Config+0x84>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <OC2Config+0xf4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <OC2Config+0x84>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a1e      	ldr	r2, [pc, #120]	; (8003ab4 <OC2Config+0xf8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d11f      	bne.n	8003a80 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	019b      	lsls	r3, r3, #6
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	019b      	lsls	r3, r3, #6
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4619      	mov	r1, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fded 	bl	8003672 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40014400 	.word	0x40014400
 8003ab4:	40014800 	.word	0x40014800

08003ab8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a21      	ldr	r2, [pc, #132]	; (8003ba4 <OC3Config+0xec>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <OC3Config+0x82>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a20      	ldr	r2, [pc, #128]	; (8003ba8 <OC3Config+0xf0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <OC3Config+0x82>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <OC3Config+0xf4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <OC3Config+0x82>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a1e      	ldr	r2, [pc, #120]	; (8003bb0 <OC3Config+0xf8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d11f      	bne.n	8003b7a <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	029b      	lsls	r3, r3, #10
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	029b      	lsls	r3, r3, #10
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	015b      	lsls	r3, r3, #5
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff fd7e 	bl	800368e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800

08003bb4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	0212      	lsls	r2, r2, #8
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	031b      	lsls	r3, r3, #12
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	031b      	lsls	r3, r3, #12
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <OC4Config+0xbc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <OC4Config+0x84>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <OC4Config+0xc0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d007      	beq.n	8003c38 <OC4Config+0x84>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <OC4Config+0xc4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <OC4Config+0x84>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <OC4Config+0xc8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d107      	bne.n	8003c48 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	019b      	lsls	r3, r3, #6
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff fd25 	bl	80036aa <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40012c00 	.word	0x40012c00
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40014400 	.word	0x40014400
 8003c7c:	40014800 	.word	0x40014800

08003c80 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <OC5Config+0xac>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <OC5Config+0x74>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a14      	ldr	r2, [pc, #80]	; (8003d30 <OC5Config+0xb0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <OC5Config+0x74>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <OC5Config+0xb4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <OC5Config+0x74>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <OC5Config+0xb8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d109      	bne.n	8003d08 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff fcd6 	bl	80036c6 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800

08003d3c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	0212      	lsls	r2, r2, #8
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	051b      	lsls	r3, r3, #20
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	051b      	lsls	r3, r3, #20
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <OC6Config+0xac>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00b      	beq.n	8003db2 <OC6Config+0x76>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a13      	ldr	r2, [pc, #76]	; (8003dec <OC6Config+0xb0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <OC6Config+0x76>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <OC6Config+0xb4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <OC6Config+0x76>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a11      	ldr	r2, [pc, #68]	; (8003df4 <OC6Config+0xb8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d109      	bne.n	8003dc6 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	029b      	lsls	r3, r3, #10
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff fc87 	bl	80036e6 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40014400 	.word	0x40014400
 8003df4:	40014800 	.word	0x40014800

08003df8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	4a07      	ldr	r2, [pc, #28]	; (8003e28 <LL_InitTick+0x30>)
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <LL_InitTick+0x30>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e16:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <LL_InitTick+0x30>)
 8003e18:	2205      	movs	r2, #5
 8003e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000e010 	.word	0xe000e010

08003e2c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003e34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ffdd 	bl	8003df8 <LL_InitTick>
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <LL_mDelay+0x48>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003e56:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5e:	d00c      	beq.n	8003e7a <LL_mDelay+0x32>
  {
    Delay++;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3301      	adds	r3, #1
 8003e64:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003e66:	e008      	b.n	8003e7a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <LL_mDelay+0x48>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <LL_mDelay+0x32>
    {
      Delay--;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f3      	bne.n	8003e68 <LL_mDelay+0x20>
    }
  }
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010

08003e94 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <LL_SetSystemCoreClock+0x1c>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6013      	str	r3, [r2, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000004 	.word	0x20000004

08003eb4 <__errno>:
 8003eb4:	4b01      	ldr	r3, [pc, #4]	; (8003ebc <__errno+0x8>)
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000008 	.word	0x20000008

08003ec0 <__libc_init_array>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	4d0d      	ldr	r5, [pc, #52]	; (8003ef8 <__libc_init_array+0x38>)
 8003ec4:	4c0d      	ldr	r4, [pc, #52]	; (8003efc <__libc_init_array+0x3c>)
 8003ec6:	1b64      	subs	r4, r4, r5
 8003ec8:	10a4      	asrs	r4, r4, #2
 8003eca:	2600      	movs	r6, #0
 8003ecc:	42a6      	cmp	r6, r4
 8003ece:	d109      	bne.n	8003ee4 <__libc_init_array+0x24>
 8003ed0:	4d0b      	ldr	r5, [pc, #44]	; (8003f00 <__libc_init_array+0x40>)
 8003ed2:	4c0c      	ldr	r4, [pc, #48]	; (8003f04 <__libc_init_array+0x44>)
 8003ed4:	f005 fbee 	bl	80096b4 <_init>
 8003ed8:	1b64      	subs	r4, r4, r5
 8003eda:	10a4      	asrs	r4, r4, #2
 8003edc:	2600      	movs	r6, #0
 8003ede:	42a6      	cmp	r6, r4
 8003ee0:	d105      	bne.n	8003eee <__libc_init_array+0x2e>
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee8:	4798      	blx	r3
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7ee      	b.n	8003ecc <__libc_init_array+0xc>
 8003eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef2:	4798      	blx	r3
 8003ef4:	3601      	adds	r6, #1
 8003ef6:	e7f2      	b.n	8003ede <__libc_init_array+0x1e>
 8003ef8:	08009c70 	.word	0x08009c70
 8003efc:	08009c70 	.word	0x08009c70
 8003f00:	08009c70 	.word	0x08009c70
 8003f04:	08009c74 	.word	0x08009c74

08003f08 <memset>:
 8003f08:	4402      	add	r2, r0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <__cvt>:
 8003f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1c:	ec55 4b10 	vmov	r4, r5, d0
 8003f20:	2d00      	cmp	r5, #0
 8003f22:	460e      	mov	r6, r1
 8003f24:	4619      	mov	r1, r3
 8003f26:	462b      	mov	r3, r5
 8003f28:	bfbb      	ittet	lt
 8003f2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f2e:	461d      	movlt	r5, r3
 8003f30:	2300      	movge	r3, #0
 8003f32:	232d      	movlt	r3, #45	; 0x2d
 8003f34:	700b      	strb	r3, [r1, #0]
 8003f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f3c:	4691      	mov	r9, r2
 8003f3e:	f023 0820 	bic.w	r8, r3, #32
 8003f42:	bfbc      	itt	lt
 8003f44:	4622      	movlt	r2, r4
 8003f46:	4614      	movlt	r4, r2
 8003f48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f4c:	d005      	beq.n	8003f5a <__cvt+0x42>
 8003f4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f52:	d100      	bne.n	8003f56 <__cvt+0x3e>
 8003f54:	3601      	adds	r6, #1
 8003f56:	2102      	movs	r1, #2
 8003f58:	e000      	b.n	8003f5c <__cvt+0x44>
 8003f5a:	2103      	movs	r1, #3
 8003f5c:	ab03      	add	r3, sp, #12
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	ab02      	add	r3, sp, #8
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	ec45 4b10 	vmov	d0, r4, r5
 8003f68:	4653      	mov	r3, sl
 8003f6a:	4632      	mov	r2, r6
 8003f6c:	f001 fdb4 	bl	8005ad8 <_dtoa_r>
 8003f70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f74:	4607      	mov	r7, r0
 8003f76:	d102      	bne.n	8003f7e <__cvt+0x66>
 8003f78:	f019 0f01 	tst.w	r9, #1
 8003f7c:	d022      	beq.n	8003fc4 <__cvt+0xac>
 8003f7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f82:	eb07 0906 	add.w	r9, r7, r6
 8003f86:	d110      	bne.n	8003faa <__cvt+0x92>
 8003f88:	783b      	ldrb	r3, [r7, #0]
 8003f8a:	2b30      	cmp	r3, #48	; 0x30
 8003f8c:	d10a      	bne.n	8003fa4 <__cvt+0x8c>
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2300      	movs	r3, #0
 8003f92:	4620      	mov	r0, r4
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7fc fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f9a:	b918      	cbnz	r0, 8003fa4 <__cvt+0x8c>
 8003f9c:	f1c6 0601 	rsb	r6, r6, #1
 8003fa0:	f8ca 6000 	str.w	r6, [sl]
 8003fa4:	f8da 3000 	ldr.w	r3, [sl]
 8003fa8:	4499      	add	r9, r3
 8003faa:	2200      	movs	r2, #0
 8003fac:	2300      	movs	r3, #0
 8003fae:	4620      	mov	r0, r4
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	f7fc fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fb6:	b108      	cbz	r0, 8003fbc <__cvt+0xa4>
 8003fb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8003fbc:	2230      	movs	r2, #48	; 0x30
 8003fbe:	9b03      	ldr	r3, [sp, #12]
 8003fc0:	454b      	cmp	r3, r9
 8003fc2:	d307      	bcc.n	8003fd4 <__cvt+0xbc>
 8003fc4:	9b03      	ldr	r3, [sp, #12]
 8003fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fc8:	1bdb      	subs	r3, r3, r7
 8003fca:	4638      	mov	r0, r7
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	b004      	add	sp, #16
 8003fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd4:	1c59      	adds	r1, r3, #1
 8003fd6:	9103      	str	r1, [sp, #12]
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e7f0      	b.n	8003fbe <__cvt+0xa6>

08003fdc <__exponent>:
 8003fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2900      	cmp	r1, #0
 8003fe2:	bfb8      	it	lt
 8003fe4:	4249      	neglt	r1, r1
 8003fe6:	f803 2b02 	strb.w	r2, [r3], #2
 8003fea:	bfb4      	ite	lt
 8003fec:	222d      	movlt	r2, #45	; 0x2d
 8003fee:	222b      	movge	r2, #43	; 0x2b
 8003ff0:	2909      	cmp	r1, #9
 8003ff2:	7042      	strb	r2, [r0, #1]
 8003ff4:	dd2a      	ble.n	800404c <__exponent+0x70>
 8003ff6:	f10d 0407 	add.w	r4, sp, #7
 8003ffa:	46a4      	mov	ip, r4
 8003ffc:	270a      	movs	r7, #10
 8003ffe:	46a6      	mov	lr, r4
 8004000:	460a      	mov	r2, r1
 8004002:	fb91 f6f7 	sdiv	r6, r1, r7
 8004006:	fb07 1516 	mls	r5, r7, r6, r1
 800400a:	3530      	adds	r5, #48	; 0x30
 800400c:	2a63      	cmp	r2, #99	; 0x63
 800400e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004012:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004016:	4631      	mov	r1, r6
 8004018:	dcf1      	bgt.n	8003ffe <__exponent+0x22>
 800401a:	3130      	adds	r1, #48	; 0x30
 800401c:	f1ae 0502 	sub.w	r5, lr, #2
 8004020:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004024:	1c44      	adds	r4, r0, #1
 8004026:	4629      	mov	r1, r5
 8004028:	4561      	cmp	r1, ip
 800402a:	d30a      	bcc.n	8004042 <__exponent+0x66>
 800402c:	f10d 0209 	add.w	r2, sp, #9
 8004030:	eba2 020e 	sub.w	r2, r2, lr
 8004034:	4565      	cmp	r5, ip
 8004036:	bf88      	it	hi
 8004038:	2200      	movhi	r2, #0
 800403a:	4413      	add	r3, r2
 800403c:	1a18      	subs	r0, r3, r0
 800403e:	b003      	add	sp, #12
 8004040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004046:	f804 2f01 	strb.w	r2, [r4, #1]!
 800404a:	e7ed      	b.n	8004028 <__exponent+0x4c>
 800404c:	2330      	movs	r3, #48	; 0x30
 800404e:	3130      	adds	r1, #48	; 0x30
 8004050:	7083      	strb	r3, [r0, #2]
 8004052:	70c1      	strb	r1, [r0, #3]
 8004054:	1d03      	adds	r3, r0, #4
 8004056:	e7f1      	b.n	800403c <__exponent+0x60>

08004058 <_printf_float>:
 8004058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	ed2d 8b02 	vpush	{d8}
 8004060:	b08d      	sub	sp, #52	; 0x34
 8004062:	460c      	mov	r4, r1
 8004064:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004068:	4616      	mov	r6, r2
 800406a:	461f      	mov	r7, r3
 800406c:	4605      	mov	r5, r0
 800406e:	f002 fe8f 	bl	8006d90 <_localeconv_r>
 8004072:	f8d0 a000 	ldr.w	sl, [r0]
 8004076:	4650      	mov	r0, sl
 8004078:	f7fc f8aa 	bl	80001d0 <strlen>
 800407c:	2300      	movs	r3, #0
 800407e:	930a      	str	r3, [sp, #40]	; 0x28
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	9305      	str	r3, [sp, #20]
 8004084:	f8d8 3000 	ldr.w	r3, [r8]
 8004088:	f894 b018 	ldrb.w	fp, [r4, #24]
 800408c:	3307      	adds	r3, #7
 800408e:	f023 0307 	bic.w	r3, r3, #7
 8004092:	f103 0208 	add.w	r2, r3, #8
 8004096:	f8c8 2000 	str.w	r2, [r8]
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80040a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040aa:	9307      	str	r3, [sp, #28]
 80040ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80040b0:	ee08 0a10 	vmov	s16, r0
 80040b4:	4b9f      	ldr	r3, [pc, #636]	; (8004334 <_printf_float+0x2dc>)
 80040b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040ba:	f04f 32ff 	mov.w	r2, #4294967295
 80040be:	f7fc fd35 	bl	8000b2c <__aeabi_dcmpun>
 80040c2:	bb88      	cbnz	r0, 8004128 <_printf_float+0xd0>
 80040c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040c8:	4b9a      	ldr	r3, [pc, #616]	; (8004334 <_printf_float+0x2dc>)
 80040ca:	f04f 32ff 	mov.w	r2, #4294967295
 80040ce:	f7fc fd0f 	bl	8000af0 <__aeabi_dcmple>
 80040d2:	bb48      	cbnz	r0, 8004128 <_printf_float+0xd0>
 80040d4:	2200      	movs	r2, #0
 80040d6:	2300      	movs	r3, #0
 80040d8:	4640      	mov	r0, r8
 80040da:	4649      	mov	r1, r9
 80040dc:	f7fc fcfe 	bl	8000adc <__aeabi_dcmplt>
 80040e0:	b110      	cbz	r0, 80040e8 <_printf_float+0x90>
 80040e2:	232d      	movs	r3, #45	; 0x2d
 80040e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e8:	4b93      	ldr	r3, [pc, #588]	; (8004338 <_printf_float+0x2e0>)
 80040ea:	4894      	ldr	r0, [pc, #592]	; (800433c <_printf_float+0x2e4>)
 80040ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80040f0:	bf94      	ite	ls
 80040f2:	4698      	movls	r8, r3
 80040f4:	4680      	movhi	r8, r0
 80040f6:	2303      	movs	r3, #3
 80040f8:	6123      	str	r3, [r4, #16]
 80040fa:	9b05      	ldr	r3, [sp, #20]
 80040fc:	f023 0204 	bic.w	r2, r3, #4
 8004100:	6022      	str	r2, [r4, #0]
 8004102:	f04f 0900 	mov.w	r9, #0
 8004106:	9700      	str	r7, [sp, #0]
 8004108:	4633      	mov	r3, r6
 800410a:	aa0b      	add	r2, sp, #44	; 0x2c
 800410c:	4621      	mov	r1, r4
 800410e:	4628      	mov	r0, r5
 8004110:	f000 f9d8 	bl	80044c4 <_printf_common>
 8004114:	3001      	adds	r0, #1
 8004116:	f040 8090 	bne.w	800423a <_printf_float+0x1e2>
 800411a:	f04f 30ff 	mov.w	r0, #4294967295
 800411e:	b00d      	add	sp, #52	; 0x34
 8004120:	ecbd 8b02 	vpop	{d8}
 8004124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004128:	4642      	mov	r2, r8
 800412a:	464b      	mov	r3, r9
 800412c:	4640      	mov	r0, r8
 800412e:	4649      	mov	r1, r9
 8004130:	f7fc fcfc 	bl	8000b2c <__aeabi_dcmpun>
 8004134:	b140      	cbz	r0, 8004148 <_printf_float+0xf0>
 8004136:	464b      	mov	r3, r9
 8004138:	2b00      	cmp	r3, #0
 800413a:	bfbc      	itt	lt
 800413c:	232d      	movlt	r3, #45	; 0x2d
 800413e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004142:	487f      	ldr	r0, [pc, #508]	; (8004340 <_printf_float+0x2e8>)
 8004144:	4b7f      	ldr	r3, [pc, #508]	; (8004344 <_printf_float+0x2ec>)
 8004146:	e7d1      	b.n	80040ec <_printf_float+0x94>
 8004148:	6863      	ldr	r3, [r4, #4]
 800414a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800414e:	9206      	str	r2, [sp, #24]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	d13f      	bne.n	80041d4 <_printf_float+0x17c>
 8004154:	2306      	movs	r3, #6
 8004156:	6063      	str	r3, [r4, #4]
 8004158:	9b05      	ldr	r3, [sp, #20]
 800415a:	6861      	ldr	r1, [r4, #4]
 800415c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004160:	2300      	movs	r3, #0
 8004162:	9303      	str	r3, [sp, #12]
 8004164:	ab0a      	add	r3, sp, #40	; 0x28
 8004166:	e9cd b301 	strd	fp, r3, [sp, #4]
 800416a:	ab09      	add	r3, sp, #36	; 0x24
 800416c:	ec49 8b10 	vmov	d0, r8, r9
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	6022      	str	r2, [r4, #0]
 8004174:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004178:	4628      	mov	r0, r5
 800417a:	f7ff fecd 	bl	8003f18 <__cvt>
 800417e:	9b06      	ldr	r3, [sp, #24]
 8004180:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004182:	2b47      	cmp	r3, #71	; 0x47
 8004184:	4680      	mov	r8, r0
 8004186:	d108      	bne.n	800419a <_printf_float+0x142>
 8004188:	1cc8      	adds	r0, r1, #3
 800418a:	db02      	blt.n	8004192 <_printf_float+0x13a>
 800418c:	6863      	ldr	r3, [r4, #4]
 800418e:	4299      	cmp	r1, r3
 8004190:	dd41      	ble.n	8004216 <_printf_float+0x1be>
 8004192:	f1ab 0b02 	sub.w	fp, fp, #2
 8004196:	fa5f fb8b 	uxtb.w	fp, fp
 800419a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800419e:	d820      	bhi.n	80041e2 <_printf_float+0x18a>
 80041a0:	3901      	subs	r1, #1
 80041a2:	465a      	mov	r2, fp
 80041a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041a8:	9109      	str	r1, [sp, #36]	; 0x24
 80041aa:	f7ff ff17 	bl	8003fdc <__exponent>
 80041ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041b0:	1813      	adds	r3, r2, r0
 80041b2:	2a01      	cmp	r2, #1
 80041b4:	4681      	mov	r9, r0
 80041b6:	6123      	str	r3, [r4, #16]
 80041b8:	dc02      	bgt.n	80041c0 <_printf_float+0x168>
 80041ba:	6822      	ldr	r2, [r4, #0]
 80041bc:	07d2      	lsls	r2, r2, #31
 80041be:	d501      	bpl.n	80041c4 <_printf_float+0x16c>
 80041c0:	3301      	adds	r3, #1
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d09c      	beq.n	8004106 <_printf_float+0xae>
 80041cc:	232d      	movs	r3, #45	; 0x2d
 80041ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d2:	e798      	b.n	8004106 <_printf_float+0xae>
 80041d4:	9a06      	ldr	r2, [sp, #24]
 80041d6:	2a47      	cmp	r2, #71	; 0x47
 80041d8:	d1be      	bne.n	8004158 <_printf_float+0x100>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1bc      	bne.n	8004158 <_printf_float+0x100>
 80041de:	2301      	movs	r3, #1
 80041e0:	e7b9      	b.n	8004156 <_printf_float+0xfe>
 80041e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80041e6:	d118      	bne.n	800421a <_printf_float+0x1c2>
 80041e8:	2900      	cmp	r1, #0
 80041ea:	6863      	ldr	r3, [r4, #4]
 80041ec:	dd0b      	ble.n	8004206 <_printf_float+0x1ae>
 80041ee:	6121      	str	r1, [r4, #16]
 80041f0:	b913      	cbnz	r3, 80041f8 <_printf_float+0x1a0>
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	07d0      	lsls	r0, r2, #31
 80041f6:	d502      	bpl.n	80041fe <_printf_float+0x1a6>
 80041f8:	3301      	adds	r3, #1
 80041fa:	440b      	add	r3, r1
 80041fc:	6123      	str	r3, [r4, #16]
 80041fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004200:	f04f 0900 	mov.w	r9, #0
 8004204:	e7de      	b.n	80041c4 <_printf_float+0x16c>
 8004206:	b913      	cbnz	r3, 800420e <_printf_float+0x1b6>
 8004208:	6822      	ldr	r2, [r4, #0]
 800420a:	07d2      	lsls	r2, r2, #31
 800420c:	d501      	bpl.n	8004212 <_printf_float+0x1ba>
 800420e:	3302      	adds	r3, #2
 8004210:	e7f4      	b.n	80041fc <_printf_float+0x1a4>
 8004212:	2301      	movs	r3, #1
 8004214:	e7f2      	b.n	80041fc <_printf_float+0x1a4>
 8004216:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800421a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800421c:	4299      	cmp	r1, r3
 800421e:	db05      	blt.n	800422c <_printf_float+0x1d4>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	6121      	str	r1, [r4, #16]
 8004224:	07d8      	lsls	r0, r3, #31
 8004226:	d5ea      	bpl.n	80041fe <_printf_float+0x1a6>
 8004228:	1c4b      	adds	r3, r1, #1
 800422a:	e7e7      	b.n	80041fc <_printf_float+0x1a4>
 800422c:	2900      	cmp	r1, #0
 800422e:	bfd4      	ite	le
 8004230:	f1c1 0202 	rsble	r2, r1, #2
 8004234:	2201      	movgt	r2, #1
 8004236:	4413      	add	r3, r2
 8004238:	e7e0      	b.n	80041fc <_printf_float+0x1a4>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	055a      	lsls	r2, r3, #21
 800423e:	d407      	bmi.n	8004250 <_printf_float+0x1f8>
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	4642      	mov	r2, r8
 8004244:	4631      	mov	r1, r6
 8004246:	4628      	mov	r0, r5
 8004248:	47b8      	blx	r7
 800424a:	3001      	adds	r0, #1
 800424c:	d12c      	bne.n	80042a8 <_printf_float+0x250>
 800424e:	e764      	b.n	800411a <_printf_float+0xc2>
 8004250:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004254:	f240 80e0 	bls.w	8004418 <_printf_float+0x3c0>
 8004258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800425c:	2200      	movs	r2, #0
 800425e:	2300      	movs	r3, #0
 8004260:	f7fc fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8004264:	2800      	cmp	r0, #0
 8004266:	d034      	beq.n	80042d2 <_printf_float+0x27a>
 8004268:	4a37      	ldr	r2, [pc, #220]	; (8004348 <_printf_float+0x2f0>)
 800426a:	2301      	movs	r3, #1
 800426c:	4631      	mov	r1, r6
 800426e:	4628      	mov	r0, r5
 8004270:	47b8      	blx	r7
 8004272:	3001      	adds	r0, #1
 8004274:	f43f af51 	beq.w	800411a <_printf_float+0xc2>
 8004278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800427c:	429a      	cmp	r2, r3
 800427e:	db02      	blt.n	8004286 <_printf_float+0x22e>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	07d8      	lsls	r0, r3, #31
 8004284:	d510      	bpl.n	80042a8 <_printf_float+0x250>
 8004286:	ee18 3a10 	vmov	r3, s16
 800428a:	4652      	mov	r2, sl
 800428c:	4631      	mov	r1, r6
 800428e:	4628      	mov	r0, r5
 8004290:	47b8      	blx	r7
 8004292:	3001      	adds	r0, #1
 8004294:	f43f af41 	beq.w	800411a <_printf_float+0xc2>
 8004298:	f04f 0800 	mov.w	r8, #0
 800429c:	f104 091a 	add.w	r9, r4, #26
 80042a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a2:	3b01      	subs	r3, #1
 80042a4:	4543      	cmp	r3, r8
 80042a6:	dc09      	bgt.n	80042bc <_printf_float+0x264>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	079b      	lsls	r3, r3, #30
 80042ac:	f100 8105 	bmi.w	80044ba <_printf_float+0x462>
 80042b0:	68e0      	ldr	r0, [r4, #12]
 80042b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042b4:	4298      	cmp	r0, r3
 80042b6:	bfb8      	it	lt
 80042b8:	4618      	movlt	r0, r3
 80042ba:	e730      	b.n	800411e <_printf_float+0xc6>
 80042bc:	2301      	movs	r3, #1
 80042be:	464a      	mov	r2, r9
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b8      	blx	r7
 80042c6:	3001      	adds	r0, #1
 80042c8:	f43f af27 	beq.w	800411a <_printf_float+0xc2>
 80042cc:	f108 0801 	add.w	r8, r8, #1
 80042d0:	e7e6      	b.n	80042a0 <_printf_float+0x248>
 80042d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	dc39      	bgt.n	800434c <_printf_float+0x2f4>
 80042d8:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <_printf_float+0x2f0>)
 80042da:	2301      	movs	r3, #1
 80042dc:	4631      	mov	r1, r6
 80042de:	4628      	mov	r0, r5
 80042e0:	47b8      	blx	r7
 80042e2:	3001      	adds	r0, #1
 80042e4:	f43f af19 	beq.w	800411a <_printf_float+0xc2>
 80042e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042ec:	4313      	orrs	r3, r2
 80042ee:	d102      	bne.n	80042f6 <_printf_float+0x29e>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	07d9      	lsls	r1, r3, #31
 80042f4:	d5d8      	bpl.n	80042a8 <_printf_float+0x250>
 80042f6:	ee18 3a10 	vmov	r3, s16
 80042fa:	4652      	mov	r2, sl
 80042fc:	4631      	mov	r1, r6
 80042fe:	4628      	mov	r0, r5
 8004300:	47b8      	blx	r7
 8004302:	3001      	adds	r0, #1
 8004304:	f43f af09 	beq.w	800411a <_printf_float+0xc2>
 8004308:	f04f 0900 	mov.w	r9, #0
 800430c:	f104 0a1a 	add.w	sl, r4, #26
 8004310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004312:	425b      	negs	r3, r3
 8004314:	454b      	cmp	r3, r9
 8004316:	dc01      	bgt.n	800431c <_printf_float+0x2c4>
 8004318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800431a:	e792      	b.n	8004242 <_printf_float+0x1ea>
 800431c:	2301      	movs	r3, #1
 800431e:	4652      	mov	r2, sl
 8004320:	4631      	mov	r1, r6
 8004322:	4628      	mov	r0, r5
 8004324:	47b8      	blx	r7
 8004326:	3001      	adds	r0, #1
 8004328:	f43f aef7 	beq.w	800411a <_printf_float+0xc2>
 800432c:	f109 0901 	add.w	r9, r9, #1
 8004330:	e7ee      	b.n	8004310 <_printf_float+0x2b8>
 8004332:	bf00      	nop
 8004334:	7fefffff 	.word	0x7fefffff
 8004338:	0800977c 	.word	0x0800977c
 800433c:	08009780 	.word	0x08009780
 8004340:	08009788 	.word	0x08009788
 8004344:	08009784 	.word	0x08009784
 8004348:	0800978c 	.word	0x0800978c
 800434c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800434e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004350:	429a      	cmp	r2, r3
 8004352:	bfa8      	it	ge
 8004354:	461a      	movge	r2, r3
 8004356:	2a00      	cmp	r2, #0
 8004358:	4691      	mov	r9, r2
 800435a:	dc37      	bgt.n	80043cc <_printf_float+0x374>
 800435c:	f04f 0b00 	mov.w	fp, #0
 8004360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004364:	f104 021a 	add.w	r2, r4, #26
 8004368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800436a:	9305      	str	r3, [sp, #20]
 800436c:	eba3 0309 	sub.w	r3, r3, r9
 8004370:	455b      	cmp	r3, fp
 8004372:	dc33      	bgt.n	80043dc <_printf_float+0x384>
 8004374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004378:	429a      	cmp	r2, r3
 800437a:	db3b      	blt.n	80043f4 <_printf_float+0x39c>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	07da      	lsls	r2, r3, #31
 8004380:	d438      	bmi.n	80043f4 <_printf_float+0x39c>
 8004382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004384:	9b05      	ldr	r3, [sp, #20]
 8004386:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	eba2 0901 	sub.w	r9, r2, r1
 800438e:	4599      	cmp	r9, r3
 8004390:	bfa8      	it	ge
 8004392:	4699      	movge	r9, r3
 8004394:	f1b9 0f00 	cmp.w	r9, #0
 8004398:	dc35      	bgt.n	8004406 <_printf_float+0x3ae>
 800439a:	f04f 0800 	mov.w	r8, #0
 800439e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043a2:	f104 0a1a 	add.w	sl, r4, #26
 80043a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	eba3 0309 	sub.w	r3, r3, r9
 80043b0:	4543      	cmp	r3, r8
 80043b2:	f77f af79 	ble.w	80042a8 <_printf_float+0x250>
 80043b6:	2301      	movs	r3, #1
 80043b8:	4652      	mov	r2, sl
 80043ba:	4631      	mov	r1, r6
 80043bc:	4628      	mov	r0, r5
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	f43f aeaa 	beq.w	800411a <_printf_float+0xc2>
 80043c6:	f108 0801 	add.w	r8, r8, #1
 80043ca:	e7ec      	b.n	80043a6 <_printf_float+0x34e>
 80043cc:	4613      	mov	r3, r2
 80043ce:	4631      	mov	r1, r6
 80043d0:	4642      	mov	r2, r8
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	d1c0      	bne.n	800435c <_printf_float+0x304>
 80043da:	e69e      	b.n	800411a <_printf_float+0xc2>
 80043dc:	2301      	movs	r3, #1
 80043de:	4631      	mov	r1, r6
 80043e0:	4628      	mov	r0, r5
 80043e2:	9205      	str	r2, [sp, #20]
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	f43f ae97 	beq.w	800411a <_printf_float+0xc2>
 80043ec:	9a05      	ldr	r2, [sp, #20]
 80043ee:	f10b 0b01 	add.w	fp, fp, #1
 80043f2:	e7b9      	b.n	8004368 <_printf_float+0x310>
 80043f4:	ee18 3a10 	vmov	r3, s16
 80043f8:	4652      	mov	r2, sl
 80043fa:	4631      	mov	r1, r6
 80043fc:	4628      	mov	r0, r5
 80043fe:	47b8      	blx	r7
 8004400:	3001      	adds	r0, #1
 8004402:	d1be      	bne.n	8004382 <_printf_float+0x32a>
 8004404:	e689      	b.n	800411a <_printf_float+0xc2>
 8004406:	9a05      	ldr	r2, [sp, #20]
 8004408:	464b      	mov	r3, r9
 800440a:	4442      	add	r2, r8
 800440c:	4631      	mov	r1, r6
 800440e:	4628      	mov	r0, r5
 8004410:	47b8      	blx	r7
 8004412:	3001      	adds	r0, #1
 8004414:	d1c1      	bne.n	800439a <_printf_float+0x342>
 8004416:	e680      	b.n	800411a <_printf_float+0xc2>
 8004418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800441a:	2a01      	cmp	r2, #1
 800441c:	dc01      	bgt.n	8004422 <_printf_float+0x3ca>
 800441e:	07db      	lsls	r3, r3, #31
 8004420:	d538      	bpl.n	8004494 <_printf_float+0x43c>
 8004422:	2301      	movs	r3, #1
 8004424:	4642      	mov	r2, r8
 8004426:	4631      	mov	r1, r6
 8004428:	4628      	mov	r0, r5
 800442a:	47b8      	blx	r7
 800442c:	3001      	adds	r0, #1
 800442e:	f43f ae74 	beq.w	800411a <_printf_float+0xc2>
 8004432:	ee18 3a10 	vmov	r3, s16
 8004436:	4652      	mov	r2, sl
 8004438:	4631      	mov	r1, r6
 800443a:	4628      	mov	r0, r5
 800443c:	47b8      	blx	r7
 800443e:	3001      	adds	r0, #1
 8004440:	f43f ae6b 	beq.w	800411a <_printf_float+0xc2>
 8004444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004448:	2200      	movs	r2, #0
 800444a:	2300      	movs	r3, #0
 800444c:	f7fc fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004450:	b9d8      	cbnz	r0, 800448a <_printf_float+0x432>
 8004452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004454:	f108 0201 	add.w	r2, r8, #1
 8004458:	3b01      	subs	r3, #1
 800445a:	4631      	mov	r1, r6
 800445c:	4628      	mov	r0, r5
 800445e:	47b8      	blx	r7
 8004460:	3001      	adds	r0, #1
 8004462:	d10e      	bne.n	8004482 <_printf_float+0x42a>
 8004464:	e659      	b.n	800411a <_printf_float+0xc2>
 8004466:	2301      	movs	r3, #1
 8004468:	4652      	mov	r2, sl
 800446a:	4631      	mov	r1, r6
 800446c:	4628      	mov	r0, r5
 800446e:	47b8      	blx	r7
 8004470:	3001      	adds	r0, #1
 8004472:	f43f ae52 	beq.w	800411a <_printf_float+0xc2>
 8004476:	f108 0801 	add.w	r8, r8, #1
 800447a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800447c:	3b01      	subs	r3, #1
 800447e:	4543      	cmp	r3, r8
 8004480:	dcf1      	bgt.n	8004466 <_printf_float+0x40e>
 8004482:	464b      	mov	r3, r9
 8004484:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004488:	e6dc      	b.n	8004244 <_printf_float+0x1ec>
 800448a:	f04f 0800 	mov.w	r8, #0
 800448e:	f104 0a1a 	add.w	sl, r4, #26
 8004492:	e7f2      	b.n	800447a <_printf_float+0x422>
 8004494:	2301      	movs	r3, #1
 8004496:	4642      	mov	r2, r8
 8004498:	e7df      	b.n	800445a <_printf_float+0x402>
 800449a:	2301      	movs	r3, #1
 800449c:	464a      	mov	r2, r9
 800449e:	4631      	mov	r1, r6
 80044a0:	4628      	mov	r0, r5
 80044a2:	47b8      	blx	r7
 80044a4:	3001      	adds	r0, #1
 80044a6:	f43f ae38 	beq.w	800411a <_printf_float+0xc2>
 80044aa:	f108 0801 	add.w	r8, r8, #1
 80044ae:	68e3      	ldr	r3, [r4, #12]
 80044b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044b2:	1a5b      	subs	r3, r3, r1
 80044b4:	4543      	cmp	r3, r8
 80044b6:	dcf0      	bgt.n	800449a <_printf_float+0x442>
 80044b8:	e6fa      	b.n	80042b0 <_printf_float+0x258>
 80044ba:	f04f 0800 	mov.w	r8, #0
 80044be:	f104 0919 	add.w	r9, r4, #25
 80044c2:	e7f4      	b.n	80044ae <_printf_float+0x456>

080044c4 <_printf_common>:
 80044c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c8:	4616      	mov	r6, r2
 80044ca:	4699      	mov	r9, r3
 80044cc:	688a      	ldr	r2, [r1, #8]
 80044ce:	690b      	ldr	r3, [r1, #16]
 80044d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044d4:	4293      	cmp	r3, r2
 80044d6:	bfb8      	it	lt
 80044d8:	4613      	movlt	r3, r2
 80044da:	6033      	str	r3, [r6, #0]
 80044dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044e0:	4607      	mov	r7, r0
 80044e2:	460c      	mov	r4, r1
 80044e4:	b10a      	cbz	r2, 80044ea <_printf_common+0x26>
 80044e6:	3301      	adds	r3, #1
 80044e8:	6033      	str	r3, [r6, #0]
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	0699      	lsls	r1, r3, #26
 80044ee:	bf42      	ittt	mi
 80044f0:	6833      	ldrmi	r3, [r6, #0]
 80044f2:	3302      	addmi	r3, #2
 80044f4:	6033      	strmi	r3, [r6, #0]
 80044f6:	6825      	ldr	r5, [r4, #0]
 80044f8:	f015 0506 	ands.w	r5, r5, #6
 80044fc:	d106      	bne.n	800450c <_printf_common+0x48>
 80044fe:	f104 0a19 	add.w	sl, r4, #25
 8004502:	68e3      	ldr	r3, [r4, #12]
 8004504:	6832      	ldr	r2, [r6, #0]
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	42ab      	cmp	r3, r5
 800450a:	dc26      	bgt.n	800455a <_printf_common+0x96>
 800450c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004510:	1e13      	subs	r3, r2, #0
 8004512:	6822      	ldr	r2, [r4, #0]
 8004514:	bf18      	it	ne
 8004516:	2301      	movne	r3, #1
 8004518:	0692      	lsls	r2, r2, #26
 800451a:	d42b      	bmi.n	8004574 <_printf_common+0xb0>
 800451c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004520:	4649      	mov	r1, r9
 8004522:	4638      	mov	r0, r7
 8004524:	47c0      	blx	r8
 8004526:	3001      	adds	r0, #1
 8004528:	d01e      	beq.n	8004568 <_printf_common+0xa4>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	68e5      	ldr	r5, [r4, #12]
 800452e:	6832      	ldr	r2, [r6, #0]
 8004530:	f003 0306 	and.w	r3, r3, #6
 8004534:	2b04      	cmp	r3, #4
 8004536:	bf08      	it	eq
 8004538:	1aad      	subeq	r5, r5, r2
 800453a:	68a3      	ldr	r3, [r4, #8]
 800453c:	6922      	ldr	r2, [r4, #16]
 800453e:	bf0c      	ite	eq
 8004540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004544:	2500      	movne	r5, #0
 8004546:	4293      	cmp	r3, r2
 8004548:	bfc4      	itt	gt
 800454a:	1a9b      	subgt	r3, r3, r2
 800454c:	18ed      	addgt	r5, r5, r3
 800454e:	2600      	movs	r6, #0
 8004550:	341a      	adds	r4, #26
 8004552:	42b5      	cmp	r5, r6
 8004554:	d11a      	bne.n	800458c <_printf_common+0xc8>
 8004556:	2000      	movs	r0, #0
 8004558:	e008      	b.n	800456c <_printf_common+0xa8>
 800455a:	2301      	movs	r3, #1
 800455c:	4652      	mov	r2, sl
 800455e:	4649      	mov	r1, r9
 8004560:	4638      	mov	r0, r7
 8004562:	47c0      	blx	r8
 8004564:	3001      	adds	r0, #1
 8004566:	d103      	bne.n	8004570 <_printf_common+0xac>
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	3501      	adds	r5, #1
 8004572:	e7c6      	b.n	8004502 <_printf_common+0x3e>
 8004574:	18e1      	adds	r1, r4, r3
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	2030      	movs	r0, #48	; 0x30
 800457a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800457e:	4422      	add	r2, r4
 8004580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004588:	3302      	adds	r3, #2
 800458a:	e7c7      	b.n	800451c <_printf_common+0x58>
 800458c:	2301      	movs	r3, #1
 800458e:	4622      	mov	r2, r4
 8004590:	4649      	mov	r1, r9
 8004592:	4638      	mov	r0, r7
 8004594:	47c0      	blx	r8
 8004596:	3001      	adds	r0, #1
 8004598:	d0e6      	beq.n	8004568 <_printf_common+0xa4>
 800459a:	3601      	adds	r6, #1
 800459c:	e7d9      	b.n	8004552 <_printf_common+0x8e>
	...

080045a0 <_printf_i>:
 80045a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	460c      	mov	r4, r1
 80045a6:	4691      	mov	r9, r2
 80045a8:	7e27      	ldrb	r7, [r4, #24]
 80045aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045ac:	2f78      	cmp	r7, #120	; 0x78
 80045ae:	4680      	mov	r8, r0
 80045b0:	469a      	mov	sl, r3
 80045b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045b6:	d807      	bhi.n	80045c8 <_printf_i+0x28>
 80045b8:	2f62      	cmp	r7, #98	; 0x62
 80045ba:	d80a      	bhi.n	80045d2 <_printf_i+0x32>
 80045bc:	2f00      	cmp	r7, #0
 80045be:	f000 80d8 	beq.w	8004772 <_printf_i+0x1d2>
 80045c2:	2f58      	cmp	r7, #88	; 0x58
 80045c4:	f000 80a3 	beq.w	800470e <_printf_i+0x16e>
 80045c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045d0:	e03a      	b.n	8004648 <_printf_i+0xa8>
 80045d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045d6:	2b15      	cmp	r3, #21
 80045d8:	d8f6      	bhi.n	80045c8 <_printf_i+0x28>
 80045da:	a001      	add	r0, pc, #4	; (adr r0, 80045e0 <_printf_i+0x40>)
 80045dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045e0:	08004639 	.word	0x08004639
 80045e4:	0800464d 	.word	0x0800464d
 80045e8:	080045c9 	.word	0x080045c9
 80045ec:	080045c9 	.word	0x080045c9
 80045f0:	080045c9 	.word	0x080045c9
 80045f4:	080045c9 	.word	0x080045c9
 80045f8:	0800464d 	.word	0x0800464d
 80045fc:	080045c9 	.word	0x080045c9
 8004600:	080045c9 	.word	0x080045c9
 8004604:	080045c9 	.word	0x080045c9
 8004608:	080045c9 	.word	0x080045c9
 800460c:	08004759 	.word	0x08004759
 8004610:	0800467d 	.word	0x0800467d
 8004614:	0800473b 	.word	0x0800473b
 8004618:	080045c9 	.word	0x080045c9
 800461c:	080045c9 	.word	0x080045c9
 8004620:	0800477b 	.word	0x0800477b
 8004624:	080045c9 	.word	0x080045c9
 8004628:	0800467d 	.word	0x0800467d
 800462c:	080045c9 	.word	0x080045c9
 8004630:	080045c9 	.word	0x080045c9
 8004634:	08004743 	.word	0x08004743
 8004638:	680b      	ldr	r3, [r1, #0]
 800463a:	1d1a      	adds	r2, r3, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	600a      	str	r2, [r1, #0]
 8004640:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004648:	2301      	movs	r3, #1
 800464a:	e0a3      	b.n	8004794 <_printf_i+0x1f4>
 800464c:	6825      	ldr	r5, [r4, #0]
 800464e:	6808      	ldr	r0, [r1, #0]
 8004650:	062e      	lsls	r6, r5, #24
 8004652:	f100 0304 	add.w	r3, r0, #4
 8004656:	d50a      	bpl.n	800466e <_printf_i+0xce>
 8004658:	6805      	ldr	r5, [r0, #0]
 800465a:	600b      	str	r3, [r1, #0]
 800465c:	2d00      	cmp	r5, #0
 800465e:	da03      	bge.n	8004668 <_printf_i+0xc8>
 8004660:	232d      	movs	r3, #45	; 0x2d
 8004662:	426d      	negs	r5, r5
 8004664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004668:	485e      	ldr	r0, [pc, #376]	; (80047e4 <_printf_i+0x244>)
 800466a:	230a      	movs	r3, #10
 800466c:	e019      	b.n	80046a2 <_printf_i+0x102>
 800466e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004672:	6805      	ldr	r5, [r0, #0]
 8004674:	600b      	str	r3, [r1, #0]
 8004676:	bf18      	it	ne
 8004678:	b22d      	sxthne	r5, r5
 800467a:	e7ef      	b.n	800465c <_printf_i+0xbc>
 800467c:	680b      	ldr	r3, [r1, #0]
 800467e:	6825      	ldr	r5, [r4, #0]
 8004680:	1d18      	adds	r0, r3, #4
 8004682:	6008      	str	r0, [r1, #0]
 8004684:	0628      	lsls	r0, r5, #24
 8004686:	d501      	bpl.n	800468c <_printf_i+0xec>
 8004688:	681d      	ldr	r5, [r3, #0]
 800468a:	e002      	b.n	8004692 <_printf_i+0xf2>
 800468c:	0669      	lsls	r1, r5, #25
 800468e:	d5fb      	bpl.n	8004688 <_printf_i+0xe8>
 8004690:	881d      	ldrh	r5, [r3, #0]
 8004692:	4854      	ldr	r0, [pc, #336]	; (80047e4 <_printf_i+0x244>)
 8004694:	2f6f      	cmp	r7, #111	; 0x6f
 8004696:	bf0c      	ite	eq
 8004698:	2308      	moveq	r3, #8
 800469a:	230a      	movne	r3, #10
 800469c:	2100      	movs	r1, #0
 800469e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046a2:	6866      	ldr	r6, [r4, #4]
 80046a4:	60a6      	str	r6, [r4, #8]
 80046a6:	2e00      	cmp	r6, #0
 80046a8:	bfa2      	ittt	ge
 80046aa:	6821      	ldrge	r1, [r4, #0]
 80046ac:	f021 0104 	bicge.w	r1, r1, #4
 80046b0:	6021      	strge	r1, [r4, #0]
 80046b2:	b90d      	cbnz	r5, 80046b8 <_printf_i+0x118>
 80046b4:	2e00      	cmp	r6, #0
 80046b6:	d04d      	beq.n	8004754 <_printf_i+0x1b4>
 80046b8:	4616      	mov	r6, r2
 80046ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80046be:	fb03 5711 	mls	r7, r3, r1, r5
 80046c2:	5dc7      	ldrb	r7, [r0, r7]
 80046c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046c8:	462f      	mov	r7, r5
 80046ca:	42bb      	cmp	r3, r7
 80046cc:	460d      	mov	r5, r1
 80046ce:	d9f4      	bls.n	80046ba <_printf_i+0x11a>
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d10b      	bne.n	80046ec <_printf_i+0x14c>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	07df      	lsls	r7, r3, #31
 80046d8:	d508      	bpl.n	80046ec <_printf_i+0x14c>
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	6861      	ldr	r1, [r4, #4]
 80046de:	4299      	cmp	r1, r3
 80046e0:	bfde      	ittt	le
 80046e2:	2330      	movle	r3, #48	; 0x30
 80046e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046ec:	1b92      	subs	r2, r2, r6
 80046ee:	6122      	str	r2, [r4, #16]
 80046f0:	f8cd a000 	str.w	sl, [sp]
 80046f4:	464b      	mov	r3, r9
 80046f6:	aa03      	add	r2, sp, #12
 80046f8:	4621      	mov	r1, r4
 80046fa:	4640      	mov	r0, r8
 80046fc:	f7ff fee2 	bl	80044c4 <_printf_common>
 8004700:	3001      	adds	r0, #1
 8004702:	d14c      	bne.n	800479e <_printf_i+0x1fe>
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	b004      	add	sp, #16
 800470a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470e:	4835      	ldr	r0, [pc, #212]	; (80047e4 <_printf_i+0x244>)
 8004710:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	680e      	ldr	r6, [r1, #0]
 8004718:	061f      	lsls	r7, r3, #24
 800471a:	f856 5b04 	ldr.w	r5, [r6], #4
 800471e:	600e      	str	r6, [r1, #0]
 8004720:	d514      	bpl.n	800474c <_printf_i+0x1ac>
 8004722:	07d9      	lsls	r1, r3, #31
 8004724:	bf44      	itt	mi
 8004726:	f043 0320 	orrmi.w	r3, r3, #32
 800472a:	6023      	strmi	r3, [r4, #0]
 800472c:	b91d      	cbnz	r5, 8004736 <_printf_i+0x196>
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	f023 0320 	bic.w	r3, r3, #32
 8004734:	6023      	str	r3, [r4, #0]
 8004736:	2310      	movs	r3, #16
 8004738:	e7b0      	b.n	800469c <_printf_i+0xfc>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	f043 0320 	orr.w	r3, r3, #32
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	2378      	movs	r3, #120	; 0x78
 8004744:	4828      	ldr	r0, [pc, #160]	; (80047e8 <_printf_i+0x248>)
 8004746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800474a:	e7e3      	b.n	8004714 <_printf_i+0x174>
 800474c:	065e      	lsls	r6, r3, #25
 800474e:	bf48      	it	mi
 8004750:	b2ad      	uxthmi	r5, r5
 8004752:	e7e6      	b.n	8004722 <_printf_i+0x182>
 8004754:	4616      	mov	r6, r2
 8004756:	e7bb      	b.n	80046d0 <_printf_i+0x130>
 8004758:	680b      	ldr	r3, [r1, #0]
 800475a:	6826      	ldr	r6, [r4, #0]
 800475c:	6960      	ldr	r0, [r4, #20]
 800475e:	1d1d      	adds	r5, r3, #4
 8004760:	600d      	str	r5, [r1, #0]
 8004762:	0635      	lsls	r5, r6, #24
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	d501      	bpl.n	800476c <_printf_i+0x1cc>
 8004768:	6018      	str	r0, [r3, #0]
 800476a:	e002      	b.n	8004772 <_printf_i+0x1d2>
 800476c:	0671      	lsls	r1, r6, #25
 800476e:	d5fb      	bpl.n	8004768 <_printf_i+0x1c8>
 8004770:	8018      	strh	r0, [r3, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	4616      	mov	r6, r2
 8004778:	e7ba      	b.n	80046f0 <_printf_i+0x150>
 800477a:	680b      	ldr	r3, [r1, #0]
 800477c:	1d1a      	adds	r2, r3, #4
 800477e:	600a      	str	r2, [r1, #0]
 8004780:	681e      	ldr	r6, [r3, #0]
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	2100      	movs	r1, #0
 8004786:	4630      	mov	r0, r6
 8004788:	f7fb fd2a 	bl	80001e0 <memchr>
 800478c:	b108      	cbz	r0, 8004792 <_printf_i+0x1f2>
 800478e:	1b80      	subs	r0, r0, r6
 8004790:	6060      	str	r0, [r4, #4]
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	6123      	str	r3, [r4, #16]
 8004796:	2300      	movs	r3, #0
 8004798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800479c:	e7a8      	b.n	80046f0 <_printf_i+0x150>
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	4632      	mov	r2, r6
 80047a2:	4649      	mov	r1, r9
 80047a4:	4640      	mov	r0, r8
 80047a6:	47d0      	blx	sl
 80047a8:	3001      	adds	r0, #1
 80047aa:	d0ab      	beq.n	8004704 <_printf_i+0x164>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	079b      	lsls	r3, r3, #30
 80047b0:	d413      	bmi.n	80047da <_printf_i+0x23a>
 80047b2:	68e0      	ldr	r0, [r4, #12]
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	4298      	cmp	r0, r3
 80047b8:	bfb8      	it	lt
 80047ba:	4618      	movlt	r0, r3
 80047bc:	e7a4      	b.n	8004708 <_printf_i+0x168>
 80047be:	2301      	movs	r3, #1
 80047c0:	4632      	mov	r2, r6
 80047c2:	4649      	mov	r1, r9
 80047c4:	4640      	mov	r0, r8
 80047c6:	47d0      	blx	sl
 80047c8:	3001      	adds	r0, #1
 80047ca:	d09b      	beq.n	8004704 <_printf_i+0x164>
 80047cc:	3501      	adds	r5, #1
 80047ce:	68e3      	ldr	r3, [r4, #12]
 80047d0:	9903      	ldr	r1, [sp, #12]
 80047d2:	1a5b      	subs	r3, r3, r1
 80047d4:	42ab      	cmp	r3, r5
 80047d6:	dcf2      	bgt.n	80047be <_printf_i+0x21e>
 80047d8:	e7eb      	b.n	80047b2 <_printf_i+0x212>
 80047da:	2500      	movs	r5, #0
 80047dc:	f104 0619 	add.w	r6, r4, #25
 80047e0:	e7f5      	b.n	80047ce <_printf_i+0x22e>
 80047e2:	bf00      	nop
 80047e4:	0800978e 	.word	0x0800978e
 80047e8:	0800979f 	.word	0x0800979f

080047ec <_scanf_float>:
 80047ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f0:	b087      	sub	sp, #28
 80047f2:	4617      	mov	r7, r2
 80047f4:	9303      	str	r3, [sp, #12]
 80047f6:	688b      	ldr	r3, [r1, #8]
 80047f8:	1e5a      	subs	r2, r3, #1
 80047fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80047fe:	bf83      	ittte	hi
 8004800:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004804:	195b      	addhi	r3, r3, r5
 8004806:	9302      	strhi	r3, [sp, #8]
 8004808:	2300      	movls	r3, #0
 800480a:	bf86      	itte	hi
 800480c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004810:	608b      	strhi	r3, [r1, #8]
 8004812:	9302      	strls	r3, [sp, #8]
 8004814:	680b      	ldr	r3, [r1, #0]
 8004816:	468b      	mov	fp, r1
 8004818:	2500      	movs	r5, #0
 800481a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800481e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004822:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004826:	4680      	mov	r8, r0
 8004828:	460c      	mov	r4, r1
 800482a:	465e      	mov	r6, fp
 800482c:	46aa      	mov	sl, r5
 800482e:	46a9      	mov	r9, r5
 8004830:	9501      	str	r5, [sp, #4]
 8004832:	68a2      	ldr	r2, [r4, #8]
 8004834:	b152      	cbz	r2, 800484c <_scanf_float+0x60>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b4e      	cmp	r3, #78	; 0x4e
 800483c:	d864      	bhi.n	8004908 <_scanf_float+0x11c>
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d83c      	bhi.n	80048bc <_scanf_float+0xd0>
 8004842:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004846:	b2c8      	uxtb	r0, r1
 8004848:	280e      	cmp	r0, #14
 800484a:	d93a      	bls.n	80048c2 <_scanf_float+0xd6>
 800484c:	f1b9 0f00 	cmp.w	r9, #0
 8004850:	d003      	beq.n	800485a <_scanf_float+0x6e>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800485e:	f1ba 0f01 	cmp.w	sl, #1
 8004862:	f200 8113 	bhi.w	8004a8c <_scanf_float+0x2a0>
 8004866:	455e      	cmp	r6, fp
 8004868:	f200 8105 	bhi.w	8004a76 <_scanf_float+0x28a>
 800486c:	2501      	movs	r5, #1
 800486e:	4628      	mov	r0, r5
 8004870:	b007      	add	sp, #28
 8004872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004876:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800487a:	2a0d      	cmp	r2, #13
 800487c:	d8e6      	bhi.n	800484c <_scanf_float+0x60>
 800487e:	a101      	add	r1, pc, #4	; (adr r1, 8004884 <_scanf_float+0x98>)
 8004880:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004884:	080049c3 	.word	0x080049c3
 8004888:	0800484d 	.word	0x0800484d
 800488c:	0800484d 	.word	0x0800484d
 8004890:	0800484d 	.word	0x0800484d
 8004894:	08004a23 	.word	0x08004a23
 8004898:	080049fb 	.word	0x080049fb
 800489c:	0800484d 	.word	0x0800484d
 80048a0:	0800484d 	.word	0x0800484d
 80048a4:	080049d1 	.word	0x080049d1
 80048a8:	0800484d 	.word	0x0800484d
 80048ac:	0800484d 	.word	0x0800484d
 80048b0:	0800484d 	.word	0x0800484d
 80048b4:	0800484d 	.word	0x0800484d
 80048b8:	08004989 	.word	0x08004989
 80048bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80048c0:	e7db      	b.n	800487a <_scanf_float+0x8e>
 80048c2:	290e      	cmp	r1, #14
 80048c4:	d8c2      	bhi.n	800484c <_scanf_float+0x60>
 80048c6:	a001      	add	r0, pc, #4	; (adr r0, 80048cc <_scanf_float+0xe0>)
 80048c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80048cc:	0800497b 	.word	0x0800497b
 80048d0:	0800484d 	.word	0x0800484d
 80048d4:	0800497b 	.word	0x0800497b
 80048d8:	08004a0f 	.word	0x08004a0f
 80048dc:	0800484d 	.word	0x0800484d
 80048e0:	08004929 	.word	0x08004929
 80048e4:	08004965 	.word	0x08004965
 80048e8:	08004965 	.word	0x08004965
 80048ec:	08004965 	.word	0x08004965
 80048f0:	08004965 	.word	0x08004965
 80048f4:	08004965 	.word	0x08004965
 80048f8:	08004965 	.word	0x08004965
 80048fc:	08004965 	.word	0x08004965
 8004900:	08004965 	.word	0x08004965
 8004904:	08004965 	.word	0x08004965
 8004908:	2b6e      	cmp	r3, #110	; 0x6e
 800490a:	d809      	bhi.n	8004920 <_scanf_float+0x134>
 800490c:	2b60      	cmp	r3, #96	; 0x60
 800490e:	d8b2      	bhi.n	8004876 <_scanf_float+0x8a>
 8004910:	2b54      	cmp	r3, #84	; 0x54
 8004912:	d077      	beq.n	8004a04 <_scanf_float+0x218>
 8004914:	2b59      	cmp	r3, #89	; 0x59
 8004916:	d199      	bne.n	800484c <_scanf_float+0x60>
 8004918:	2d07      	cmp	r5, #7
 800491a:	d197      	bne.n	800484c <_scanf_float+0x60>
 800491c:	2508      	movs	r5, #8
 800491e:	e029      	b.n	8004974 <_scanf_float+0x188>
 8004920:	2b74      	cmp	r3, #116	; 0x74
 8004922:	d06f      	beq.n	8004a04 <_scanf_float+0x218>
 8004924:	2b79      	cmp	r3, #121	; 0x79
 8004926:	e7f6      	b.n	8004916 <_scanf_float+0x12a>
 8004928:	6821      	ldr	r1, [r4, #0]
 800492a:	05c8      	lsls	r0, r1, #23
 800492c:	d51a      	bpl.n	8004964 <_scanf_float+0x178>
 800492e:	9b02      	ldr	r3, [sp, #8]
 8004930:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004934:	6021      	str	r1, [r4, #0]
 8004936:	f109 0901 	add.w	r9, r9, #1
 800493a:	b11b      	cbz	r3, 8004944 <_scanf_float+0x158>
 800493c:	3b01      	subs	r3, #1
 800493e:	3201      	adds	r2, #1
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	60a2      	str	r2, [r4, #8]
 8004944:	68a3      	ldr	r3, [r4, #8]
 8004946:	3b01      	subs	r3, #1
 8004948:	60a3      	str	r3, [r4, #8]
 800494a:	6923      	ldr	r3, [r4, #16]
 800494c:	3301      	adds	r3, #1
 800494e:	6123      	str	r3, [r4, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3b01      	subs	r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	f340 8084 	ble.w	8004a64 <_scanf_float+0x278>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	e766      	b.n	8004832 <_scanf_float+0x46>
 8004964:	eb1a 0f05 	cmn.w	sl, r5
 8004968:	f47f af70 	bne.w	800484c <_scanf_float+0x60>
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004972:	6022      	str	r2, [r4, #0]
 8004974:	f806 3b01 	strb.w	r3, [r6], #1
 8004978:	e7e4      	b.n	8004944 <_scanf_float+0x158>
 800497a:	6822      	ldr	r2, [r4, #0]
 800497c:	0610      	lsls	r0, r2, #24
 800497e:	f57f af65 	bpl.w	800484c <_scanf_float+0x60>
 8004982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004986:	e7f4      	b.n	8004972 <_scanf_float+0x186>
 8004988:	f1ba 0f00 	cmp.w	sl, #0
 800498c:	d10e      	bne.n	80049ac <_scanf_float+0x1c0>
 800498e:	f1b9 0f00 	cmp.w	r9, #0
 8004992:	d10e      	bne.n	80049b2 <_scanf_float+0x1c6>
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800499a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800499e:	d108      	bne.n	80049b2 <_scanf_float+0x1c6>
 80049a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049a4:	6022      	str	r2, [r4, #0]
 80049a6:	f04f 0a01 	mov.w	sl, #1
 80049aa:	e7e3      	b.n	8004974 <_scanf_float+0x188>
 80049ac:	f1ba 0f02 	cmp.w	sl, #2
 80049b0:	d055      	beq.n	8004a5e <_scanf_float+0x272>
 80049b2:	2d01      	cmp	r5, #1
 80049b4:	d002      	beq.n	80049bc <_scanf_float+0x1d0>
 80049b6:	2d04      	cmp	r5, #4
 80049b8:	f47f af48 	bne.w	800484c <_scanf_float+0x60>
 80049bc:	3501      	adds	r5, #1
 80049be:	b2ed      	uxtb	r5, r5
 80049c0:	e7d8      	b.n	8004974 <_scanf_float+0x188>
 80049c2:	f1ba 0f01 	cmp.w	sl, #1
 80049c6:	f47f af41 	bne.w	800484c <_scanf_float+0x60>
 80049ca:	f04f 0a02 	mov.w	sl, #2
 80049ce:	e7d1      	b.n	8004974 <_scanf_float+0x188>
 80049d0:	b97d      	cbnz	r5, 80049f2 <_scanf_float+0x206>
 80049d2:	f1b9 0f00 	cmp.w	r9, #0
 80049d6:	f47f af3c 	bne.w	8004852 <_scanf_float+0x66>
 80049da:	6822      	ldr	r2, [r4, #0]
 80049dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80049e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80049e4:	f47f af39 	bne.w	800485a <_scanf_float+0x6e>
 80049e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049ec:	6022      	str	r2, [r4, #0]
 80049ee:	2501      	movs	r5, #1
 80049f0:	e7c0      	b.n	8004974 <_scanf_float+0x188>
 80049f2:	2d03      	cmp	r5, #3
 80049f4:	d0e2      	beq.n	80049bc <_scanf_float+0x1d0>
 80049f6:	2d05      	cmp	r5, #5
 80049f8:	e7de      	b.n	80049b8 <_scanf_float+0x1cc>
 80049fa:	2d02      	cmp	r5, #2
 80049fc:	f47f af26 	bne.w	800484c <_scanf_float+0x60>
 8004a00:	2503      	movs	r5, #3
 8004a02:	e7b7      	b.n	8004974 <_scanf_float+0x188>
 8004a04:	2d06      	cmp	r5, #6
 8004a06:	f47f af21 	bne.w	800484c <_scanf_float+0x60>
 8004a0a:	2507      	movs	r5, #7
 8004a0c:	e7b2      	b.n	8004974 <_scanf_float+0x188>
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	0591      	lsls	r1, r2, #22
 8004a12:	f57f af1b 	bpl.w	800484c <_scanf_float+0x60>
 8004a16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004a1a:	6022      	str	r2, [r4, #0]
 8004a1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a20:	e7a8      	b.n	8004974 <_scanf_float+0x188>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004a28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004a2c:	d006      	beq.n	8004a3c <_scanf_float+0x250>
 8004a2e:	0550      	lsls	r0, r2, #21
 8004a30:	f57f af0c 	bpl.w	800484c <_scanf_float+0x60>
 8004a34:	f1b9 0f00 	cmp.w	r9, #0
 8004a38:	f43f af0f 	beq.w	800485a <_scanf_float+0x6e>
 8004a3c:	0591      	lsls	r1, r2, #22
 8004a3e:	bf58      	it	pl
 8004a40:	9901      	ldrpl	r1, [sp, #4]
 8004a42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a46:	bf58      	it	pl
 8004a48:	eba9 0101 	subpl.w	r1, r9, r1
 8004a4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004a50:	bf58      	it	pl
 8004a52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004a56:	6022      	str	r2, [r4, #0]
 8004a58:	f04f 0900 	mov.w	r9, #0
 8004a5c:	e78a      	b.n	8004974 <_scanf_float+0x188>
 8004a5e:	f04f 0a03 	mov.w	sl, #3
 8004a62:	e787      	b.n	8004974 <_scanf_float+0x188>
 8004a64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a68:	4639      	mov	r1, r7
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	4798      	blx	r3
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	f43f aedf 	beq.w	8004832 <_scanf_float+0x46>
 8004a74:	e6ea      	b.n	800484c <_scanf_float+0x60>
 8004a76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a7e:	463a      	mov	r2, r7
 8004a80:	4640      	mov	r0, r8
 8004a82:	4798      	blx	r3
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	6123      	str	r3, [r4, #16]
 8004a8a:	e6ec      	b.n	8004866 <_scanf_float+0x7a>
 8004a8c:	1e6b      	subs	r3, r5, #1
 8004a8e:	2b06      	cmp	r3, #6
 8004a90:	d825      	bhi.n	8004ade <_scanf_float+0x2f2>
 8004a92:	2d02      	cmp	r5, #2
 8004a94:	d836      	bhi.n	8004b04 <_scanf_float+0x318>
 8004a96:	455e      	cmp	r6, fp
 8004a98:	f67f aee8 	bls.w	800486c <_scanf_float+0x80>
 8004a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004aa0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004aa4:	463a      	mov	r2, r7
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	4798      	blx	r3
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	e7f1      	b.n	8004a96 <_scanf_float+0x2aa>
 8004ab2:	9802      	ldr	r0, [sp, #8]
 8004ab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ab8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004abc:	9002      	str	r0, [sp, #8]
 8004abe:	463a      	mov	r2, r7
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	4798      	blx	r3
 8004ac4:	6923      	ldr	r3, [r4, #16]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	6123      	str	r3, [r4, #16]
 8004aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ace:	fa5f fa8a 	uxtb.w	sl, sl
 8004ad2:	f1ba 0f02 	cmp.w	sl, #2
 8004ad6:	d1ec      	bne.n	8004ab2 <_scanf_float+0x2c6>
 8004ad8:	3d03      	subs	r5, #3
 8004ada:	b2ed      	uxtb	r5, r5
 8004adc:	1b76      	subs	r6, r6, r5
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	05da      	lsls	r2, r3, #23
 8004ae2:	d52f      	bpl.n	8004b44 <_scanf_float+0x358>
 8004ae4:	055b      	lsls	r3, r3, #21
 8004ae6:	d510      	bpl.n	8004b0a <_scanf_float+0x31e>
 8004ae8:	455e      	cmp	r6, fp
 8004aea:	f67f aebf 	bls.w	800486c <_scanf_float+0x80>
 8004aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004af2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004af6:	463a      	mov	r2, r7
 8004af8:	4640      	mov	r0, r8
 8004afa:	4798      	blx	r3
 8004afc:	6923      	ldr	r3, [r4, #16]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	6123      	str	r3, [r4, #16]
 8004b02:	e7f1      	b.n	8004ae8 <_scanf_float+0x2fc>
 8004b04:	46aa      	mov	sl, r5
 8004b06:	9602      	str	r6, [sp, #8]
 8004b08:	e7df      	b.n	8004aca <_scanf_float+0x2de>
 8004b0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004b0e:	6923      	ldr	r3, [r4, #16]
 8004b10:	2965      	cmp	r1, #101	; 0x65
 8004b12:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b16:	f106 35ff 	add.w	r5, r6, #4294967295
 8004b1a:	6123      	str	r3, [r4, #16]
 8004b1c:	d00c      	beq.n	8004b38 <_scanf_float+0x34c>
 8004b1e:	2945      	cmp	r1, #69	; 0x45
 8004b20:	d00a      	beq.n	8004b38 <_scanf_float+0x34c>
 8004b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b26:	463a      	mov	r2, r7
 8004b28:	4640      	mov	r0, r8
 8004b2a:	4798      	blx	r3
 8004b2c:	6923      	ldr	r3, [r4, #16]
 8004b2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	1eb5      	subs	r5, r6, #2
 8004b36:	6123      	str	r3, [r4, #16]
 8004b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b3c:	463a      	mov	r2, r7
 8004b3e:	4640      	mov	r0, r8
 8004b40:	4798      	blx	r3
 8004b42:	462e      	mov	r6, r5
 8004b44:	6825      	ldr	r5, [r4, #0]
 8004b46:	f015 0510 	ands.w	r5, r5, #16
 8004b4a:	d158      	bne.n	8004bfe <_scanf_float+0x412>
 8004b4c:	7035      	strb	r5, [r6, #0]
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d11c      	bne.n	8004b94 <_scanf_float+0x3a8>
 8004b5a:	9b01      	ldr	r3, [sp, #4]
 8004b5c:	454b      	cmp	r3, r9
 8004b5e:	eba3 0209 	sub.w	r2, r3, r9
 8004b62:	d124      	bne.n	8004bae <_scanf_float+0x3c2>
 8004b64:	2200      	movs	r2, #0
 8004b66:	4659      	mov	r1, fp
 8004b68:	4640      	mov	r0, r8
 8004b6a:	f000 fe9b 	bl	80058a4 <_strtod_r>
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	6821      	ldr	r1, [r4, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f011 0f02 	tst.w	r1, #2
 8004b78:	ec57 6b10 	vmov	r6, r7, d0
 8004b7c:	f103 0204 	add.w	r2, r3, #4
 8004b80:	d020      	beq.n	8004bc4 <_scanf_float+0x3d8>
 8004b82:	9903      	ldr	r1, [sp, #12]
 8004b84:	600a      	str	r2, [r1, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	e9c3 6700 	strd	r6, r7, [r3]
 8004b8c:	68e3      	ldr	r3, [r4, #12]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	60e3      	str	r3, [r4, #12]
 8004b92:	e66c      	b.n	800486e <_scanf_float+0x82>
 8004b94:	9b04      	ldr	r3, [sp, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0e4      	beq.n	8004b64 <_scanf_float+0x378>
 8004b9a:	9905      	ldr	r1, [sp, #20]
 8004b9c:	230a      	movs	r3, #10
 8004b9e:	462a      	mov	r2, r5
 8004ba0:	3101      	adds	r1, #1
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	f000 ff08 	bl	80059b8 <_strtol_r>
 8004ba8:	9b04      	ldr	r3, [sp, #16]
 8004baa:	9e05      	ldr	r6, [sp, #20]
 8004bac:	1ac2      	subs	r2, r0, r3
 8004bae:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004bb2:	429e      	cmp	r6, r3
 8004bb4:	bf28      	it	cs
 8004bb6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004bba:	4912      	ldr	r1, [pc, #72]	; (8004c04 <_scanf_float+0x418>)
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f000 f82b 	bl	8004c18 <siprintf>
 8004bc2:	e7cf      	b.n	8004b64 <_scanf_float+0x378>
 8004bc4:	f011 0f04 	tst.w	r1, #4
 8004bc8:	9903      	ldr	r1, [sp, #12]
 8004bca:	600a      	str	r2, [r1, #0]
 8004bcc:	d1db      	bne.n	8004b86 <_scanf_float+0x39a>
 8004bce:	f8d3 8000 	ldr.w	r8, [r3]
 8004bd2:	ee10 2a10 	vmov	r2, s0
 8004bd6:	ee10 0a10 	vmov	r0, s0
 8004bda:	463b      	mov	r3, r7
 8004bdc:	4639      	mov	r1, r7
 8004bde:	f7fb ffa5 	bl	8000b2c <__aeabi_dcmpun>
 8004be2:	b128      	cbz	r0, 8004bf0 <_scanf_float+0x404>
 8004be4:	4808      	ldr	r0, [pc, #32]	; (8004c08 <_scanf_float+0x41c>)
 8004be6:	f000 f811 	bl	8004c0c <nanf>
 8004bea:	ed88 0a00 	vstr	s0, [r8]
 8004bee:	e7cd      	b.n	8004b8c <_scanf_float+0x3a0>
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	4639      	mov	r1, r7
 8004bf4:	f7fb fff8 	bl	8000be8 <__aeabi_d2f>
 8004bf8:	f8c8 0000 	str.w	r0, [r8]
 8004bfc:	e7c6      	b.n	8004b8c <_scanf_float+0x3a0>
 8004bfe:	2500      	movs	r5, #0
 8004c00:	e635      	b.n	800486e <_scanf_float+0x82>
 8004c02:	bf00      	nop
 8004c04:	080097b0 	.word	0x080097b0
 8004c08:	08009bc8 	.word	0x08009bc8

08004c0c <nanf>:
 8004c0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004c14 <nanf+0x8>
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	7fc00000 	.word	0x7fc00000

08004c18 <siprintf>:
 8004c18:	b40e      	push	{r1, r2, r3}
 8004c1a:	b500      	push	{lr}
 8004c1c:	b09c      	sub	sp, #112	; 0x70
 8004c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c20:	9002      	str	r0, [sp, #8]
 8004c22:	9006      	str	r0, [sp, #24]
 8004c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c28:	4809      	ldr	r0, [pc, #36]	; (8004c50 <siprintf+0x38>)
 8004c2a:	9107      	str	r1, [sp, #28]
 8004c2c:	9104      	str	r1, [sp, #16]
 8004c2e:	4909      	ldr	r1, [pc, #36]	; (8004c54 <siprintf+0x3c>)
 8004c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c34:	9105      	str	r1, [sp, #20]
 8004c36:	6800      	ldr	r0, [r0, #0]
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	a902      	add	r1, sp, #8
 8004c3c:	f002 fea4 	bl	8007988 <_svfiprintf_r>
 8004c40:	9b02      	ldr	r3, [sp, #8]
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	b01c      	add	sp, #112	; 0x70
 8004c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c4c:	b003      	add	sp, #12
 8004c4e:	4770      	bx	lr
 8004c50:	20000008 	.word	0x20000008
 8004c54:	ffff0208 	.word	0xffff0208

08004c58 <sulp>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	460d      	mov	r5, r1
 8004c5e:	ec45 4b10 	vmov	d0, r4, r5
 8004c62:	4616      	mov	r6, r2
 8004c64:	f002 fc2c 	bl	80074c0 <__ulp>
 8004c68:	ec51 0b10 	vmov	r0, r1, d0
 8004c6c:	b17e      	cbz	r6, 8004c8e <sulp+0x36>
 8004c6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004c72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	dd09      	ble.n	8004c8e <sulp+0x36>
 8004c7a:	051b      	lsls	r3, r3, #20
 8004c7c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c80:	2400      	movs	r4, #0
 8004c82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	f7fb fcb5 	bl	80005f8 <__aeabi_dmul>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}

08004c90 <_strtod_l>:
 8004c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c94:	b0a3      	sub	sp, #140	; 0x8c
 8004c96:	461f      	mov	r7, r3
 8004c98:	2300      	movs	r3, #0
 8004c9a:	931e      	str	r3, [sp, #120]	; 0x78
 8004c9c:	4ba4      	ldr	r3, [pc, #656]	; (8004f30 <_strtod_l+0x2a0>)
 8004c9e:	9219      	str	r2, [sp, #100]	; 0x64
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	9307      	str	r3, [sp, #28]
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	4688      	mov	r8, r1
 8004caa:	f7fb fa91 	bl	80001d0 <strlen>
 8004cae:	f04f 0a00 	mov.w	sl, #0
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	f04f 0b00 	mov.w	fp, #0
 8004cb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004cbe:	781a      	ldrb	r2, [r3, #0]
 8004cc0:	2a2b      	cmp	r2, #43	; 0x2b
 8004cc2:	d04c      	beq.n	8004d5e <_strtod_l+0xce>
 8004cc4:	d839      	bhi.n	8004d3a <_strtod_l+0xaa>
 8004cc6:	2a0d      	cmp	r2, #13
 8004cc8:	d832      	bhi.n	8004d30 <_strtod_l+0xa0>
 8004cca:	2a08      	cmp	r2, #8
 8004ccc:	d832      	bhi.n	8004d34 <_strtod_l+0xa4>
 8004cce:	2a00      	cmp	r2, #0
 8004cd0:	d03c      	beq.n	8004d4c <_strtod_l+0xbc>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	930e      	str	r3, [sp, #56]	; 0x38
 8004cd6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004cd8:	7833      	ldrb	r3, [r6, #0]
 8004cda:	2b30      	cmp	r3, #48	; 0x30
 8004cdc:	f040 80b4 	bne.w	8004e48 <_strtod_l+0x1b8>
 8004ce0:	7873      	ldrb	r3, [r6, #1]
 8004ce2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004ce6:	2b58      	cmp	r3, #88	; 0x58
 8004ce8:	d16c      	bne.n	8004dc4 <_strtod_l+0x134>
 8004cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	ab1e      	add	r3, sp, #120	; 0x78
 8004cf0:	9702      	str	r7, [sp, #8]
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	4a8f      	ldr	r2, [pc, #572]	; (8004f34 <_strtod_l+0x2a4>)
 8004cf6:	ab1f      	add	r3, sp, #124	; 0x7c
 8004cf8:	a91d      	add	r1, sp, #116	; 0x74
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f001 fd40 	bl	8006780 <__gethex>
 8004d00:	f010 0707 	ands.w	r7, r0, #7
 8004d04:	4605      	mov	r5, r0
 8004d06:	d005      	beq.n	8004d14 <_strtod_l+0x84>
 8004d08:	2f06      	cmp	r7, #6
 8004d0a:	d12a      	bne.n	8004d62 <_strtod_l+0xd2>
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	2300      	movs	r3, #0
 8004d10:	961d      	str	r6, [sp, #116]	; 0x74
 8004d12:	930e      	str	r3, [sp, #56]	; 0x38
 8004d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f040 8596 	bne.w	8005848 <_strtod_l+0xbb8>
 8004d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d1e:	b1db      	cbz	r3, 8004d58 <_strtod_l+0xc8>
 8004d20:	4652      	mov	r2, sl
 8004d22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004d26:	ec43 2b10 	vmov	d0, r2, r3
 8004d2a:	b023      	add	sp, #140	; 0x8c
 8004d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d30:	2a20      	cmp	r2, #32
 8004d32:	d1ce      	bne.n	8004cd2 <_strtod_l+0x42>
 8004d34:	3301      	adds	r3, #1
 8004d36:	931d      	str	r3, [sp, #116]	; 0x74
 8004d38:	e7c0      	b.n	8004cbc <_strtod_l+0x2c>
 8004d3a:	2a2d      	cmp	r2, #45	; 0x2d
 8004d3c:	d1c9      	bne.n	8004cd2 <_strtod_l+0x42>
 8004d3e:	2201      	movs	r2, #1
 8004d40:	920e      	str	r2, [sp, #56]	; 0x38
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	921d      	str	r2, [sp, #116]	; 0x74
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1c4      	bne.n	8004cd6 <_strtod_l+0x46>
 8004d4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d4e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f040 8576 	bne.w	8005844 <_strtod_l+0xbb4>
 8004d58:	4652      	mov	r2, sl
 8004d5a:	465b      	mov	r3, fp
 8004d5c:	e7e3      	b.n	8004d26 <_strtod_l+0x96>
 8004d5e:	2200      	movs	r2, #0
 8004d60:	e7ee      	b.n	8004d40 <_strtod_l+0xb0>
 8004d62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004d64:	b13a      	cbz	r2, 8004d76 <_strtod_l+0xe6>
 8004d66:	2135      	movs	r1, #53	; 0x35
 8004d68:	a820      	add	r0, sp, #128	; 0x80
 8004d6a:	f002 fcb4 	bl	80076d6 <__copybits>
 8004d6e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004d70:	4620      	mov	r0, r4
 8004d72:	f002 f879 	bl	8006e68 <_Bfree>
 8004d76:	3f01      	subs	r7, #1
 8004d78:	2f05      	cmp	r7, #5
 8004d7a:	d807      	bhi.n	8004d8c <_strtod_l+0xfc>
 8004d7c:	e8df f007 	tbb	[pc, r7]
 8004d80:	1d180b0e 	.word	0x1d180b0e
 8004d84:	030e      	.short	0x030e
 8004d86:	f04f 0b00 	mov.w	fp, #0
 8004d8a:	46da      	mov	sl, fp
 8004d8c:	0728      	lsls	r0, r5, #28
 8004d8e:	d5c1      	bpl.n	8004d14 <_strtod_l+0x84>
 8004d90:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004d94:	e7be      	b.n	8004d14 <_strtod_l+0x84>
 8004d96:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8004d9a:	e7f7      	b.n	8004d8c <_strtod_l+0xfc>
 8004d9c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004da0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004da2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004da6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004daa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004dae:	e7ed      	b.n	8004d8c <_strtod_l+0xfc>
 8004db0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004f38 <_strtod_l+0x2a8>
 8004db4:	f04f 0a00 	mov.w	sl, #0
 8004db8:	e7e8      	b.n	8004d8c <_strtod_l+0xfc>
 8004dba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004dbe:	f04f 3aff 	mov.w	sl, #4294967295
 8004dc2:	e7e3      	b.n	8004d8c <_strtod_l+0xfc>
 8004dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	921d      	str	r2, [sp, #116]	; 0x74
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	2b30      	cmp	r3, #48	; 0x30
 8004dce:	d0f9      	beq.n	8004dc4 <_strtod_l+0x134>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d09f      	beq.n	8004d14 <_strtod_l+0x84>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f04f 0900 	mov.w	r9, #0
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004dde:	930a      	str	r3, [sp, #40]	; 0x28
 8004de0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004de4:	464f      	mov	r7, r9
 8004de6:	220a      	movs	r2, #10
 8004de8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004dea:	7806      	ldrb	r6, [r0, #0]
 8004dec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004df0:	b2d9      	uxtb	r1, r3
 8004df2:	2909      	cmp	r1, #9
 8004df4:	d92a      	bls.n	8004e4c <_strtod_l+0x1bc>
 8004df6:	9907      	ldr	r1, [sp, #28]
 8004df8:	462a      	mov	r2, r5
 8004dfa:	f002 fedd 	bl	8007bb8 <strncmp>
 8004dfe:	b398      	cbz	r0, 8004e68 <_strtod_l+0x1d8>
 8004e00:	2000      	movs	r0, #0
 8004e02:	4633      	mov	r3, r6
 8004e04:	463d      	mov	r5, r7
 8004e06:	9007      	str	r0, [sp, #28]
 8004e08:	4602      	mov	r2, r0
 8004e0a:	2b65      	cmp	r3, #101	; 0x65
 8004e0c:	d001      	beq.n	8004e12 <_strtod_l+0x182>
 8004e0e:	2b45      	cmp	r3, #69	; 0x45
 8004e10:	d118      	bne.n	8004e44 <_strtod_l+0x1b4>
 8004e12:	b91d      	cbnz	r5, 8004e1c <_strtod_l+0x18c>
 8004e14:	9b04      	ldr	r3, [sp, #16]
 8004e16:	4303      	orrs	r3, r0
 8004e18:	d098      	beq.n	8004d4c <_strtod_l+0xbc>
 8004e1a:	2500      	movs	r5, #0
 8004e1c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004e20:	f108 0301 	add.w	r3, r8, #1
 8004e24:	931d      	str	r3, [sp, #116]	; 0x74
 8004e26:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004e2a:	2b2b      	cmp	r3, #43	; 0x2b
 8004e2c:	d075      	beq.n	8004f1a <_strtod_l+0x28a>
 8004e2e:	2b2d      	cmp	r3, #45	; 0x2d
 8004e30:	d07b      	beq.n	8004f2a <_strtod_l+0x29a>
 8004e32:	f04f 0c00 	mov.w	ip, #0
 8004e36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004e3a:	2909      	cmp	r1, #9
 8004e3c:	f240 8082 	bls.w	8004f44 <_strtod_l+0x2b4>
 8004e40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004e44:	2600      	movs	r6, #0
 8004e46:	e09d      	b.n	8004f84 <_strtod_l+0x2f4>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e7c4      	b.n	8004dd6 <_strtod_l+0x146>
 8004e4c:	2f08      	cmp	r7, #8
 8004e4e:	bfd8      	it	le
 8004e50:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004e52:	f100 0001 	add.w	r0, r0, #1
 8004e56:	bfda      	itte	le
 8004e58:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e5c:	9309      	strle	r3, [sp, #36]	; 0x24
 8004e5e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004e62:	3701      	adds	r7, #1
 8004e64:	901d      	str	r0, [sp, #116]	; 0x74
 8004e66:	e7bf      	b.n	8004de8 <_strtod_l+0x158>
 8004e68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e6a:	195a      	adds	r2, r3, r5
 8004e6c:	921d      	str	r2, [sp, #116]	; 0x74
 8004e6e:	5d5b      	ldrb	r3, [r3, r5]
 8004e70:	2f00      	cmp	r7, #0
 8004e72:	d037      	beq.n	8004ee4 <_strtod_l+0x254>
 8004e74:	9007      	str	r0, [sp, #28]
 8004e76:	463d      	mov	r5, r7
 8004e78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004e7c:	2a09      	cmp	r2, #9
 8004e7e:	d912      	bls.n	8004ea6 <_strtod_l+0x216>
 8004e80:	2201      	movs	r2, #1
 8004e82:	e7c2      	b.n	8004e0a <_strtod_l+0x17a>
 8004e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	921d      	str	r2, [sp, #116]	; 0x74
 8004e8a:	785b      	ldrb	r3, [r3, #1]
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	2b30      	cmp	r3, #48	; 0x30
 8004e90:	d0f8      	beq.n	8004e84 <_strtod_l+0x1f4>
 8004e92:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004e96:	2a08      	cmp	r2, #8
 8004e98:	f200 84db 	bhi.w	8005852 <_strtod_l+0xbc2>
 8004e9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004e9e:	9007      	str	r0, [sp, #28]
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	920a      	str	r2, [sp, #40]	; 0x28
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	3b30      	subs	r3, #48	; 0x30
 8004ea8:	f100 0201 	add.w	r2, r0, #1
 8004eac:	d014      	beq.n	8004ed8 <_strtod_l+0x248>
 8004eae:	9907      	ldr	r1, [sp, #28]
 8004eb0:	4411      	add	r1, r2
 8004eb2:	9107      	str	r1, [sp, #28]
 8004eb4:	462a      	mov	r2, r5
 8004eb6:	eb00 0e05 	add.w	lr, r0, r5
 8004eba:	210a      	movs	r1, #10
 8004ebc:	4572      	cmp	r2, lr
 8004ebe:	d113      	bne.n	8004ee8 <_strtod_l+0x258>
 8004ec0:	182a      	adds	r2, r5, r0
 8004ec2:	2a08      	cmp	r2, #8
 8004ec4:	f105 0501 	add.w	r5, r5, #1
 8004ec8:	4405      	add	r5, r0
 8004eca:	dc1c      	bgt.n	8004f06 <_strtod_l+0x276>
 8004ecc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ece:	220a      	movs	r2, #10
 8004ed0:	fb02 3301 	mla	r3, r2, r1, r3
 8004ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004eda:	1c59      	adds	r1, r3, #1
 8004edc:	911d      	str	r1, [sp, #116]	; 0x74
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	e7c9      	b.n	8004e78 <_strtod_l+0x1e8>
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	e7d2      	b.n	8004e8e <_strtod_l+0x1fe>
 8004ee8:	2a08      	cmp	r2, #8
 8004eea:	dc04      	bgt.n	8004ef6 <_strtod_l+0x266>
 8004eec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004eee:	434e      	muls	r6, r1
 8004ef0:	9609      	str	r6, [sp, #36]	; 0x24
 8004ef2:	3201      	adds	r2, #1
 8004ef4:	e7e2      	b.n	8004ebc <_strtod_l+0x22c>
 8004ef6:	f102 0c01 	add.w	ip, r2, #1
 8004efa:	f1bc 0f10 	cmp.w	ip, #16
 8004efe:	bfd8      	it	le
 8004f00:	fb01 f909 	mulle.w	r9, r1, r9
 8004f04:	e7f5      	b.n	8004ef2 <_strtod_l+0x262>
 8004f06:	2d10      	cmp	r5, #16
 8004f08:	bfdc      	itt	le
 8004f0a:	220a      	movle	r2, #10
 8004f0c:	fb02 3909 	mlale	r9, r2, r9, r3
 8004f10:	e7e1      	b.n	8004ed6 <_strtod_l+0x246>
 8004f12:	2300      	movs	r3, #0
 8004f14:	9307      	str	r3, [sp, #28]
 8004f16:	2201      	movs	r2, #1
 8004f18:	e77c      	b.n	8004e14 <_strtod_l+0x184>
 8004f1a:	f04f 0c00 	mov.w	ip, #0
 8004f1e:	f108 0302 	add.w	r3, r8, #2
 8004f22:	931d      	str	r3, [sp, #116]	; 0x74
 8004f24:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004f28:	e785      	b.n	8004e36 <_strtod_l+0x1a6>
 8004f2a:	f04f 0c01 	mov.w	ip, #1
 8004f2e:	e7f6      	b.n	8004f1e <_strtod_l+0x28e>
 8004f30:	08009a08 	.word	0x08009a08
 8004f34:	080097b8 	.word	0x080097b8
 8004f38:	7ff00000 	.word	0x7ff00000
 8004f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f3e:	1c59      	adds	r1, r3, #1
 8004f40:	911d      	str	r1, [sp, #116]	; 0x74
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	2b30      	cmp	r3, #48	; 0x30
 8004f46:	d0f9      	beq.n	8004f3c <_strtod_l+0x2ac>
 8004f48:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004f4c:	2908      	cmp	r1, #8
 8004f4e:	f63f af79 	bhi.w	8004e44 <_strtod_l+0x1b4>
 8004f52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004f56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f58:	9308      	str	r3, [sp, #32]
 8004f5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f5c:	1c59      	adds	r1, r3, #1
 8004f5e:	911d      	str	r1, [sp, #116]	; 0x74
 8004f60:	785b      	ldrb	r3, [r3, #1]
 8004f62:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004f66:	2e09      	cmp	r6, #9
 8004f68:	d937      	bls.n	8004fda <_strtod_l+0x34a>
 8004f6a:	9e08      	ldr	r6, [sp, #32]
 8004f6c:	1b89      	subs	r1, r1, r6
 8004f6e:	2908      	cmp	r1, #8
 8004f70:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004f74:	dc02      	bgt.n	8004f7c <_strtod_l+0x2ec>
 8004f76:	4576      	cmp	r6, lr
 8004f78:	bfa8      	it	ge
 8004f7a:	4676      	movge	r6, lr
 8004f7c:	f1bc 0f00 	cmp.w	ip, #0
 8004f80:	d000      	beq.n	8004f84 <_strtod_l+0x2f4>
 8004f82:	4276      	negs	r6, r6
 8004f84:	2d00      	cmp	r5, #0
 8004f86:	d14f      	bne.n	8005028 <_strtod_l+0x398>
 8004f88:	9904      	ldr	r1, [sp, #16]
 8004f8a:	4301      	orrs	r1, r0
 8004f8c:	f47f aec2 	bne.w	8004d14 <_strtod_l+0x84>
 8004f90:	2a00      	cmp	r2, #0
 8004f92:	f47f aedb 	bne.w	8004d4c <_strtod_l+0xbc>
 8004f96:	2b69      	cmp	r3, #105	; 0x69
 8004f98:	d027      	beq.n	8004fea <_strtod_l+0x35a>
 8004f9a:	dc24      	bgt.n	8004fe6 <_strtod_l+0x356>
 8004f9c:	2b49      	cmp	r3, #73	; 0x49
 8004f9e:	d024      	beq.n	8004fea <_strtod_l+0x35a>
 8004fa0:	2b4e      	cmp	r3, #78	; 0x4e
 8004fa2:	f47f aed3 	bne.w	8004d4c <_strtod_l+0xbc>
 8004fa6:	499e      	ldr	r1, [pc, #632]	; (8005220 <_strtod_l+0x590>)
 8004fa8:	a81d      	add	r0, sp, #116	; 0x74
 8004faa:	f001 fe41 	bl	8006c30 <__match>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	f43f aecc 	beq.w	8004d4c <_strtod_l+0xbc>
 8004fb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b28      	cmp	r3, #40	; 0x28
 8004fba:	d12d      	bne.n	8005018 <_strtod_l+0x388>
 8004fbc:	4999      	ldr	r1, [pc, #612]	; (8005224 <_strtod_l+0x594>)
 8004fbe:	aa20      	add	r2, sp, #128	; 0x80
 8004fc0:	a81d      	add	r0, sp, #116	; 0x74
 8004fc2:	f001 fe49 	bl	8006c58 <__hexnan>
 8004fc6:	2805      	cmp	r0, #5
 8004fc8:	d126      	bne.n	8005018 <_strtod_l+0x388>
 8004fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fcc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8004fd0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004fd4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004fd8:	e69c      	b.n	8004d14 <_strtod_l+0x84>
 8004fda:	210a      	movs	r1, #10
 8004fdc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004fe0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004fe4:	e7b9      	b.n	8004f5a <_strtod_l+0x2ca>
 8004fe6:	2b6e      	cmp	r3, #110	; 0x6e
 8004fe8:	e7db      	b.n	8004fa2 <_strtod_l+0x312>
 8004fea:	498f      	ldr	r1, [pc, #572]	; (8005228 <_strtod_l+0x598>)
 8004fec:	a81d      	add	r0, sp, #116	; 0x74
 8004fee:	f001 fe1f 	bl	8006c30 <__match>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	f43f aeaa 	beq.w	8004d4c <_strtod_l+0xbc>
 8004ff8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ffa:	498c      	ldr	r1, [pc, #560]	; (800522c <_strtod_l+0x59c>)
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	a81d      	add	r0, sp, #116	; 0x74
 8005000:	931d      	str	r3, [sp, #116]	; 0x74
 8005002:	f001 fe15 	bl	8006c30 <__match>
 8005006:	b910      	cbnz	r0, 800500e <_strtod_l+0x37e>
 8005008:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800500a:	3301      	adds	r3, #1
 800500c:	931d      	str	r3, [sp, #116]	; 0x74
 800500e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800523c <_strtod_l+0x5ac>
 8005012:	f04f 0a00 	mov.w	sl, #0
 8005016:	e67d      	b.n	8004d14 <_strtod_l+0x84>
 8005018:	4885      	ldr	r0, [pc, #532]	; (8005230 <_strtod_l+0x5a0>)
 800501a:	f002 fdb5 	bl	8007b88 <nan>
 800501e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005022:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005026:	e675      	b.n	8004d14 <_strtod_l+0x84>
 8005028:	9b07      	ldr	r3, [sp, #28]
 800502a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800502c:	1af3      	subs	r3, r6, r3
 800502e:	2f00      	cmp	r7, #0
 8005030:	bf08      	it	eq
 8005032:	462f      	moveq	r7, r5
 8005034:	2d10      	cmp	r5, #16
 8005036:	9308      	str	r3, [sp, #32]
 8005038:	46a8      	mov	r8, r5
 800503a:	bfa8      	it	ge
 800503c:	f04f 0810 	movge.w	r8, #16
 8005040:	f7fb fa60 	bl	8000504 <__aeabi_ui2d>
 8005044:	2d09      	cmp	r5, #9
 8005046:	4682      	mov	sl, r0
 8005048:	468b      	mov	fp, r1
 800504a:	dd13      	ble.n	8005074 <_strtod_l+0x3e4>
 800504c:	4b79      	ldr	r3, [pc, #484]	; (8005234 <_strtod_l+0x5a4>)
 800504e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005052:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005056:	f7fb facf 	bl	80005f8 <__aeabi_dmul>
 800505a:	4682      	mov	sl, r0
 800505c:	4648      	mov	r0, r9
 800505e:	468b      	mov	fp, r1
 8005060:	f7fb fa50 	bl	8000504 <__aeabi_ui2d>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4650      	mov	r0, sl
 800506a:	4659      	mov	r1, fp
 800506c:	f7fb f90e 	bl	800028c <__adddf3>
 8005070:	4682      	mov	sl, r0
 8005072:	468b      	mov	fp, r1
 8005074:	2d0f      	cmp	r5, #15
 8005076:	dc38      	bgt.n	80050ea <_strtod_l+0x45a>
 8005078:	9b08      	ldr	r3, [sp, #32]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f43f ae4a 	beq.w	8004d14 <_strtod_l+0x84>
 8005080:	dd24      	ble.n	80050cc <_strtod_l+0x43c>
 8005082:	2b16      	cmp	r3, #22
 8005084:	dc0b      	bgt.n	800509e <_strtod_l+0x40e>
 8005086:	4d6b      	ldr	r5, [pc, #428]	; (8005234 <_strtod_l+0x5a4>)
 8005088:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800508c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005090:	4652      	mov	r2, sl
 8005092:	465b      	mov	r3, fp
 8005094:	f7fb fab0 	bl	80005f8 <__aeabi_dmul>
 8005098:	4682      	mov	sl, r0
 800509a:	468b      	mov	fp, r1
 800509c:	e63a      	b.n	8004d14 <_strtod_l+0x84>
 800509e:	9a08      	ldr	r2, [sp, #32]
 80050a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80050a4:	4293      	cmp	r3, r2
 80050a6:	db20      	blt.n	80050ea <_strtod_l+0x45a>
 80050a8:	4c62      	ldr	r4, [pc, #392]	; (8005234 <_strtod_l+0x5a4>)
 80050aa:	f1c5 050f 	rsb	r5, r5, #15
 80050ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80050b2:	4652      	mov	r2, sl
 80050b4:	465b      	mov	r3, fp
 80050b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ba:	f7fb fa9d 	bl	80005f8 <__aeabi_dmul>
 80050be:	9b08      	ldr	r3, [sp, #32]
 80050c0:	1b5d      	subs	r5, r3, r5
 80050c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80050c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80050ca:	e7e3      	b.n	8005094 <_strtod_l+0x404>
 80050cc:	9b08      	ldr	r3, [sp, #32]
 80050ce:	3316      	adds	r3, #22
 80050d0:	db0b      	blt.n	80050ea <_strtod_l+0x45a>
 80050d2:	9b07      	ldr	r3, [sp, #28]
 80050d4:	4a57      	ldr	r2, [pc, #348]	; (8005234 <_strtod_l+0x5a4>)
 80050d6:	1b9e      	subs	r6, r3, r6
 80050d8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80050dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050e0:	4650      	mov	r0, sl
 80050e2:	4659      	mov	r1, fp
 80050e4:	f7fb fbb2 	bl	800084c <__aeabi_ddiv>
 80050e8:	e7d6      	b.n	8005098 <_strtod_l+0x408>
 80050ea:	9b08      	ldr	r3, [sp, #32]
 80050ec:	eba5 0808 	sub.w	r8, r5, r8
 80050f0:	4498      	add	r8, r3
 80050f2:	f1b8 0f00 	cmp.w	r8, #0
 80050f6:	dd71      	ble.n	80051dc <_strtod_l+0x54c>
 80050f8:	f018 030f 	ands.w	r3, r8, #15
 80050fc:	d00a      	beq.n	8005114 <_strtod_l+0x484>
 80050fe:	494d      	ldr	r1, [pc, #308]	; (8005234 <_strtod_l+0x5a4>)
 8005100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005104:	4652      	mov	r2, sl
 8005106:	465b      	mov	r3, fp
 8005108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800510c:	f7fb fa74 	bl	80005f8 <__aeabi_dmul>
 8005110:	4682      	mov	sl, r0
 8005112:	468b      	mov	fp, r1
 8005114:	f038 080f 	bics.w	r8, r8, #15
 8005118:	d04d      	beq.n	80051b6 <_strtod_l+0x526>
 800511a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800511e:	dd22      	ble.n	8005166 <_strtod_l+0x4d6>
 8005120:	2500      	movs	r5, #0
 8005122:	462e      	mov	r6, r5
 8005124:	9509      	str	r5, [sp, #36]	; 0x24
 8005126:	9507      	str	r5, [sp, #28]
 8005128:	2322      	movs	r3, #34	; 0x22
 800512a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800523c <_strtod_l+0x5ac>
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	f04f 0a00 	mov.w	sl, #0
 8005134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	f43f adec 	beq.w	8004d14 <_strtod_l+0x84>
 800513c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800513e:	4620      	mov	r0, r4
 8005140:	f001 fe92 	bl	8006e68 <_Bfree>
 8005144:	9907      	ldr	r1, [sp, #28]
 8005146:	4620      	mov	r0, r4
 8005148:	f001 fe8e 	bl	8006e68 <_Bfree>
 800514c:	4631      	mov	r1, r6
 800514e:	4620      	mov	r0, r4
 8005150:	f001 fe8a 	bl	8006e68 <_Bfree>
 8005154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005156:	4620      	mov	r0, r4
 8005158:	f001 fe86 	bl	8006e68 <_Bfree>
 800515c:	4629      	mov	r1, r5
 800515e:	4620      	mov	r0, r4
 8005160:	f001 fe82 	bl	8006e68 <_Bfree>
 8005164:	e5d6      	b.n	8004d14 <_strtod_l+0x84>
 8005166:	2300      	movs	r3, #0
 8005168:	ea4f 1828 	mov.w	r8, r8, asr #4
 800516c:	4650      	mov	r0, sl
 800516e:	4659      	mov	r1, fp
 8005170:	4699      	mov	r9, r3
 8005172:	f1b8 0f01 	cmp.w	r8, #1
 8005176:	dc21      	bgt.n	80051bc <_strtod_l+0x52c>
 8005178:	b10b      	cbz	r3, 800517e <_strtod_l+0x4ee>
 800517a:	4682      	mov	sl, r0
 800517c:	468b      	mov	fp, r1
 800517e:	4b2e      	ldr	r3, [pc, #184]	; (8005238 <_strtod_l+0x5a8>)
 8005180:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005184:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005188:	4652      	mov	r2, sl
 800518a:	465b      	mov	r3, fp
 800518c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005190:	f7fb fa32 	bl	80005f8 <__aeabi_dmul>
 8005194:	4b29      	ldr	r3, [pc, #164]	; (800523c <_strtod_l+0x5ac>)
 8005196:	460a      	mov	r2, r1
 8005198:	400b      	ands	r3, r1
 800519a:	4929      	ldr	r1, [pc, #164]	; (8005240 <_strtod_l+0x5b0>)
 800519c:	428b      	cmp	r3, r1
 800519e:	4682      	mov	sl, r0
 80051a0:	d8be      	bhi.n	8005120 <_strtod_l+0x490>
 80051a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80051a6:	428b      	cmp	r3, r1
 80051a8:	bf86      	itte	hi
 80051aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005244 <_strtod_l+0x5b4>
 80051ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80051b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80051b6:	2300      	movs	r3, #0
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	e081      	b.n	80052c0 <_strtod_l+0x630>
 80051bc:	f018 0f01 	tst.w	r8, #1
 80051c0:	d007      	beq.n	80051d2 <_strtod_l+0x542>
 80051c2:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <_strtod_l+0x5a8>)
 80051c4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fb fa14 	bl	80005f8 <__aeabi_dmul>
 80051d0:	2301      	movs	r3, #1
 80051d2:	f109 0901 	add.w	r9, r9, #1
 80051d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80051da:	e7ca      	b.n	8005172 <_strtod_l+0x4e2>
 80051dc:	d0eb      	beq.n	80051b6 <_strtod_l+0x526>
 80051de:	f1c8 0800 	rsb	r8, r8, #0
 80051e2:	f018 020f 	ands.w	r2, r8, #15
 80051e6:	d00a      	beq.n	80051fe <_strtod_l+0x56e>
 80051e8:	4b12      	ldr	r3, [pc, #72]	; (8005234 <_strtod_l+0x5a4>)
 80051ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051ee:	4650      	mov	r0, sl
 80051f0:	4659      	mov	r1, fp
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fb fb29 	bl	800084c <__aeabi_ddiv>
 80051fa:	4682      	mov	sl, r0
 80051fc:	468b      	mov	fp, r1
 80051fe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005202:	d0d8      	beq.n	80051b6 <_strtod_l+0x526>
 8005204:	f1b8 0f1f 	cmp.w	r8, #31
 8005208:	dd1e      	ble.n	8005248 <_strtod_l+0x5b8>
 800520a:	2500      	movs	r5, #0
 800520c:	462e      	mov	r6, r5
 800520e:	9509      	str	r5, [sp, #36]	; 0x24
 8005210:	9507      	str	r5, [sp, #28]
 8005212:	2322      	movs	r3, #34	; 0x22
 8005214:	f04f 0a00 	mov.w	sl, #0
 8005218:	f04f 0b00 	mov.w	fp, #0
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	e789      	b.n	8005134 <_strtod_l+0x4a4>
 8005220:	08009789 	.word	0x08009789
 8005224:	080097cc 	.word	0x080097cc
 8005228:	08009781 	.word	0x08009781
 800522c:	0800990c 	.word	0x0800990c
 8005230:	08009bc8 	.word	0x08009bc8
 8005234:	08009aa8 	.word	0x08009aa8
 8005238:	08009a80 	.word	0x08009a80
 800523c:	7ff00000 	.word	0x7ff00000
 8005240:	7ca00000 	.word	0x7ca00000
 8005244:	7fefffff 	.word	0x7fefffff
 8005248:	f018 0310 	ands.w	r3, r8, #16
 800524c:	bf18      	it	ne
 800524e:	236a      	movne	r3, #106	; 0x6a
 8005250:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005608 <_strtod_l+0x978>
 8005254:	9304      	str	r3, [sp, #16]
 8005256:	4650      	mov	r0, sl
 8005258:	4659      	mov	r1, fp
 800525a:	2300      	movs	r3, #0
 800525c:	f018 0f01 	tst.w	r8, #1
 8005260:	d004      	beq.n	800526c <_strtod_l+0x5dc>
 8005262:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005266:	f7fb f9c7 	bl	80005f8 <__aeabi_dmul>
 800526a:	2301      	movs	r3, #1
 800526c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005270:	f109 0908 	add.w	r9, r9, #8
 8005274:	d1f2      	bne.n	800525c <_strtod_l+0x5cc>
 8005276:	b10b      	cbz	r3, 800527c <_strtod_l+0x5ec>
 8005278:	4682      	mov	sl, r0
 800527a:	468b      	mov	fp, r1
 800527c:	9b04      	ldr	r3, [sp, #16]
 800527e:	b1bb      	cbz	r3, 80052b0 <_strtod_l+0x620>
 8005280:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005284:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005288:	2b00      	cmp	r3, #0
 800528a:	4659      	mov	r1, fp
 800528c:	dd10      	ble.n	80052b0 <_strtod_l+0x620>
 800528e:	2b1f      	cmp	r3, #31
 8005290:	f340 8128 	ble.w	80054e4 <_strtod_l+0x854>
 8005294:	2b34      	cmp	r3, #52	; 0x34
 8005296:	bfde      	ittt	le
 8005298:	3b20      	suble	r3, #32
 800529a:	f04f 32ff 	movle.w	r2, #4294967295
 800529e:	fa02 f303 	lslle.w	r3, r2, r3
 80052a2:	f04f 0a00 	mov.w	sl, #0
 80052a6:	bfcc      	ite	gt
 80052a8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80052ac:	ea03 0b01 	andle.w	fp, r3, r1
 80052b0:	2200      	movs	r2, #0
 80052b2:	2300      	movs	r3, #0
 80052b4:	4650      	mov	r0, sl
 80052b6:	4659      	mov	r1, fp
 80052b8:	f7fb fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d1a4      	bne.n	800520a <_strtod_l+0x57a>
 80052c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052c6:	462b      	mov	r3, r5
 80052c8:	463a      	mov	r2, r7
 80052ca:	4620      	mov	r0, r4
 80052cc:	f001 fe38 	bl	8006f40 <__s2b>
 80052d0:	9009      	str	r0, [sp, #36]	; 0x24
 80052d2:	2800      	cmp	r0, #0
 80052d4:	f43f af24 	beq.w	8005120 <_strtod_l+0x490>
 80052d8:	9b07      	ldr	r3, [sp, #28]
 80052da:	1b9e      	subs	r6, r3, r6
 80052dc:	9b08      	ldr	r3, [sp, #32]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	bfb4      	ite	lt
 80052e2:	4633      	movlt	r3, r6
 80052e4:	2300      	movge	r3, #0
 80052e6:	9310      	str	r3, [sp, #64]	; 0x40
 80052e8:	9b08      	ldr	r3, [sp, #32]
 80052ea:	2500      	movs	r5, #0
 80052ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80052f0:	9318      	str	r3, [sp, #96]	; 0x60
 80052f2:	462e      	mov	r6, r5
 80052f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f6:	4620      	mov	r0, r4
 80052f8:	6859      	ldr	r1, [r3, #4]
 80052fa:	f001 fd75 	bl	8006de8 <_Balloc>
 80052fe:	9007      	str	r0, [sp, #28]
 8005300:	2800      	cmp	r0, #0
 8005302:	f43f af11 	beq.w	8005128 <_strtod_l+0x498>
 8005306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	3202      	adds	r2, #2
 800530c:	f103 010c 	add.w	r1, r3, #12
 8005310:	0092      	lsls	r2, r2, #2
 8005312:	300c      	adds	r0, #12
 8005314:	f001 fd5a 	bl	8006dcc <memcpy>
 8005318:	ec4b ab10 	vmov	d0, sl, fp
 800531c:	aa20      	add	r2, sp, #128	; 0x80
 800531e:	a91f      	add	r1, sp, #124	; 0x7c
 8005320:	4620      	mov	r0, r4
 8005322:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005326:	f002 f947 	bl	80075b8 <__d2b>
 800532a:	901e      	str	r0, [sp, #120]	; 0x78
 800532c:	2800      	cmp	r0, #0
 800532e:	f43f aefb 	beq.w	8005128 <_strtod_l+0x498>
 8005332:	2101      	movs	r1, #1
 8005334:	4620      	mov	r0, r4
 8005336:	f001 fe9d 	bl	8007074 <__i2b>
 800533a:	4606      	mov	r6, r0
 800533c:	2800      	cmp	r0, #0
 800533e:	f43f aef3 	beq.w	8005128 <_strtod_l+0x498>
 8005342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005344:	9904      	ldr	r1, [sp, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	bfab      	itete	ge
 800534a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800534c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800534e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005350:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005354:	bfac      	ite	ge
 8005356:	eb03 0902 	addge.w	r9, r3, r2
 800535a:	1ad7      	sublt	r7, r2, r3
 800535c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800535e:	eba3 0801 	sub.w	r8, r3, r1
 8005362:	4490      	add	r8, r2
 8005364:	4ba3      	ldr	r3, [pc, #652]	; (80055f4 <_strtod_l+0x964>)
 8005366:	f108 38ff 	add.w	r8, r8, #4294967295
 800536a:	4598      	cmp	r8, r3
 800536c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005370:	f280 80cc 	bge.w	800550c <_strtod_l+0x87c>
 8005374:	eba3 0308 	sub.w	r3, r3, r8
 8005378:	2b1f      	cmp	r3, #31
 800537a:	eba2 0203 	sub.w	r2, r2, r3
 800537e:	f04f 0101 	mov.w	r1, #1
 8005382:	f300 80b6 	bgt.w	80054f2 <_strtod_l+0x862>
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	9311      	str	r3, [sp, #68]	; 0x44
 800538c:	2300      	movs	r3, #0
 800538e:	930c      	str	r3, [sp, #48]	; 0x30
 8005390:	eb09 0802 	add.w	r8, r9, r2
 8005394:	9b04      	ldr	r3, [sp, #16]
 8005396:	45c1      	cmp	r9, r8
 8005398:	4417      	add	r7, r2
 800539a:	441f      	add	r7, r3
 800539c:	464b      	mov	r3, r9
 800539e:	bfa8      	it	ge
 80053a0:	4643      	movge	r3, r8
 80053a2:	42bb      	cmp	r3, r7
 80053a4:	bfa8      	it	ge
 80053a6:	463b      	movge	r3, r7
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bfc2      	ittt	gt
 80053ac:	eba8 0803 	subgt.w	r8, r8, r3
 80053b0:	1aff      	subgt	r7, r7, r3
 80053b2:	eba9 0903 	subgt.w	r9, r9, r3
 80053b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	dd17      	ble.n	80053ec <_strtod_l+0x75c>
 80053bc:	4631      	mov	r1, r6
 80053be:	461a      	mov	r2, r3
 80053c0:	4620      	mov	r0, r4
 80053c2:	f001 ff13 	bl	80071ec <__pow5mult>
 80053c6:	4606      	mov	r6, r0
 80053c8:	2800      	cmp	r0, #0
 80053ca:	f43f aead 	beq.w	8005128 <_strtod_l+0x498>
 80053ce:	4601      	mov	r1, r0
 80053d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80053d2:	4620      	mov	r0, r4
 80053d4:	f001 fe64 	bl	80070a0 <__multiply>
 80053d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80053da:	2800      	cmp	r0, #0
 80053dc:	f43f aea4 	beq.w	8005128 <_strtod_l+0x498>
 80053e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80053e2:	4620      	mov	r0, r4
 80053e4:	f001 fd40 	bl	8006e68 <_Bfree>
 80053e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053ea:	931e      	str	r3, [sp, #120]	; 0x78
 80053ec:	f1b8 0f00 	cmp.w	r8, #0
 80053f0:	f300 8091 	bgt.w	8005516 <_strtod_l+0x886>
 80053f4:	9b08      	ldr	r3, [sp, #32]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	dd08      	ble.n	800540c <_strtod_l+0x77c>
 80053fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80053fc:	9907      	ldr	r1, [sp, #28]
 80053fe:	4620      	mov	r0, r4
 8005400:	f001 fef4 	bl	80071ec <__pow5mult>
 8005404:	9007      	str	r0, [sp, #28]
 8005406:	2800      	cmp	r0, #0
 8005408:	f43f ae8e 	beq.w	8005128 <_strtod_l+0x498>
 800540c:	2f00      	cmp	r7, #0
 800540e:	dd08      	ble.n	8005422 <_strtod_l+0x792>
 8005410:	9907      	ldr	r1, [sp, #28]
 8005412:	463a      	mov	r2, r7
 8005414:	4620      	mov	r0, r4
 8005416:	f001 ff43 	bl	80072a0 <__lshift>
 800541a:	9007      	str	r0, [sp, #28]
 800541c:	2800      	cmp	r0, #0
 800541e:	f43f ae83 	beq.w	8005128 <_strtod_l+0x498>
 8005422:	f1b9 0f00 	cmp.w	r9, #0
 8005426:	dd08      	ble.n	800543a <_strtod_l+0x7aa>
 8005428:	4631      	mov	r1, r6
 800542a:	464a      	mov	r2, r9
 800542c:	4620      	mov	r0, r4
 800542e:	f001 ff37 	bl	80072a0 <__lshift>
 8005432:	4606      	mov	r6, r0
 8005434:	2800      	cmp	r0, #0
 8005436:	f43f ae77 	beq.w	8005128 <_strtod_l+0x498>
 800543a:	9a07      	ldr	r2, [sp, #28]
 800543c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800543e:	4620      	mov	r0, r4
 8005440:	f001 ffb6 	bl	80073b0 <__mdiff>
 8005444:	4605      	mov	r5, r0
 8005446:	2800      	cmp	r0, #0
 8005448:	f43f ae6e 	beq.w	8005128 <_strtod_l+0x498>
 800544c:	68c3      	ldr	r3, [r0, #12]
 800544e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005450:	2300      	movs	r3, #0
 8005452:	60c3      	str	r3, [r0, #12]
 8005454:	4631      	mov	r1, r6
 8005456:	f001 ff8f 	bl	8007378 <__mcmp>
 800545a:	2800      	cmp	r0, #0
 800545c:	da65      	bge.n	800552a <_strtod_l+0x89a>
 800545e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005460:	ea53 030a 	orrs.w	r3, r3, sl
 8005464:	f040 8087 	bne.w	8005576 <_strtod_l+0x8e6>
 8005468:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800546c:	2b00      	cmp	r3, #0
 800546e:	f040 8082 	bne.w	8005576 <_strtod_l+0x8e6>
 8005472:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005476:	0d1b      	lsrs	r3, r3, #20
 8005478:	051b      	lsls	r3, r3, #20
 800547a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800547e:	d97a      	bls.n	8005576 <_strtod_l+0x8e6>
 8005480:	696b      	ldr	r3, [r5, #20]
 8005482:	b913      	cbnz	r3, 800548a <_strtod_l+0x7fa>
 8005484:	692b      	ldr	r3, [r5, #16]
 8005486:	2b01      	cmp	r3, #1
 8005488:	dd75      	ble.n	8005576 <_strtod_l+0x8e6>
 800548a:	4629      	mov	r1, r5
 800548c:	2201      	movs	r2, #1
 800548e:	4620      	mov	r0, r4
 8005490:	f001 ff06 	bl	80072a0 <__lshift>
 8005494:	4631      	mov	r1, r6
 8005496:	4605      	mov	r5, r0
 8005498:	f001 ff6e 	bl	8007378 <__mcmp>
 800549c:	2800      	cmp	r0, #0
 800549e:	dd6a      	ble.n	8005576 <_strtod_l+0x8e6>
 80054a0:	9904      	ldr	r1, [sp, #16]
 80054a2:	4a55      	ldr	r2, [pc, #340]	; (80055f8 <_strtod_l+0x968>)
 80054a4:	465b      	mov	r3, fp
 80054a6:	2900      	cmp	r1, #0
 80054a8:	f000 8085 	beq.w	80055b6 <_strtod_l+0x926>
 80054ac:	ea02 010b 	and.w	r1, r2, fp
 80054b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80054b4:	dc7f      	bgt.n	80055b6 <_strtod_l+0x926>
 80054b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80054ba:	f77f aeaa 	ble.w	8005212 <_strtod_l+0x582>
 80054be:	4a4f      	ldr	r2, [pc, #316]	; (80055fc <_strtod_l+0x96c>)
 80054c0:	2300      	movs	r3, #0
 80054c2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80054c6:	4650      	mov	r0, sl
 80054c8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80054cc:	4659      	mov	r1, fp
 80054ce:	f7fb f893 	bl	80005f8 <__aeabi_dmul>
 80054d2:	460b      	mov	r3, r1
 80054d4:	4303      	orrs	r3, r0
 80054d6:	bf08      	it	eq
 80054d8:	2322      	moveq	r3, #34	; 0x22
 80054da:	4682      	mov	sl, r0
 80054dc:	468b      	mov	fp, r1
 80054de:	bf08      	it	eq
 80054e0:	6023      	streq	r3, [r4, #0]
 80054e2:	e62b      	b.n	800513c <_strtod_l+0x4ac>
 80054e4:	f04f 32ff 	mov.w	r2, #4294967295
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	ea03 0a0a 	and.w	sl, r3, sl
 80054f0:	e6de      	b.n	80052b0 <_strtod_l+0x620>
 80054f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80054f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80054fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80054fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005502:	fa01 f308 	lsl.w	r3, r1, r8
 8005506:	930c      	str	r3, [sp, #48]	; 0x30
 8005508:	9111      	str	r1, [sp, #68]	; 0x44
 800550a:	e741      	b.n	8005390 <_strtod_l+0x700>
 800550c:	2300      	movs	r3, #0
 800550e:	930c      	str	r3, [sp, #48]	; 0x30
 8005510:	2301      	movs	r3, #1
 8005512:	9311      	str	r3, [sp, #68]	; 0x44
 8005514:	e73c      	b.n	8005390 <_strtod_l+0x700>
 8005516:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005518:	4642      	mov	r2, r8
 800551a:	4620      	mov	r0, r4
 800551c:	f001 fec0 	bl	80072a0 <__lshift>
 8005520:	901e      	str	r0, [sp, #120]	; 0x78
 8005522:	2800      	cmp	r0, #0
 8005524:	f47f af66 	bne.w	80053f4 <_strtod_l+0x764>
 8005528:	e5fe      	b.n	8005128 <_strtod_l+0x498>
 800552a:	465f      	mov	r7, fp
 800552c:	d16e      	bne.n	800560c <_strtod_l+0x97c>
 800552e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005534:	b342      	cbz	r2, 8005588 <_strtod_l+0x8f8>
 8005536:	4a32      	ldr	r2, [pc, #200]	; (8005600 <_strtod_l+0x970>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d128      	bne.n	800558e <_strtod_l+0x8fe>
 800553c:	9b04      	ldr	r3, [sp, #16]
 800553e:	4650      	mov	r0, sl
 8005540:	b1eb      	cbz	r3, 800557e <_strtod_l+0x8ee>
 8005542:	4a2d      	ldr	r2, [pc, #180]	; (80055f8 <_strtod_l+0x968>)
 8005544:	403a      	ands	r2, r7
 8005546:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800554a:	f04f 31ff 	mov.w	r1, #4294967295
 800554e:	d819      	bhi.n	8005584 <_strtod_l+0x8f4>
 8005550:	0d12      	lsrs	r2, r2, #20
 8005552:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005556:	fa01 f303 	lsl.w	r3, r1, r3
 800555a:	4298      	cmp	r0, r3
 800555c:	d117      	bne.n	800558e <_strtod_l+0x8fe>
 800555e:	4b29      	ldr	r3, [pc, #164]	; (8005604 <_strtod_l+0x974>)
 8005560:	429f      	cmp	r7, r3
 8005562:	d102      	bne.n	800556a <_strtod_l+0x8da>
 8005564:	3001      	adds	r0, #1
 8005566:	f43f addf 	beq.w	8005128 <_strtod_l+0x498>
 800556a:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <_strtod_l+0x968>)
 800556c:	403b      	ands	r3, r7
 800556e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005572:	f04f 0a00 	mov.w	sl, #0
 8005576:	9b04      	ldr	r3, [sp, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1a0      	bne.n	80054be <_strtod_l+0x82e>
 800557c:	e5de      	b.n	800513c <_strtod_l+0x4ac>
 800557e:	f04f 33ff 	mov.w	r3, #4294967295
 8005582:	e7ea      	b.n	800555a <_strtod_l+0x8ca>
 8005584:	460b      	mov	r3, r1
 8005586:	e7e8      	b.n	800555a <_strtod_l+0x8ca>
 8005588:	ea53 030a 	orrs.w	r3, r3, sl
 800558c:	d088      	beq.n	80054a0 <_strtod_l+0x810>
 800558e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005590:	b1db      	cbz	r3, 80055ca <_strtod_l+0x93a>
 8005592:	423b      	tst	r3, r7
 8005594:	d0ef      	beq.n	8005576 <_strtod_l+0x8e6>
 8005596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005598:	9a04      	ldr	r2, [sp, #16]
 800559a:	4650      	mov	r0, sl
 800559c:	4659      	mov	r1, fp
 800559e:	b1c3      	cbz	r3, 80055d2 <_strtod_l+0x942>
 80055a0:	f7ff fb5a 	bl	8004c58 <sulp>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055ac:	f7fa fe6e 	bl	800028c <__adddf3>
 80055b0:	4682      	mov	sl, r0
 80055b2:	468b      	mov	fp, r1
 80055b4:	e7df      	b.n	8005576 <_strtod_l+0x8e6>
 80055b6:	4013      	ands	r3, r2
 80055b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80055bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80055c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80055c4:	f04f 3aff 	mov.w	sl, #4294967295
 80055c8:	e7d5      	b.n	8005576 <_strtod_l+0x8e6>
 80055ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055cc:	ea13 0f0a 	tst.w	r3, sl
 80055d0:	e7e0      	b.n	8005594 <_strtod_l+0x904>
 80055d2:	f7ff fb41 	bl	8004c58 <sulp>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055de:	f7fa fe53 	bl	8000288 <__aeabi_dsub>
 80055e2:	2200      	movs	r2, #0
 80055e4:	2300      	movs	r3, #0
 80055e6:	4682      	mov	sl, r0
 80055e8:	468b      	mov	fp, r1
 80055ea:	f7fb fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	d0c1      	beq.n	8005576 <_strtod_l+0x8e6>
 80055f2:	e60e      	b.n	8005212 <_strtod_l+0x582>
 80055f4:	fffffc02 	.word	0xfffffc02
 80055f8:	7ff00000 	.word	0x7ff00000
 80055fc:	39500000 	.word	0x39500000
 8005600:	000fffff 	.word	0x000fffff
 8005604:	7fefffff 	.word	0x7fefffff
 8005608:	080097e0 	.word	0x080097e0
 800560c:	4631      	mov	r1, r6
 800560e:	4628      	mov	r0, r5
 8005610:	f002 f82e 	bl	8007670 <__ratio>
 8005614:	ec59 8b10 	vmov	r8, r9, d0
 8005618:	ee10 0a10 	vmov	r0, s0
 800561c:	2200      	movs	r2, #0
 800561e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005622:	4649      	mov	r1, r9
 8005624:	f7fb fa64 	bl	8000af0 <__aeabi_dcmple>
 8005628:	2800      	cmp	r0, #0
 800562a:	d07c      	beq.n	8005726 <_strtod_l+0xa96>
 800562c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d04c      	beq.n	80056cc <_strtod_l+0xa3c>
 8005632:	4b95      	ldr	r3, [pc, #596]	; (8005888 <_strtod_l+0xbf8>)
 8005634:	2200      	movs	r2, #0
 8005636:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800563a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005888 <_strtod_l+0xbf8>
 800563e:	f04f 0800 	mov.w	r8, #0
 8005642:	4b92      	ldr	r3, [pc, #584]	; (800588c <_strtod_l+0xbfc>)
 8005644:	403b      	ands	r3, r7
 8005646:	9311      	str	r3, [sp, #68]	; 0x44
 8005648:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800564a:	4b91      	ldr	r3, [pc, #580]	; (8005890 <_strtod_l+0xc00>)
 800564c:	429a      	cmp	r2, r3
 800564e:	f040 80b2 	bne.w	80057b6 <_strtod_l+0xb26>
 8005652:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800565a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800565e:	ec4b ab10 	vmov	d0, sl, fp
 8005662:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005666:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800566a:	f001 ff29 	bl	80074c0 <__ulp>
 800566e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005672:	ec53 2b10 	vmov	r2, r3, d0
 8005676:	f7fa ffbf 	bl	80005f8 <__aeabi_dmul>
 800567a:	4652      	mov	r2, sl
 800567c:	465b      	mov	r3, fp
 800567e:	f7fa fe05 	bl	800028c <__adddf3>
 8005682:	460b      	mov	r3, r1
 8005684:	4981      	ldr	r1, [pc, #516]	; (800588c <_strtod_l+0xbfc>)
 8005686:	4a83      	ldr	r2, [pc, #524]	; (8005894 <_strtod_l+0xc04>)
 8005688:	4019      	ands	r1, r3
 800568a:	4291      	cmp	r1, r2
 800568c:	4682      	mov	sl, r0
 800568e:	d95e      	bls.n	800574e <_strtod_l+0xabe>
 8005690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005692:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005696:	4293      	cmp	r3, r2
 8005698:	d103      	bne.n	80056a2 <_strtod_l+0xa12>
 800569a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800569c:	3301      	adds	r3, #1
 800569e:	f43f ad43 	beq.w	8005128 <_strtod_l+0x498>
 80056a2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80058a0 <_strtod_l+0xc10>
 80056a6:	f04f 3aff 	mov.w	sl, #4294967295
 80056aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80056ac:	4620      	mov	r0, r4
 80056ae:	f001 fbdb 	bl	8006e68 <_Bfree>
 80056b2:	9907      	ldr	r1, [sp, #28]
 80056b4:	4620      	mov	r0, r4
 80056b6:	f001 fbd7 	bl	8006e68 <_Bfree>
 80056ba:	4631      	mov	r1, r6
 80056bc:	4620      	mov	r0, r4
 80056be:	f001 fbd3 	bl	8006e68 <_Bfree>
 80056c2:	4629      	mov	r1, r5
 80056c4:	4620      	mov	r0, r4
 80056c6:	f001 fbcf 	bl	8006e68 <_Bfree>
 80056ca:	e613      	b.n	80052f4 <_strtod_l+0x664>
 80056cc:	f1ba 0f00 	cmp.w	sl, #0
 80056d0:	d11b      	bne.n	800570a <_strtod_l+0xa7a>
 80056d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056d6:	b9f3      	cbnz	r3, 8005716 <_strtod_l+0xa86>
 80056d8:	4b6b      	ldr	r3, [pc, #428]	; (8005888 <_strtod_l+0xbf8>)
 80056da:	2200      	movs	r2, #0
 80056dc:	4640      	mov	r0, r8
 80056de:	4649      	mov	r1, r9
 80056e0:	f7fb f9fc 	bl	8000adc <__aeabi_dcmplt>
 80056e4:	b9d0      	cbnz	r0, 800571c <_strtod_l+0xa8c>
 80056e6:	4640      	mov	r0, r8
 80056e8:	4649      	mov	r1, r9
 80056ea:	4b6b      	ldr	r3, [pc, #428]	; (8005898 <_strtod_l+0xc08>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	f7fa ff83 	bl	80005f8 <__aeabi_dmul>
 80056f2:	4680      	mov	r8, r0
 80056f4:	4689      	mov	r9, r1
 80056f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80056fa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80056fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8005700:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005704:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005708:	e79b      	b.n	8005642 <_strtod_l+0x9b2>
 800570a:	f1ba 0f01 	cmp.w	sl, #1
 800570e:	d102      	bne.n	8005716 <_strtod_l+0xa86>
 8005710:	2f00      	cmp	r7, #0
 8005712:	f43f ad7e 	beq.w	8005212 <_strtod_l+0x582>
 8005716:	4b61      	ldr	r3, [pc, #388]	; (800589c <_strtod_l+0xc0c>)
 8005718:	2200      	movs	r2, #0
 800571a:	e78c      	b.n	8005636 <_strtod_l+0x9a6>
 800571c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005898 <_strtod_l+0xc08>
 8005720:	f04f 0800 	mov.w	r8, #0
 8005724:	e7e7      	b.n	80056f6 <_strtod_l+0xa66>
 8005726:	4b5c      	ldr	r3, [pc, #368]	; (8005898 <_strtod_l+0xc08>)
 8005728:	4640      	mov	r0, r8
 800572a:	4649      	mov	r1, r9
 800572c:	2200      	movs	r2, #0
 800572e:	f7fa ff63 	bl	80005f8 <__aeabi_dmul>
 8005732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005734:	4680      	mov	r8, r0
 8005736:	4689      	mov	r9, r1
 8005738:	b933      	cbnz	r3, 8005748 <_strtod_l+0xab8>
 800573a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800573e:	9012      	str	r0, [sp, #72]	; 0x48
 8005740:	9313      	str	r3, [sp, #76]	; 0x4c
 8005742:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005746:	e7dd      	b.n	8005704 <_strtod_l+0xa74>
 8005748:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800574c:	e7f9      	b.n	8005742 <_strtod_l+0xab2>
 800574e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1a8      	bne.n	80056aa <_strtod_l+0xa1a>
 8005758:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800575c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800575e:	0d1b      	lsrs	r3, r3, #20
 8005760:	051b      	lsls	r3, r3, #20
 8005762:	429a      	cmp	r2, r3
 8005764:	d1a1      	bne.n	80056aa <_strtod_l+0xa1a>
 8005766:	4640      	mov	r0, r8
 8005768:	4649      	mov	r1, r9
 800576a:	f7fb fa8d 	bl	8000c88 <__aeabi_d2lz>
 800576e:	f7fa ff15 	bl	800059c <__aeabi_l2d>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4640      	mov	r0, r8
 8005778:	4649      	mov	r1, r9
 800577a:	f7fa fd85 	bl	8000288 <__aeabi_dsub>
 800577e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005780:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005784:	ea43 030a 	orr.w	r3, r3, sl
 8005788:	4313      	orrs	r3, r2
 800578a:	4680      	mov	r8, r0
 800578c:	4689      	mov	r9, r1
 800578e:	d053      	beq.n	8005838 <_strtod_l+0xba8>
 8005790:	a335      	add	r3, pc, #212	; (adr r3, 8005868 <_strtod_l+0xbd8>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fb f9a1 	bl	8000adc <__aeabi_dcmplt>
 800579a:	2800      	cmp	r0, #0
 800579c:	f47f acce 	bne.w	800513c <_strtod_l+0x4ac>
 80057a0:	a333      	add	r3, pc, #204	; (adr r3, 8005870 <_strtod_l+0xbe0>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	4640      	mov	r0, r8
 80057a8:	4649      	mov	r1, r9
 80057aa:	f7fb f9b5 	bl	8000b18 <__aeabi_dcmpgt>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	f43f af7b 	beq.w	80056aa <_strtod_l+0xa1a>
 80057b4:	e4c2      	b.n	800513c <_strtod_l+0x4ac>
 80057b6:	9b04      	ldr	r3, [sp, #16]
 80057b8:	b333      	cbz	r3, 8005808 <_strtod_l+0xb78>
 80057ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80057c0:	d822      	bhi.n	8005808 <_strtod_l+0xb78>
 80057c2:	a32d      	add	r3, pc, #180	; (adr r3, 8005878 <_strtod_l+0xbe8>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	4640      	mov	r0, r8
 80057ca:	4649      	mov	r1, r9
 80057cc:	f7fb f990 	bl	8000af0 <__aeabi_dcmple>
 80057d0:	b1a0      	cbz	r0, 80057fc <_strtod_l+0xb6c>
 80057d2:	4649      	mov	r1, r9
 80057d4:	4640      	mov	r0, r8
 80057d6:	f7fb f9e7 	bl	8000ba8 <__aeabi_d2uiz>
 80057da:	2801      	cmp	r0, #1
 80057dc:	bf38      	it	cc
 80057de:	2001      	movcc	r0, #1
 80057e0:	f7fa fe90 	bl	8000504 <__aeabi_ui2d>
 80057e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057e6:	4680      	mov	r8, r0
 80057e8:	4689      	mov	r9, r1
 80057ea:	bb13      	cbnz	r3, 8005832 <_strtod_l+0xba2>
 80057ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057f0:	9014      	str	r0, [sp, #80]	; 0x50
 80057f2:	9315      	str	r3, [sp, #84]	; 0x54
 80057f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80057f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80057fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005800:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	930d      	str	r3, [sp, #52]	; 0x34
 8005808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800580c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005810:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005814:	f001 fe54 	bl	80074c0 <__ulp>
 8005818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800581c:	ec53 2b10 	vmov	r2, r3, d0
 8005820:	f7fa feea 	bl	80005f8 <__aeabi_dmul>
 8005824:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005828:	f7fa fd30 	bl	800028c <__adddf3>
 800582c:	4682      	mov	sl, r0
 800582e:	468b      	mov	fp, r1
 8005830:	e78f      	b.n	8005752 <_strtod_l+0xac2>
 8005832:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005836:	e7dd      	b.n	80057f4 <_strtod_l+0xb64>
 8005838:	a311      	add	r3, pc, #68	; (adr r3, 8005880 <_strtod_l+0xbf0>)
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f7fb f94d 	bl	8000adc <__aeabi_dcmplt>
 8005842:	e7b4      	b.n	80057ae <_strtod_l+0xb1e>
 8005844:	2300      	movs	r3, #0
 8005846:	930e      	str	r3, [sp, #56]	; 0x38
 8005848:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800584a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	f7ff ba65 	b.w	8004d1c <_strtod_l+0x8c>
 8005852:	2b65      	cmp	r3, #101	; 0x65
 8005854:	f43f ab5d 	beq.w	8004f12 <_strtod_l+0x282>
 8005858:	2b45      	cmp	r3, #69	; 0x45
 800585a:	f43f ab5a 	beq.w	8004f12 <_strtod_l+0x282>
 800585e:	2201      	movs	r2, #1
 8005860:	f7ff bb92 	b.w	8004f88 <_strtod_l+0x2f8>
 8005864:	f3af 8000 	nop.w
 8005868:	94a03595 	.word	0x94a03595
 800586c:	3fdfffff 	.word	0x3fdfffff
 8005870:	35afe535 	.word	0x35afe535
 8005874:	3fe00000 	.word	0x3fe00000
 8005878:	ffc00000 	.word	0xffc00000
 800587c:	41dfffff 	.word	0x41dfffff
 8005880:	94a03595 	.word	0x94a03595
 8005884:	3fcfffff 	.word	0x3fcfffff
 8005888:	3ff00000 	.word	0x3ff00000
 800588c:	7ff00000 	.word	0x7ff00000
 8005890:	7fe00000 	.word	0x7fe00000
 8005894:	7c9fffff 	.word	0x7c9fffff
 8005898:	3fe00000 	.word	0x3fe00000
 800589c:	bff00000 	.word	0xbff00000
 80058a0:	7fefffff 	.word	0x7fefffff

080058a4 <_strtod_r>:
 80058a4:	4b01      	ldr	r3, [pc, #4]	; (80058ac <_strtod_r+0x8>)
 80058a6:	f7ff b9f3 	b.w	8004c90 <_strtod_l>
 80058aa:	bf00      	nop
 80058ac:	20000070 	.word	0x20000070

080058b0 <_strtol_l.isra.0>:
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b6:	d001      	beq.n	80058bc <_strtol_l.isra.0+0xc>
 80058b8:	2b24      	cmp	r3, #36	; 0x24
 80058ba:	d906      	bls.n	80058ca <_strtol_l.isra.0+0x1a>
 80058bc:	f7fe fafa 	bl	8003eb4 <__errno>
 80058c0:	2316      	movs	r3, #22
 80058c2:	6003      	str	r3, [r0, #0]
 80058c4:	2000      	movs	r0, #0
 80058c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ca:	4f3a      	ldr	r7, [pc, #232]	; (80059b4 <_strtol_l.isra.0+0x104>)
 80058cc:	468e      	mov	lr, r1
 80058ce:	4676      	mov	r6, lr
 80058d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80058d4:	5de5      	ldrb	r5, [r4, r7]
 80058d6:	f015 0508 	ands.w	r5, r5, #8
 80058da:	d1f8      	bne.n	80058ce <_strtol_l.isra.0+0x1e>
 80058dc:	2c2d      	cmp	r4, #45	; 0x2d
 80058de:	d134      	bne.n	800594a <_strtol_l.isra.0+0x9a>
 80058e0:	f89e 4000 	ldrb.w	r4, [lr]
 80058e4:	f04f 0801 	mov.w	r8, #1
 80058e8:	f106 0e02 	add.w	lr, r6, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d05c      	beq.n	80059aa <_strtol_l.isra.0+0xfa>
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d10c      	bne.n	800590e <_strtol_l.isra.0+0x5e>
 80058f4:	2c30      	cmp	r4, #48	; 0x30
 80058f6:	d10a      	bne.n	800590e <_strtol_l.isra.0+0x5e>
 80058f8:	f89e 4000 	ldrb.w	r4, [lr]
 80058fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005900:	2c58      	cmp	r4, #88	; 0x58
 8005902:	d14d      	bne.n	80059a0 <_strtol_l.isra.0+0xf0>
 8005904:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005908:	2310      	movs	r3, #16
 800590a:	f10e 0e02 	add.w	lr, lr, #2
 800590e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005912:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005916:	2600      	movs	r6, #0
 8005918:	fbbc f9f3 	udiv	r9, ip, r3
 800591c:	4635      	mov	r5, r6
 800591e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005922:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005926:	2f09      	cmp	r7, #9
 8005928:	d818      	bhi.n	800595c <_strtol_l.isra.0+0xac>
 800592a:	463c      	mov	r4, r7
 800592c:	42a3      	cmp	r3, r4
 800592e:	dd24      	ble.n	800597a <_strtol_l.isra.0+0xca>
 8005930:	2e00      	cmp	r6, #0
 8005932:	db1f      	blt.n	8005974 <_strtol_l.isra.0+0xc4>
 8005934:	45a9      	cmp	r9, r5
 8005936:	d31d      	bcc.n	8005974 <_strtol_l.isra.0+0xc4>
 8005938:	d101      	bne.n	800593e <_strtol_l.isra.0+0x8e>
 800593a:	45a2      	cmp	sl, r4
 800593c:	db1a      	blt.n	8005974 <_strtol_l.isra.0+0xc4>
 800593e:	fb05 4503 	mla	r5, r5, r3, r4
 8005942:	2601      	movs	r6, #1
 8005944:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005948:	e7eb      	b.n	8005922 <_strtol_l.isra.0+0x72>
 800594a:	2c2b      	cmp	r4, #43	; 0x2b
 800594c:	bf08      	it	eq
 800594e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005952:	46a8      	mov	r8, r5
 8005954:	bf08      	it	eq
 8005956:	f106 0e02 	addeq.w	lr, r6, #2
 800595a:	e7c7      	b.n	80058ec <_strtol_l.isra.0+0x3c>
 800595c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005960:	2f19      	cmp	r7, #25
 8005962:	d801      	bhi.n	8005968 <_strtol_l.isra.0+0xb8>
 8005964:	3c37      	subs	r4, #55	; 0x37
 8005966:	e7e1      	b.n	800592c <_strtol_l.isra.0+0x7c>
 8005968:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800596c:	2f19      	cmp	r7, #25
 800596e:	d804      	bhi.n	800597a <_strtol_l.isra.0+0xca>
 8005970:	3c57      	subs	r4, #87	; 0x57
 8005972:	e7db      	b.n	800592c <_strtol_l.isra.0+0x7c>
 8005974:	f04f 36ff 	mov.w	r6, #4294967295
 8005978:	e7e4      	b.n	8005944 <_strtol_l.isra.0+0x94>
 800597a:	2e00      	cmp	r6, #0
 800597c:	da05      	bge.n	800598a <_strtol_l.isra.0+0xda>
 800597e:	2322      	movs	r3, #34	; 0x22
 8005980:	6003      	str	r3, [r0, #0]
 8005982:	4665      	mov	r5, ip
 8005984:	b942      	cbnz	r2, 8005998 <_strtol_l.isra.0+0xe8>
 8005986:	4628      	mov	r0, r5
 8005988:	e79d      	b.n	80058c6 <_strtol_l.isra.0+0x16>
 800598a:	f1b8 0f00 	cmp.w	r8, #0
 800598e:	d000      	beq.n	8005992 <_strtol_l.isra.0+0xe2>
 8005990:	426d      	negs	r5, r5
 8005992:	2a00      	cmp	r2, #0
 8005994:	d0f7      	beq.n	8005986 <_strtol_l.isra.0+0xd6>
 8005996:	b10e      	cbz	r6, 800599c <_strtol_l.isra.0+0xec>
 8005998:	f10e 31ff 	add.w	r1, lr, #4294967295
 800599c:	6011      	str	r1, [r2, #0]
 800599e:	e7f2      	b.n	8005986 <_strtol_l.isra.0+0xd6>
 80059a0:	2430      	movs	r4, #48	; 0x30
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1b3      	bne.n	800590e <_strtol_l.isra.0+0x5e>
 80059a6:	2308      	movs	r3, #8
 80059a8:	e7b1      	b.n	800590e <_strtol_l.isra.0+0x5e>
 80059aa:	2c30      	cmp	r4, #48	; 0x30
 80059ac:	d0a4      	beq.n	80058f8 <_strtol_l.isra.0+0x48>
 80059ae:	230a      	movs	r3, #10
 80059b0:	e7ad      	b.n	800590e <_strtol_l.isra.0+0x5e>
 80059b2:	bf00      	nop
 80059b4:	08009809 	.word	0x08009809

080059b8 <_strtol_r>:
 80059b8:	f7ff bf7a 	b.w	80058b0 <_strtol_l.isra.0>

080059bc <quorem>:
 80059bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	6903      	ldr	r3, [r0, #16]
 80059c2:	690c      	ldr	r4, [r1, #16]
 80059c4:	42a3      	cmp	r3, r4
 80059c6:	4607      	mov	r7, r0
 80059c8:	f2c0 8081 	blt.w	8005ace <quorem+0x112>
 80059cc:	3c01      	subs	r4, #1
 80059ce:	f101 0814 	add.w	r8, r1, #20
 80059d2:	f100 0514 	add.w	r5, r0, #20
 80059d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059e4:	3301      	adds	r3, #1
 80059e6:	429a      	cmp	r2, r3
 80059e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80059f4:	d331      	bcc.n	8005a5a <quorem+0x9e>
 80059f6:	f04f 0e00 	mov.w	lr, #0
 80059fa:	4640      	mov	r0, r8
 80059fc:	46ac      	mov	ip, r5
 80059fe:	46f2      	mov	sl, lr
 8005a00:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a04:	b293      	uxth	r3, r2
 8005a06:	fb06 e303 	mla	r3, r6, r3, lr
 8005a0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	ebaa 0303 	sub.w	r3, sl, r3
 8005a14:	0c12      	lsrs	r2, r2, #16
 8005a16:	f8dc a000 	ldr.w	sl, [ip]
 8005a1a:	fb06 e202 	mla	r2, r6, r2, lr
 8005a1e:	fa13 f38a 	uxtah	r3, r3, sl
 8005a22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a26:	fa1f fa82 	uxth.w	sl, r2
 8005a2a:	f8dc 2000 	ldr.w	r2, [ip]
 8005a2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005a32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a3c:	4581      	cmp	r9, r0
 8005a3e:	f84c 3b04 	str.w	r3, [ip], #4
 8005a42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a46:	d2db      	bcs.n	8005a00 <quorem+0x44>
 8005a48:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a4c:	b92b      	cbnz	r3, 8005a5a <quorem+0x9e>
 8005a4e:	9b01      	ldr	r3, [sp, #4]
 8005a50:	3b04      	subs	r3, #4
 8005a52:	429d      	cmp	r5, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	d32e      	bcc.n	8005ab6 <quorem+0xfa>
 8005a58:	613c      	str	r4, [r7, #16]
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	f001 fc8c 	bl	8007378 <__mcmp>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	db24      	blt.n	8005aae <quorem+0xf2>
 8005a64:	3601      	adds	r6, #1
 8005a66:	4628      	mov	r0, r5
 8005a68:	f04f 0c00 	mov.w	ip, #0
 8005a6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a70:	f8d0 e000 	ldr.w	lr, [r0]
 8005a74:	b293      	uxth	r3, r2
 8005a76:	ebac 0303 	sub.w	r3, ip, r3
 8005a7a:	0c12      	lsrs	r2, r2, #16
 8005a7c:	fa13 f38e 	uxtah	r3, r3, lr
 8005a80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a8e:	45c1      	cmp	r9, r8
 8005a90:	f840 3b04 	str.w	r3, [r0], #4
 8005a94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a98:	d2e8      	bcs.n	8005a6c <quorem+0xb0>
 8005a9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aa2:	b922      	cbnz	r2, 8005aae <quorem+0xf2>
 8005aa4:	3b04      	subs	r3, #4
 8005aa6:	429d      	cmp	r5, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	d30a      	bcc.n	8005ac2 <quorem+0x106>
 8005aac:	613c      	str	r4, [r7, #16]
 8005aae:	4630      	mov	r0, r6
 8005ab0:	b003      	add	sp, #12
 8005ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab6:	6812      	ldr	r2, [r2, #0]
 8005ab8:	3b04      	subs	r3, #4
 8005aba:	2a00      	cmp	r2, #0
 8005abc:	d1cc      	bne.n	8005a58 <quorem+0x9c>
 8005abe:	3c01      	subs	r4, #1
 8005ac0:	e7c7      	b.n	8005a52 <quorem+0x96>
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	d1f0      	bne.n	8005aac <quorem+0xf0>
 8005aca:	3c01      	subs	r4, #1
 8005acc:	e7eb      	b.n	8005aa6 <quorem+0xea>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e7ee      	b.n	8005ab0 <quorem+0xf4>
 8005ad2:	0000      	movs	r0, r0
 8005ad4:	0000      	movs	r0, r0
	...

08005ad8 <_dtoa_r>:
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005adc:	ed2d 8b02 	vpush	{d8}
 8005ae0:	ec57 6b10 	vmov	r6, r7, d0
 8005ae4:	b095      	sub	sp, #84	; 0x54
 8005ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ae8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005aec:	9105      	str	r1, [sp, #20]
 8005aee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005af2:	4604      	mov	r4, r0
 8005af4:	9209      	str	r2, [sp, #36]	; 0x24
 8005af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005af8:	b975      	cbnz	r5, 8005b18 <_dtoa_r+0x40>
 8005afa:	2010      	movs	r0, #16
 8005afc:	f001 f94c 	bl	8006d98 <malloc>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6260      	str	r0, [r4, #36]	; 0x24
 8005b04:	b920      	cbnz	r0, 8005b10 <_dtoa_r+0x38>
 8005b06:	4bb2      	ldr	r3, [pc, #712]	; (8005dd0 <_dtoa_r+0x2f8>)
 8005b08:	21ea      	movs	r1, #234	; 0xea
 8005b0a:	48b2      	ldr	r0, [pc, #712]	; (8005dd4 <_dtoa_r+0x2fc>)
 8005b0c:	f002 f874 	bl	8007bf8 <__assert_func>
 8005b10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b14:	6005      	str	r5, [r0, #0]
 8005b16:	60c5      	str	r5, [r0, #12]
 8005b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b1a:	6819      	ldr	r1, [r3, #0]
 8005b1c:	b151      	cbz	r1, 8005b34 <_dtoa_r+0x5c>
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	604a      	str	r2, [r1, #4]
 8005b22:	2301      	movs	r3, #1
 8005b24:	4093      	lsls	r3, r2
 8005b26:	608b      	str	r3, [r1, #8]
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f001 f99d 	bl	8006e68 <_Bfree>
 8005b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	1e3b      	subs	r3, r7, #0
 8005b36:	bfb9      	ittee	lt
 8005b38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b3c:	9303      	strlt	r3, [sp, #12]
 8005b3e:	2300      	movge	r3, #0
 8005b40:	f8c8 3000 	strge.w	r3, [r8]
 8005b44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005b48:	4ba3      	ldr	r3, [pc, #652]	; (8005dd8 <_dtoa_r+0x300>)
 8005b4a:	bfbc      	itt	lt
 8005b4c:	2201      	movlt	r2, #1
 8005b4e:	f8c8 2000 	strlt.w	r2, [r8]
 8005b52:	ea33 0309 	bics.w	r3, r3, r9
 8005b56:	d11b      	bne.n	8005b90 <_dtoa_r+0xb8>
 8005b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b64:	4333      	orrs	r3, r6
 8005b66:	f000 857a 	beq.w	800665e <_dtoa_r+0xb86>
 8005b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b6c:	b963      	cbnz	r3, 8005b88 <_dtoa_r+0xb0>
 8005b6e:	4b9b      	ldr	r3, [pc, #620]	; (8005ddc <_dtoa_r+0x304>)
 8005b70:	e024      	b.n	8005bbc <_dtoa_r+0xe4>
 8005b72:	4b9b      	ldr	r3, [pc, #620]	; (8005de0 <_dtoa_r+0x308>)
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	3308      	adds	r3, #8
 8005b78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	9800      	ldr	r0, [sp, #0]
 8005b7e:	b015      	add	sp, #84	; 0x54
 8005b80:	ecbd 8b02 	vpop	{d8}
 8005b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b88:	4b94      	ldr	r3, [pc, #592]	; (8005ddc <_dtoa_r+0x304>)
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	3303      	adds	r3, #3
 8005b8e:	e7f3      	b.n	8005b78 <_dtoa_r+0xa0>
 8005b90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b94:	2200      	movs	r2, #0
 8005b96:	ec51 0b17 	vmov	r0, r1, d7
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005ba0:	f7fa ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ba4:	4680      	mov	r8, r0
 8005ba6:	b158      	cbz	r0, 8005bc0 <_dtoa_r+0xe8>
 8005ba8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005baa:	2301      	movs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8551 	beq.w	8006658 <_dtoa_r+0xb80>
 8005bb6:	488b      	ldr	r0, [pc, #556]	; (8005de4 <_dtoa_r+0x30c>)
 8005bb8:	6018      	str	r0, [r3, #0]
 8005bba:	1e43      	subs	r3, r0, #1
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	e7dd      	b.n	8005b7c <_dtoa_r+0xa4>
 8005bc0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005bc4:	aa12      	add	r2, sp, #72	; 0x48
 8005bc6:	a913      	add	r1, sp, #76	; 0x4c
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f001 fcf5 	bl	80075b8 <__d2b>
 8005bce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005bd2:	4683      	mov	fp, r0
 8005bd4:	2d00      	cmp	r5, #0
 8005bd6:	d07c      	beq.n	8005cd2 <_dtoa_r+0x1fa>
 8005bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005be2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005be6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005bea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bf2:	4b7d      	ldr	r3, [pc, #500]	; (8005de8 <_dtoa_r+0x310>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	f7fa fb45 	bl	8000288 <__aeabi_dsub>
 8005bfe:	a36e      	add	r3, pc, #440	; (adr r3, 8005db8 <_dtoa_r+0x2e0>)
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	f7fa fcf8 	bl	80005f8 <__aeabi_dmul>
 8005c08:	a36d      	add	r3, pc, #436	; (adr r3, 8005dc0 <_dtoa_r+0x2e8>)
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	f7fa fb3d 	bl	800028c <__adddf3>
 8005c12:	4606      	mov	r6, r0
 8005c14:	4628      	mov	r0, r5
 8005c16:	460f      	mov	r7, r1
 8005c18:	f7fa fc84 	bl	8000524 <__aeabi_i2d>
 8005c1c:	a36a      	add	r3, pc, #424	; (adr r3, 8005dc8 <_dtoa_r+0x2f0>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f7fa fce9 	bl	80005f8 <__aeabi_dmul>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	f7fa fb2d 	bl	800028c <__adddf3>
 8005c32:	4606      	mov	r6, r0
 8005c34:	460f      	mov	r7, r1
 8005c36:	f7fa ff8f 	bl	8000b58 <__aeabi_d2iz>
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	4682      	mov	sl, r0
 8005c3e:	2300      	movs	r3, #0
 8005c40:	4630      	mov	r0, r6
 8005c42:	4639      	mov	r1, r7
 8005c44:	f7fa ff4a 	bl	8000adc <__aeabi_dcmplt>
 8005c48:	b148      	cbz	r0, 8005c5e <_dtoa_r+0x186>
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	f7fa fc6a 	bl	8000524 <__aeabi_i2d>
 8005c50:	4632      	mov	r2, r6
 8005c52:	463b      	mov	r3, r7
 8005c54:	f7fa ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c58:	b908      	cbnz	r0, 8005c5e <_dtoa_r+0x186>
 8005c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c5e:	f1ba 0f16 	cmp.w	sl, #22
 8005c62:	d854      	bhi.n	8005d0e <_dtoa_r+0x236>
 8005c64:	4b61      	ldr	r3, [pc, #388]	; (8005dec <_dtoa_r+0x314>)
 8005c66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c72:	f7fa ff33 	bl	8000adc <__aeabi_dcmplt>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d04b      	beq.n	8005d12 <_dtoa_r+0x23a>
 8005c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c7e:	2300      	movs	r3, #0
 8005c80:	930e      	str	r3, [sp, #56]	; 0x38
 8005c82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c84:	1b5d      	subs	r5, r3, r5
 8005c86:	1e6b      	subs	r3, r5, #1
 8005c88:	9304      	str	r3, [sp, #16]
 8005c8a:	bf43      	ittte	mi
 8005c8c:	2300      	movmi	r3, #0
 8005c8e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005c92:	9304      	strmi	r3, [sp, #16]
 8005c94:	f04f 0800 	movpl.w	r8, #0
 8005c98:	f1ba 0f00 	cmp.w	sl, #0
 8005c9c:	db3b      	blt.n	8005d16 <_dtoa_r+0x23e>
 8005c9e:	9b04      	ldr	r3, [sp, #16]
 8005ca0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005ca4:	4453      	add	r3, sl
 8005ca6:	9304      	str	r3, [sp, #16]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	9306      	str	r3, [sp, #24]
 8005cac:	9b05      	ldr	r3, [sp, #20]
 8005cae:	2b09      	cmp	r3, #9
 8005cb0:	d869      	bhi.n	8005d86 <_dtoa_r+0x2ae>
 8005cb2:	2b05      	cmp	r3, #5
 8005cb4:	bfc4      	itt	gt
 8005cb6:	3b04      	subgt	r3, #4
 8005cb8:	9305      	strgt	r3, [sp, #20]
 8005cba:	9b05      	ldr	r3, [sp, #20]
 8005cbc:	f1a3 0302 	sub.w	r3, r3, #2
 8005cc0:	bfcc      	ite	gt
 8005cc2:	2500      	movgt	r5, #0
 8005cc4:	2501      	movle	r5, #1
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d869      	bhi.n	8005d9e <_dtoa_r+0x2c6>
 8005cca:	e8df f003 	tbb	[pc, r3]
 8005cce:	4e2c      	.short	0x4e2c
 8005cd0:	5a4c      	.short	0x5a4c
 8005cd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005cd6:	441d      	add	r5, r3
 8005cd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	bfc1      	itttt	gt
 8005ce0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ce4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005ce8:	fa09 f303 	lslgt.w	r3, r9, r3
 8005cec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005cf0:	bfda      	itte	le
 8005cf2:	f1c3 0320 	rsble	r3, r3, #32
 8005cf6:	fa06 f003 	lslle.w	r0, r6, r3
 8005cfa:	4318      	orrgt	r0, r3
 8005cfc:	f7fa fc02 	bl	8000504 <__aeabi_ui2d>
 8005d00:	2301      	movs	r3, #1
 8005d02:	4606      	mov	r6, r0
 8005d04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005d08:	3d01      	subs	r5, #1
 8005d0a:	9310      	str	r3, [sp, #64]	; 0x40
 8005d0c:	e771      	b.n	8005bf2 <_dtoa_r+0x11a>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e7b6      	b.n	8005c80 <_dtoa_r+0x1a8>
 8005d12:	900e      	str	r0, [sp, #56]	; 0x38
 8005d14:	e7b5      	b.n	8005c82 <_dtoa_r+0x1aa>
 8005d16:	f1ca 0300 	rsb	r3, sl, #0
 8005d1a:	9306      	str	r3, [sp, #24]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	eba8 080a 	sub.w	r8, r8, sl
 8005d22:	930d      	str	r3, [sp, #52]	; 0x34
 8005d24:	e7c2      	b.n	8005cac <_dtoa_r+0x1d4>
 8005d26:	2300      	movs	r3, #0
 8005d28:	9308      	str	r3, [sp, #32]
 8005d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dc39      	bgt.n	8005da4 <_dtoa_r+0x2cc>
 8005d30:	f04f 0901 	mov.w	r9, #1
 8005d34:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d38:	464b      	mov	r3, r9
 8005d3a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005d3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d40:	2200      	movs	r2, #0
 8005d42:	6042      	str	r2, [r0, #4]
 8005d44:	2204      	movs	r2, #4
 8005d46:	f102 0614 	add.w	r6, r2, #20
 8005d4a:	429e      	cmp	r6, r3
 8005d4c:	6841      	ldr	r1, [r0, #4]
 8005d4e:	d92f      	bls.n	8005db0 <_dtoa_r+0x2d8>
 8005d50:	4620      	mov	r0, r4
 8005d52:	f001 f849 	bl	8006de8 <_Balloc>
 8005d56:	9000      	str	r0, [sp, #0]
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d14b      	bne.n	8005df4 <_dtoa_r+0x31c>
 8005d5c:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <_dtoa_r+0x318>)
 8005d5e:	4602      	mov	r2, r0
 8005d60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d64:	e6d1      	b.n	8005b0a <_dtoa_r+0x32>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e7de      	b.n	8005d28 <_dtoa_r+0x250>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9308      	str	r3, [sp, #32]
 8005d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d70:	eb0a 0903 	add.w	r9, sl, r3
 8005d74:	f109 0301 	add.w	r3, r9, #1
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	bfb8      	it	lt
 8005d7e:	2301      	movlt	r3, #1
 8005d80:	e7dd      	b.n	8005d3e <_dtoa_r+0x266>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e7f2      	b.n	8005d6c <_dtoa_r+0x294>
 8005d86:	2501      	movs	r5, #1
 8005d88:	2300      	movs	r3, #0
 8005d8a:	9305      	str	r3, [sp, #20]
 8005d8c:	9508      	str	r5, [sp, #32]
 8005d8e:	f04f 39ff 	mov.w	r9, #4294967295
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d98:	2312      	movs	r3, #18
 8005d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d9c:	e7cf      	b.n	8005d3e <_dtoa_r+0x266>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	9308      	str	r3, [sp, #32]
 8005da2:	e7f4      	b.n	8005d8e <_dtoa_r+0x2b6>
 8005da4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005da8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005dac:	464b      	mov	r3, r9
 8005dae:	e7c6      	b.n	8005d3e <_dtoa_r+0x266>
 8005db0:	3101      	adds	r1, #1
 8005db2:	6041      	str	r1, [r0, #4]
 8005db4:	0052      	lsls	r2, r2, #1
 8005db6:	e7c6      	b.n	8005d46 <_dtoa_r+0x26e>
 8005db8:	636f4361 	.word	0x636f4361
 8005dbc:	3fd287a7 	.word	0x3fd287a7
 8005dc0:	8b60c8b3 	.word	0x8b60c8b3
 8005dc4:	3fc68a28 	.word	0x3fc68a28
 8005dc8:	509f79fb 	.word	0x509f79fb
 8005dcc:	3fd34413 	.word	0x3fd34413
 8005dd0:	08009916 	.word	0x08009916
 8005dd4:	0800992d 	.word	0x0800992d
 8005dd8:	7ff00000 	.word	0x7ff00000
 8005ddc:	08009912 	.word	0x08009912
 8005de0:	08009909 	.word	0x08009909
 8005de4:	0800978d 	.word	0x0800978d
 8005de8:	3ff80000 	.word	0x3ff80000
 8005dec:	08009aa8 	.word	0x08009aa8
 8005df0:	0800998c 	.word	0x0800998c
 8005df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005df6:	9a00      	ldr	r2, [sp, #0]
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	2b0e      	cmp	r3, #14
 8005dfe:	f200 80ad 	bhi.w	8005f5c <_dtoa_r+0x484>
 8005e02:	2d00      	cmp	r5, #0
 8005e04:	f000 80aa 	beq.w	8005f5c <_dtoa_r+0x484>
 8005e08:	f1ba 0f00 	cmp.w	sl, #0
 8005e0c:	dd36      	ble.n	8005e7c <_dtoa_r+0x3a4>
 8005e0e:	4ac3      	ldr	r2, [pc, #780]	; (800611c <_dtoa_r+0x644>)
 8005e10:	f00a 030f 	and.w	r3, sl, #15
 8005e14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e18:	ed93 7b00 	vldr	d7, [r3]
 8005e1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005e20:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005e24:	eeb0 8a47 	vmov.f32	s16, s14
 8005e28:	eef0 8a67 	vmov.f32	s17, s15
 8005e2c:	d016      	beq.n	8005e5c <_dtoa_r+0x384>
 8005e2e:	4bbc      	ldr	r3, [pc, #752]	; (8006120 <_dtoa_r+0x648>)
 8005e30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e38:	f7fa fd08 	bl	800084c <__aeabi_ddiv>
 8005e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e40:	f007 070f 	and.w	r7, r7, #15
 8005e44:	2503      	movs	r5, #3
 8005e46:	4eb6      	ldr	r6, [pc, #728]	; (8006120 <_dtoa_r+0x648>)
 8005e48:	b957      	cbnz	r7, 8005e60 <_dtoa_r+0x388>
 8005e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e4e:	ec53 2b18 	vmov	r2, r3, d8
 8005e52:	f7fa fcfb 	bl	800084c <__aeabi_ddiv>
 8005e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e5a:	e029      	b.n	8005eb0 <_dtoa_r+0x3d8>
 8005e5c:	2502      	movs	r5, #2
 8005e5e:	e7f2      	b.n	8005e46 <_dtoa_r+0x36e>
 8005e60:	07f9      	lsls	r1, r7, #31
 8005e62:	d508      	bpl.n	8005e76 <_dtoa_r+0x39e>
 8005e64:	ec51 0b18 	vmov	r0, r1, d8
 8005e68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e6c:	f7fa fbc4 	bl	80005f8 <__aeabi_dmul>
 8005e70:	ec41 0b18 	vmov	d8, r0, r1
 8005e74:	3501      	adds	r5, #1
 8005e76:	107f      	asrs	r7, r7, #1
 8005e78:	3608      	adds	r6, #8
 8005e7a:	e7e5      	b.n	8005e48 <_dtoa_r+0x370>
 8005e7c:	f000 80a6 	beq.w	8005fcc <_dtoa_r+0x4f4>
 8005e80:	f1ca 0600 	rsb	r6, sl, #0
 8005e84:	4ba5      	ldr	r3, [pc, #660]	; (800611c <_dtoa_r+0x644>)
 8005e86:	4fa6      	ldr	r7, [pc, #664]	; (8006120 <_dtoa_r+0x648>)
 8005e88:	f006 020f 	and.w	r2, r6, #15
 8005e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e98:	f7fa fbae 	bl	80005f8 <__aeabi_dmul>
 8005e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ea0:	1136      	asrs	r6, r6, #4
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2502      	movs	r5, #2
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	f040 8085 	bne.w	8005fb6 <_dtoa_r+0x4de>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1d2      	bne.n	8005e56 <_dtoa_r+0x37e>
 8005eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 808c 	beq.w	8005fd0 <_dtoa_r+0x4f8>
 8005eb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ebc:	4b99      	ldr	r3, [pc, #612]	; (8006124 <_dtoa_r+0x64c>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f7fa fe0a 	bl	8000adc <__aeabi_dcmplt>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	f000 8081 	beq.w	8005fd0 <_dtoa_r+0x4f8>
 8005ece:	9b01      	ldr	r3, [sp, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d07d      	beq.n	8005fd0 <_dtoa_r+0x4f8>
 8005ed4:	f1b9 0f00 	cmp.w	r9, #0
 8005ed8:	dd3c      	ble.n	8005f54 <_dtoa_r+0x47c>
 8005eda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ede:	9307      	str	r3, [sp, #28]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4b91      	ldr	r3, [pc, #580]	; (8006128 <_dtoa_r+0x650>)
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	4639      	mov	r1, r7
 8005ee8:	f7fa fb86 	bl	80005f8 <__aeabi_dmul>
 8005eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005ef6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005efa:	4628      	mov	r0, r5
 8005efc:	f7fa fb12 	bl	8000524 <__aeabi_i2d>
 8005f00:	4632      	mov	r2, r6
 8005f02:	463b      	mov	r3, r7
 8005f04:	f7fa fb78 	bl	80005f8 <__aeabi_dmul>
 8005f08:	4b88      	ldr	r3, [pc, #544]	; (800612c <_dtoa_r+0x654>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f7fa f9be 	bl	800028c <__adddf3>
 8005f10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f18:	9303      	str	r3, [sp, #12]
 8005f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d15c      	bne.n	8005fda <_dtoa_r+0x502>
 8005f20:	4b83      	ldr	r3, [pc, #524]	; (8006130 <_dtoa_r+0x658>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	4630      	mov	r0, r6
 8005f26:	4639      	mov	r1, r7
 8005f28:	f7fa f9ae 	bl	8000288 <__aeabi_dsub>
 8005f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	f7fa fdf0 	bl	8000b18 <__aeabi_dcmpgt>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	f040 8296 	bne.w	800646a <_dtoa_r+0x992>
 8005f3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005f42:	4630      	mov	r0, r6
 8005f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f48:	4639      	mov	r1, r7
 8005f4a:	f7fa fdc7 	bl	8000adc <__aeabi_dcmplt>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f040 8288 	bne.w	8006464 <_dtoa_r+0x98c>
 8005f54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f2c0 8158 	blt.w	8006214 <_dtoa_r+0x73c>
 8005f64:	f1ba 0f0e 	cmp.w	sl, #14
 8005f68:	f300 8154 	bgt.w	8006214 <_dtoa_r+0x73c>
 8005f6c:	4b6b      	ldr	r3, [pc, #428]	; (800611c <_dtoa_r+0x644>)
 8005f6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f280 80e3 	bge.w	8006144 <_dtoa_r+0x66c>
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f300 80df 	bgt.w	8006144 <_dtoa_r+0x66c>
 8005f86:	f040 826d 	bne.w	8006464 <_dtoa_r+0x98c>
 8005f8a:	4b69      	ldr	r3, [pc, #420]	; (8006130 <_dtoa_r+0x658>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	4640      	mov	r0, r8
 8005f90:	4649      	mov	r1, r9
 8005f92:	f7fa fb31 	bl	80005f8 <__aeabi_dmul>
 8005f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f9a:	f7fa fdb3 	bl	8000b04 <__aeabi_dcmpge>
 8005f9e:	9e01      	ldr	r6, [sp, #4]
 8005fa0:	4637      	mov	r7, r6
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	f040 8243 	bne.w	800642e <_dtoa_r+0x956>
 8005fa8:	9d00      	ldr	r5, [sp, #0]
 8005faa:	2331      	movs	r3, #49	; 0x31
 8005fac:	f805 3b01 	strb.w	r3, [r5], #1
 8005fb0:	f10a 0a01 	add.w	sl, sl, #1
 8005fb4:	e23f      	b.n	8006436 <_dtoa_r+0x95e>
 8005fb6:	07f2      	lsls	r2, r6, #31
 8005fb8:	d505      	bpl.n	8005fc6 <_dtoa_r+0x4ee>
 8005fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fbe:	f7fa fb1b 	bl	80005f8 <__aeabi_dmul>
 8005fc2:	3501      	adds	r5, #1
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	1076      	asrs	r6, r6, #1
 8005fc8:	3708      	adds	r7, #8
 8005fca:	e76c      	b.n	8005ea6 <_dtoa_r+0x3ce>
 8005fcc:	2502      	movs	r5, #2
 8005fce:	e76f      	b.n	8005eb0 <_dtoa_r+0x3d8>
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005fd6:	930c      	str	r3, [sp, #48]	; 0x30
 8005fd8:	e78d      	b.n	8005ef6 <_dtoa_r+0x41e>
 8005fda:	9900      	ldr	r1, [sp, #0]
 8005fdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fe0:	4b4e      	ldr	r3, [pc, #312]	; (800611c <_dtoa_r+0x644>)
 8005fe2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fe6:	4401      	add	r1, r0
 8005fe8:	9102      	str	r1, [sp, #8]
 8005fea:	9908      	ldr	r1, [sp, #32]
 8005fec:	eeb0 8a47 	vmov.f32	s16, s14
 8005ff0:	eef0 8a67 	vmov.f32	s17, s15
 8005ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ff8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	d045      	beq.n	800608c <_dtoa_r+0x5b4>
 8006000:	494c      	ldr	r1, [pc, #304]	; (8006134 <_dtoa_r+0x65c>)
 8006002:	2000      	movs	r0, #0
 8006004:	f7fa fc22 	bl	800084c <__aeabi_ddiv>
 8006008:	ec53 2b18 	vmov	r2, r3, d8
 800600c:	f7fa f93c 	bl	8000288 <__aeabi_dsub>
 8006010:	9d00      	ldr	r5, [sp, #0]
 8006012:	ec41 0b18 	vmov	d8, r0, r1
 8006016:	4639      	mov	r1, r7
 8006018:	4630      	mov	r0, r6
 800601a:	f7fa fd9d 	bl	8000b58 <__aeabi_d2iz>
 800601e:	900c      	str	r0, [sp, #48]	; 0x30
 8006020:	f7fa fa80 	bl	8000524 <__aeabi_i2d>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4630      	mov	r0, r6
 800602a:	4639      	mov	r1, r7
 800602c:	f7fa f92c 	bl	8000288 <__aeabi_dsub>
 8006030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006032:	3330      	adds	r3, #48	; 0x30
 8006034:	f805 3b01 	strb.w	r3, [r5], #1
 8006038:	ec53 2b18 	vmov	r2, r3, d8
 800603c:	4606      	mov	r6, r0
 800603e:	460f      	mov	r7, r1
 8006040:	f7fa fd4c 	bl	8000adc <__aeabi_dcmplt>
 8006044:	2800      	cmp	r0, #0
 8006046:	d165      	bne.n	8006114 <_dtoa_r+0x63c>
 8006048:	4632      	mov	r2, r6
 800604a:	463b      	mov	r3, r7
 800604c:	4935      	ldr	r1, [pc, #212]	; (8006124 <_dtoa_r+0x64c>)
 800604e:	2000      	movs	r0, #0
 8006050:	f7fa f91a 	bl	8000288 <__aeabi_dsub>
 8006054:	ec53 2b18 	vmov	r2, r3, d8
 8006058:	f7fa fd40 	bl	8000adc <__aeabi_dcmplt>
 800605c:	2800      	cmp	r0, #0
 800605e:	f040 80b9 	bne.w	80061d4 <_dtoa_r+0x6fc>
 8006062:	9b02      	ldr	r3, [sp, #8]
 8006064:	429d      	cmp	r5, r3
 8006066:	f43f af75 	beq.w	8005f54 <_dtoa_r+0x47c>
 800606a:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <_dtoa_r+0x650>)
 800606c:	ec51 0b18 	vmov	r0, r1, d8
 8006070:	2200      	movs	r2, #0
 8006072:	f7fa fac1 	bl	80005f8 <__aeabi_dmul>
 8006076:	4b2c      	ldr	r3, [pc, #176]	; (8006128 <_dtoa_r+0x650>)
 8006078:	ec41 0b18 	vmov	d8, r0, r1
 800607c:	2200      	movs	r2, #0
 800607e:	4630      	mov	r0, r6
 8006080:	4639      	mov	r1, r7
 8006082:	f7fa fab9 	bl	80005f8 <__aeabi_dmul>
 8006086:	4606      	mov	r6, r0
 8006088:	460f      	mov	r7, r1
 800608a:	e7c4      	b.n	8006016 <_dtoa_r+0x53e>
 800608c:	ec51 0b17 	vmov	r0, r1, d7
 8006090:	f7fa fab2 	bl	80005f8 <__aeabi_dmul>
 8006094:	9b02      	ldr	r3, [sp, #8]
 8006096:	9d00      	ldr	r5, [sp, #0]
 8006098:	930c      	str	r3, [sp, #48]	; 0x30
 800609a:	ec41 0b18 	vmov	d8, r0, r1
 800609e:	4639      	mov	r1, r7
 80060a0:	4630      	mov	r0, r6
 80060a2:	f7fa fd59 	bl	8000b58 <__aeabi_d2iz>
 80060a6:	9011      	str	r0, [sp, #68]	; 0x44
 80060a8:	f7fa fa3c 	bl	8000524 <__aeabi_i2d>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4630      	mov	r0, r6
 80060b2:	4639      	mov	r1, r7
 80060b4:	f7fa f8e8 	bl	8000288 <__aeabi_dsub>
 80060b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060ba:	3330      	adds	r3, #48	; 0x30
 80060bc:	f805 3b01 	strb.w	r3, [r5], #1
 80060c0:	9b02      	ldr	r3, [sp, #8]
 80060c2:	429d      	cmp	r5, r3
 80060c4:	4606      	mov	r6, r0
 80060c6:	460f      	mov	r7, r1
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	d134      	bne.n	8006138 <_dtoa_r+0x660>
 80060ce:	4b19      	ldr	r3, [pc, #100]	; (8006134 <_dtoa_r+0x65c>)
 80060d0:	ec51 0b18 	vmov	r0, r1, d8
 80060d4:	f7fa f8da 	bl	800028c <__adddf3>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4630      	mov	r0, r6
 80060de:	4639      	mov	r1, r7
 80060e0:	f7fa fd1a 	bl	8000b18 <__aeabi_dcmpgt>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d175      	bne.n	80061d4 <_dtoa_r+0x6fc>
 80060e8:	ec53 2b18 	vmov	r2, r3, d8
 80060ec:	4911      	ldr	r1, [pc, #68]	; (8006134 <_dtoa_r+0x65c>)
 80060ee:	2000      	movs	r0, #0
 80060f0:	f7fa f8ca 	bl	8000288 <__aeabi_dsub>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4630      	mov	r0, r6
 80060fa:	4639      	mov	r1, r7
 80060fc:	f7fa fcee 	bl	8000adc <__aeabi_dcmplt>
 8006100:	2800      	cmp	r0, #0
 8006102:	f43f af27 	beq.w	8005f54 <_dtoa_r+0x47c>
 8006106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006108:	1e6b      	subs	r3, r5, #1
 800610a:	930c      	str	r3, [sp, #48]	; 0x30
 800610c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006110:	2b30      	cmp	r3, #48	; 0x30
 8006112:	d0f8      	beq.n	8006106 <_dtoa_r+0x62e>
 8006114:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006118:	e04a      	b.n	80061b0 <_dtoa_r+0x6d8>
 800611a:	bf00      	nop
 800611c:	08009aa8 	.word	0x08009aa8
 8006120:	08009a80 	.word	0x08009a80
 8006124:	3ff00000 	.word	0x3ff00000
 8006128:	40240000 	.word	0x40240000
 800612c:	401c0000 	.word	0x401c0000
 8006130:	40140000 	.word	0x40140000
 8006134:	3fe00000 	.word	0x3fe00000
 8006138:	4baf      	ldr	r3, [pc, #700]	; (80063f8 <_dtoa_r+0x920>)
 800613a:	f7fa fa5d 	bl	80005f8 <__aeabi_dmul>
 800613e:	4606      	mov	r6, r0
 8006140:	460f      	mov	r7, r1
 8006142:	e7ac      	b.n	800609e <_dtoa_r+0x5c6>
 8006144:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006148:	9d00      	ldr	r5, [sp, #0]
 800614a:	4642      	mov	r2, r8
 800614c:	464b      	mov	r3, r9
 800614e:	4630      	mov	r0, r6
 8006150:	4639      	mov	r1, r7
 8006152:	f7fa fb7b 	bl	800084c <__aeabi_ddiv>
 8006156:	f7fa fcff 	bl	8000b58 <__aeabi_d2iz>
 800615a:	9002      	str	r0, [sp, #8]
 800615c:	f7fa f9e2 	bl	8000524 <__aeabi_i2d>
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	f7fa fa48 	bl	80005f8 <__aeabi_dmul>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4630      	mov	r0, r6
 800616e:	4639      	mov	r1, r7
 8006170:	f7fa f88a 	bl	8000288 <__aeabi_dsub>
 8006174:	9e02      	ldr	r6, [sp, #8]
 8006176:	9f01      	ldr	r7, [sp, #4]
 8006178:	3630      	adds	r6, #48	; 0x30
 800617a:	f805 6b01 	strb.w	r6, [r5], #1
 800617e:	9e00      	ldr	r6, [sp, #0]
 8006180:	1bae      	subs	r6, r5, r6
 8006182:	42b7      	cmp	r7, r6
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	d137      	bne.n	80061fa <_dtoa_r+0x722>
 800618a:	f7fa f87f 	bl	800028c <__adddf3>
 800618e:	4642      	mov	r2, r8
 8006190:	464b      	mov	r3, r9
 8006192:	4606      	mov	r6, r0
 8006194:	460f      	mov	r7, r1
 8006196:	f7fa fcbf 	bl	8000b18 <__aeabi_dcmpgt>
 800619a:	b9c8      	cbnz	r0, 80061d0 <_dtoa_r+0x6f8>
 800619c:	4642      	mov	r2, r8
 800619e:	464b      	mov	r3, r9
 80061a0:	4630      	mov	r0, r6
 80061a2:	4639      	mov	r1, r7
 80061a4:	f7fa fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 80061a8:	b110      	cbz	r0, 80061b0 <_dtoa_r+0x6d8>
 80061aa:	9b02      	ldr	r3, [sp, #8]
 80061ac:	07d9      	lsls	r1, r3, #31
 80061ae:	d40f      	bmi.n	80061d0 <_dtoa_r+0x6f8>
 80061b0:	4620      	mov	r0, r4
 80061b2:	4659      	mov	r1, fp
 80061b4:	f000 fe58 	bl	8006e68 <_Bfree>
 80061b8:	2300      	movs	r3, #0
 80061ba:	702b      	strb	r3, [r5, #0]
 80061bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061be:	f10a 0001 	add.w	r0, sl, #1
 80061c2:	6018      	str	r0, [r3, #0]
 80061c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f43f acd8 	beq.w	8005b7c <_dtoa_r+0xa4>
 80061cc:	601d      	str	r5, [r3, #0]
 80061ce:	e4d5      	b.n	8005b7c <_dtoa_r+0xa4>
 80061d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80061d4:	462b      	mov	r3, r5
 80061d6:	461d      	mov	r5, r3
 80061d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061dc:	2a39      	cmp	r2, #57	; 0x39
 80061de:	d108      	bne.n	80061f2 <_dtoa_r+0x71a>
 80061e0:	9a00      	ldr	r2, [sp, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d1f7      	bne.n	80061d6 <_dtoa_r+0x6fe>
 80061e6:	9a07      	ldr	r2, [sp, #28]
 80061e8:	9900      	ldr	r1, [sp, #0]
 80061ea:	3201      	adds	r2, #1
 80061ec:	9207      	str	r2, [sp, #28]
 80061ee:	2230      	movs	r2, #48	; 0x30
 80061f0:	700a      	strb	r2, [r1, #0]
 80061f2:	781a      	ldrb	r2, [r3, #0]
 80061f4:	3201      	adds	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	e78c      	b.n	8006114 <_dtoa_r+0x63c>
 80061fa:	4b7f      	ldr	r3, [pc, #508]	; (80063f8 <_dtoa_r+0x920>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	f7fa f9fb 	bl	80005f8 <__aeabi_dmul>
 8006202:	2200      	movs	r2, #0
 8006204:	2300      	movs	r3, #0
 8006206:	4606      	mov	r6, r0
 8006208:	460f      	mov	r7, r1
 800620a:	f7fa fc5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800620e:	2800      	cmp	r0, #0
 8006210:	d09b      	beq.n	800614a <_dtoa_r+0x672>
 8006212:	e7cd      	b.n	80061b0 <_dtoa_r+0x6d8>
 8006214:	9a08      	ldr	r2, [sp, #32]
 8006216:	2a00      	cmp	r2, #0
 8006218:	f000 80c4 	beq.w	80063a4 <_dtoa_r+0x8cc>
 800621c:	9a05      	ldr	r2, [sp, #20]
 800621e:	2a01      	cmp	r2, #1
 8006220:	f300 80a8 	bgt.w	8006374 <_dtoa_r+0x89c>
 8006224:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006226:	2a00      	cmp	r2, #0
 8006228:	f000 80a0 	beq.w	800636c <_dtoa_r+0x894>
 800622c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006230:	9e06      	ldr	r6, [sp, #24]
 8006232:	4645      	mov	r5, r8
 8006234:	9a04      	ldr	r2, [sp, #16]
 8006236:	2101      	movs	r1, #1
 8006238:	441a      	add	r2, r3
 800623a:	4620      	mov	r0, r4
 800623c:	4498      	add	r8, r3
 800623e:	9204      	str	r2, [sp, #16]
 8006240:	f000 ff18 	bl	8007074 <__i2b>
 8006244:	4607      	mov	r7, r0
 8006246:	2d00      	cmp	r5, #0
 8006248:	dd0b      	ble.n	8006262 <_dtoa_r+0x78a>
 800624a:	9b04      	ldr	r3, [sp, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	dd08      	ble.n	8006262 <_dtoa_r+0x78a>
 8006250:	42ab      	cmp	r3, r5
 8006252:	9a04      	ldr	r2, [sp, #16]
 8006254:	bfa8      	it	ge
 8006256:	462b      	movge	r3, r5
 8006258:	eba8 0803 	sub.w	r8, r8, r3
 800625c:	1aed      	subs	r5, r5, r3
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	9304      	str	r3, [sp, #16]
 8006262:	9b06      	ldr	r3, [sp, #24]
 8006264:	b1fb      	cbz	r3, 80062a6 <_dtoa_r+0x7ce>
 8006266:	9b08      	ldr	r3, [sp, #32]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 809f 	beq.w	80063ac <_dtoa_r+0x8d4>
 800626e:	2e00      	cmp	r6, #0
 8006270:	dd11      	ble.n	8006296 <_dtoa_r+0x7be>
 8006272:	4639      	mov	r1, r7
 8006274:	4632      	mov	r2, r6
 8006276:	4620      	mov	r0, r4
 8006278:	f000 ffb8 	bl	80071ec <__pow5mult>
 800627c:	465a      	mov	r2, fp
 800627e:	4601      	mov	r1, r0
 8006280:	4607      	mov	r7, r0
 8006282:	4620      	mov	r0, r4
 8006284:	f000 ff0c 	bl	80070a0 <__multiply>
 8006288:	4659      	mov	r1, fp
 800628a:	9007      	str	r0, [sp, #28]
 800628c:	4620      	mov	r0, r4
 800628e:	f000 fdeb 	bl	8006e68 <_Bfree>
 8006292:	9b07      	ldr	r3, [sp, #28]
 8006294:	469b      	mov	fp, r3
 8006296:	9b06      	ldr	r3, [sp, #24]
 8006298:	1b9a      	subs	r2, r3, r6
 800629a:	d004      	beq.n	80062a6 <_dtoa_r+0x7ce>
 800629c:	4659      	mov	r1, fp
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 ffa4 	bl	80071ec <__pow5mult>
 80062a4:	4683      	mov	fp, r0
 80062a6:	2101      	movs	r1, #1
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 fee3 	bl	8007074 <__i2b>
 80062ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	4606      	mov	r6, r0
 80062b4:	dd7c      	ble.n	80063b0 <_dtoa_r+0x8d8>
 80062b6:	461a      	mov	r2, r3
 80062b8:	4601      	mov	r1, r0
 80062ba:	4620      	mov	r0, r4
 80062bc:	f000 ff96 	bl	80071ec <__pow5mult>
 80062c0:	9b05      	ldr	r3, [sp, #20]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	4606      	mov	r6, r0
 80062c6:	dd76      	ble.n	80063b6 <_dtoa_r+0x8de>
 80062c8:	2300      	movs	r3, #0
 80062ca:	9306      	str	r3, [sp, #24]
 80062cc:	6933      	ldr	r3, [r6, #16]
 80062ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80062d2:	6918      	ldr	r0, [r3, #16]
 80062d4:	f000 fe7e 	bl	8006fd4 <__hi0bits>
 80062d8:	f1c0 0020 	rsb	r0, r0, #32
 80062dc:	9b04      	ldr	r3, [sp, #16]
 80062de:	4418      	add	r0, r3
 80062e0:	f010 001f 	ands.w	r0, r0, #31
 80062e4:	f000 8086 	beq.w	80063f4 <_dtoa_r+0x91c>
 80062e8:	f1c0 0320 	rsb	r3, r0, #32
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	dd7f      	ble.n	80063f0 <_dtoa_r+0x918>
 80062f0:	f1c0 001c 	rsb	r0, r0, #28
 80062f4:	9b04      	ldr	r3, [sp, #16]
 80062f6:	4403      	add	r3, r0
 80062f8:	4480      	add	r8, r0
 80062fa:	4405      	add	r5, r0
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	f1b8 0f00 	cmp.w	r8, #0
 8006302:	dd05      	ble.n	8006310 <_dtoa_r+0x838>
 8006304:	4659      	mov	r1, fp
 8006306:	4642      	mov	r2, r8
 8006308:	4620      	mov	r0, r4
 800630a:	f000 ffc9 	bl	80072a0 <__lshift>
 800630e:	4683      	mov	fp, r0
 8006310:	9b04      	ldr	r3, [sp, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	dd05      	ble.n	8006322 <_dtoa_r+0x84a>
 8006316:	4631      	mov	r1, r6
 8006318:	461a      	mov	r2, r3
 800631a:	4620      	mov	r0, r4
 800631c:	f000 ffc0 	bl	80072a0 <__lshift>
 8006320:	4606      	mov	r6, r0
 8006322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006324:	2b00      	cmp	r3, #0
 8006326:	d069      	beq.n	80063fc <_dtoa_r+0x924>
 8006328:	4631      	mov	r1, r6
 800632a:	4658      	mov	r0, fp
 800632c:	f001 f824 	bl	8007378 <__mcmp>
 8006330:	2800      	cmp	r0, #0
 8006332:	da63      	bge.n	80063fc <_dtoa_r+0x924>
 8006334:	2300      	movs	r3, #0
 8006336:	4659      	mov	r1, fp
 8006338:	220a      	movs	r2, #10
 800633a:	4620      	mov	r0, r4
 800633c:	f000 fdb6 	bl	8006eac <__multadd>
 8006340:	9b08      	ldr	r3, [sp, #32]
 8006342:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006346:	4683      	mov	fp, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 818f 	beq.w	800666c <_dtoa_r+0xb94>
 800634e:	4639      	mov	r1, r7
 8006350:	2300      	movs	r3, #0
 8006352:	220a      	movs	r2, #10
 8006354:	4620      	mov	r0, r4
 8006356:	f000 fda9 	bl	8006eac <__multadd>
 800635a:	f1b9 0f00 	cmp.w	r9, #0
 800635e:	4607      	mov	r7, r0
 8006360:	f300 808e 	bgt.w	8006480 <_dtoa_r+0x9a8>
 8006364:	9b05      	ldr	r3, [sp, #20]
 8006366:	2b02      	cmp	r3, #2
 8006368:	dc50      	bgt.n	800640c <_dtoa_r+0x934>
 800636a:	e089      	b.n	8006480 <_dtoa_r+0x9a8>
 800636c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800636e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006372:	e75d      	b.n	8006230 <_dtoa_r+0x758>
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	1e5e      	subs	r6, r3, #1
 8006378:	9b06      	ldr	r3, [sp, #24]
 800637a:	42b3      	cmp	r3, r6
 800637c:	bfbf      	itttt	lt
 800637e:	9b06      	ldrlt	r3, [sp, #24]
 8006380:	9606      	strlt	r6, [sp, #24]
 8006382:	1af2      	sublt	r2, r6, r3
 8006384:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006386:	bfb6      	itet	lt
 8006388:	189b      	addlt	r3, r3, r2
 800638a:	1b9e      	subge	r6, r3, r6
 800638c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800638e:	9b01      	ldr	r3, [sp, #4]
 8006390:	bfb8      	it	lt
 8006392:	2600      	movlt	r6, #0
 8006394:	2b00      	cmp	r3, #0
 8006396:	bfb5      	itete	lt
 8006398:	eba8 0503 	sublt.w	r5, r8, r3
 800639c:	9b01      	ldrge	r3, [sp, #4]
 800639e:	2300      	movlt	r3, #0
 80063a0:	4645      	movge	r5, r8
 80063a2:	e747      	b.n	8006234 <_dtoa_r+0x75c>
 80063a4:	9e06      	ldr	r6, [sp, #24]
 80063a6:	9f08      	ldr	r7, [sp, #32]
 80063a8:	4645      	mov	r5, r8
 80063aa:	e74c      	b.n	8006246 <_dtoa_r+0x76e>
 80063ac:	9a06      	ldr	r2, [sp, #24]
 80063ae:	e775      	b.n	800629c <_dtoa_r+0x7c4>
 80063b0:	9b05      	ldr	r3, [sp, #20]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	dc18      	bgt.n	80063e8 <_dtoa_r+0x910>
 80063b6:	9b02      	ldr	r3, [sp, #8]
 80063b8:	b9b3      	cbnz	r3, 80063e8 <_dtoa_r+0x910>
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c0:	b9a3      	cbnz	r3, 80063ec <_dtoa_r+0x914>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063c8:	0d1b      	lsrs	r3, r3, #20
 80063ca:	051b      	lsls	r3, r3, #20
 80063cc:	b12b      	cbz	r3, 80063da <_dtoa_r+0x902>
 80063ce:	9b04      	ldr	r3, [sp, #16]
 80063d0:	3301      	adds	r3, #1
 80063d2:	9304      	str	r3, [sp, #16]
 80063d4:	f108 0801 	add.w	r8, r8, #1
 80063d8:	2301      	movs	r3, #1
 80063da:	9306      	str	r3, [sp, #24]
 80063dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f47f af74 	bne.w	80062cc <_dtoa_r+0x7f4>
 80063e4:	2001      	movs	r0, #1
 80063e6:	e779      	b.n	80062dc <_dtoa_r+0x804>
 80063e8:	2300      	movs	r3, #0
 80063ea:	e7f6      	b.n	80063da <_dtoa_r+0x902>
 80063ec:	9b02      	ldr	r3, [sp, #8]
 80063ee:	e7f4      	b.n	80063da <_dtoa_r+0x902>
 80063f0:	d085      	beq.n	80062fe <_dtoa_r+0x826>
 80063f2:	4618      	mov	r0, r3
 80063f4:	301c      	adds	r0, #28
 80063f6:	e77d      	b.n	80062f4 <_dtoa_r+0x81c>
 80063f8:	40240000 	.word	0x40240000
 80063fc:	9b01      	ldr	r3, [sp, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dc38      	bgt.n	8006474 <_dtoa_r+0x99c>
 8006402:	9b05      	ldr	r3, [sp, #20]
 8006404:	2b02      	cmp	r3, #2
 8006406:	dd35      	ble.n	8006474 <_dtoa_r+0x99c>
 8006408:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800640c:	f1b9 0f00 	cmp.w	r9, #0
 8006410:	d10d      	bne.n	800642e <_dtoa_r+0x956>
 8006412:	4631      	mov	r1, r6
 8006414:	464b      	mov	r3, r9
 8006416:	2205      	movs	r2, #5
 8006418:	4620      	mov	r0, r4
 800641a:	f000 fd47 	bl	8006eac <__multadd>
 800641e:	4601      	mov	r1, r0
 8006420:	4606      	mov	r6, r0
 8006422:	4658      	mov	r0, fp
 8006424:	f000 ffa8 	bl	8007378 <__mcmp>
 8006428:	2800      	cmp	r0, #0
 800642a:	f73f adbd 	bgt.w	8005fa8 <_dtoa_r+0x4d0>
 800642e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006430:	9d00      	ldr	r5, [sp, #0]
 8006432:	ea6f 0a03 	mvn.w	sl, r3
 8006436:	f04f 0800 	mov.w	r8, #0
 800643a:	4631      	mov	r1, r6
 800643c:	4620      	mov	r0, r4
 800643e:	f000 fd13 	bl	8006e68 <_Bfree>
 8006442:	2f00      	cmp	r7, #0
 8006444:	f43f aeb4 	beq.w	80061b0 <_dtoa_r+0x6d8>
 8006448:	f1b8 0f00 	cmp.w	r8, #0
 800644c:	d005      	beq.n	800645a <_dtoa_r+0x982>
 800644e:	45b8      	cmp	r8, r7
 8006450:	d003      	beq.n	800645a <_dtoa_r+0x982>
 8006452:	4641      	mov	r1, r8
 8006454:	4620      	mov	r0, r4
 8006456:	f000 fd07 	bl	8006e68 <_Bfree>
 800645a:	4639      	mov	r1, r7
 800645c:	4620      	mov	r0, r4
 800645e:	f000 fd03 	bl	8006e68 <_Bfree>
 8006462:	e6a5      	b.n	80061b0 <_dtoa_r+0x6d8>
 8006464:	2600      	movs	r6, #0
 8006466:	4637      	mov	r7, r6
 8006468:	e7e1      	b.n	800642e <_dtoa_r+0x956>
 800646a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800646c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006470:	4637      	mov	r7, r6
 8006472:	e599      	b.n	8005fa8 <_dtoa_r+0x4d0>
 8006474:	9b08      	ldr	r3, [sp, #32]
 8006476:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80fd 	beq.w	800667a <_dtoa_r+0xba2>
 8006480:	2d00      	cmp	r5, #0
 8006482:	dd05      	ble.n	8006490 <_dtoa_r+0x9b8>
 8006484:	4639      	mov	r1, r7
 8006486:	462a      	mov	r2, r5
 8006488:	4620      	mov	r0, r4
 800648a:	f000 ff09 	bl	80072a0 <__lshift>
 800648e:	4607      	mov	r7, r0
 8006490:	9b06      	ldr	r3, [sp, #24]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d05c      	beq.n	8006550 <_dtoa_r+0xa78>
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	4620      	mov	r0, r4
 800649a:	f000 fca5 	bl	8006de8 <_Balloc>
 800649e:	4605      	mov	r5, r0
 80064a0:	b928      	cbnz	r0, 80064ae <_dtoa_r+0x9d6>
 80064a2:	4b80      	ldr	r3, [pc, #512]	; (80066a4 <_dtoa_r+0xbcc>)
 80064a4:	4602      	mov	r2, r0
 80064a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80064aa:	f7ff bb2e 	b.w	8005b0a <_dtoa_r+0x32>
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	3202      	adds	r2, #2
 80064b2:	0092      	lsls	r2, r2, #2
 80064b4:	f107 010c 	add.w	r1, r7, #12
 80064b8:	300c      	adds	r0, #12
 80064ba:	f000 fc87 	bl	8006dcc <memcpy>
 80064be:	2201      	movs	r2, #1
 80064c0:	4629      	mov	r1, r5
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 feec 	bl	80072a0 <__lshift>
 80064c8:	9b00      	ldr	r3, [sp, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	9b00      	ldr	r3, [sp, #0]
 80064d0:	444b      	add	r3, r9
 80064d2:	9307      	str	r3, [sp, #28]
 80064d4:	9b02      	ldr	r3, [sp, #8]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	46b8      	mov	r8, r7
 80064dc:	9306      	str	r3, [sp, #24]
 80064de:	4607      	mov	r7, r0
 80064e0:	9b01      	ldr	r3, [sp, #4]
 80064e2:	4631      	mov	r1, r6
 80064e4:	3b01      	subs	r3, #1
 80064e6:	4658      	mov	r0, fp
 80064e8:	9302      	str	r3, [sp, #8]
 80064ea:	f7ff fa67 	bl	80059bc <quorem>
 80064ee:	4603      	mov	r3, r0
 80064f0:	3330      	adds	r3, #48	; 0x30
 80064f2:	9004      	str	r0, [sp, #16]
 80064f4:	4641      	mov	r1, r8
 80064f6:	4658      	mov	r0, fp
 80064f8:	9308      	str	r3, [sp, #32]
 80064fa:	f000 ff3d 	bl	8007378 <__mcmp>
 80064fe:	463a      	mov	r2, r7
 8006500:	4681      	mov	r9, r0
 8006502:	4631      	mov	r1, r6
 8006504:	4620      	mov	r0, r4
 8006506:	f000 ff53 	bl	80073b0 <__mdiff>
 800650a:	68c2      	ldr	r2, [r0, #12]
 800650c:	9b08      	ldr	r3, [sp, #32]
 800650e:	4605      	mov	r5, r0
 8006510:	bb02      	cbnz	r2, 8006554 <_dtoa_r+0xa7c>
 8006512:	4601      	mov	r1, r0
 8006514:	4658      	mov	r0, fp
 8006516:	f000 ff2f 	bl	8007378 <__mcmp>
 800651a:	9b08      	ldr	r3, [sp, #32]
 800651c:	4602      	mov	r2, r0
 800651e:	4629      	mov	r1, r5
 8006520:	4620      	mov	r0, r4
 8006522:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006526:	f000 fc9f 	bl	8006e68 <_Bfree>
 800652a:	9b05      	ldr	r3, [sp, #20]
 800652c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800652e:	9d01      	ldr	r5, [sp, #4]
 8006530:	ea43 0102 	orr.w	r1, r3, r2
 8006534:	9b06      	ldr	r3, [sp, #24]
 8006536:	430b      	orrs	r3, r1
 8006538:	9b08      	ldr	r3, [sp, #32]
 800653a:	d10d      	bne.n	8006558 <_dtoa_r+0xa80>
 800653c:	2b39      	cmp	r3, #57	; 0x39
 800653e:	d029      	beq.n	8006594 <_dtoa_r+0xabc>
 8006540:	f1b9 0f00 	cmp.w	r9, #0
 8006544:	dd01      	ble.n	800654a <_dtoa_r+0xa72>
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	3331      	adds	r3, #49	; 0x31
 800654a:	9a02      	ldr	r2, [sp, #8]
 800654c:	7013      	strb	r3, [r2, #0]
 800654e:	e774      	b.n	800643a <_dtoa_r+0x962>
 8006550:	4638      	mov	r0, r7
 8006552:	e7b9      	b.n	80064c8 <_dtoa_r+0x9f0>
 8006554:	2201      	movs	r2, #1
 8006556:	e7e2      	b.n	800651e <_dtoa_r+0xa46>
 8006558:	f1b9 0f00 	cmp.w	r9, #0
 800655c:	db06      	blt.n	800656c <_dtoa_r+0xa94>
 800655e:	9905      	ldr	r1, [sp, #20]
 8006560:	ea41 0909 	orr.w	r9, r1, r9
 8006564:	9906      	ldr	r1, [sp, #24]
 8006566:	ea59 0101 	orrs.w	r1, r9, r1
 800656a:	d120      	bne.n	80065ae <_dtoa_r+0xad6>
 800656c:	2a00      	cmp	r2, #0
 800656e:	ddec      	ble.n	800654a <_dtoa_r+0xa72>
 8006570:	4659      	mov	r1, fp
 8006572:	2201      	movs	r2, #1
 8006574:	4620      	mov	r0, r4
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	f000 fe92 	bl	80072a0 <__lshift>
 800657c:	4631      	mov	r1, r6
 800657e:	4683      	mov	fp, r0
 8006580:	f000 fefa 	bl	8007378 <__mcmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	dc02      	bgt.n	8006590 <_dtoa_r+0xab8>
 800658a:	d1de      	bne.n	800654a <_dtoa_r+0xa72>
 800658c:	07da      	lsls	r2, r3, #31
 800658e:	d5dc      	bpl.n	800654a <_dtoa_r+0xa72>
 8006590:	2b39      	cmp	r3, #57	; 0x39
 8006592:	d1d8      	bne.n	8006546 <_dtoa_r+0xa6e>
 8006594:	9a02      	ldr	r2, [sp, #8]
 8006596:	2339      	movs	r3, #57	; 0x39
 8006598:	7013      	strb	r3, [r2, #0]
 800659a:	462b      	mov	r3, r5
 800659c:	461d      	mov	r5, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80065a4:	2a39      	cmp	r2, #57	; 0x39
 80065a6:	d050      	beq.n	800664a <_dtoa_r+0xb72>
 80065a8:	3201      	adds	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	e745      	b.n	800643a <_dtoa_r+0x962>
 80065ae:	2a00      	cmp	r2, #0
 80065b0:	dd03      	ble.n	80065ba <_dtoa_r+0xae2>
 80065b2:	2b39      	cmp	r3, #57	; 0x39
 80065b4:	d0ee      	beq.n	8006594 <_dtoa_r+0xabc>
 80065b6:	3301      	adds	r3, #1
 80065b8:	e7c7      	b.n	800654a <_dtoa_r+0xa72>
 80065ba:	9a01      	ldr	r2, [sp, #4]
 80065bc:	9907      	ldr	r1, [sp, #28]
 80065be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80065c2:	428a      	cmp	r2, r1
 80065c4:	d02a      	beq.n	800661c <_dtoa_r+0xb44>
 80065c6:	4659      	mov	r1, fp
 80065c8:	2300      	movs	r3, #0
 80065ca:	220a      	movs	r2, #10
 80065cc:	4620      	mov	r0, r4
 80065ce:	f000 fc6d 	bl	8006eac <__multadd>
 80065d2:	45b8      	cmp	r8, r7
 80065d4:	4683      	mov	fp, r0
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	f04f 020a 	mov.w	r2, #10
 80065de:	4641      	mov	r1, r8
 80065e0:	4620      	mov	r0, r4
 80065e2:	d107      	bne.n	80065f4 <_dtoa_r+0xb1c>
 80065e4:	f000 fc62 	bl	8006eac <__multadd>
 80065e8:	4680      	mov	r8, r0
 80065ea:	4607      	mov	r7, r0
 80065ec:	9b01      	ldr	r3, [sp, #4]
 80065ee:	3301      	adds	r3, #1
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	e775      	b.n	80064e0 <_dtoa_r+0xa08>
 80065f4:	f000 fc5a 	bl	8006eac <__multadd>
 80065f8:	4639      	mov	r1, r7
 80065fa:	4680      	mov	r8, r0
 80065fc:	2300      	movs	r3, #0
 80065fe:	220a      	movs	r2, #10
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fc53 	bl	8006eac <__multadd>
 8006606:	4607      	mov	r7, r0
 8006608:	e7f0      	b.n	80065ec <_dtoa_r+0xb14>
 800660a:	f1b9 0f00 	cmp.w	r9, #0
 800660e:	9a00      	ldr	r2, [sp, #0]
 8006610:	bfcc      	ite	gt
 8006612:	464d      	movgt	r5, r9
 8006614:	2501      	movle	r5, #1
 8006616:	4415      	add	r5, r2
 8006618:	f04f 0800 	mov.w	r8, #0
 800661c:	4659      	mov	r1, fp
 800661e:	2201      	movs	r2, #1
 8006620:	4620      	mov	r0, r4
 8006622:	9301      	str	r3, [sp, #4]
 8006624:	f000 fe3c 	bl	80072a0 <__lshift>
 8006628:	4631      	mov	r1, r6
 800662a:	4683      	mov	fp, r0
 800662c:	f000 fea4 	bl	8007378 <__mcmp>
 8006630:	2800      	cmp	r0, #0
 8006632:	dcb2      	bgt.n	800659a <_dtoa_r+0xac2>
 8006634:	d102      	bne.n	800663c <_dtoa_r+0xb64>
 8006636:	9b01      	ldr	r3, [sp, #4]
 8006638:	07db      	lsls	r3, r3, #31
 800663a:	d4ae      	bmi.n	800659a <_dtoa_r+0xac2>
 800663c:	462b      	mov	r3, r5
 800663e:	461d      	mov	r5, r3
 8006640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006644:	2a30      	cmp	r2, #48	; 0x30
 8006646:	d0fa      	beq.n	800663e <_dtoa_r+0xb66>
 8006648:	e6f7      	b.n	800643a <_dtoa_r+0x962>
 800664a:	9a00      	ldr	r2, [sp, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d1a5      	bne.n	800659c <_dtoa_r+0xac4>
 8006650:	f10a 0a01 	add.w	sl, sl, #1
 8006654:	2331      	movs	r3, #49	; 0x31
 8006656:	e779      	b.n	800654c <_dtoa_r+0xa74>
 8006658:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <_dtoa_r+0xbd0>)
 800665a:	f7ff baaf 	b.w	8005bbc <_dtoa_r+0xe4>
 800665e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006660:	2b00      	cmp	r3, #0
 8006662:	f47f aa86 	bne.w	8005b72 <_dtoa_r+0x9a>
 8006666:	4b11      	ldr	r3, [pc, #68]	; (80066ac <_dtoa_r+0xbd4>)
 8006668:	f7ff baa8 	b.w	8005bbc <_dtoa_r+0xe4>
 800666c:	f1b9 0f00 	cmp.w	r9, #0
 8006670:	dc03      	bgt.n	800667a <_dtoa_r+0xba2>
 8006672:	9b05      	ldr	r3, [sp, #20]
 8006674:	2b02      	cmp	r3, #2
 8006676:	f73f aec9 	bgt.w	800640c <_dtoa_r+0x934>
 800667a:	9d00      	ldr	r5, [sp, #0]
 800667c:	4631      	mov	r1, r6
 800667e:	4658      	mov	r0, fp
 8006680:	f7ff f99c 	bl	80059bc <quorem>
 8006684:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006688:	f805 3b01 	strb.w	r3, [r5], #1
 800668c:	9a00      	ldr	r2, [sp, #0]
 800668e:	1aaa      	subs	r2, r5, r2
 8006690:	4591      	cmp	r9, r2
 8006692:	ddba      	ble.n	800660a <_dtoa_r+0xb32>
 8006694:	4659      	mov	r1, fp
 8006696:	2300      	movs	r3, #0
 8006698:	220a      	movs	r2, #10
 800669a:	4620      	mov	r0, r4
 800669c:	f000 fc06 	bl	8006eac <__multadd>
 80066a0:	4683      	mov	fp, r0
 80066a2:	e7eb      	b.n	800667c <_dtoa_r+0xba4>
 80066a4:	0800998c 	.word	0x0800998c
 80066a8:	0800978c 	.word	0x0800978c
 80066ac:	08009909 	.word	0x08009909

080066b0 <rshift>:
 80066b0:	6903      	ldr	r3, [r0, #16]
 80066b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80066b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80066be:	f100 0414 	add.w	r4, r0, #20
 80066c2:	dd45      	ble.n	8006750 <rshift+0xa0>
 80066c4:	f011 011f 	ands.w	r1, r1, #31
 80066c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80066cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80066d0:	d10c      	bne.n	80066ec <rshift+0x3c>
 80066d2:	f100 0710 	add.w	r7, r0, #16
 80066d6:	4629      	mov	r1, r5
 80066d8:	42b1      	cmp	r1, r6
 80066da:	d334      	bcc.n	8006746 <rshift+0x96>
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	1eea      	subs	r2, r5, #3
 80066e2:	4296      	cmp	r6, r2
 80066e4:	bf38      	it	cc
 80066e6:	2300      	movcc	r3, #0
 80066e8:	4423      	add	r3, r4
 80066ea:	e015      	b.n	8006718 <rshift+0x68>
 80066ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80066f0:	f1c1 0820 	rsb	r8, r1, #32
 80066f4:	40cf      	lsrs	r7, r1
 80066f6:	f105 0e04 	add.w	lr, r5, #4
 80066fa:	46a1      	mov	r9, r4
 80066fc:	4576      	cmp	r6, lr
 80066fe:	46f4      	mov	ip, lr
 8006700:	d815      	bhi.n	800672e <rshift+0x7e>
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	009a      	lsls	r2, r3, #2
 8006706:	3a04      	subs	r2, #4
 8006708:	3501      	adds	r5, #1
 800670a:	42ae      	cmp	r6, r5
 800670c:	bf38      	it	cc
 800670e:	2200      	movcc	r2, #0
 8006710:	18a3      	adds	r3, r4, r2
 8006712:	50a7      	str	r7, [r4, r2]
 8006714:	b107      	cbz	r7, 8006718 <rshift+0x68>
 8006716:	3304      	adds	r3, #4
 8006718:	1b1a      	subs	r2, r3, r4
 800671a:	42a3      	cmp	r3, r4
 800671c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006720:	bf08      	it	eq
 8006722:	2300      	moveq	r3, #0
 8006724:	6102      	str	r2, [r0, #16]
 8006726:	bf08      	it	eq
 8006728:	6143      	streq	r3, [r0, #20]
 800672a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800672e:	f8dc c000 	ldr.w	ip, [ip]
 8006732:	fa0c fc08 	lsl.w	ip, ip, r8
 8006736:	ea4c 0707 	orr.w	r7, ip, r7
 800673a:	f849 7b04 	str.w	r7, [r9], #4
 800673e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006742:	40cf      	lsrs	r7, r1
 8006744:	e7da      	b.n	80066fc <rshift+0x4c>
 8006746:	f851 cb04 	ldr.w	ip, [r1], #4
 800674a:	f847 cf04 	str.w	ip, [r7, #4]!
 800674e:	e7c3      	b.n	80066d8 <rshift+0x28>
 8006750:	4623      	mov	r3, r4
 8006752:	e7e1      	b.n	8006718 <rshift+0x68>

08006754 <__hexdig_fun>:
 8006754:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006758:	2b09      	cmp	r3, #9
 800675a:	d802      	bhi.n	8006762 <__hexdig_fun+0xe>
 800675c:	3820      	subs	r0, #32
 800675e:	b2c0      	uxtb	r0, r0
 8006760:	4770      	bx	lr
 8006762:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006766:	2b05      	cmp	r3, #5
 8006768:	d801      	bhi.n	800676e <__hexdig_fun+0x1a>
 800676a:	3847      	subs	r0, #71	; 0x47
 800676c:	e7f7      	b.n	800675e <__hexdig_fun+0xa>
 800676e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006772:	2b05      	cmp	r3, #5
 8006774:	d801      	bhi.n	800677a <__hexdig_fun+0x26>
 8006776:	3827      	subs	r0, #39	; 0x27
 8006778:	e7f1      	b.n	800675e <__hexdig_fun+0xa>
 800677a:	2000      	movs	r0, #0
 800677c:	4770      	bx	lr
	...

08006780 <__gethex>:
 8006780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006784:	ed2d 8b02 	vpush	{d8}
 8006788:	b089      	sub	sp, #36	; 0x24
 800678a:	ee08 0a10 	vmov	s16, r0
 800678e:	9304      	str	r3, [sp, #16]
 8006790:	4bbc      	ldr	r3, [pc, #752]	; (8006a84 <__gethex+0x304>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	4618      	mov	r0, r3
 8006798:	468b      	mov	fp, r1
 800679a:	4690      	mov	r8, r2
 800679c:	f7f9 fd18 	bl	80001d0 <strlen>
 80067a0:	9b01      	ldr	r3, [sp, #4]
 80067a2:	f8db 2000 	ldr.w	r2, [fp]
 80067a6:	4403      	add	r3, r0
 80067a8:	4682      	mov	sl, r0
 80067aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80067ae:	9305      	str	r3, [sp, #20]
 80067b0:	1c93      	adds	r3, r2, #2
 80067b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80067b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80067ba:	32fe      	adds	r2, #254	; 0xfe
 80067bc:	18d1      	adds	r1, r2, r3
 80067be:	461f      	mov	r7, r3
 80067c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80067c4:	9100      	str	r1, [sp, #0]
 80067c6:	2830      	cmp	r0, #48	; 0x30
 80067c8:	d0f8      	beq.n	80067bc <__gethex+0x3c>
 80067ca:	f7ff ffc3 	bl	8006754 <__hexdig_fun>
 80067ce:	4604      	mov	r4, r0
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d13a      	bne.n	800684a <__gethex+0xca>
 80067d4:	9901      	ldr	r1, [sp, #4]
 80067d6:	4652      	mov	r2, sl
 80067d8:	4638      	mov	r0, r7
 80067da:	f001 f9ed 	bl	8007bb8 <strncmp>
 80067de:	4605      	mov	r5, r0
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d168      	bne.n	80068b6 <__gethex+0x136>
 80067e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80067e8:	eb07 060a 	add.w	r6, r7, sl
 80067ec:	f7ff ffb2 	bl	8006754 <__hexdig_fun>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d062      	beq.n	80068ba <__gethex+0x13a>
 80067f4:	4633      	mov	r3, r6
 80067f6:	7818      	ldrb	r0, [r3, #0]
 80067f8:	2830      	cmp	r0, #48	; 0x30
 80067fa:	461f      	mov	r7, r3
 80067fc:	f103 0301 	add.w	r3, r3, #1
 8006800:	d0f9      	beq.n	80067f6 <__gethex+0x76>
 8006802:	f7ff ffa7 	bl	8006754 <__hexdig_fun>
 8006806:	2301      	movs	r3, #1
 8006808:	fab0 f480 	clz	r4, r0
 800680c:	0964      	lsrs	r4, r4, #5
 800680e:	4635      	mov	r5, r6
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	463a      	mov	r2, r7
 8006814:	4616      	mov	r6, r2
 8006816:	3201      	adds	r2, #1
 8006818:	7830      	ldrb	r0, [r6, #0]
 800681a:	f7ff ff9b 	bl	8006754 <__hexdig_fun>
 800681e:	2800      	cmp	r0, #0
 8006820:	d1f8      	bne.n	8006814 <__gethex+0x94>
 8006822:	9901      	ldr	r1, [sp, #4]
 8006824:	4652      	mov	r2, sl
 8006826:	4630      	mov	r0, r6
 8006828:	f001 f9c6 	bl	8007bb8 <strncmp>
 800682c:	b980      	cbnz	r0, 8006850 <__gethex+0xd0>
 800682e:	b94d      	cbnz	r5, 8006844 <__gethex+0xc4>
 8006830:	eb06 050a 	add.w	r5, r6, sl
 8006834:	462a      	mov	r2, r5
 8006836:	4616      	mov	r6, r2
 8006838:	3201      	adds	r2, #1
 800683a:	7830      	ldrb	r0, [r6, #0]
 800683c:	f7ff ff8a 	bl	8006754 <__hexdig_fun>
 8006840:	2800      	cmp	r0, #0
 8006842:	d1f8      	bne.n	8006836 <__gethex+0xb6>
 8006844:	1bad      	subs	r5, r5, r6
 8006846:	00ad      	lsls	r5, r5, #2
 8006848:	e004      	b.n	8006854 <__gethex+0xd4>
 800684a:	2400      	movs	r4, #0
 800684c:	4625      	mov	r5, r4
 800684e:	e7e0      	b.n	8006812 <__gethex+0x92>
 8006850:	2d00      	cmp	r5, #0
 8006852:	d1f7      	bne.n	8006844 <__gethex+0xc4>
 8006854:	7833      	ldrb	r3, [r6, #0]
 8006856:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800685a:	2b50      	cmp	r3, #80	; 0x50
 800685c:	d13b      	bne.n	80068d6 <__gethex+0x156>
 800685e:	7873      	ldrb	r3, [r6, #1]
 8006860:	2b2b      	cmp	r3, #43	; 0x2b
 8006862:	d02c      	beq.n	80068be <__gethex+0x13e>
 8006864:	2b2d      	cmp	r3, #45	; 0x2d
 8006866:	d02e      	beq.n	80068c6 <__gethex+0x146>
 8006868:	1c71      	adds	r1, r6, #1
 800686a:	f04f 0900 	mov.w	r9, #0
 800686e:	7808      	ldrb	r0, [r1, #0]
 8006870:	f7ff ff70 	bl	8006754 <__hexdig_fun>
 8006874:	1e43      	subs	r3, r0, #1
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b18      	cmp	r3, #24
 800687a:	d82c      	bhi.n	80068d6 <__gethex+0x156>
 800687c:	f1a0 0210 	sub.w	r2, r0, #16
 8006880:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006884:	f7ff ff66 	bl	8006754 <__hexdig_fun>
 8006888:	1e43      	subs	r3, r0, #1
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b18      	cmp	r3, #24
 800688e:	d91d      	bls.n	80068cc <__gethex+0x14c>
 8006890:	f1b9 0f00 	cmp.w	r9, #0
 8006894:	d000      	beq.n	8006898 <__gethex+0x118>
 8006896:	4252      	negs	r2, r2
 8006898:	4415      	add	r5, r2
 800689a:	f8cb 1000 	str.w	r1, [fp]
 800689e:	b1e4      	cbz	r4, 80068da <__gethex+0x15a>
 80068a0:	9b00      	ldr	r3, [sp, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bf14      	ite	ne
 80068a6:	2700      	movne	r7, #0
 80068a8:	2706      	moveq	r7, #6
 80068aa:	4638      	mov	r0, r7
 80068ac:	b009      	add	sp, #36	; 0x24
 80068ae:	ecbd 8b02 	vpop	{d8}
 80068b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b6:	463e      	mov	r6, r7
 80068b8:	4625      	mov	r5, r4
 80068ba:	2401      	movs	r4, #1
 80068bc:	e7ca      	b.n	8006854 <__gethex+0xd4>
 80068be:	f04f 0900 	mov.w	r9, #0
 80068c2:	1cb1      	adds	r1, r6, #2
 80068c4:	e7d3      	b.n	800686e <__gethex+0xee>
 80068c6:	f04f 0901 	mov.w	r9, #1
 80068ca:	e7fa      	b.n	80068c2 <__gethex+0x142>
 80068cc:	230a      	movs	r3, #10
 80068ce:	fb03 0202 	mla	r2, r3, r2, r0
 80068d2:	3a10      	subs	r2, #16
 80068d4:	e7d4      	b.n	8006880 <__gethex+0x100>
 80068d6:	4631      	mov	r1, r6
 80068d8:	e7df      	b.n	800689a <__gethex+0x11a>
 80068da:	1bf3      	subs	r3, r6, r7
 80068dc:	3b01      	subs	r3, #1
 80068de:	4621      	mov	r1, r4
 80068e0:	2b07      	cmp	r3, #7
 80068e2:	dc0b      	bgt.n	80068fc <__gethex+0x17c>
 80068e4:	ee18 0a10 	vmov	r0, s16
 80068e8:	f000 fa7e 	bl	8006de8 <_Balloc>
 80068ec:	4604      	mov	r4, r0
 80068ee:	b940      	cbnz	r0, 8006902 <__gethex+0x182>
 80068f0:	4b65      	ldr	r3, [pc, #404]	; (8006a88 <__gethex+0x308>)
 80068f2:	4602      	mov	r2, r0
 80068f4:	21de      	movs	r1, #222	; 0xde
 80068f6:	4865      	ldr	r0, [pc, #404]	; (8006a8c <__gethex+0x30c>)
 80068f8:	f001 f97e 	bl	8007bf8 <__assert_func>
 80068fc:	3101      	adds	r1, #1
 80068fe:	105b      	asrs	r3, r3, #1
 8006900:	e7ee      	b.n	80068e0 <__gethex+0x160>
 8006902:	f100 0914 	add.w	r9, r0, #20
 8006906:	f04f 0b00 	mov.w	fp, #0
 800690a:	f1ca 0301 	rsb	r3, sl, #1
 800690e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006912:	f8cd b000 	str.w	fp, [sp]
 8006916:	9306      	str	r3, [sp, #24]
 8006918:	42b7      	cmp	r7, r6
 800691a:	d340      	bcc.n	800699e <__gethex+0x21e>
 800691c:	9802      	ldr	r0, [sp, #8]
 800691e:	9b00      	ldr	r3, [sp, #0]
 8006920:	f840 3b04 	str.w	r3, [r0], #4
 8006924:	eba0 0009 	sub.w	r0, r0, r9
 8006928:	1080      	asrs	r0, r0, #2
 800692a:	0146      	lsls	r6, r0, #5
 800692c:	6120      	str	r0, [r4, #16]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fb50 	bl	8006fd4 <__hi0bits>
 8006934:	1a30      	subs	r0, r6, r0
 8006936:	f8d8 6000 	ldr.w	r6, [r8]
 800693a:	42b0      	cmp	r0, r6
 800693c:	dd63      	ble.n	8006a06 <__gethex+0x286>
 800693e:	1b87      	subs	r7, r0, r6
 8006940:	4639      	mov	r1, r7
 8006942:	4620      	mov	r0, r4
 8006944:	f000 feea 	bl	800771c <__any_on>
 8006948:	4682      	mov	sl, r0
 800694a:	b1a8      	cbz	r0, 8006978 <__gethex+0x1f8>
 800694c:	1e7b      	subs	r3, r7, #1
 800694e:	1159      	asrs	r1, r3, #5
 8006950:	f003 021f 	and.w	r2, r3, #31
 8006954:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006958:	f04f 0a01 	mov.w	sl, #1
 800695c:	fa0a f202 	lsl.w	r2, sl, r2
 8006960:	420a      	tst	r2, r1
 8006962:	d009      	beq.n	8006978 <__gethex+0x1f8>
 8006964:	4553      	cmp	r3, sl
 8006966:	dd05      	ble.n	8006974 <__gethex+0x1f4>
 8006968:	1eb9      	subs	r1, r7, #2
 800696a:	4620      	mov	r0, r4
 800696c:	f000 fed6 	bl	800771c <__any_on>
 8006970:	2800      	cmp	r0, #0
 8006972:	d145      	bne.n	8006a00 <__gethex+0x280>
 8006974:	f04f 0a02 	mov.w	sl, #2
 8006978:	4639      	mov	r1, r7
 800697a:	4620      	mov	r0, r4
 800697c:	f7ff fe98 	bl	80066b0 <rshift>
 8006980:	443d      	add	r5, r7
 8006982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006986:	42ab      	cmp	r3, r5
 8006988:	da4c      	bge.n	8006a24 <__gethex+0x2a4>
 800698a:	ee18 0a10 	vmov	r0, s16
 800698e:	4621      	mov	r1, r4
 8006990:	f000 fa6a 	bl	8006e68 <_Bfree>
 8006994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006996:	2300      	movs	r3, #0
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	27a3      	movs	r7, #163	; 0xa3
 800699c:	e785      	b.n	80068aa <__gethex+0x12a>
 800699e:	1e73      	subs	r3, r6, #1
 80069a0:	9a05      	ldr	r2, [sp, #20]
 80069a2:	9303      	str	r3, [sp, #12]
 80069a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d019      	beq.n	80069e0 <__gethex+0x260>
 80069ac:	f1bb 0f20 	cmp.w	fp, #32
 80069b0:	d107      	bne.n	80069c2 <__gethex+0x242>
 80069b2:	9b02      	ldr	r3, [sp, #8]
 80069b4:	9a00      	ldr	r2, [sp, #0]
 80069b6:	f843 2b04 	str.w	r2, [r3], #4
 80069ba:	9302      	str	r3, [sp, #8]
 80069bc:	2300      	movs	r3, #0
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	469b      	mov	fp, r3
 80069c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80069c6:	f7ff fec5 	bl	8006754 <__hexdig_fun>
 80069ca:	9b00      	ldr	r3, [sp, #0]
 80069cc:	f000 000f 	and.w	r0, r0, #15
 80069d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80069d4:	4303      	orrs	r3, r0
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	f10b 0b04 	add.w	fp, fp, #4
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	e00d      	b.n	80069fc <__gethex+0x27c>
 80069e0:	9b03      	ldr	r3, [sp, #12]
 80069e2:	9a06      	ldr	r2, [sp, #24]
 80069e4:	4413      	add	r3, r2
 80069e6:	42bb      	cmp	r3, r7
 80069e8:	d3e0      	bcc.n	80069ac <__gethex+0x22c>
 80069ea:	4618      	mov	r0, r3
 80069ec:	9901      	ldr	r1, [sp, #4]
 80069ee:	9307      	str	r3, [sp, #28]
 80069f0:	4652      	mov	r2, sl
 80069f2:	f001 f8e1 	bl	8007bb8 <strncmp>
 80069f6:	9b07      	ldr	r3, [sp, #28]
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d1d7      	bne.n	80069ac <__gethex+0x22c>
 80069fc:	461e      	mov	r6, r3
 80069fe:	e78b      	b.n	8006918 <__gethex+0x198>
 8006a00:	f04f 0a03 	mov.w	sl, #3
 8006a04:	e7b8      	b.n	8006978 <__gethex+0x1f8>
 8006a06:	da0a      	bge.n	8006a1e <__gethex+0x29e>
 8006a08:	1a37      	subs	r7, r6, r0
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	ee18 0a10 	vmov	r0, s16
 8006a10:	463a      	mov	r2, r7
 8006a12:	f000 fc45 	bl	80072a0 <__lshift>
 8006a16:	1bed      	subs	r5, r5, r7
 8006a18:	4604      	mov	r4, r0
 8006a1a:	f100 0914 	add.w	r9, r0, #20
 8006a1e:	f04f 0a00 	mov.w	sl, #0
 8006a22:	e7ae      	b.n	8006982 <__gethex+0x202>
 8006a24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006a28:	42a8      	cmp	r0, r5
 8006a2a:	dd72      	ble.n	8006b12 <__gethex+0x392>
 8006a2c:	1b45      	subs	r5, r0, r5
 8006a2e:	42ae      	cmp	r6, r5
 8006a30:	dc36      	bgt.n	8006aa0 <__gethex+0x320>
 8006a32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d02a      	beq.n	8006a90 <__gethex+0x310>
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d02c      	beq.n	8006a98 <__gethex+0x318>
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d115      	bne.n	8006a6e <__gethex+0x2ee>
 8006a42:	42ae      	cmp	r6, r5
 8006a44:	d113      	bne.n	8006a6e <__gethex+0x2ee>
 8006a46:	2e01      	cmp	r6, #1
 8006a48:	d10b      	bne.n	8006a62 <__gethex+0x2e2>
 8006a4a:	9a04      	ldr	r2, [sp, #16]
 8006a4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	2301      	movs	r3, #1
 8006a54:	6123      	str	r3, [r4, #16]
 8006a56:	f8c9 3000 	str.w	r3, [r9]
 8006a5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a5c:	2762      	movs	r7, #98	; 0x62
 8006a5e:	601c      	str	r4, [r3, #0]
 8006a60:	e723      	b.n	80068aa <__gethex+0x12a>
 8006a62:	1e71      	subs	r1, r6, #1
 8006a64:	4620      	mov	r0, r4
 8006a66:	f000 fe59 	bl	800771c <__any_on>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d1ed      	bne.n	8006a4a <__gethex+0x2ca>
 8006a6e:	ee18 0a10 	vmov	r0, s16
 8006a72:	4621      	mov	r1, r4
 8006a74:	f000 f9f8 	bl	8006e68 <_Bfree>
 8006a78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	2750      	movs	r7, #80	; 0x50
 8006a80:	e713      	b.n	80068aa <__gethex+0x12a>
 8006a82:	bf00      	nop
 8006a84:	08009a08 	.word	0x08009a08
 8006a88:	0800998c 	.word	0x0800998c
 8006a8c:	0800999d 	.word	0x0800999d
 8006a90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1eb      	bne.n	8006a6e <__gethex+0x2ee>
 8006a96:	e7d8      	b.n	8006a4a <__gethex+0x2ca>
 8006a98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1d5      	bne.n	8006a4a <__gethex+0x2ca>
 8006a9e:	e7e6      	b.n	8006a6e <__gethex+0x2ee>
 8006aa0:	1e6f      	subs	r7, r5, #1
 8006aa2:	f1ba 0f00 	cmp.w	sl, #0
 8006aa6:	d131      	bne.n	8006b0c <__gethex+0x38c>
 8006aa8:	b127      	cbz	r7, 8006ab4 <__gethex+0x334>
 8006aaa:	4639      	mov	r1, r7
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fe35 	bl	800771c <__any_on>
 8006ab2:	4682      	mov	sl, r0
 8006ab4:	117b      	asrs	r3, r7, #5
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006abc:	f007 071f 	and.w	r7, r7, #31
 8006ac0:	fa01 f707 	lsl.w	r7, r1, r7
 8006ac4:	421f      	tst	r7, r3
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bf18      	it	ne
 8006acc:	f04a 0a02 	orrne.w	sl, sl, #2
 8006ad0:	1b76      	subs	r6, r6, r5
 8006ad2:	f7ff fded 	bl	80066b0 <rshift>
 8006ad6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ada:	2702      	movs	r7, #2
 8006adc:	f1ba 0f00 	cmp.w	sl, #0
 8006ae0:	d048      	beq.n	8006b74 <__gethex+0x3f4>
 8006ae2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d015      	beq.n	8006b16 <__gethex+0x396>
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d017      	beq.n	8006b1e <__gethex+0x39e>
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d109      	bne.n	8006b06 <__gethex+0x386>
 8006af2:	f01a 0f02 	tst.w	sl, #2
 8006af6:	d006      	beq.n	8006b06 <__gethex+0x386>
 8006af8:	f8d9 0000 	ldr.w	r0, [r9]
 8006afc:	ea4a 0a00 	orr.w	sl, sl, r0
 8006b00:	f01a 0f01 	tst.w	sl, #1
 8006b04:	d10e      	bne.n	8006b24 <__gethex+0x3a4>
 8006b06:	f047 0710 	orr.w	r7, r7, #16
 8006b0a:	e033      	b.n	8006b74 <__gethex+0x3f4>
 8006b0c:	f04f 0a01 	mov.w	sl, #1
 8006b10:	e7d0      	b.n	8006ab4 <__gethex+0x334>
 8006b12:	2701      	movs	r7, #1
 8006b14:	e7e2      	b.n	8006adc <__gethex+0x35c>
 8006b16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b18:	f1c3 0301 	rsb	r3, r3, #1
 8006b1c:	9315      	str	r3, [sp, #84]	; 0x54
 8006b1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <__gethex+0x386>
 8006b24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006b28:	f104 0314 	add.w	r3, r4, #20
 8006b2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006b30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006b34:	f04f 0c00 	mov.w	ip, #0
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006b42:	d01c      	beq.n	8006b7e <__gethex+0x3fe>
 8006b44:	3201      	adds	r2, #1
 8006b46:	6002      	str	r2, [r0, #0]
 8006b48:	2f02      	cmp	r7, #2
 8006b4a:	f104 0314 	add.w	r3, r4, #20
 8006b4e:	d13f      	bne.n	8006bd0 <__gethex+0x450>
 8006b50:	f8d8 2000 	ldr.w	r2, [r8]
 8006b54:	3a01      	subs	r2, #1
 8006b56:	42b2      	cmp	r2, r6
 8006b58:	d10a      	bne.n	8006b70 <__gethex+0x3f0>
 8006b5a:	1171      	asrs	r1, r6, #5
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b62:	f006 061f 	and.w	r6, r6, #31
 8006b66:	fa02 f606 	lsl.w	r6, r2, r6
 8006b6a:	421e      	tst	r6, r3
 8006b6c:	bf18      	it	ne
 8006b6e:	4617      	movne	r7, r2
 8006b70:	f047 0720 	orr.w	r7, r7, #32
 8006b74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b76:	601c      	str	r4, [r3, #0]
 8006b78:	9b04      	ldr	r3, [sp, #16]
 8006b7a:	601d      	str	r5, [r3, #0]
 8006b7c:	e695      	b.n	80068aa <__gethex+0x12a>
 8006b7e:	4299      	cmp	r1, r3
 8006b80:	f843 cc04 	str.w	ip, [r3, #-4]
 8006b84:	d8d8      	bhi.n	8006b38 <__gethex+0x3b8>
 8006b86:	68a3      	ldr	r3, [r4, #8]
 8006b88:	459b      	cmp	fp, r3
 8006b8a:	db19      	blt.n	8006bc0 <__gethex+0x440>
 8006b8c:	6861      	ldr	r1, [r4, #4]
 8006b8e:	ee18 0a10 	vmov	r0, s16
 8006b92:	3101      	adds	r1, #1
 8006b94:	f000 f928 	bl	8006de8 <_Balloc>
 8006b98:	4681      	mov	r9, r0
 8006b9a:	b918      	cbnz	r0, 8006ba4 <__gethex+0x424>
 8006b9c:	4b1a      	ldr	r3, [pc, #104]	; (8006c08 <__gethex+0x488>)
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	2184      	movs	r1, #132	; 0x84
 8006ba2:	e6a8      	b.n	80068f6 <__gethex+0x176>
 8006ba4:	6922      	ldr	r2, [r4, #16]
 8006ba6:	3202      	adds	r2, #2
 8006ba8:	f104 010c 	add.w	r1, r4, #12
 8006bac:	0092      	lsls	r2, r2, #2
 8006bae:	300c      	adds	r0, #12
 8006bb0:	f000 f90c 	bl	8006dcc <memcpy>
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	ee18 0a10 	vmov	r0, s16
 8006bba:	f000 f955 	bl	8006e68 <_Bfree>
 8006bbe:	464c      	mov	r4, r9
 8006bc0:	6923      	ldr	r3, [r4, #16]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006bc8:	6122      	str	r2, [r4, #16]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	615a      	str	r2, [r3, #20]
 8006bce:	e7bb      	b.n	8006b48 <__gethex+0x3c8>
 8006bd0:	6922      	ldr	r2, [r4, #16]
 8006bd2:	455a      	cmp	r2, fp
 8006bd4:	dd0b      	ble.n	8006bee <__gethex+0x46e>
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f7ff fd69 	bl	80066b0 <rshift>
 8006bde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006be2:	3501      	adds	r5, #1
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	f6ff aed0 	blt.w	800698a <__gethex+0x20a>
 8006bea:	2701      	movs	r7, #1
 8006bec:	e7c0      	b.n	8006b70 <__gethex+0x3f0>
 8006bee:	f016 061f 	ands.w	r6, r6, #31
 8006bf2:	d0fa      	beq.n	8006bea <__gethex+0x46a>
 8006bf4:	449a      	add	sl, r3
 8006bf6:	f1c6 0620 	rsb	r6, r6, #32
 8006bfa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006bfe:	f000 f9e9 	bl	8006fd4 <__hi0bits>
 8006c02:	42b0      	cmp	r0, r6
 8006c04:	dbe7      	blt.n	8006bd6 <__gethex+0x456>
 8006c06:	e7f0      	b.n	8006bea <__gethex+0x46a>
 8006c08:	0800998c 	.word	0x0800998c

08006c0c <L_shift>:
 8006c0c:	f1c2 0208 	rsb	r2, r2, #8
 8006c10:	0092      	lsls	r2, r2, #2
 8006c12:	b570      	push	{r4, r5, r6, lr}
 8006c14:	f1c2 0620 	rsb	r6, r2, #32
 8006c18:	6843      	ldr	r3, [r0, #4]
 8006c1a:	6804      	ldr	r4, [r0, #0]
 8006c1c:	fa03 f506 	lsl.w	r5, r3, r6
 8006c20:	432c      	orrs	r4, r5
 8006c22:	40d3      	lsrs	r3, r2
 8006c24:	6004      	str	r4, [r0, #0]
 8006c26:	f840 3f04 	str.w	r3, [r0, #4]!
 8006c2a:	4288      	cmp	r0, r1
 8006c2c:	d3f4      	bcc.n	8006c18 <L_shift+0xc>
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}

08006c30 <__match>:
 8006c30:	b530      	push	{r4, r5, lr}
 8006c32:	6803      	ldr	r3, [r0, #0]
 8006c34:	3301      	adds	r3, #1
 8006c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c3a:	b914      	cbnz	r4, 8006c42 <__match+0x12>
 8006c3c:	6003      	str	r3, [r0, #0]
 8006c3e:	2001      	movs	r0, #1
 8006c40:	bd30      	pop	{r4, r5, pc}
 8006c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006c4a:	2d19      	cmp	r5, #25
 8006c4c:	bf98      	it	ls
 8006c4e:	3220      	addls	r2, #32
 8006c50:	42a2      	cmp	r2, r4
 8006c52:	d0f0      	beq.n	8006c36 <__match+0x6>
 8006c54:	2000      	movs	r0, #0
 8006c56:	e7f3      	b.n	8006c40 <__match+0x10>

08006c58 <__hexnan>:
 8006c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5c:	680b      	ldr	r3, [r1, #0]
 8006c5e:	6801      	ldr	r1, [r0, #0]
 8006c60:	115e      	asrs	r6, r3, #5
 8006c62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006c66:	f013 031f 	ands.w	r3, r3, #31
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	bf18      	it	ne
 8006c6e:	3604      	addne	r6, #4
 8006c70:	2500      	movs	r5, #0
 8006c72:	1f37      	subs	r7, r6, #4
 8006c74:	4682      	mov	sl, r0
 8006c76:	4690      	mov	r8, r2
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8006c7e:	46b9      	mov	r9, r7
 8006c80:	463c      	mov	r4, r7
 8006c82:	9502      	str	r5, [sp, #8]
 8006c84:	46ab      	mov	fp, r5
 8006c86:	784a      	ldrb	r2, [r1, #1]
 8006c88:	1c4b      	adds	r3, r1, #1
 8006c8a:	9303      	str	r3, [sp, #12]
 8006c8c:	b342      	cbz	r2, 8006ce0 <__hexnan+0x88>
 8006c8e:	4610      	mov	r0, r2
 8006c90:	9105      	str	r1, [sp, #20]
 8006c92:	9204      	str	r2, [sp, #16]
 8006c94:	f7ff fd5e 	bl	8006754 <__hexdig_fun>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d14f      	bne.n	8006d3c <__hexnan+0xe4>
 8006c9c:	9a04      	ldr	r2, [sp, #16]
 8006c9e:	9905      	ldr	r1, [sp, #20]
 8006ca0:	2a20      	cmp	r2, #32
 8006ca2:	d818      	bhi.n	8006cd6 <__hexnan+0x7e>
 8006ca4:	9b02      	ldr	r3, [sp, #8]
 8006ca6:	459b      	cmp	fp, r3
 8006ca8:	dd13      	ble.n	8006cd2 <__hexnan+0x7a>
 8006caa:	454c      	cmp	r4, r9
 8006cac:	d206      	bcs.n	8006cbc <__hexnan+0x64>
 8006cae:	2d07      	cmp	r5, #7
 8006cb0:	dc04      	bgt.n	8006cbc <__hexnan+0x64>
 8006cb2:	462a      	mov	r2, r5
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f7ff ffa8 	bl	8006c0c <L_shift>
 8006cbc:	4544      	cmp	r4, r8
 8006cbe:	d950      	bls.n	8006d62 <__hexnan+0x10a>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f1a4 0904 	sub.w	r9, r4, #4
 8006cc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8006cca:	f8cd b008 	str.w	fp, [sp, #8]
 8006cce:	464c      	mov	r4, r9
 8006cd0:	461d      	mov	r5, r3
 8006cd2:	9903      	ldr	r1, [sp, #12]
 8006cd4:	e7d7      	b.n	8006c86 <__hexnan+0x2e>
 8006cd6:	2a29      	cmp	r2, #41	; 0x29
 8006cd8:	d156      	bne.n	8006d88 <__hexnan+0x130>
 8006cda:	3102      	adds	r1, #2
 8006cdc:	f8ca 1000 	str.w	r1, [sl]
 8006ce0:	f1bb 0f00 	cmp.w	fp, #0
 8006ce4:	d050      	beq.n	8006d88 <__hexnan+0x130>
 8006ce6:	454c      	cmp	r4, r9
 8006ce8:	d206      	bcs.n	8006cf8 <__hexnan+0xa0>
 8006cea:	2d07      	cmp	r5, #7
 8006cec:	dc04      	bgt.n	8006cf8 <__hexnan+0xa0>
 8006cee:	462a      	mov	r2, r5
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f7ff ff8a 	bl	8006c0c <L_shift>
 8006cf8:	4544      	cmp	r4, r8
 8006cfa:	d934      	bls.n	8006d66 <__hexnan+0x10e>
 8006cfc:	f1a8 0204 	sub.w	r2, r8, #4
 8006d00:	4623      	mov	r3, r4
 8006d02:	f853 1b04 	ldr.w	r1, [r3], #4
 8006d06:	f842 1f04 	str.w	r1, [r2, #4]!
 8006d0a:	429f      	cmp	r7, r3
 8006d0c:	d2f9      	bcs.n	8006d02 <__hexnan+0xaa>
 8006d0e:	1b3b      	subs	r3, r7, r4
 8006d10:	f023 0303 	bic.w	r3, r3, #3
 8006d14:	3304      	adds	r3, #4
 8006d16:	3401      	adds	r4, #1
 8006d18:	3e03      	subs	r6, #3
 8006d1a:	42b4      	cmp	r4, r6
 8006d1c:	bf88      	it	hi
 8006d1e:	2304      	movhi	r3, #4
 8006d20:	4443      	add	r3, r8
 8006d22:	2200      	movs	r2, #0
 8006d24:	f843 2b04 	str.w	r2, [r3], #4
 8006d28:	429f      	cmp	r7, r3
 8006d2a:	d2fb      	bcs.n	8006d24 <__hexnan+0xcc>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	b91b      	cbnz	r3, 8006d38 <__hexnan+0xe0>
 8006d30:	4547      	cmp	r7, r8
 8006d32:	d127      	bne.n	8006d84 <__hexnan+0x12c>
 8006d34:	2301      	movs	r3, #1
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	2005      	movs	r0, #5
 8006d3a:	e026      	b.n	8006d8a <__hexnan+0x132>
 8006d3c:	3501      	adds	r5, #1
 8006d3e:	2d08      	cmp	r5, #8
 8006d40:	f10b 0b01 	add.w	fp, fp, #1
 8006d44:	dd06      	ble.n	8006d54 <__hexnan+0xfc>
 8006d46:	4544      	cmp	r4, r8
 8006d48:	d9c3      	bls.n	8006cd2 <__hexnan+0x7a>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d50:	2501      	movs	r5, #1
 8006d52:	3c04      	subs	r4, #4
 8006d54:	6822      	ldr	r2, [r4, #0]
 8006d56:	f000 000f 	and.w	r0, r0, #15
 8006d5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006d5e:	6022      	str	r2, [r4, #0]
 8006d60:	e7b7      	b.n	8006cd2 <__hexnan+0x7a>
 8006d62:	2508      	movs	r5, #8
 8006d64:	e7b5      	b.n	8006cd2 <__hexnan+0x7a>
 8006d66:	9b01      	ldr	r3, [sp, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0df      	beq.n	8006d2c <__hexnan+0xd4>
 8006d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d70:	f1c3 0320 	rsb	r3, r3, #32
 8006d74:	fa22 f303 	lsr.w	r3, r2, r3
 8006d78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006d7c:	401a      	ands	r2, r3
 8006d7e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006d82:	e7d3      	b.n	8006d2c <__hexnan+0xd4>
 8006d84:	3f04      	subs	r7, #4
 8006d86:	e7d1      	b.n	8006d2c <__hexnan+0xd4>
 8006d88:	2004      	movs	r0, #4
 8006d8a:	b007      	add	sp, #28
 8006d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d90 <_localeconv_r>:
 8006d90:	4800      	ldr	r0, [pc, #0]	; (8006d94 <_localeconv_r+0x4>)
 8006d92:	4770      	bx	lr
 8006d94:	20000160 	.word	0x20000160

08006d98 <malloc>:
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <malloc+0xc>)
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f000 bd3d 	b.w	800781c <_malloc_r>
 8006da2:	bf00      	nop
 8006da4:	20000008 	.word	0x20000008

08006da8 <__ascii_mbtowc>:
 8006da8:	b082      	sub	sp, #8
 8006daa:	b901      	cbnz	r1, 8006dae <__ascii_mbtowc+0x6>
 8006dac:	a901      	add	r1, sp, #4
 8006dae:	b142      	cbz	r2, 8006dc2 <__ascii_mbtowc+0x1a>
 8006db0:	b14b      	cbz	r3, 8006dc6 <__ascii_mbtowc+0x1e>
 8006db2:	7813      	ldrb	r3, [r2, #0]
 8006db4:	600b      	str	r3, [r1, #0]
 8006db6:	7812      	ldrb	r2, [r2, #0]
 8006db8:	1e10      	subs	r0, r2, #0
 8006dba:	bf18      	it	ne
 8006dbc:	2001      	movne	r0, #1
 8006dbe:	b002      	add	sp, #8
 8006dc0:	4770      	bx	lr
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	e7fb      	b.n	8006dbe <__ascii_mbtowc+0x16>
 8006dc6:	f06f 0001 	mvn.w	r0, #1
 8006dca:	e7f8      	b.n	8006dbe <__ascii_mbtowc+0x16>

08006dcc <memcpy>:
 8006dcc:	440a      	add	r2, r1
 8006dce:	4291      	cmp	r1, r2
 8006dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dd4:	d100      	bne.n	8006dd8 <memcpy+0xc>
 8006dd6:	4770      	bx	lr
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de2:	4291      	cmp	r1, r2
 8006de4:	d1f9      	bne.n	8006dda <memcpy+0xe>
 8006de6:	bd10      	pop	{r4, pc}

08006de8 <_Balloc>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dec:	4604      	mov	r4, r0
 8006dee:	460d      	mov	r5, r1
 8006df0:	b976      	cbnz	r6, 8006e10 <_Balloc+0x28>
 8006df2:	2010      	movs	r0, #16
 8006df4:	f7ff ffd0 	bl	8006d98 <malloc>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	6260      	str	r0, [r4, #36]	; 0x24
 8006dfc:	b920      	cbnz	r0, 8006e08 <_Balloc+0x20>
 8006dfe:	4b18      	ldr	r3, [pc, #96]	; (8006e60 <_Balloc+0x78>)
 8006e00:	4818      	ldr	r0, [pc, #96]	; (8006e64 <_Balloc+0x7c>)
 8006e02:	2166      	movs	r1, #102	; 0x66
 8006e04:	f000 fef8 	bl	8007bf8 <__assert_func>
 8006e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e0c:	6006      	str	r6, [r0, #0]
 8006e0e:	60c6      	str	r6, [r0, #12]
 8006e10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e12:	68f3      	ldr	r3, [r6, #12]
 8006e14:	b183      	cbz	r3, 8006e38 <_Balloc+0x50>
 8006e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e1e:	b9b8      	cbnz	r0, 8006e50 <_Balloc+0x68>
 8006e20:	2101      	movs	r1, #1
 8006e22:	fa01 f605 	lsl.w	r6, r1, r5
 8006e26:	1d72      	adds	r2, r6, #5
 8006e28:	0092      	lsls	r2, r2, #2
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 fc97 	bl	800775e <_calloc_r>
 8006e30:	b160      	cbz	r0, 8006e4c <_Balloc+0x64>
 8006e32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e36:	e00e      	b.n	8006e56 <_Balloc+0x6e>
 8006e38:	2221      	movs	r2, #33	; 0x21
 8006e3a:	2104      	movs	r1, #4
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f000 fc8e 	bl	800775e <_calloc_r>
 8006e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e44:	60f0      	str	r0, [r6, #12]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e4      	bne.n	8006e16 <_Balloc+0x2e>
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	6802      	ldr	r2, [r0, #0]
 8006e52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e56:	2300      	movs	r3, #0
 8006e58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e5c:	e7f7      	b.n	8006e4e <_Balloc+0x66>
 8006e5e:	bf00      	nop
 8006e60:	08009916 	.word	0x08009916
 8006e64:	08009a1c 	.word	0x08009a1c

08006e68 <_Bfree>:
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	b976      	cbnz	r6, 8006e90 <_Bfree+0x28>
 8006e72:	2010      	movs	r0, #16
 8006e74:	f7ff ff90 	bl	8006d98 <malloc>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	6268      	str	r0, [r5, #36]	; 0x24
 8006e7c:	b920      	cbnz	r0, 8006e88 <_Bfree+0x20>
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <_Bfree+0x3c>)
 8006e80:	4809      	ldr	r0, [pc, #36]	; (8006ea8 <_Bfree+0x40>)
 8006e82:	218a      	movs	r1, #138	; 0x8a
 8006e84:	f000 feb8 	bl	8007bf8 <__assert_func>
 8006e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e8c:	6006      	str	r6, [r0, #0]
 8006e8e:	60c6      	str	r6, [r0, #12]
 8006e90:	b13c      	cbz	r4, 8006ea2 <_Bfree+0x3a>
 8006e92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e94:	6862      	ldr	r2, [r4, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e9c:	6021      	str	r1, [r4, #0]
 8006e9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	08009916 	.word	0x08009916
 8006ea8:	08009a1c 	.word	0x08009a1c

08006eac <__multadd>:
 8006eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb0:	690e      	ldr	r6, [r1, #16]
 8006eb2:	4607      	mov	r7, r0
 8006eb4:	4698      	mov	r8, r3
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	f101 0014 	add.w	r0, r1, #20
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	6805      	ldr	r5, [r0, #0]
 8006ec0:	b2a9      	uxth	r1, r5
 8006ec2:	fb02 8101 	mla	r1, r2, r1, r8
 8006ec6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006eca:	0c2d      	lsrs	r5, r5, #16
 8006ecc:	fb02 c505 	mla	r5, r2, r5, ip
 8006ed0:	b289      	uxth	r1, r1
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006ed8:	429e      	cmp	r6, r3
 8006eda:	f840 1b04 	str.w	r1, [r0], #4
 8006ede:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006ee2:	dcec      	bgt.n	8006ebe <__multadd+0x12>
 8006ee4:	f1b8 0f00 	cmp.w	r8, #0
 8006ee8:	d022      	beq.n	8006f30 <__multadd+0x84>
 8006eea:	68a3      	ldr	r3, [r4, #8]
 8006eec:	42b3      	cmp	r3, r6
 8006eee:	dc19      	bgt.n	8006f24 <__multadd+0x78>
 8006ef0:	6861      	ldr	r1, [r4, #4]
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	3101      	adds	r1, #1
 8006ef6:	f7ff ff77 	bl	8006de8 <_Balloc>
 8006efa:	4605      	mov	r5, r0
 8006efc:	b928      	cbnz	r0, 8006f0a <__multadd+0x5e>
 8006efe:	4602      	mov	r2, r0
 8006f00:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <__multadd+0x8c>)
 8006f02:	480e      	ldr	r0, [pc, #56]	; (8006f3c <__multadd+0x90>)
 8006f04:	21b5      	movs	r1, #181	; 0xb5
 8006f06:	f000 fe77 	bl	8007bf8 <__assert_func>
 8006f0a:	6922      	ldr	r2, [r4, #16]
 8006f0c:	3202      	adds	r2, #2
 8006f0e:	f104 010c 	add.w	r1, r4, #12
 8006f12:	0092      	lsls	r2, r2, #2
 8006f14:	300c      	adds	r0, #12
 8006f16:	f7ff ff59 	bl	8006dcc <memcpy>
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f7ff ffa3 	bl	8006e68 <_Bfree>
 8006f22:	462c      	mov	r4, r5
 8006f24:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006f28:	3601      	adds	r6, #1
 8006f2a:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f2e:	6126      	str	r6, [r4, #16]
 8006f30:	4620      	mov	r0, r4
 8006f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f36:	bf00      	nop
 8006f38:	0800998c 	.word	0x0800998c
 8006f3c:	08009a1c 	.word	0x08009a1c

08006f40 <__s2b>:
 8006f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	460c      	mov	r4, r1
 8006f46:	4615      	mov	r5, r2
 8006f48:	461f      	mov	r7, r3
 8006f4a:	2209      	movs	r2, #9
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	4606      	mov	r6, r0
 8006f50:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f54:	2100      	movs	r1, #0
 8006f56:	2201      	movs	r2, #1
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	db09      	blt.n	8006f70 <__s2b+0x30>
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f7ff ff43 	bl	8006de8 <_Balloc>
 8006f62:	b940      	cbnz	r0, 8006f76 <__s2b+0x36>
 8006f64:	4602      	mov	r2, r0
 8006f66:	4b19      	ldr	r3, [pc, #100]	; (8006fcc <__s2b+0x8c>)
 8006f68:	4819      	ldr	r0, [pc, #100]	; (8006fd0 <__s2b+0x90>)
 8006f6a:	21ce      	movs	r1, #206	; 0xce
 8006f6c:	f000 fe44 	bl	8007bf8 <__assert_func>
 8006f70:	0052      	lsls	r2, r2, #1
 8006f72:	3101      	adds	r1, #1
 8006f74:	e7f0      	b.n	8006f58 <__s2b+0x18>
 8006f76:	9b08      	ldr	r3, [sp, #32]
 8006f78:	6143      	str	r3, [r0, #20]
 8006f7a:	2d09      	cmp	r5, #9
 8006f7c:	f04f 0301 	mov.w	r3, #1
 8006f80:	6103      	str	r3, [r0, #16]
 8006f82:	dd16      	ble.n	8006fb2 <__s2b+0x72>
 8006f84:	f104 0909 	add.w	r9, r4, #9
 8006f88:	46c8      	mov	r8, r9
 8006f8a:	442c      	add	r4, r5
 8006f8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f90:	4601      	mov	r1, r0
 8006f92:	3b30      	subs	r3, #48	; 0x30
 8006f94:	220a      	movs	r2, #10
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff ff88 	bl	8006eac <__multadd>
 8006f9c:	45a0      	cmp	r8, r4
 8006f9e:	d1f5      	bne.n	8006f8c <__s2b+0x4c>
 8006fa0:	f1a5 0408 	sub.w	r4, r5, #8
 8006fa4:	444c      	add	r4, r9
 8006fa6:	1b2d      	subs	r5, r5, r4
 8006fa8:	1963      	adds	r3, r4, r5
 8006faa:	42bb      	cmp	r3, r7
 8006fac:	db04      	blt.n	8006fb8 <__s2b+0x78>
 8006fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb2:	340a      	adds	r4, #10
 8006fb4:	2509      	movs	r5, #9
 8006fb6:	e7f6      	b.n	8006fa6 <__s2b+0x66>
 8006fb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006fbc:	4601      	mov	r1, r0
 8006fbe:	3b30      	subs	r3, #48	; 0x30
 8006fc0:	220a      	movs	r2, #10
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f7ff ff72 	bl	8006eac <__multadd>
 8006fc8:	e7ee      	b.n	8006fa8 <__s2b+0x68>
 8006fca:	bf00      	nop
 8006fcc:	0800998c 	.word	0x0800998c
 8006fd0:	08009a1c 	.word	0x08009a1c

08006fd4 <__hi0bits>:
 8006fd4:	0c03      	lsrs	r3, r0, #16
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	b9d3      	cbnz	r3, 8007010 <__hi0bits+0x3c>
 8006fda:	0400      	lsls	r0, r0, #16
 8006fdc:	2310      	movs	r3, #16
 8006fde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006fe2:	bf04      	itt	eq
 8006fe4:	0200      	lsleq	r0, r0, #8
 8006fe6:	3308      	addeq	r3, #8
 8006fe8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fec:	bf04      	itt	eq
 8006fee:	0100      	lsleq	r0, r0, #4
 8006ff0:	3304      	addeq	r3, #4
 8006ff2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ff6:	bf04      	itt	eq
 8006ff8:	0080      	lsleq	r0, r0, #2
 8006ffa:	3302      	addeq	r3, #2
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	db05      	blt.n	800700c <__hi0bits+0x38>
 8007000:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007004:	f103 0301 	add.w	r3, r3, #1
 8007008:	bf08      	it	eq
 800700a:	2320      	moveq	r3, #32
 800700c:	4618      	mov	r0, r3
 800700e:	4770      	bx	lr
 8007010:	2300      	movs	r3, #0
 8007012:	e7e4      	b.n	8006fde <__hi0bits+0xa>

08007014 <__lo0bits>:
 8007014:	6803      	ldr	r3, [r0, #0]
 8007016:	f013 0207 	ands.w	r2, r3, #7
 800701a:	4601      	mov	r1, r0
 800701c:	d00b      	beq.n	8007036 <__lo0bits+0x22>
 800701e:	07da      	lsls	r2, r3, #31
 8007020:	d424      	bmi.n	800706c <__lo0bits+0x58>
 8007022:	0798      	lsls	r0, r3, #30
 8007024:	bf49      	itett	mi
 8007026:	085b      	lsrmi	r3, r3, #1
 8007028:	089b      	lsrpl	r3, r3, #2
 800702a:	2001      	movmi	r0, #1
 800702c:	600b      	strmi	r3, [r1, #0]
 800702e:	bf5c      	itt	pl
 8007030:	600b      	strpl	r3, [r1, #0]
 8007032:	2002      	movpl	r0, #2
 8007034:	4770      	bx	lr
 8007036:	b298      	uxth	r0, r3
 8007038:	b9b0      	cbnz	r0, 8007068 <__lo0bits+0x54>
 800703a:	0c1b      	lsrs	r3, r3, #16
 800703c:	2010      	movs	r0, #16
 800703e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007042:	bf04      	itt	eq
 8007044:	0a1b      	lsreq	r3, r3, #8
 8007046:	3008      	addeq	r0, #8
 8007048:	071a      	lsls	r2, r3, #28
 800704a:	bf04      	itt	eq
 800704c:	091b      	lsreq	r3, r3, #4
 800704e:	3004      	addeq	r0, #4
 8007050:	079a      	lsls	r2, r3, #30
 8007052:	bf04      	itt	eq
 8007054:	089b      	lsreq	r3, r3, #2
 8007056:	3002      	addeq	r0, #2
 8007058:	07da      	lsls	r2, r3, #31
 800705a:	d403      	bmi.n	8007064 <__lo0bits+0x50>
 800705c:	085b      	lsrs	r3, r3, #1
 800705e:	f100 0001 	add.w	r0, r0, #1
 8007062:	d005      	beq.n	8007070 <__lo0bits+0x5c>
 8007064:	600b      	str	r3, [r1, #0]
 8007066:	4770      	bx	lr
 8007068:	4610      	mov	r0, r2
 800706a:	e7e8      	b.n	800703e <__lo0bits+0x2a>
 800706c:	2000      	movs	r0, #0
 800706e:	4770      	bx	lr
 8007070:	2020      	movs	r0, #32
 8007072:	4770      	bx	lr

08007074 <__i2b>:
 8007074:	b510      	push	{r4, lr}
 8007076:	460c      	mov	r4, r1
 8007078:	2101      	movs	r1, #1
 800707a:	f7ff feb5 	bl	8006de8 <_Balloc>
 800707e:	4602      	mov	r2, r0
 8007080:	b928      	cbnz	r0, 800708e <__i2b+0x1a>
 8007082:	4b05      	ldr	r3, [pc, #20]	; (8007098 <__i2b+0x24>)
 8007084:	4805      	ldr	r0, [pc, #20]	; (800709c <__i2b+0x28>)
 8007086:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800708a:	f000 fdb5 	bl	8007bf8 <__assert_func>
 800708e:	2301      	movs	r3, #1
 8007090:	6144      	str	r4, [r0, #20]
 8007092:	6103      	str	r3, [r0, #16]
 8007094:	bd10      	pop	{r4, pc}
 8007096:	bf00      	nop
 8007098:	0800998c 	.word	0x0800998c
 800709c:	08009a1c 	.word	0x08009a1c

080070a0 <__multiply>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	4614      	mov	r4, r2
 80070a6:	690a      	ldr	r2, [r1, #16]
 80070a8:	6923      	ldr	r3, [r4, #16]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	bfb8      	it	lt
 80070ae:	460b      	movlt	r3, r1
 80070b0:	460d      	mov	r5, r1
 80070b2:	bfbc      	itt	lt
 80070b4:	4625      	movlt	r5, r4
 80070b6:	461c      	movlt	r4, r3
 80070b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80070bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80070c0:	68ab      	ldr	r3, [r5, #8]
 80070c2:	6869      	ldr	r1, [r5, #4]
 80070c4:	eb0a 0709 	add.w	r7, sl, r9
 80070c8:	42bb      	cmp	r3, r7
 80070ca:	b085      	sub	sp, #20
 80070cc:	bfb8      	it	lt
 80070ce:	3101      	addlt	r1, #1
 80070d0:	f7ff fe8a 	bl	8006de8 <_Balloc>
 80070d4:	b930      	cbnz	r0, 80070e4 <__multiply+0x44>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b42      	ldr	r3, [pc, #264]	; (80071e4 <__multiply+0x144>)
 80070da:	4843      	ldr	r0, [pc, #268]	; (80071e8 <__multiply+0x148>)
 80070dc:	f240 115d 	movw	r1, #349	; 0x15d
 80070e0:	f000 fd8a 	bl	8007bf8 <__assert_func>
 80070e4:	f100 0614 	add.w	r6, r0, #20
 80070e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80070ec:	4633      	mov	r3, r6
 80070ee:	2200      	movs	r2, #0
 80070f0:	4543      	cmp	r3, r8
 80070f2:	d31e      	bcc.n	8007132 <__multiply+0x92>
 80070f4:	f105 0c14 	add.w	ip, r5, #20
 80070f8:	f104 0314 	add.w	r3, r4, #20
 80070fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007100:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007104:	9202      	str	r2, [sp, #8]
 8007106:	ebac 0205 	sub.w	r2, ip, r5
 800710a:	3a15      	subs	r2, #21
 800710c:	f022 0203 	bic.w	r2, r2, #3
 8007110:	3204      	adds	r2, #4
 8007112:	f105 0115 	add.w	r1, r5, #21
 8007116:	458c      	cmp	ip, r1
 8007118:	bf38      	it	cc
 800711a:	2204      	movcc	r2, #4
 800711c:	9201      	str	r2, [sp, #4]
 800711e:	9a02      	ldr	r2, [sp, #8]
 8007120:	9303      	str	r3, [sp, #12]
 8007122:	429a      	cmp	r2, r3
 8007124:	d808      	bhi.n	8007138 <__multiply+0x98>
 8007126:	2f00      	cmp	r7, #0
 8007128:	dc55      	bgt.n	80071d6 <__multiply+0x136>
 800712a:	6107      	str	r7, [r0, #16]
 800712c:	b005      	add	sp, #20
 800712e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007132:	f843 2b04 	str.w	r2, [r3], #4
 8007136:	e7db      	b.n	80070f0 <__multiply+0x50>
 8007138:	f8b3 a000 	ldrh.w	sl, [r3]
 800713c:	f1ba 0f00 	cmp.w	sl, #0
 8007140:	d020      	beq.n	8007184 <__multiply+0xe4>
 8007142:	f105 0e14 	add.w	lr, r5, #20
 8007146:	46b1      	mov	r9, r6
 8007148:	2200      	movs	r2, #0
 800714a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800714e:	f8d9 b000 	ldr.w	fp, [r9]
 8007152:	b2a1      	uxth	r1, r4
 8007154:	fa1f fb8b 	uxth.w	fp, fp
 8007158:	fb0a b101 	mla	r1, sl, r1, fp
 800715c:	4411      	add	r1, r2
 800715e:	f8d9 2000 	ldr.w	r2, [r9]
 8007162:	0c24      	lsrs	r4, r4, #16
 8007164:	0c12      	lsrs	r2, r2, #16
 8007166:	fb0a 2404 	mla	r4, sl, r4, r2
 800716a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800716e:	b289      	uxth	r1, r1
 8007170:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007174:	45f4      	cmp	ip, lr
 8007176:	f849 1b04 	str.w	r1, [r9], #4
 800717a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800717e:	d8e4      	bhi.n	800714a <__multiply+0xaa>
 8007180:	9901      	ldr	r1, [sp, #4]
 8007182:	5072      	str	r2, [r6, r1]
 8007184:	9a03      	ldr	r2, [sp, #12]
 8007186:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800718a:	3304      	adds	r3, #4
 800718c:	f1b9 0f00 	cmp.w	r9, #0
 8007190:	d01f      	beq.n	80071d2 <__multiply+0x132>
 8007192:	6834      	ldr	r4, [r6, #0]
 8007194:	f105 0114 	add.w	r1, r5, #20
 8007198:	46b6      	mov	lr, r6
 800719a:	f04f 0a00 	mov.w	sl, #0
 800719e:	880a      	ldrh	r2, [r1, #0]
 80071a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80071a4:	fb09 b202 	mla	r2, r9, r2, fp
 80071a8:	4492      	add	sl, r2
 80071aa:	b2a4      	uxth	r4, r4
 80071ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80071b0:	f84e 4b04 	str.w	r4, [lr], #4
 80071b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80071b8:	f8be 2000 	ldrh.w	r2, [lr]
 80071bc:	0c24      	lsrs	r4, r4, #16
 80071be:	fb09 2404 	mla	r4, r9, r4, r2
 80071c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80071c6:	458c      	cmp	ip, r1
 80071c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071cc:	d8e7      	bhi.n	800719e <__multiply+0xfe>
 80071ce:	9a01      	ldr	r2, [sp, #4]
 80071d0:	50b4      	str	r4, [r6, r2]
 80071d2:	3604      	adds	r6, #4
 80071d4:	e7a3      	b.n	800711e <__multiply+0x7e>
 80071d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1a5      	bne.n	800712a <__multiply+0x8a>
 80071de:	3f01      	subs	r7, #1
 80071e0:	e7a1      	b.n	8007126 <__multiply+0x86>
 80071e2:	bf00      	nop
 80071e4:	0800998c 	.word	0x0800998c
 80071e8:	08009a1c 	.word	0x08009a1c

080071ec <__pow5mult>:
 80071ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f0:	4615      	mov	r5, r2
 80071f2:	f012 0203 	ands.w	r2, r2, #3
 80071f6:	4606      	mov	r6, r0
 80071f8:	460f      	mov	r7, r1
 80071fa:	d007      	beq.n	800720c <__pow5mult+0x20>
 80071fc:	4c25      	ldr	r4, [pc, #148]	; (8007294 <__pow5mult+0xa8>)
 80071fe:	3a01      	subs	r2, #1
 8007200:	2300      	movs	r3, #0
 8007202:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007206:	f7ff fe51 	bl	8006eac <__multadd>
 800720a:	4607      	mov	r7, r0
 800720c:	10ad      	asrs	r5, r5, #2
 800720e:	d03d      	beq.n	800728c <__pow5mult+0xa0>
 8007210:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007212:	b97c      	cbnz	r4, 8007234 <__pow5mult+0x48>
 8007214:	2010      	movs	r0, #16
 8007216:	f7ff fdbf 	bl	8006d98 <malloc>
 800721a:	4602      	mov	r2, r0
 800721c:	6270      	str	r0, [r6, #36]	; 0x24
 800721e:	b928      	cbnz	r0, 800722c <__pow5mult+0x40>
 8007220:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <__pow5mult+0xac>)
 8007222:	481e      	ldr	r0, [pc, #120]	; (800729c <__pow5mult+0xb0>)
 8007224:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007228:	f000 fce6 	bl	8007bf8 <__assert_func>
 800722c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007230:	6004      	str	r4, [r0, #0]
 8007232:	60c4      	str	r4, [r0, #12]
 8007234:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007238:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800723c:	b94c      	cbnz	r4, 8007252 <__pow5mult+0x66>
 800723e:	f240 2171 	movw	r1, #625	; 0x271
 8007242:	4630      	mov	r0, r6
 8007244:	f7ff ff16 	bl	8007074 <__i2b>
 8007248:	2300      	movs	r3, #0
 800724a:	f8c8 0008 	str.w	r0, [r8, #8]
 800724e:	4604      	mov	r4, r0
 8007250:	6003      	str	r3, [r0, #0]
 8007252:	f04f 0900 	mov.w	r9, #0
 8007256:	07eb      	lsls	r3, r5, #31
 8007258:	d50a      	bpl.n	8007270 <__pow5mult+0x84>
 800725a:	4639      	mov	r1, r7
 800725c:	4622      	mov	r2, r4
 800725e:	4630      	mov	r0, r6
 8007260:	f7ff ff1e 	bl	80070a0 <__multiply>
 8007264:	4639      	mov	r1, r7
 8007266:	4680      	mov	r8, r0
 8007268:	4630      	mov	r0, r6
 800726a:	f7ff fdfd 	bl	8006e68 <_Bfree>
 800726e:	4647      	mov	r7, r8
 8007270:	106d      	asrs	r5, r5, #1
 8007272:	d00b      	beq.n	800728c <__pow5mult+0xa0>
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	b938      	cbnz	r0, 8007288 <__pow5mult+0x9c>
 8007278:	4622      	mov	r2, r4
 800727a:	4621      	mov	r1, r4
 800727c:	4630      	mov	r0, r6
 800727e:	f7ff ff0f 	bl	80070a0 <__multiply>
 8007282:	6020      	str	r0, [r4, #0]
 8007284:	f8c0 9000 	str.w	r9, [r0]
 8007288:	4604      	mov	r4, r0
 800728a:	e7e4      	b.n	8007256 <__pow5mult+0x6a>
 800728c:	4638      	mov	r0, r7
 800728e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007292:	bf00      	nop
 8007294:	08009b70 	.word	0x08009b70
 8007298:	08009916 	.word	0x08009916
 800729c:	08009a1c 	.word	0x08009a1c

080072a0 <__lshift>:
 80072a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	460c      	mov	r4, r1
 80072a6:	6849      	ldr	r1, [r1, #4]
 80072a8:	6923      	ldr	r3, [r4, #16]
 80072aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072ae:	68a3      	ldr	r3, [r4, #8]
 80072b0:	4607      	mov	r7, r0
 80072b2:	4691      	mov	r9, r2
 80072b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072b8:	f108 0601 	add.w	r6, r8, #1
 80072bc:	42b3      	cmp	r3, r6
 80072be:	db0b      	blt.n	80072d8 <__lshift+0x38>
 80072c0:	4638      	mov	r0, r7
 80072c2:	f7ff fd91 	bl	8006de8 <_Balloc>
 80072c6:	4605      	mov	r5, r0
 80072c8:	b948      	cbnz	r0, 80072de <__lshift+0x3e>
 80072ca:	4602      	mov	r2, r0
 80072cc:	4b28      	ldr	r3, [pc, #160]	; (8007370 <__lshift+0xd0>)
 80072ce:	4829      	ldr	r0, [pc, #164]	; (8007374 <__lshift+0xd4>)
 80072d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072d4:	f000 fc90 	bl	8007bf8 <__assert_func>
 80072d8:	3101      	adds	r1, #1
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	e7ee      	b.n	80072bc <__lshift+0x1c>
 80072de:	2300      	movs	r3, #0
 80072e0:	f100 0114 	add.w	r1, r0, #20
 80072e4:	f100 0210 	add.w	r2, r0, #16
 80072e8:	4618      	mov	r0, r3
 80072ea:	4553      	cmp	r3, sl
 80072ec:	db33      	blt.n	8007356 <__lshift+0xb6>
 80072ee:	6920      	ldr	r0, [r4, #16]
 80072f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072f4:	f104 0314 	add.w	r3, r4, #20
 80072f8:	f019 091f 	ands.w	r9, r9, #31
 80072fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007300:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007304:	d02b      	beq.n	800735e <__lshift+0xbe>
 8007306:	f1c9 0e20 	rsb	lr, r9, #32
 800730a:	468a      	mov	sl, r1
 800730c:	2200      	movs	r2, #0
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	fa00 f009 	lsl.w	r0, r0, r9
 8007314:	4302      	orrs	r2, r0
 8007316:	f84a 2b04 	str.w	r2, [sl], #4
 800731a:	f853 2b04 	ldr.w	r2, [r3], #4
 800731e:	459c      	cmp	ip, r3
 8007320:	fa22 f20e 	lsr.w	r2, r2, lr
 8007324:	d8f3      	bhi.n	800730e <__lshift+0x6e>
 8007326:	ebac 0304 	sub.w	r3, ip, r4
 800732a:	3b15      	subs	r3, #21
 800732c:	f023 0303 	bic.w	r3, r3, #3
 8007330:	3304      	adds	r3, #4
 8007332:	f104 0015 	add.w	r0, r4, #21
 8007336:	4584      	cmp	ip, r0
 8007338:	bf38      	it	cc
 800733a:	2304      	movcc	r3, #4
 800733c:	50ca      	str	r2, [r1, r3]
 800733e:	b10a      	cbz	r2, 8007344 <__lshift+0xa4>
 8007340:	f108 0602 	add.w	r6, r8, #2
 8007344:	3e01      	subs	r6, #1
 8007346:	4638      	mov	r0, r7
 8007348:	612e      	str	r6, [r5, #16]
 800734a:	4621      	mov	r1, r4
 800734c:	f7ff fd8c 	bl	8006e68 <_Bfree>
 8007350:	4628      	mov	r0, r5
 8007352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007356:	f842 0f04 	str.w	r0, [r2, #4]!
 800735a:	3301      	adds	r3, #1
 800735c:	e7c5      	b.n	80072ea <__lshift+0x4a>
 800735e:	3904      	subs	r1, #4
 8007360:	f853 2b04 	ldr.w	r2, [r3], #4
 8007364:	f841 2f04 	str.w	r2, [r1, #4]!
 8007368:	459c      	cmp	ip, r3
 800736a:	d8f9      	bhi.n	8007360 <__lshift+0xc0>
 800736c:	e7ea      	b.n	8007344 <__lshift+0xa4>
 800736e:	bf00      	nop
 8007370:	0800998c 	.word	0x0800998c
 8007374:	08009a1c 	.word	0x08009a1c

08007378 <__mcmp>:
 8007378:	b530      	push	{r4, r5, lr}
 800737a:	6902      	ldr	r2, [r0, #16]
 800737c:	690c      	ldr	r4, [r1, #16]
 800737e:	1b12      	subs	r2, r2, r4
 8007380:	d10e      	bne.n	80073a0 <__mcmp+0x28>
 8007382:	f100 0314 	add.w	r3, r0, #20
 8007386:	3114      	adds	r1, #20
 8007388:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800738c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007390:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007394:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007398:	42a5      	cmp	r5, r4
 800739a:	d003      	beq.n	80073a4 <__mcmp+0x2c>
 800739c:	d305      	bcc.n	80073aa <__mcmp+0x32>
 800739e:	2201      	movs	r2, #1
 80073a0:	4610      	mov	r0, r2
 80073a2:	bd30      	pop	{r4, r5, pc}
 80073a4:	4283      	cmp	r3, r0
 80073a6:	d3f3      	bcc.n	8007390 <__mcmp+0x18>
 80073a8:	e7fa      	b.n	80073a0 <__mcmp+0x28>
 80073aa:	f04f 32ff 	mov.w	r2, #4294967295
 80073ae:	e7f7      	b.n	80073a0 <__mcmp+0x28>

080073b0 <__mdiff>:
 80073b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	460c      	mov	r4, r1
 80073b6:	4606      	mov	r6, r0
 80073b8:	4611      	mov	r1, r2
 80073ba:	4620      	mov	r0, r4
 80073bc:	4617      	mov	r7, r2
 80073be:	f7ff ffdb 	bl	8007378 <__mcmp>
 80073c2:	1e05      	subs	r5, r0, #0
 80073c4:	d110      	bne.n	80073e8 <__mdiff+0x38>
 80073c6:	4629      	mov	r1, r5
 80073c8:	4630      	mov	r0, r6
 80073ca:	f7ff fd0d 	bl	8006de8 <_Balloc>
 80073ce:	b930      	cbnz	r0, 80073de <__mdiff+0x2e>
 80073d0:	4b39      	ldr	r3, [pc, #228]	; (80074b8 <__mdiff+0x108>)
 80073d2:	4602      	mov	r2, r0
 80073d4:	f240 2132 	movw	r1, #562	; 0x232
 80073d8:	4838      	ldr	r0, [pc, #224]	; (80074bc <__mdiff+0x10c>)
 80073da:	f000 fc0d 	bl	8007bf8 <__assert_func>
 80073de:	2301      	movs	r3, #1
 80073e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e8:	bfa4      	itt	ge
 80073ea:	463b      	movge	r3, r7
 80073ec:	4627      	movge	r7, r4
 80073ee:	4630      	mov	r0, r6
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	bfa6      	itte	ge
 80073f4:	461c      	movge	r4, r3
 80073f6:	2500      	movge	r5, #0
 80073f8:	2501      	movlt	r5, #1
 80073fa:	f7ff fcf5 	bl	8006de8 <_Balloc>
 80073fe:	b920      	cbnz	r0, 800740a <__mdiff+0x5a>
 8007400:	4b2d      	ldr	r3, [pc, #180]	; (80074b8 <__mdiff+0x108>)
 8007402:	4602      	mov	r2, r0
 8007404:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007408:	e7e6      	b.n	80073d8 <__mdiff+0x28>
 800740a:	693e      	ldr	r6, [r7, #16]
 800740c:	60c5      	str	r5, [r0, #12]
 800740e:	6925      	ldr	r5, [r4, #16]
 8007410:	f107 0114 	add.w	r1, r7, #20
 8007414:	f104 0914 	add.w	r9, r4, #20
 8007418:	f100 0e14 	add.w	lr, r0, #20
 800741c:	f107 0210 	add.w	r2, r7, #16
 8007420:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007424:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007428:	46f2      	mov	sl, lr
 800742a:	2700      	movs	r7, #0
 800742c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007430:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007434:	fa1f f883 	uxth.w	r8, r3
 8007438:	fa17 f78b 	uxtah	r7, r7, fp
 800743c:	0c1b      	lsrs	r3, r3, #16
 800743e:	eba7 0808 	sub.w	r8, r7, r8
 8007442:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007446:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800744a:	fa1f f888 	uxth.w	r8, r8
 800744e:	141f      	asrs	r7, r3, #16
 8007450:	454d      	cmp	r5, r9
 8007452:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007456:	f84a 3b04 	str.w	r3, [sl], #4
 800745a:	d8e7      	bhi.n	800742c <__mdiff+0x7c>
 800745c:	1b2b      	subs	r3, r5, r4
 800745e:	3b15      	subs	r3, #21
 8007460:	f023 0303 	bic.w	r3, r3, #3
 8007464:	3304      	adds	r3, #4
 8007466:	3415      	adds	r4, #21
 8007468:	42a5      	cmp	r5, r4
 800746a:	bf38      	it	cc
 800746c:	2304      	movcc	r3, #4
 800746e:	4419      	add	r1, r3
 8007470:	4473      	add	r3, lr
 8007472:	469e      	mov	lr, r3
 8007474:	460d      	mov	r5, r1
 8007476:	4565      	cmp	r5, ip
 8007478:	d30e      	bcc.n	8007498 <__mdiff+0xe8>
 800747a:	f10c 0203 	add.w	r2, ip, #3
 800747e:	1a52      	subs	r2, r2, r1
 8007480:	f022 0203 	bic.w	r2, r2, #3
 8007484:	3903      	subs	r1, #3
 8007486:	458c      	cmp	ip, r1
 8007488:	bf38      	it	cc
 800748a:	2200      	movcc	r2, #0
 800748c:	441a      	add	r2, r3
 800748e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007492:	b17b      	cbz	r3, 80074b4 <__mdiff+0x104>
 8007494:	6106      	str	r6, [r0, #16]
 8007496:	e7a5      	b.n	80073e4 <__mdiff+0x34>
 8007498:	f855 8b04 	ldr.w	r8, [r5], #4
 800749c:	fa17 f488 	uxtah	r4, r7, r8
 80074a0:	1422      	asrs	r2, r4, #16
 80074a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80074a6:	b2a4      	uxth	r4, r4
 80074a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80074ac:	f84e 4b04 	str.w	r4, [lr], #4
 80074b0:	1417      	asrs	r7, r2, #16
 80074b2:	e7e0      	b.n	8007476 <__mdiff+0xc6>
 80074b4:	3e01      	subs	r6, #1
 80074b6:	e7ea      	b.n	800748e <__mdiff+0xde>
 80074b8:	0800998c 	.word	0x0800998c
 80074bc:	08009a1c 	.word	0x08009a1c

080074c0 <__ulp>:
 80074c0:	b082      	sub	sp, #8
 80074c2:	ed8d 0b00 	vstr	d0, [sp]
 80074c6:	9b01      	ldr	r3, [sp, #4]
 80074c8:	4912      	ldr	r1, [pc, #72]	; (8007514 <__ulp+0x54>)
 80074ca:	4019      	ands	r1, r3
 80074cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80074d0:	2900      	cmp	r1, #0
 80074d2:	dd05      	ble.n	80074e0 <__ulp+0x20>
 80074d4:	2200      	movs	r2, #0
 80074d6:	460b      	mov	r3, r1
 80074d8:	ec43 2b10 	vmov	d0, r2, r3
 80074dc:	b002      	add	sp, #8
 80074de:	4770      	bx	lr
 80074e0:	4249      	negs	r1, r1
 80074e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80074e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80074ea:	f04f 0200 	mov.w	r2, #0
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	da04      	bge.n	80074fe <__ulp+0x3e>
 80074f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80074f8:	fa41 f300 	asr.w	r3, r1, r0
 80074fc:	e7ec      	b.n	80074d8 <__ulp+0x18>
 80074fe:	f1a0 0114 	sub.w	r1, r0, #20
 8007502:	291e      	cmp	r1, #30
 8007504:	bfda      	itte	le
 8007506:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800750a:	fa20 f101 	lsrle.w	r1, r0, r1
 800750e:	2101      	movgt	r1, #1
 8007510:	460a      	mov	r2, r1
 8007512:	e7e1      	b.n	80074d8 <__ulp+0x18>
 8007514:	7ff00000 	.word	0x7ff00000

08007518 <__b2d>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	6905      	ldr	r5, [r0, #16]
 800751c:	f100 0714 	add.w	r7, r0, #20
 8007520:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007524:	1f2e      	subs	r6, r5, #4
 8007526:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800752a:	4620      	mov	r0, r4
 800752c:	f7ff fd52 	bl	8006fd4 <__hi0bits>
 8007530:	f1c0 0320 	rsb	r3, r0, #32
 8007534:	280a      	cmp	r0, #10
 8007536:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80075b4 <__b2d+0x9c>
 800753a:	600b      	str	r3, [r1, #0]
 800753c:	dc14      	bgt.n	8007568 <__b2d+0x50>
 800753e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007542:	fa24 f10e 	lsr.w	r1, r4, lr
 8007546:	42b7      	cmp	r7, r6
 8007548:	ea41 030c 	orr.w	r3, r1, ip
 800754c:	bf34      	ite	cc
 800754e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007552:	2100      	movcs	r1, #0
 8007554:	3015      	adds	r0, #21
 8007556:	fa04 f000 	lsl.w	r0, r4, r0
 800755a:	fa21 f10e 	lsr.w	r1, r1, lr
 800755e:	ea40 0201 	orr.w	r2, r0, r1
 8007562:	ec43 2b10 	vmov	d0, r2, r3
 8007566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007568:	42b7      	cmp	r7, r6
 800756a:	bf3a      	itte	cc
 800756c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007570:	f1a5 0608 	subcc.w	r6, r5, #8
 8007574:	2100      	movcs	r1, #0
 8007576:	380b      	subs	r0, #11
 8007578:	d017      	beq.n	80075aa <__b2d+0x92>
 800757a:	f1c0 0c20 	rsb	ip, r0, #32
 800757e:	fa04 f500 	lsl.w	r5, r4, r0
 8007582:	42be      	cmp	r6, r7
 8007584:	fa21 f40c 	lsr.w	r4, r1, ip
 8007588:	ea45 0504 	orr.w	r5, r5, r4
 800758c:	bf8c      	ite	hi
 800758e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007592:	2400      	movls	r4, #0
 8007594:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007598:	fa01 f000 	lsl.w	r0, r1, r0
 800759c:	fa24 f40c 	lsr.w	r4, r4, ip
 80075a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80075a4:	ea40 0204 	orr.w	r2, r0, r4
 80075a8:	e7db      	b.n	8007562 <__b2d+0x4a>
 80075aa:	ea44 030c 	orr.w	r3, r4, ip
 80075ae:	460a      	mov	r2, r1
 80075b0:	e7d7      	b.n	8007562 <__b2d+0x4a>
 80075b2:	bf00      	nop
 80075b4:	3ff00000 	.word	0x3ff00000

080075b8 <__d2b>:
 80075b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075bc:	4689      	mov	r9, r1
 80075be:	2101      	movs	r1, #1
 80075c0:	ec57 6b10 	vmov	r6, r7, d0
 80075c4:	4690      	mov	r8, r2
 80075c6:	f7ff fc0f 	bl	8006de8 <_Balloc>
 80075ca:	4604      	mov	r4, r0
 80075cc:	b930      	cbnz	r0, 80075dc <__d2b+0x24>
 80075ce:	4602      	mov	r2, r0
 80075d0:	4b25      	ldr	r3, [pc, #148]	; (8007668 <__d2b+0xb0>)
 80075d2:	4826      	ldr	r0, [pc, #152]	; (800766c <__d2b+0xb4>)
 80075d4:	f240 310a 	movw	r1, #778	; 0x30a
 80075d8:	f000 fb0e 	bl	8007bf8 <__assert_func>
 80075dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075e4:	bb35      	cbnz	r5, 8007634 <__d2b+0x7c>
 80075e6:	2e00      	cmp	r6, #0
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	d028      	beq.n	800763e <__d2b+0x86>
 80075ec:	4668      	mov	r0, sp
 80075ee:	9600      	str	r6, [sp, #0]
 80075f0:	f7ff fd10 	bl	8007014 <__lo0bits>
 80075f4:	9900      	ldr	r1, [sp, #0]
 80075f6:	b300      	cbz	r0, 800763a <__d2b+0x82>
 80075f8:	9a01      	ldr	r2, [sp, #4]
 80075fa:	f1c0 0320 	rsb	r3, r0, #32
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	430b      	orrs	r3, r1
 8007604:	40c2      	lsrs	r2, r0
 8007606:	6163      	str	r3, [r4, #20]
 8007608:	9201      	str	r2, [sp, #4]
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	61a3      	str	r3, [r4, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	bf14      	ite	ne
 8007612:	2202      	movne	r2, #2
 8007614:	2201      	moveq	r2, #1
 8007616:	6122      	str	r2, [r4, #16]
 8007618:	b1d5      	cbz	r5, 8007650 <__d2b+0x98>
 800761a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800761e:	4405      	add	r5, r0
 8007620:	f8c9 5000 	str.w	r5, [r9]
 8007624:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007628:	f8c8 0000 	str.w	r0, [r8]
 800762c:	4620      	mov	r0, r4
 800762e:	b003      	add	sp, #12
 8007630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007638:	e7d5      	b.n	80075e6 <__d2b+0x2e>
 800763a:	6161      	str	r1, [r4, #20]
 800763c:	e7e5      	b.n	800760a <__d2b+0x52>
 800763e:	a801      	add	r0, sp, #4
 8007640:	f7ff fce8 	bl	8007014 <__lo0bits>
 8007644:	9b01      	ldr	r3, [sp, #4]
 8007646:	6163      	str	r3, [r4, #20]
 8007648:	2201      	movs	r2, #1
 800764a:	6122      	str	r2, [r4, #16]
 800764c:	3020      	adds	r0, #32
 800764e:	e7e3      	b.n	8007618 <__d2b+0x60>
 8007650:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007654:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007658:	f8c9 0000 	str.w	r0, [r9]
 800765c:	6918      	ldr	r0, [r3, #16]
 800765e:	f7ff fcb9 	bl	8006fd4 <__hi0bits>
 8007662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007666:	e7df      	b.n	8007628 <__d2b+0x70>
 8007668:	0800998c 	.word	0x0800998c
 800766c:	08009a1c 	.word	0x08009a1c

08007670 <__ratio>:
 8007670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	4688      	mov	r8, r1
 8007676:	4669      	mov	r1, sp
 8007678:	4681      	mov	r9, r0
 800767a:	f7ff ff4d 	bl	8007518 <__b2d>
 800767e:	a901      	add	r1, sp, #4
 8007680:	4640      	mov	r0, r8
 8007682:	ec55 4b10 	vmov	r4, r5, d0
 8007686:	f7ff ff47 	bl	8007518 <__b2d>
 800768a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800768e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007692:	eba3 0c02 	sub.w	ip, r3, r2
 8007696:	e9dd 3200 	ldrd	r3, r2, [sp]
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80076a0:	ec51 0b10 	vmov	r0, r1, d0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bfd6      	itet	le
 80076a8:	460a      	movle	r2, r1
 80076aa:	462a      	movgt	r2, r5
 80076ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80076b0:	468b      	mov	fp, r1
 80076b2:	462f      	mov	r7, r5
 80076b4:	bfd4      	ite	le
 80076b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80076ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80076be:	4620      	mov	r0, r4
 80076c0:	ee10 2a10 	vmov	r2, s0
 80076c4:	465b      	mov	r3, fp
 80076c6:	4639      	mov	r1, r7
 80076c8:	f7f9 f8c0 	bl	800084c <__aeabi_ddiv>
 80076cc:	ec41 0b10 	vmov	d0, r0, r1
 80076d0:	b003      	add	sp, #12
 80076d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076d6 <__copybits>:
 80076d6:	3901      	subs	r1, #1
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	1149      	asrs	r1, r1, #5
 80076dc:	6914      	ldr	r4, [r2, #16]
 80076de:	3101      	adds	r1, #1
 80076e0:	f102 0314 	add.w	r3, r2, #20
 80076e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80076e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076ec:	1f05      	subs	r5, r0, #4
 80076ee:	42a3      	cmp	r3, r4
 80076f0:	d30c      	bcc.n	800770c <__copybits+0x36>
 80076f2:	1aa3      	subs	r3, r4, r2
 80076f4:	3b11      	subs	r3, #17
 80076f6:	f023 0303 	bic.w	r3, r3, #3
 80076fa:	3211      	adds	r2, #17
 80076fc:	42a2      	cmp	r2, r4
 80076fe:	bf88      	it	hi
 8007700:	2300      	movhi	r3, #0
 8007702:	4418      	add	r0, r3
 8007704:	2300      	movs	r3, #0
 8007706:	4288      	cmp	r0, r1
 8007708:	d305      	bcc.n	8007716 <__copybits+0x40>
 800770a:	bd70      	pop	{r4, r5, r6, pc}
 800770c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007710:	f845 6f04 	str.w	r6, [r5, #4]!
 8007714:	e7eb      	b.n	80076ee <__copybits+0x18>
 8007716:	f840 3b04 	str.w	r3, [r0], #4
 800771a:	e7f4      	b.n	8007706 <__copybits+0x30>

0800771c <__any_on>:
 800771c:	f100 0214 	add.w	r2, r0, #20
 8007720:	6900      	ldr	r0, [r0, #16]
 8007722:	114b      	asrs	r3, r1, #5
 8007724:	4298      	cmp	r0, r3
 8007726:	b510      	push	{r4, lr}
 8007728:	db11      	blt.n	800774e <__any_on+0x32>
 800772a:	dd0a      	ble.n	8007742 <__any_on+0x26>
 800772c:	f011 011f 	ands.w	r1, r1, #31
 8007730:	d007      	beq.n	8007742 <__any_on+0x26>
 8007732:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007736:	fa24 f001 	lsr.w	r0, r4, r1
 800773a:	fa00 f101 	lsl.w	r1, r0, r1
 800773e:	428c      	cmp	r4, r1
 8007740:	d10b      	bne.n	800775a <__any_on+0x3e>
 8007742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007746:	4293      	cmp	r3, r2
 8007748:	d803      	bhi.n	8007752 <__any_on+0x36>
 800774a:	2000      	movs	r0, #0
 800774c:	bd10      	pop	{r4, pc}
 800774e:	4603      	mov	r3, r0
 8007750:	e7f7      	b.n	8007742 <__any_on+0x26>
 8007752:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007756:	2900      	cmp	r1, #0
 8007758:	d0f5      	beq.n	8007746 <__any_on+0x2a>
 800775a:	2001      	movs	r0, #1
 800775c:	e7f6      	b.n	800774c <__any_on+0x30>

0800775e <_calloc_r>:
 800775e:	b513      	push	{r0, r1, r4, lr}
 8007760:	434a      	muls	r2, r1
 8007762:	4611      	mov	r1, r2
 8007764:	9201      	str	r2, [sp, #4]
 8007766:	f000 f859 	bl	800781c <_malloc_r>
 800776a:	4604      	mov	r4, r0
 800776c:	b118      	cbz	r0, 8007776 <_calloc_r+0x18>
 800776e:	9a01      	ldr	r2, [sp, #4]
 8007770:	2100      	movs	r1, #0
 8007772:	f7fc fbc9 	bl	8003f08 <memset>
 8007776:	4620      	mov	r0, r4
 8007778:	b002      	add	sp, #8
 800777a:	bd10      	pop	{r4, pc}

0800777c <_free_r>:
 800777c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800777e:	2900      	cmp	r1, #0
 8007780:	d048      	beq.n	8007814 <_free_r+0x98>
 8007782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007786:	9001      	str	r0, [sp, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f1a1 0404 	sub.w	r4, r1, #4
 800778e:	bfb8      	it	lt
 8007790:	18e4      	addlt	r4, r4, r3
 8007792:	f000 fa7b 	bl	8007c8c <__malloc_lock>
 8007796:	4a20      	ldr	r2, [pc, #128]	; (8007818 <_free_r+0x9c>)
 8007798:	9801      	ldr	r0, [sp, #4]
 800779a:	6813      	ldr	r3, [r2, #0]
 800779c:	4615      	mov	r5, r2
 800779e:	b933      	cbnz	r3, 80077ae <_free_r+0x32>
 80077a0:	6063      	str	r3, [r4, #4]
 80077a2:	6014      	str	r4, [r2, #0]
 80077a4:	b003      	add	sp, #12
 80077a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077aa:	f000 ba75 	b.w	8007c98 <__malloc_unlock>
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	d90b      	bls.n	80077ca <_free_r+0x4e>
 80077b2:	6821      	ldr	r1, [r4, #0]
 80077b4:	1862      	adds	r2, r4, r1
 80077b6:	4293      	cmp	r3, r2
 80077b8:	bf04      	itt	eq
 80077ba:	681a      	ldreq	r2, [r3, #0]
 80077bc:	685b      	ldreq	r3, [r3, #4]
 80077be:	6063      	str	r3, [r4, #4]
 80077c0:	bf04      	itt	eq
 80077c2:	1852      	addeq	r2, r2, r1
 80077c4:	6022      	streq	r2, [r4, #0]
 80077c6:	602c      	str	r4, [r5, #0]
 80077c8:	e7ec      	b.n	80077a4 <_free_r+0x28>
 80077ca:	461a      	mov	r2, r3
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	b10b      	cbz	r3, 80077d4 <_free_r+0x58>
 80077d0:	42a3      	cmp	r3, r4
 80077d2:	d9fa      	bls.n	80077ca <_free_r+0x4e>
 80077d4:	6811      	ldr	r1, [r2, #0]
 80077d6:	1855      	adds	r5, r2, r1
 80077d8:	42a5      	cmp	r5, r4
 80077da:	d10b      	bne.n	80077f4 <_free_r+0x78>
 80077dc:	6824      	ldr	r4, [r4, #0]
 80077de:	4421      	add	r1, r4
 80077e0:	1854      	adds	r4, r2, r1
 80077e2:	42a3      	cmp	r3, r4
 80077e4:	6011      	str	r1, [r2, #0]
 80077e6:	d1dd      	bne.n	80077a4 <_free_r+0x28>
 80077e8:	681c      	ldr	r4, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	6053      	str	r3, [r2, #4]
 80077ee:	4421      	add	r1, r4
 80077f0:	6011      	str	r1, [r2, #0]
 80077f2:	e7d7      	b.n	80077a4 <_free_r+0x28>
 80077f4:	d902      	bls.n	80077fc <_free_r+0x80>
 80077f6:	230c      	movs	r3, #12
 80077f8:	6003      	str	r3, [r0, #0]
 80077fa:	e7d3      	b.n	80077a4 <_free_r+0x28>
 80077fc:	6825      	ldr	r5, [r4, #0]
 80077fe:	1961      	adds	r1, r4, r5
 8007800:	428b      	cmp	r3, r1
 8007802:	bf04      	itt	eq
 8007804:	6819      	ldreq	r1, [r3, #0]
 8007806:	685b      	ldreq	r3, [r3, #4]
 8007808:	6063      	str	r3, [r4, #4]
 800780a:	bf04      	itt	eq
 800780c:	1949      	addeq	r1, r1, r5
 800780e:	6021      	streq	r1, [r4, #0]
 8007810:	6054      	str	r4, [r2, #4]
 8007812:	e7c7      	b.n	80077a4 <_free_r+0x28>
 8007814:	b003      	add	sp, #12
 8007816:	bd30      	pop	{r4, r5, pc}
 8007818:	2000021c 	.word	0x2000021c

0800781c <_malloc_r>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	1ccd      	adds	r5, r1, #3
 8007820:	f025 0503 	bic.w	r5, r5, #3
 8007824:	3508      	adds	r5, #8
 8007826:	2d0c      	cmp	r5, #12
 8007828:	bf38      	it	cc
 800782a:	250c      	movcc	r5, #12
 800782c:	2d00      	cmp	r5, #0
 800782e:	4606      	mov	r6, r0
 8007830:	db01      	blt.n	8007836 <_malloc_r+0x1a>
 8007832:	42a9      	cmp	r1, r5
 8007834:	d903      	bls.n	800783e <_malloc_r+0x22>
 8007836:	230c      	movs	r3, #12
 8007838:	6033      	str	r3, [r6, #0]
 800783a:	2000      	movs	r0, #0
 800783c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800783e:	f000 fa25 	bl	8007c8c <__malloc_lock>
 8007842:	4921      	ldr	r1, [pc, #132]	; (80078c8 <_malloc_r+0xac>)
 8007844:	680a      	ldr	r2, [r1, #0]
 8007846:	4614      	mov	r4, r2
 8007848:	b99c      	cbnz	r4, 8007872 <_malloc_r+0x56>
 800784a:	4f20      	ldr	r7, [pc, #128]	; (80078cc <_malloc_r+0xb0>)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	b923      	cbnz	r3, 800785a <_malloc_r+0x3e>
 8007850:	4621      	mov	r1, r4
 8007852:	4630      	mov	r0, r6
 8007854:	f000 f9a0 	bl	8007b98 <_sbrk_r>
 8007858:	6038      	str	r0, [r7, #0]
 800785a:	4629      	mov	r1, r5
 800785c:	4630      	mov	r0, r6
 800785e:	f000 f99b 	bl	8007b98 <_sbrk_r>
 8007862:	1c43      	adds	r3, r0, #1
 8007864:	d123      	bne.n	80078ae <_malloc_r+0x92>
 8007866:	230c      	movs	r3, #12
 8007868:	6033      	str	r3, [r6, #0]
 800786a:	4630      	mov	r0, r6
 800786c:	f000 fa14 	bl	8007c98 <__malloc_unlock>
 8007870:	e7e3      	b.n	800783a <_malloc_r+0x1e>
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	1b5b      	subs	r3, r3, r5
 8007876:	d417      	bmi.n	80078a8 <_malloc_r+0x8c>
 8007878:	2b0b      	cmp	r3, #11
 800787a:	d903      	bls.n	8007884 <_malloc_r+0x68>
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	441c      	add	r4, r3
 8007880:	6025      	str	r5, [r4, #0]
 8007882:	e004      	b.n	800788e <_malloc_r+0x72>
 8007884:	6863      	ldr	r3, [r4, #4]
 8007886:	42a2      	cmp	r2, r4
 8007888:	bf0c      	ite	eq
 800788a:	600b      	streq	r3, [r1, #0]
 800788c:	6053      	strne	r3, [r2, #4]
 800788e:	4630      	mov	r0, r6
 8007890:	f000 fa02 	bl	8007c98 <__malloc_unlock>
 8007894:	f104 000b 	add.w	r0, r4, #11
 8007898:	1d23      	adds	r3, r4, #4
 800789a:	f020 0007 	bic.w	r0, r0, #7
 800789e:	1ac2      	subs	r2, r0, r3
 80078a0:	d0cc      	beq.n	800783c <_malloc_r+0x20>
 80078a2:	1a1b      	subs	r3, r3, r0
 80078a4:	50a3      	str	r3, [r4, r2]
 80078a6:	e7c9      	b.n	800783c <_malloc_r+0x20>
 80078a8:	4622      	mov	r2, r4
 80078aa:	6864      	ldr	r4, [r4, #4]
 80078ac:	e7cc      	b.n	8007848 <_malloc_r+0x2c>
 80078ae:	1cc4      	adds	r4, r0, #3
 80078b0:	f024 0403 	bic.w	r4, r4, #3
 80078b4:	42a0      	cmp	r0, r4
 80078b6:	d0e3      	beq.n	8007880 <_malloc_r+0x64>
 80078b8:	1a21      	subs	r1, r4, r0
 80078ba:	4630      	mov	r0, r6
 80078bc:	f000 f96c 	bl	8007b98 <_sbrk_r>
 80078c0:	3001      	adds	r0, #1
 80078c2:	d1dd      	bne.n	8007880 <_malloc_r+0x64>
 80078c4:	e7cf      	b.n	8007866 <_malloc_r+0x4a>
 80078c6:	bf00      	nop
 80078c8:	2000021c 	.word	0x2000021c
 80078cc:	20000220 	.word	0x20000220

080078d0 <__ssputs_r>:
 80078d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d4:	688e      	ldr	r6, [r1, #8]
 80078d6:	429e      	cmp	r6, r3
 80078d8:	4682      	mov	sl, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	4690      	mov	r8, r2
 80078de:	461f      	mov	r7, r3
 80078e0:	d838      	bhi.n	8007954 <__ssputs_r+0x84>
 80078e2:	898a      	ldrh	r2, [r1, #12]
 80078e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078e8:	d032      	beq.n	8007950 <__ssputs_r+0x80>
 80078ea:	6825      	ldr	r5, [r4, #0]
 80078ec:	6909      	ldr	r1, [r1, #16]
 80078ee:	eba5 0901 	sub.w	r9, r5, r1
 80078f2:	6965      	ldr	r5, [r4, #20]
 80078f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078fc:	3301      	adds	r3, #1
 80078fe:	444b      	add	r3, r9
 8007900:	106d      	asrs	r5, r5, #1
 8007902:	429d      	cmp	r5, r3
 8007904:	bf38      	it	cc
 8007906:	461d      	movcc	r5, r3
 8007908:	0553      	lsls	r3, r2, #21
 800790a:	d531      	bpl.n	8007970 <__ssputs_r+0xa0>
 800790c:	4629      	mov	r1, r5
 800790e:	f7ff ff85 	bl	800781c <_malloc_r>
 8007912:	4606      	mov	r6, r0
 8007914:	b950      	cbnz	r0, 800792c <__ssputs_r+0x5c>
 8007916:	230c      	movs	r3, #12
 8007918:	f8ca 3000 	str.w	r3, [sl]
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007922:	81a3      	strh	r3, [r4, #12]
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792c:	6921      	ldr	r1, [r4, #16]
 800792e:	464a      	mov	r2, r9
 8007930:	f7ff fa4c 	bl	8006dcc <memcpy>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800793a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	6126      	str	r6, [r4, #16]
 8007942:	6165      	str	r5, [r4, #20]
 8007944:	444e      	add	r6, r9
 8007946:	eba5 0509 	sub.w	r5, r5, r9
 800794a:	6026      	str	r6, [r4, #0]
 800794c:	60a5      	str	r5, [r4, #8]
 800794e:	463e      	mov	r6, r7
 8007950:	42be      	cmp	r6, r7
 8007952:	d900      	bls.n	8007956 <__ssputs_r+0x86>
 8007954:	463e      	mov	r6, r7
 8007956:	4632      	mov	r2, r6
 8007958:	6820      	ldr	r0, [r4, #0]
 800795a:	4641      	mov	r1, r8
 800795c:	f000 f97c 	bl	8007c58 <memmove>
 8007960:	68a3      	ldr	r3, [r4, #8]
 8007962:	6822      	ldr	r2, [r4, #0]
 8007964:	1b9b      	subs	r3, r3, r6
 8007966:	4432      	add	r2, r6
 8007968:	60a3      	str	r3, [r4, #8]
 800796a:	6022      	str	r2, [r4, #0]
 800796c:	2000      	movs	r0, #0
 800796e:	e7db      	b.n	8007928 <__ssputs_r+0x58>
 8007970:	462a      	mov	r2, r5
 8007972:	f000 f997 	bl	8007ca4 <_realloc_r>
 8007976:	4606      	mov	r6, r0
 8007978:	2800      	cmp	r0, #0
 800797a:	d1e1      	bne.n	8007940 <__ssputs_r+0x70>
 800797c:	6921      	ldr	r1, [r4, #16]
 800797e:	4650      	mov	r0, sl
 8007980:	f7ff fefc 	bl	800777c <_free_r>
 8007984:	e7c7      	b.n	8007916 <__ssputs_r+0x46>
	...

08007988 <_svfiprintf_r>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	4698      	mov	r8, r3
 800798e:	898b      	ldrh	r3, [r1, #12]
 8007990:	061b      	lsls	r3, r3, #24
 8007992:	b09d      	sub	sp, #116	; 0x74
 8007994:	4607      	mov	r7, r0
 8007996:	460d      	mov	r5, r1
 8007998:	4614      	mov	r4, r2
 800799a:	d50e      	bpl.n	80079ba <_svfiprintf_r+0x32>
 800799c:	690b      	ldr	r3, [r1, #16]
 800799e:	b963      	cbnz	r3, 80079ba <_svfiprintf_r+0x32>
 80079a0:	2140      	movs	r1, #64	; 0x40
 80079a2:	f7ff ff3b 	bl	800781c <_malloc_r>
 80079a6:	6028      	str	r0, [r5, #0]
 80079a8:	6128      	str	r0, [r5, #16]
 80079aa:	b920      	cbnz	r0, 80079b6 <_svfiprintf_r+0x2e>
 80079ac:	230c      	movs	r3, #12
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	e0d1      	b.n	8007b5a <_svfiprintf_r+0x1d2>
 80079b6:	2340      	movs	r3, #64	; 0x40
 80079b8:	616b      	str	r3, [r5, #20]
 80079ba:	2300      	movs	r3, #0
 80079bc:	9309      	str	r3, [sp, #36]	; 0x24
 80079be:	2320      	movs	r3, #32
 80079c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c8:	2330      	movs	r3, #48	; 0x30
 80079ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b74 <_svfiprintf_r+0x1ec>
 80079ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079d2:	f04f 0901 	mov.w	r9, #1
 80079d6:	4623      	mov	r3, r4
 80079d8:	469a      	mov	sl, r3
 80079da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079de:	b10a      	cbz	r2, 80079e4 <_svfiprintf_r+0x5c>
 80079e0:	2a25      	cmp	r2, #37	; 0x25
 80079e2:	d1f9      	bne.n	80079d8 <_svfiprintf_r+0x50>
 80079e4:	ebba 0b04 	subs.w	fp, sl, r4
 80079e8:	d00b      	beq.n	8007a02 <_svfiprintf_r+0x7a>
 80079ea:	465b      	mov	r3, fp
 80079ec:	4622      	mov	r2, r4
 80079ee:	4629      	mov	r1, r5
 80079f0:	4638      	mov	r0, r7
 80079f2:	f7ff ff6d 	bl	80078d0 <__ssputs_r>
 80079f6:	3001      	adds	r0, #1
 80079f8:	f000 80aa 	beq.w	8007b50 <_svfiprintf_r+0x1c8>
 80079fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079fe:	445a      	add	r2, fp
 8007a00:	9209      	str	r2, [sp, #36]	; 0x24
 8007a02:	f89a 3000 	ldrb.w	r3, [sl]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 80a2 	beq.w	8007b50 <_svfiprintf_r+0x1c8>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a16:	f10a 0a01 	add.w	sl, sl, #1
 8007a1a:	9304      	str	r3, [sp, #16]
 8007a1c:	9307      	str	r3, [sp, #28]
 8007a1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a22:	931a      	str	r3, [sp, #104]	; 0x68
 8007a24:	4654      	mov	r4, sl
 8007a26:	2205      	movs	r2, #5
 8007a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2c:	4851      	ldr	r0, [pc, #324]	; (8007b74 <_svfiprintf_r+0x1ec>)
 8007a2e:	f7f8 fbd7 	bl	80001e0 <memchr>
 8007a32:	9a04      	ldr	r2, [sp, #16]
 8007a34:	b9d8      	cbnz	r0, 8007a6e <_svfiprintf_r+0xe6>
 8007a36:	06d0      	lsls	r0, r2, #27
 8007a38:	bf44      	itt	mi
 8007a3a:	2320      	movmi	r3, #32
 8007a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a40:	0711      	lsls	r1, r2, #28
 8007a42:	bf44      	itt	mi
 8007a44:	232b      	movmi	r3, #43	; 0x2b
 8007a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a50:	d015      	beq.n	8007a7e <_svfiprintf_r+0xf6>
 8007a52:	9a07      	ldr	r2, [sp, #28]
 8007a54:	4654      	mov	r4, sl
 8007a56:	2000      	movs	r0, #0
 8007a58:	f04f 0c0a 	mov.w	ip, #10
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a62:	3b30      	subs	r3, #48	; 0x30
 8007a64:	2b09      	cmp	r3, #9
 8007a66:	d94e      	bls.n	8007b06 <_svfiprintf_r+0x17e>
 8007a68:	b1b0      	cbz	r0, 8007a98 <_svfiprintf_r+0x110>
 8007a6a:	9207      	str	r2, [sp, #28]
 8007a6c:	e014      	b.n	8007a98 <_svfiprintf_r+0x110>
 8007a6e:	eba0 0308 	sub.w	r3, r0, r8
 8007a72:	fa09 f303 	lsl.w	r3, r9, r3
 8007a76:	4313      	orrs	r3, r2
 8007a78:	9304      	str	r3, [sp, #16]
 8007a7a:	46a2      	mov	sl, r4
 8007a7c:	e7d2      	b.n	8007a24 <_svfiprintf_r+0x9c>
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	1d19      	adds	r1, r3, #4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	9103      	str	r1, [sp, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	bfbb      	ittet	lt
 8007a8a:	425b      	neglt	r3, r3
 8007a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a90:	9307      	strge	r3, [sp, #28]
 8007a92:	9307      	strlt	r3, [sp, #28]
 8007a94:	bfb8      	it	lt
 8007a96:	9204      	strlt	r2, [sp, #16]
 8007a98:	7823      	ldrb	r3, [r4, #0]
 8007a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a9c:	d10c      	bne.n	8007ab8 <_svfiprintf_r+0x130>
 8007a9e:	7863      	ldrb	r3, [r4, #1]
 8007aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa2:	d135      	bne.n	8007b10 <_svfiprintf_r+0x188>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	1d1a      	adds	r2, r3, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	9203      	str	r2, [sp, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bfb8      	it	lt
 8007ab0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ab4:	3402      	adds	r4, #2
 8007ab6:	9305      	str	r3, [sp, #20]
 8007ab8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b84 <_svfiprintf_r+0x1fc>
 8007abc:	7821      	ldrb	r1, [r4, #0]
 8007abe:	2203      	movs	r2, #3
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	f7f8 fb8d 	bl	80001e0 <memchr>
 8007ac6:	b140      	cbz	r0, 8007ada <_svfiprintf_r+0x152>
 8007ac8:	2340      	movs	r3, #64	; 0x40
 8007aca:	eba0 000a 	sub.w	r0, r0, sl
 8007ace:	fa03 f000 	lsl.w	r0, r3, r0
 8007ad2:	9b04      	ldr	r3, [sp, #16]
 8007ad4:	4303      	orrs	r3, r0
 8007ad6:	3401      	adds	r4, #1
 8007ad8:	9304      	str	r3, [sp, #16]
 8007ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ade:	4826      	ldr	r0, [pc, #152]	; (8007b78 <_svfiprintf_r+0x1f0>)
 8007ae0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ae4:	2206      	movs	r2, #6
 8007ae6:	f7f8 fb7b 	bl	80001e0 <memchr>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d038      	beq.n	8007b60 <_svfiprintf_r+0x1d8>
 8007aee:	4b23      	ldr	r3, [pc, #140]	; (8007b7c <_svfiprintf_r+0x1f4>)
 8007af0:	bb1b      	cbnz	r3, 8007b3a <_svfiprintf_r+0x1b2>
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	3307      	adds	r3, #7
 8007af6:	f023 0307 	bic.w	r3, r3, #7
 8007afa:	3308      	adds	r3, #8
 8007afc:	9303      	str	r3, [sp, #12]
 8007afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b00:	4433      	add	r3, r6
 8007b02:	9309      	str	r3, [sp, #36]	; 0x24
 8007b04:	e767      	b.n	80079d6 <_svfiprintf_r+0x4e>
 8007b06:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	2001      	movs	r0, #1
 8007b0e:	e7a5      	b.n	8007a5c <_svfiprintf_r+0xd4>
 8007b10:	2300      	movs	r3, #0
 8007b12:	3401      	adds	r4, #1
 8007b14:	9305      	str	r3, [sp, #20]
 8007b16:	4619      	mov	r1, r3
 8007b18:	f04f 0c0a 	mov.w	ip, #10
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b22:	3a30      	subs	r2, #48	; 0x30
 8007b24:	2a09      	cmp	r2, #9
 8007b26:	d903      	bls.n	8007b30 <_svfiprintf_r+0x1a8>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d0c5      	beq.n	8007ab8 <_svfiprintf_r+0x130>
 8007b2c:	9105      	str	r1, [sp, #20]
 8007b2e:	e7c3      	b.n	8007ab8 <_svfiprintf_r+0x130>
 8007b30:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b34:	4604      	mov	r4, r0
 8007b36:	2301      	movs	r3, #1
 8007b38:	e7f0      	b.n	8007b1c <_svfiprintf_r+0x194>
 8007b3a:	ab03      	add	r3, sp, #12
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	462a      	mov	r2, r5
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <_svfiprintf_r+0x1f8>)
 8007b42:	a904      	add	r1, sp, #16
 8007b44:	4638      	mov	r0, r7
 8007b46:	f7fc fa87 	bl	8004058 <_printf_float>
 8007b4a:	1c42      	adds	r2, r0, #1
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	d1d6      	bne.n	8007afe <_svfiprintf_r+0x176>
 8007b50:	89ab      	ldrh	r3, [r5, #12]
 8007b52:	065b      	lsls	r3, r3, #25
 8007b54:	f53f af2c 	bmi.w	80079b0 <_svfiprintf_r+0x28>
 8007b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b5a:	b01d      	add	sp, #116	; 0x74
 8007b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b60:	ab03      	add	r3, sp, #12
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	462a      	mov	r2, r5
 8007b66:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <_svfiprintf_r+0x1f8>)
 8007b68:	a904      	add	r1, sp, #16
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	f7fc fd18 	bl	80045a0 <_printf_i>
 8007b70:	e7eb      	b.n	8007b4a <_svfiprintf_r+0x1c2>
 8007b72:	bf00      	nop
 8007b74:	08009b7c 	.word	0x08009b7c
 8007b78:	08009b86 	.word	0x08009b86
 8007b7c:	08004059 	.word	0x08004059
 8007b80:	080078d1 	.word	0x080078d1
 8007b84:	08009b82 	.word	0x08009b82

08007b88 <nan>:
 8007b88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b90 <nan+0x8>
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	00000000 	.word	0x00000000
 8007b94:	7ff80000 	.word	0x7ff80000

08007b98 <_sbrk_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4d06      	ldr	r5, [pc, #24]	; (8007bb4 <_sbrk_r+0x1c>)
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	602b      	str	r3, [r5, #0]
 8007ba4:	f7fa fe64 	bl	8002870 <_sbrk>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_sbrk_r+0x1a>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_sbrk_r+0x1a>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	200002b4 	.word	0x200002b4

08007bb8 <strncmp>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	b16a      	cbz	r2, 8007bd8 <strncmp+0x20>
 8007bbc:	3901      	subs	r1, #1
 8007bbe:	1884      	adds	r4, r0, r2
 8007bc0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007bc4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d103      	bne.n	8007bd4 <strncmp+0x1c>
 8007bcc:	42a0      	cmp	r0, r4
 8007bce:	d001      	beq.n	8007bd4 <strncmp+0x1c>
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f5      	bne.n	8007bc0 <strncmp+0x8>
 8007bd4:	1a98      	subs	r0, r3, r2
 8007bd6:	bd10      	pop	{r4, pc}
 8007bd8:	4610      	mov	r0, r2
 8007bda:	e7fc      	b.n	8007bd6 <strncmp+0x1e>

08007bdc <__ascii_wctomb>:
 8007bdc:	b149      	cbz	r1, 8007bf2 <__ascii_wctomb+0x16>
 8007bde:	2aff      	cmp	r2, #255	; 0xff
 8007be0:	bf85      	ittet	hi
 8007be2:	238a      	movhi	r3, #138	; 0x8a
 8007be4:	6003      	strhi	r3, [r0, #0]
 8007be6:	700a      	strbls	r2, [r1, #0]
 8007be8:	f04f 30ff 	movhi.w	r0, #4294967295
 8007bec:	bf98      	it	ls
 8007bee:	2001      	movls	r0, #1
 8007bf0:	4770      	bx	lr
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	4770      	bx	lr
	...

08007bf8 <__assert_func>:
 8007bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bfa:	4614      	mov	r4, r2
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <__assert_func+0x2c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4605      	mov	r5, r0
 8007c04:	68d8      	ldr	r0, [r3, #12]
 8007c06:	b14c      	cbz	r4, 8007c1c <__assert_func+0x24>
 8007c08:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <__assert_func+0x30>)
 8007c0a:	9100      	str	r1, [sp, #0]
 8007c0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c10:	4906      	ldr	r1, [pc, #24]	; (8007c2c <__assert_func+0x34>)
 8007c12:	462b      	mov	r3, r5
 8007c14:	f000 f80e 	bl	8007c34 <fiprintf>
 8007c18:	f000 fa84 	bl	8008124 <abort>
 8007c1c:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <__assert_func+0x38>)
 8007c1e:	461c      	mov	r4, r3
 8007c20:	e7f3      	b.n	8007c0a <__assert_func+0x12>
 8007c22:	bf00      	nop
 8007c24:	20000008 	.word	0x20000008
 8007c28:	08009b8d 	.word	0x08009b8d
 8007c2c:	08009b9a 	.word	0x08009b9a
 8007c30:	08009bc8 	.word	0x08009bc8

08007c34 <fiprintf>:
 8007c34:	b40e      	push	{r1, r2, r3}
 8007c36:	b503      	push	{r0, r1, lr}
 8007c38:	4601      	mov	r1, r0
 8007c3a:	ab03      	add	r3, sp, #12
 8007c3c:	4805      	ldr	r0, [pc, #20]	; (8007c54 <fiprintf+0x20>)
 8007c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c42:	6800      	ldr	r0, [r0, #0]
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	f000 f87d 	bl	8007d44 <_vfiprintf_r>
 8007c4a:	b002      	add	sp, #8
 8007c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c50:	b003      	add	sp, #12
 8007c52:	4770      	bx	lr
 8007c54:	20000008 	.word	0x20000008

08007c58 <memmove>:
 8007c58:	4288      	cmp	r0, r1
 8007c5a:	b510      	push	{r4, lr}
 8007c5c:	eb01 0402 	add.w	r4, r1, r2
 8007c60:	d902      	bls.n	8007c68 <memmove+0x10>
 8007c62:	4284      	cmp	r4, r0
 8007c64:	4623      	mov	r3, r4
 8007c66:	d807      	bhi.n	8007c78 <memmove+0x20>
 8007c68:	1e43      	subs	r3, r0, #1
 8007c6a:	42a1      	cmp	r1, r4
 8007c6c:	d008      	beq.n	8007c80 <memmove+0x28>
 8007c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c76:	e7f8      	b.n	8007c6a <memmove+0x12>
 8007c78:	4402      	add	r2, r0
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	428a      	cmp	r2, r1
 8007c7e:	d100      	bne.n	8007c82 <memmove+0x2a>
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c8a:	e7f7      	b.n	8007c7c <memmove+0x24>

08007c8c <__malloc_lock>:
 8007c8c:	4801      	ldr	r0, [pc, #4]	; (8007c94 <__malloc_lock+0x8>)
 8007c8e:	f000 bc09 	b.w	80084a4 <__retarget_lock_acquire_recursive>
 8007c92:	bf00      	nop
 8007c94:	200002bc 	.word	0x200002bc

08007c98 <__malloc_unlock>:
 8007c98:	4801      	ldr	r0, [pc, #4]	; (8007ca0 <__malloc_unlock+0x8>)
 8007c9a:	f000 bc04 	b.w	80084a6 <__retarget_lock_release_recursive>
 8007c9e:	bf00      	nop
 8007ca0:	200002bc 	.word	0x200002bc

08007ca4 <_realloc_r>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	4607      	mov	r7, r0
 8007ca8:	4614      	mov	r4, r2
 8007caa:	460e      	mov	r6, r1
 8007cac:	b921      	cbnz	r1, 8007cb8 <_realloc_r+0x14>
 8007cae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	f7ff bdb2 	b.w	800781c <_malloc_r>
 8007cb8:	b922      	cbnz	r2, 8007cc4 <_realloc_r+0x20>
 8007cba:	f7ff fd5f 	bl	800777c <_free_r>
 8007cbe:	4625      	mov	r5, r4
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc4:	f000 fc54 	bl	8008570 <_malloc_usable_size_r>
 8007cc8:	42a0      	cmp	r0, r4
 8007cca:	d20f      	bcs.n	8007cec <_realloc_r+0x48>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4638      	mov	r0, r7
 8007cd0:	f7ff fda4 	bl	800781c <_malloc_r>
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d0f2      	beq.n	8007cc0 <_realloc_r+0x1c>
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4622      	mov	r2, r4
 8007cde:	f7ff f875 	bl	8006dcc <memcpy>
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f7ff fd49 	bl	800777c <_free_r>
 8007cea:	e7e9      	b.n	8007cc0 <_realloc_r+0x1c>
 8007cec:	4635      	mov	r5, r6
 8007cee:	e7e7      	b.n	8007cc0 <_realloc_r+0x1c>

08007cf0 <__sfputc_r>:
 8007cf0:	6893      	ldr	r3, [r2, #8]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	b410      	push	{r4}
 8007cf8:	6093      	str	r3, [r2, #8]
 8007cfa:	da08      	bge.n	8007d0e <__sfputc_r+0x1e>
 8007cfc:	6994      	ldr	r4, [r2, #24]
 8007cfe:	42a3      	cmp	r3, r4
 8007d00:	db01      	blt.n	8007d06 <__sfputc_r+0x16>
 8007d02:	290a      	cmp	r1, #10
 8007d04:	d103      	bne.n	8007d0e <__sfputc_r+0x1e>
 8007d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d0a:	f000 b94b 	b.w	8007fa4 <__swbuf_r>
 8007d0e:	6813      	ldr	r3, [r2, #0]
 8007d10:	1c58      	adds	r0, r3, #1
 8007d12:	6010      	str	r0, [r2, #0]
 8007d14:	7019      	strb	r1, [r3, #0]
 8007d16:	4608      	mov	r0, r1
 8007d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <__sfputs_r>:
 8007d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d20:	4606      	mov	r6, r0
 8007d22:	460f      	mov	r7, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	18d5      	adds	r5, r2, r3
 8007d28:	42ac      	cmp	r4, r5
 8007d2a:	d101      	bne.n	8007d30 <__sfputs_r+0x12>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e007      	b.n	8007d40 <__sfputs_r+0x22>
 8007d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d34:	463a      	mov	r2, r7
 8007d36:	4630      	mov	r0, r6
 8007d38:	f7ff ffda 	bl	8007cf0 <__sfputc_r>
 8007d3c:	1c43      	adds	r3, r0, #1
 8007d3e:	d1f3      	bne.n	8007d28 <__sfputs_r+0xa>
 8007d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d44 <_vfiprintf_r>:
 8007d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	460d      	mov	r5, r1
 8007d4a:	b09d      	sub	sp, #116	; 0x74
 8007d4c:	4614      	mov	r4, r2
 8007d4e:	4698      	mov	r8, r3
 8007d50:	4606      	mov	r6, r0
 8007d52:	b118      	cbz	r0, 8007d5c <_vfiprintf_r+0x18>
 8007d54:	6983      	ldr	r3, [r0, #24]
 8007d56:	b90b      	cbnz	r3, 8007d5c <_vfiprintf_r+0x18>
 8007d58:	f000 fb06 	bl	8008368 <__sinit>
 8007d5c:	4b89      	ldr	r3, [pc, #548]	; (8007f84 <_vfiprintf_r+0x240>)
 8007d5e:	429d      	cmp	r5, r3
 8007d60:	d11b      	bne.n	8007d9a <_vfiprintf_r+0x56>
 8007d62:	6875      	ldr	r5, [r6, #4]
 8007d64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d66:	07d9      	lsls	r1, r3, #31
 8007d68:	d405      	bmi.n	8007d76 <_vfiprintf_r+0x32>
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	059a      	lsls	r2, r3, #22
 8007d6e:	d402      	bmi.n	8007d76 <_vfiprintf_r+0x32>
 8007d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d72:	f000 fb97 	bl	80084a4 <__retarget_lock_acquire_recursive>
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	071b      	lsls	r3, r3, #28
 8007d7a:	d501      	bpl.n	8007d80 <_vfiprintf_r+0x3c>
 8007d7c:	692b      	ldr	r3, [r5, #16]
 8007d7e:	b9eb      	cbnz	r3, 8007dbc <_vfiprintf_r+0x78>
 8007d80:	4629      	mov	r1, r5
 8007d82:	4630      	mov	r0, r6
 8007d84:	f000 f960 	bl	8008048 <__swsetup_r>
 8007d88:	b1c0      	cbz	r0, 8007dbc <_vfiprintf_r+0x78>
 8007d8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d8c:	07dc      	lsls	r4, r3, #31
 8007d8e:	d50e      	bpl.n	8007dae <_vfiprintf_r+0x6a>
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	b01d      	add	sp, #116	; 0x74
 8007d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9a:	4b7b      	ldr	r3, [pc, #492]	; (8007f88 <_vfiprintf_r+0x244>)
 8007d9c:	429d      	cmp	r5, r3
 8007d9e:	d101      	bne.n	8007da4 <_vfiprintf_r+0x60>
 8007da0:	68b5      	ldr	r5, [r6, #8]
 8007da2:	e7df      	b.n	8007d64 <_vfiprintf_r+0x20>
 8007da4:	4b79      	ldr	r3, [pc, #484]	; (8007f8c <_vfiprintf_r+0x248>)
 8007da6:	429d      	cmp	r5, r3
 8007da8:	bf08      	it	eq
 8007daa:	68f5      	ldreq	r5, [r6, #12]
 8007dac:	e7da      	b.n	8007d64 <_vfiprintf_r+0x20>
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	0598      	lsls	r0, r3, #22
 8007db2:	d4ed      	bmi.n	8007d90 <_vfiprintf_r+0x4c>
 8007db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007db6:	f000 fb76 	bl	80084a6 <__retarget_lock_release_recursive>
 8007dba:	e7e9      	b.n	8007d90 <_vfiprintf_r+0x4c>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc0:	2320      	movs	r3, #32
 8007dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dca:	2330      	movs	r3, #48	; 0x30
 8007dcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f90 <_vfiprintf_r+0x24c>
 8007dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dd4:	f04f 0901 	mov.w	r9, #1
 8007dd8:	4623      	mov	r3, r4
 8007dda:	469a      	mov	sl, r3
 8007ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007de0:	b10a      	cbz	r2, 8007de6 <_vfiprintf_r+0xa2>
 8007de2:	2a25      	cmp	r2, #37	; 0x25
 8007de4:	d1f9      	bne.n	8007dda <_vfiprintf_r+0x96>
 8007de6:	ebba 0b04 	subs.w	fp, sl, r4
 8007dea:	d00b      	beq.n	8007e04 <_vfiprintf_r+0xc0>
 8007dec:	465b      	mov	r3, fp
 8007dee:	4622      	mov	r2, r4
 8007df0:	4629      	mov	r1, r5
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7ff ff93 	bl	8007d1e <__sfputs_r>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	f000 80aa 	beq.w	8007f52 <_vfiprintf_r+0x20e>
 8007dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e00:	445a      	add	r2, fp
 8007e02:	9209      	str	r2, [sp, #36]	; 0x24
 8007e04:	f89a 3000 	ldrb.w	r3, [sl]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 80a2 	beq.w	8007f52 <_vfiprintf_r+0x20e>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f04f 32ff 	mov.w	r2, #4294967295
 8007e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e18:	f10a 0a01 	add.w	sl, sl, #1
 8007e1c:	9304      	str	r3, [sp, #16]
 8007e1e:	9307      	str	r3, [sp, #28]
 8007e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e24:	931a      	str	r3, [sp, #104]	; 0x68
 8007e26:	4654      	mov	r4, sl
 8007e28:	2205      	movs	r2, #5
 8007e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e2e:	4858      	ldr	r0, [pc, #352]	; (8007f90 <_vfiprintf_r+0x24c>)
 8007e30:	f7f8 f9d6 	bl	80001e0 <memchr>
 8007e34:	9a04      	ldr	r2, [sp, #16]
 8007e36:	b9d8      	cbnz	r0, 8007e70 <_vfiprintf_r+0x12c>
 8007e38:	06d1      	lsls	r1, r2, #27
 8007e3a:	bf44      	itt	mi
 8007e3c:	2320      	movmi	r3, #32
 8007e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e42:	0713      	lsls	r3, r2, #28
 8007e44:	bf44      	itt	mi
 8007e46:	232b      	movmi	r3, #43	; 0x2b
 8007e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e50:	2b2a      	cmp	r3, #42	; 0x2a
 8007e52:	d015      	beq.n	8007e80 <_vfiprintf_r+0x13c>
 8007e54:	9a07      	ldr	r2, [sp, #28]
 8007e56:	4654      	mov	r4, sl
 8007e58:	2000      	movs	r0, #0
 8007e5a:	f04f 0c0a 	mov.w	ip, #10
 8007e5e:	4621      	mov	r1, r4
 8007e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e64:	3b30      	subs	r3, #48	; 0x30
 8007e66:	2b09      	cmp	r3, #9
 8007e68:	d94e      	bls.n	8007f08 <_vfiprintf_r+0x1c4>
 8007e6a:	b1b0      	cbz	r0, 8007e9a <_vfiprintf_r+0x156>
 8007e6c:	9207      	str	r2, [sp, #28]
 8007e6e:	e014      	b.n	8007e9a <_vfiprintf_r+0x156>
 8007e70:	eba0 0308 	sub.w	r3, r0, r8
 8007e74:	fa09 f303 	lsl.w	r3, r9, r3
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	9304      	str	r3, [sp, #16]
 8007e7c:	46a2      	mov	sl, r4
 8007e7e:	e7d2      	b.n	8007e26 <_vfiprintf_r+0xe2>
 8007e80:	9b03      	ldr	r3, [sp, #12]
 8007e82:	1d19      	adds	r1, r3, #4
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	9103      	str	r1, [sp, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	bfbb      	ittet	lt
 8007e8c:	425b      	neglt	r3, r3
 8007e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e92:	9307      	strge	r3, [sp, #28]
 8007e94:	9307      	strlt	r3, [sp, #28]
 8007e96:	bfb8      	it	lt
 8007e98:	9204      	strlt	r2, [sp, #16]
 8007e9a:	7823      	ldrb	r3, [r4, #0]
 8007e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e9e:	d10c      	bne.n	8007eba <_vfiprintf_r+0x176>
 8007ea0:	7863      	ldrb	r3, [r4, #1]
 8007ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ea4:	d135      	bne.n	8007f12 <_vfiprintf_r+0x1ce>
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	1d1a      	adds	r2, r3, #4
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	9203      	str	r2, [sp, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfb8      	it	lt
 8007eb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007eb6:	3402      	adds	r4, #2
 8007eb8:	9305      	str	r3, [sp, #20]
 8007eba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fa0 <_vfiprintf_r+0x25c>
 8007ebe:	7821      	ldrb	r1, [r4, #0]
 8007ec0:	2203      	movs	r2, #3
 8007ec2:	4650      	mov	r0, sl
 8007ec4:	f7f8 f98c 	bl	80001e0 <memchr>
 8007ec8:	b140      	cbz	r0, 8007edc <_vfiprintf_r+0x198>
 8007eca:	2340      	movs	r3, #64	; 0x40
 8007ecc:	eba0 000a 	sub.w	r0, r0, sl
 8007ed0:	fa03 f000 	lsl.w	r0, r3, r0
 8007ed4:	9b04      	ldr	r3, [sp, #16]
 8007ed6:	4303      	orrs	r3, r0
 8007ed8:	3401      	adds	r4, #1
 8007eda:	9304      	str	r3, [sp, #16]
 8007edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee0:	482c      	ldr	r0, [pc, #176]	; (8007f94 <_vfiprintf_r+0x250>)
 8007ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ee6:	2206      	movs	r2, #6
 8007ee8:	f7f8 f97a 	bl	80001e0 <memchr>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d03f      	beq.n	8007f70 <_vfiprintf_r+0x22c>
 8007ef0:	4b29      	ldr	r3, [pc, #164]	; (8007f98 <_vfiprintf_r+0x254>)
 8007ef2:	bb1b      	cbnz	r3, 8007f3c <_vfiprintf_r+0x1f8>
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	3307      	adds	r3, #7
 8007ef8:	f023 0307 	bic.w	r3, r3, #7
 8007efc:	3308      	adds	r3, #8
 8007efe:	9303      	str	r3, [sp, #12]
 8007f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f02:	443b      	add	r3, r7
 8007f04:	9309      	str	r3, [sp, #36]	; 0x24
 8007f06:	e767      	b.n	8007dd8 <_vfiprintf_r+0x94>
 8007f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	2001      	movs	r0, #1
 8007f10:	e7a5      	b.n	8007e5e <_vfiprintf_r+0x11a>
 8007f12:	2300      	movs	r3, #0
 8007f14:	3401      	adds	r4, #1
 8007f16:	9305      	str	r3, [sp, #20]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	f04f 0c0a 	mov.w	ip, #10
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f24:	3a30      	subs	r2, #48	; 0x30
 8007f26:	2a09      	cmp	r2, #9
 8007f28:	d903      	bls.n	8007f32 <_vfiprintf_r+0x1ee>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0c5      	beq.n	8007eba <_vfiprintf_r+0x176>
 8007f2e:	9105      	str	r1, [sp, #20]
 8007f30:	e7c3      	b.n	8007eba <_vfiprintf_r+0x176>
 8007f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f36:	4604      	mov	r4, r0
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e7f0      	b.n	8007f1e <_vfiprintf_r+0x1da>
 8007f3c:	ab03      	add	r3, sp, #12
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	462a      	mov	r2, r5
 8007f42:	4b16      	ldr	r3, [pc, #88]	; (8007f9c <_vfiprintf_r+0x258>)
 8007f44:	a904      	add	r1, sp, #16
 8007f46:	4630      	mov	r0, r6
 8007f48:	f7fc f886 	bl	8004058 <_printf_float>
 8007f4c:	4607      	mov	r7, r0
 8007f4e:	1c78      	adds	r0, r7, #1
 8007f50:	d1d6      	bne.n	8007f00 <_vfiprintf_r+0x1bc>
 8007f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f54:	07d9      	lsls	r1, r3, #31
 8007f56:	d405      	bmi.n	8007f64 <_vfiprintf_r+0x220>
 8007f58:	89ab      	ldrh	r3, [r5, #12]
 8007f5a:	059a      	lsls	r2, r3, #22
 8007f5c:	d402      	bmi.n	8007f64 <_vfiprintf_r+0x220>
 8007f5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f60:	f000 faa1 	bl	80084a6 <__retarget_lock_release_recursive>
 8007f64:	89ab      	ldrh	r3, [r5, #12]
 8007f66:	065b      	lsls	r3, r3, #25
 8007f68:	f53f af12 	bmi.w	8007d90 <_vfiprintf_r+0x4c>
 8007f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f6e:	e711      	b.n	8007d94 <_vfiprintf_r+0x50>
 8007f70:	ab03      	add	r3, sp, #12
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	462a      	mov	r2, r5
 8007f76:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <_vfiprintf_r+0x258>)
 8007f78:	a904      	add	r1, sp, #16
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f7fc fb10 	bl	80045a0 <_printf_i>
 8007f80:	e7e4      	b.n	8007f4c <_vfiprintf_r+0x208>
 8007f82:	bf00      	nop
 8007f84:	08009bec 	.word	0x08009bec
 8007f88:	08009c0c 	.word	0x08009c0c
 8007f8c:	08009bcc 	.word	0x08009bcc
 8007f90:	08009b7c 	.word	0x08009b7c
 8007f94:	08009b86 	.word	0x08009b86
 8007f98:	08004059 	.word	0x08004059
 8007f9c:	08007d1f 	.word	0x08007d1f
 8007fa0:	08009b82 	.word	0x08009b82

08007fa4 <__swbuf_r>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	460e      	mov	r6, r1
 8007fa8:	4614      	mov	r4, r2
 8007faa:	4605      	mov	r5, r0
 8007fac:	b118      	cbz	r0, 8007fb6 <__swbuf_r+0x12>
 8007fae:	6983      	ldr	r3, [r0, #24]
 8007fb0:	b90b      	cbnz	r3, 8007fb6 <__swbuf_r+0x12>
 8007fb2:	f000 f9d9 	bl	8008368 <__sinit>
 8007fb6:	4b21      	ldr	r3, [pc, #132]	; (800803c <__swbuf_r+0x98>)
 8007fb8:	429c      	cmp	r4, r3
 8007fba:	d12b      	bne.n	8008014 <__swbuf_r+0x70>
 8007fbc:	686c      	ldr	r4, [r5, #4]
 8007fbe:	69a3      	ldr	r3, [r4, #24]
 8007fc0:	60a3      	str	r3, [r4, #8]
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	071a      	lsls	r2, r3, #28
 8007fc6:	d52f      	bpl.n	8008028 <__swbuf_r+0x84>
 8007fc8:	6923      	ldr	r3, [r4, #16]
 8007fca:	b36b      	cbz	r3, 8008028 <__swbuf_r+0x84>
 8007fcc:	6923      	ldr	r3, [r4, #16]
 8007fce:	6820      	ldr	r0, [r4, #0]
 8007fd0:	1ac0      	subs	r0, r0, r3
 8007fd2:	6963      	ldr	r3, [r4, #20]
 8007fd4:	b2f6      	uxtb	r6, r6
 8007fd6:	4283      	cmp	r3, r0
 8007fd8:	4637      	mov	r7, r6
 8007fda:	dc04      	bgt.n	8007fe6 <__swbuf_r+0x42>
 8007fdc:	4621      	mov	r1, r4
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 f92e 	bl	8008240 <_fflush_r>
 8007fe4:	bb30      	cbnz	r0, 8008034 <__swbuf_r+0x90>
 8007fe6:	68a3      	ldr	r3, [r4, #8]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	60a3      	str	r3, [r4, #8]
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	6022      	str	r2, [r4, #0]
 8007ff2:	701e      	strb	r6, [r3, #0]
 8007ff4:	6963      	ldr	r3, [r4, #20]
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	4283      	cmp	r3, r0
 8007ffa:	d004      	beq.n	8008006 <__swbuf_r+0x62>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	07db      	lsls	r3, r3, #31
 8008000:	d506      	bpl.n	8008010 <__swbuf_r+0x6c>
 8008002:	2e0a      	cmp	r6, #10
 8008004:	d104      	bne.n	8008010 <__swbuf_r+0x6c>
 8008006:	4621      	mov	r1, r4
 8008008:	4628      	mov	r0, r5
 800800a:	f000 f919 	bl	8008240 <_fflush_r>
 800800e:	b988      	cbnz	r0, 8008034 <__swbuf_r+0x90>
 8008010:	4638      	mov	r0, r7
 8008012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008014:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <__swbuf_r+0x9c>)
 8008016:	429c      	cmp	r4, r3
 8008018:	d101      	bne.n	800801e <__swbuf_r+0x7a>
 800801a:	68ac      	ldr	r4, [r5, #8]
 800801c:	e7cf      	b.n	8007fbe <__swbuf_r+0x1a>
 800801e:	4b09      	ldr	r3, [pc, #36]	; (8008044 <__swbuf_r+0xa0>)
 8008020:	429c      	cmp	r4, r3
 8008022:	bf08      	it	eq
 8008024:	68ec      	ldreq	r4, [r5, #12]
 8008026:	e7ca      	b.n	8007fbe <__swbuf_r+0x1a>
 8008028:	4621      	mov	r1, r4
 800802a:	4628      	mov	r0, r5
 800802c:	f000 f80c 	bl	8008048 <__swsetup_r>
 8008030:	2800      	cmp	r0, #0
 8008032:	d0cb      	beq.n	8007fcc <__swbuf_r+0x28>
 8008034:	f04f 37ff 	mov.w	r7, #4294967295
 8008038:	e7ea      	b.n	8008010 <__swbuf_r+0x6c>
 800803a:	bf00      	nop
 800803c:	08009bec 	.word	0x08009bec
 8008040:	08009c0c 	.word	0x08009c0c
 8008044:	08009bcc 	.word	0x08009bcc

08008048 <__swsetup_r>:
 8008048:	4b32      	ldr	r3, [pc, #200]	; (8008114 <__swsetup_r+0xcc>)
 800804a:	b570      	push	{r4, r5, r6, lr}
 800804c:	681d      	ldr	r5, [r3, #0]
 800804e:	4606      	mov	r6, r0
 8008050:	460c      	mov	r4, r1
 8008052:	b125      	cbz	r5, 800805e <__swsetup_r+0x16>
 8008054:	69ab      	ldr	r3, [r5, #24]
 8008056:	b913      	cbnz	r3, 800805e <__swsetup_r+0x16>
 8008058:	4628      	mov	r0, r5
 800805a:	f000 f985 	bl	8008368 <__sinit>
 800805e:	4b2e      	ldr	r3, [pc, #184]	; (8008118 <__swsetup_r+0xd0>)
 8008060:	429c      	cmp	r4, r3
 8008062:	d10f      	bne.n	8008084 <__swsetup_r+0x3c>
 8008064:	686c      	ldr	r4, [r5, #4]
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800806c:	0719      	lsls	r1, r3, #28
 800806e:	d42c      	bmi.n	80080ca <__swsetup_r+0x82>
 8008070:	06dd      	lsls	r5, r3, #27
 8008072:	d411      	bmi.n	8008098 <__swsetup_r+0x50>
 8008074:	2309      	movs	r3, #9
 8008076:	6033      	str	r3, [r6, #0]
 8008078:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800807c:	81a3      	strh	r3, [r4, #12]
 800807e:	f04f 30ff 	mov.w	r0, #4294967295
 8008082:	e03e      	b.n	8008102 <__swsetup_r+0xba>
 8008084:	4b25      	ldr	r3, [pc, #148]	; (800811c <__swsetup_r+0xd4>)
 8008086:	429c      	cmp	r4, r3
 8008088:	d101      	bne.n	800808e <__swsetup_r+0x46>
 800808a:	68ac      	ldr	r4, [r5, #8]
 800808c:	e7eb      	b.n	8008066 <__swsetup_r+0x1e>
 800808e:	4b24      	ldr	r3, [pc, #144]	; (8008120 <__swsetup_r+0xd8>)
 8008090:	429c      	cmp	r4, r3
 8008092:	bf08      	it	eq
 8008094:	68ec      	ldreq	r4, [r5, #12]
 8008096:	e7e6      	b.n	8008066 <__swsetup_r+0x1e>
 8008098:	0758      	lsls	r0, r3, #29
 800809a:	d512      	bpl.n	80080c2 <__swsetup_r+0x7a>
 800809c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800809e:	b141      	cbz	r1, 80080b2 <__swsetup_r+0x6a>
 80080a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080a4:	4299      	cmp	r1, r3
 80080a6:	d002      	beq.n	80080ae <__swsetup_r+0x66>
 80080a8:	4630      	mov	r0, r6
 80080aa:	f7ff fb67 	bl	800777c <_free_r>
 80080ae:	2300      	movs	r3, #0
 80080b0:	6363      	str	r3, [r4, #52]	; 0x34
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080b8:	81a3      	strh	r3, [r4, #12]
 80080ba:	2300      	movs	r3, #0
 80080bc:	6063      	str	r3, [r4, #4]
 80080be:	6923      	ldr	r3, [r4, #16]
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	89a3      	ldrh	r3, [r4, #12]
 80080c4:	f043 0308 	orr.w	r3, r3, #8
 80080c8:	81a3      	strh	r3, [r4, #12]
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	b94b      	cbnz	r3, 80080e2 <__swsetup_r+0x9a>
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080d8:	d003      	beq.n	80080e2 <__swsetup_r+0x9a>
 80080da:	4621      	mov	r1, r4
 80080dc:	4630      	mov	r0, r6
 80080de:	f000 fa07 	bl	80084f0 <__smakebuf_r>
 80080e2:	89a0      	ldrh	r0, [r4, #12]
 80080e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080e8:	f010 0301 	ands.w	r3, r0, #1
 80080ec:	d00a      	beq.n	8008104 <__swsetup_r+0xbc>
 80080ee:	2300      	movs	r3, #0
 80080f0:	60a3      	str	r3, [r4, #8]
 80080f2:	6963      	ldr	r3, [r4, #20]
 80080f4:	425b      	negs	r3, r3
 80080f6:	61a3      	str	r3, [r4, #24]
 80080f8:	6923      	ldr	r3, [r4, #16]
 80080fa:	b943      	cbnz	r3, 800810e <__swsetup_r+0xc6>
 80080fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008100:	d1ba      	bne.n	8008078 <__swsetup_r+0x30>
 8008102:	bd70      	pop	{r4, r5, r6, pc}
 8008104:	0781      	lsls	r1, r0, #30
 8008106:	bf58      	it	pl
 8008108:	6963      	ldrpl	r3, [r4, #20]
 800810a:	60a3      	str	r3, [r4, #8]
 800810c:	e7f4      	b.n	80080f8 <__swsetup_r+0xb0>
 800810e:	2000      	movs	r0, #0
 8008110:	e7f7      	b.n	8008102 <__swsetup_r+0xba>
 8008112:	bf00      	nop
 8008114:	20000008 	.word	0x20000008
 8008118:	08009bec 	.word	0x08009bec
 800811c:	08009c0c 	.word	0x08009c0c
 8008120:	08009bcc 	.word	0x08009bcc

08008124 <abort>:
 8008124:	b508      	push	{r3, lr}
 8008126:	2006      	movs	r0, #6
 8008128:	f000 fa52 	bl	80085d0 <raise>
 800812c:	2001      	movs	r0, #1
 800812e:	f7fa fb27 	bl	8002780 <_exit>
	...

08008134 <__sflush_r>:
 8008134:	898a      	ldrh	r2, [r1, #12]
 8008136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813a:	4605      	mov	r5, r0
 800813c:	0710      	lsls	r0, r2, #28
 800813e:	460c      	mov	r4, r1
 8008140:	d458      	bmi.n	80081f4 <__sflush_r+0xc0>
 8008142:	684b      	ldr	r3, [r1, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	dc05      	bgt.n	8008154 <__sflush_r+0x20>
 8008148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800814a:	2b00      	cmp	r3, #0
 800814c:	dc02      	bgt.n	8008154 <__sflush_r+0x20>
 800814e:	2000      	movs	r0, #0
 8008150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008156:	2e00      	cmp	r6, #0
 8008158:	d0f9      	beq.n	800814e <__sflush_r+0x1a>
 800815a:	2300      	movs	r3, #0
 800815c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008160:	682f      	ldr	r7, [r5, #0]
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	d032      	beq.n	80081cc <__sflush_r+0x98>
 8008166:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	075a      	lsls	r2, r3, #29
 800816c:	d505      	bpl.n	800817a <__sflush_r+0x46>
 800816e:	6863      	ldr	r3, [r4, #4]
 8008170:	1ac0      	subs	r0, r0, r3
 8008172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008174:	b10b      	cbz	r3, 800817a <__sflush_r+0x46>
 8008176:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008178:	1ac0      	subs	r0, r0, r3
 800817a:	2300      	movs	r3, #0
 800817c:	4602      	mov	r2, r0
 800817e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008180:	6a21      	ldr	r1, [r4, #32]
 8008182:	4628      	mov	r0, r5
 8008184:	47b0      	blx	r6
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	d106      	bne.n	800819a <__sflush_r+0x66>
 800818c:	6829      	ldr	r1, [r5, #0]
 800818e:	291d      	cmp	r1, #29
 8008190:	d82c      	bhi.n	80081ec <__sflush_r+0xb8>
 8008192:	4a2a      	ldr	r2, [pc, #168]	; (800823c <__sflush_r+0x108>)
 8008194:	40ca      	lsrs	r2, r1
 8008196:	07d6      	lsls	r6, r2, #31
 8008198:	d528      	bpl.n	80081ec <__sflush_r+0xb8>
 800819a:	2200      	movs	r2, #0
 800819c:	6062      	str	r2, [r4, #4]
 800819e:	04d9      	lsls	r1, r3, #19
 80081a0:	6922      	ldr	r2, [r4, #16]
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	d504      	bpl.n	80081b0 <__sflush_r+0x7c>
 80081a6:	1c42      	adds	r2, r0, #1
 80081a8:	d101      	bne.n	80081ae <__sflush_r+0x7a>
 80081aa:	682b      	ldr	r3, [r5, #0]
 80081ac:	b903      	cbnz	r3, 80081b0 <__sflush_r+0x7c>
 80081ae:	6560      	str	r0, [r4, #84]	; 0x54
 80081b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081b2:	602f      	str	r7, [r5, #0]
 80081b4:	2900      	cmp	r1, #0
 80081b6:	d0ca      	beq.n	800814e <__sflush_r+0x1a>
 80081b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081bc:	4299      	cmp	r1, r3
 80081be:	d002      	beq.n	80081c6 <__sflush_r+0x92>
 80081c0:	4628      	mov	r0, r5
 80081c2:	f7ff fadb 	bl	800777c <_free_r>
 80081c6:	2000      	movs	r0, #0
 80081c8:	6360      	str	r0, [r4, #52]	; 0x34
 80081ca:	e7c1      	b.n	8008150 <__sflush_r+0x1c>
 80081cc:	6a21      	ldr	r1, [r4, #32]
 80081ce:	2301      	movs	r3, #1
 80081d0:	4628      	mov	r0, r5
 80081d2:	47b0      	blx	r6
 80081d4:	1c41      	adds	r1, r0, #1
 80081d6:	d1c7      	bne.n	8008168 <__sflush_r+0x34>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0c4      	beq.n	8008168 <__sflush_r+0x34>
 80081de:	2b1d      	cmp	r3, #29
 80081e0:	d001      	beq.n	80081e6 <__sflush_r+0xb2>
 80081e2:	2b16      	cmp	r3, #22
 80081e4:	d101      	bne.n	80081ea <__sflush_r+0xb6>
 80081e6:	602f      	str	r7, [r5, #0]
 80081e8:	e7b1      	b.n	800814e <__sflush_r+0x1a>
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f0:	81a3      	strh	r3, [r4, #12]
 80081f2:	e7ad      	b.n	8008150 <__sflush_r+0x1c>
 80081f4:	690f      	ldr	r7, [r1, #16]
 80081f6:	2f00      	cmp	r7, #0
 80081f8:	d0a9      	beq.n	800814e <__sflush_r+0x1a>
 80081fa:	0793      	lsls	r3, r2, #30
 80081fc:	680e      	ldr	r6, [r1, #0]
 80081fe:	bf08      	it	eq
 8008200:	694b      	ldreq	r3, [r1, #20]
 8008202:	600f      	str	r7, [r1, #0]
 8008204:	bf18      	it	ne
 8008206:	2300      	movne	r3, #0
 8008208:	eba6 0807 	sub.w	r8, r6, r7
 800820c:	608b      	str	r3, [r1, #8]
 800820e:	f1b8 0f00 	cmp.w	r8, #0
 8008212:	dd9c      	ble.n	800814e <__sflush_r+0x1a>
 8008214:	6a21      	ldr	r1, [r4, #32]
 8008216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008218:	4643      	mov	r3, r8
 800821a:	463a      	mov	r2, r7
 800821c:	4628      	mov	r0, r5
 800821e:	47b0      	blx	r6
 8008220:	2800      	cmp	r0, #0
 8008222:	dc06      	bgt.n	8008232 <__sflush_r+0xfe>
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800822a:	81a3      	strh	r3, [r4, #12]
 800822c:	f04f 30ff 	mov.w	r0, #4294967295
 8008230:	e78e      	b.n	8008150 <__sflush_r+0x1c>
 8008232:	4407      	add	r7, r0
 8008234:	eba8 0800 	sub.w	r8, r8, r0
 8008238:	e7e9      	b.n	800820e <__sflush_r+0xda>
 800823a:	bf00      	nop
 800823c:	20400001 	.word	0x20400001

08008240 <_fflush_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	690b      	ldr	r3, [r1, #16]
 8008244:	4605      	mov	r5, r0
 8008246:	460c      	mov	r4, r1
 8008248:	b913      	cbnz	r3, 8008250 <_fflush_r+0x10>
 800824a:	2500      	movs	r5, #0
 800824c:	4628      	mov	r0, r5
 800824e:	bd38      	pop	{r3, r4, r5, pc}
 8008250:	b118      	cbz	r0, 800825a <_fflush_r+0x1a>
 8008252:	6983      	ldr	r3, [r0, #24]
 8008254:	b90b      	cbnz	r3, 800825a <_fflush_r+0x1a>
 8008256:	f000 f887 	bl	8008368 <__sinit>
 800825a:	4b14      	ldr	r3, [pc, #80]	; (80082ac <_fflush_r+0x6c>)
 800825c:	429c      	cmp	r4, r3
 800825e:	d11b      	bne.n	8008298 <_fflush_r+0x58>
 8008260:	686c      	ldr	r4, [r5, #4]
 8008262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0ef      	beq.n	800824a <_fflush_r+0xa>
 800826a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800826c:	07d0      	lsls	r0, r2, #31
 800826e:	d404      	bmi.n	800827a <_fflush_r+0x3a>
 8008270:	0599      	lsls	r1, r3, #22
 8008272:	d402      	bmi.n	800827a <_fflush_r+0x3a>
 8008274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008276:	f000 f915 	bl	80084a4 <__retarget_lock_acquire_recursive>
 800827a:	4628      	mov	r0, r5
 800827c:	4621      	mov	r1, r4
 800827e:	f7ff ff59 	bl	8008134 <__sflush_r>
 8008282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008284:	07da      	lsls	r2, r3, #31
 8008286:	4605      	mov	r5, r0
 8008288:	d4e0      	bmi.n	800824c <_fflush_r+0xc>
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	059b      	lsls	r3, r3, #22
 800828e:	d4dd      	bmi.n	800824c <_fflush_r+0xc>
 8008290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008292:	f000 f908 	bl	80084a6 <__retarget_lock_release_recursive>
 8008296:	e7d9      	b.n	800824c <_fflush_r+0xc>
 8008298:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <_fflush_r+0x70>)
 800829a:	429c      	cmp	r4, r3
 800829c:	d101      	bne.n	80082a2 <_fflush_r+0x62>
 800829e:	68ac      	ldr	r4, [r5, #8]
 80082a0:	e7df      	b.n	8008262 <_fflush_r+0x22>
 80082a2:	4b04      	ldr	r3, [pc, #16]	; (80082b4 <_fflush_r+0x74>)
 80082a4:	429c      	cmp	r4, r3
 80082a6:	bf08      	it	eq
 80082a8:	68ec      	ldreq	r4, [r5, #12]
 80082aa:	e7da      	b.n	8008262 <_fflush_r+0x22>
 80082ac:	08009bec 	.word	0x08009bec
 80082b0:	08009c0c 	.word	0x08009c0c
 80082b4:	08009bcc 	.word	0x08009bcc

080082b8 <std>:
 80082b8:	2300      	movs	r3, #0
 80082ba:	b510      	push	{r4, lr}
 80082bc:	4604      	mov	r4, r0
 80082be:	e9c0 3300 	strd	r3, r3, [r0]
 80082c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082c6:	6083      	str	r3, [r0, #8]
 80082c8:	8181      	strh	r1, [r0, #12]
 80082ca:	6643      	str	r3, [r0, #100]	; 0x64
 80082cc:	81c2      	strh	r2, [r0, #14]
 80082ce:	6183      	str	r3, [r0, #24]
 80082d0:	4619      	mov	r1, r3
 80082d2:	2208      	movs	r2, #8
 80082d4:	305c      	adds	r0, #92	; 0x5c
 80082d6:	f7fb fe17 	bl	8003f08 <memset>
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <std+0x38>)
 80082dc:	6263      	str	r3, [r4, #36]	; 0x24
 80082de:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <std+0x3c>)
 80082e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80082e2:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <std+0x40>)
 80082e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082e6:	4b05      	ldr	r3, [pc, #20]	; (80082fc <std+0x44>)
 80082e8:	6224      	str	r4, [r4, #32]
 80082ea:	6323      	str	r3, [r4, #48]	; 0x30
 80082ec:	bd10      	pop	{r4, pc}
 80082ee:	bf00      	nop
 80082f0:	08008609 	.word	0x08008609
 80082f4:	0800862b 	.word	0x0800862b
 80082f8:	08008663 	.word	0x08008663
 80082fc:	08008687 	.word	0x08008687

08008300 <_cleanup_r>:
 8008300:	4901      	ldr	r1, [pc, #4]	; (8008308 <_cleanup_r+0x8>)
 8008302:	f000 b8af 	b.w	8008464 <_fwalk_reent>
 8008306:	bf00      	nop
 8008308:	08008241 	.word	0x08008241

0800830c <__sfmoreglue>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	1e4a      	subs	r2, r1, #1
 8008310:	2568      	movs	r5, #104	; 0x68
 8008312:	4355      	muls	r5, r2
 8008314:	460e      	mov	r6, r1
 8008316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800831a:	f7ff fa7f 	bl	800781c <_malloc_r>
 800831e:	4604      	mov	r4, r0
 8008320:	b140      	cbz	r0, 8008334 <__sfmoreglue+0x28>
 8008322:	2100      	movs	r1, #0
 8008324:	e9c0 1600 	strd	r1, r6, [r0]
 8008328:	300c      	adds	r0, #12
 800832a:	60a0      	str	r0, [r4, #8]
 800832c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008330:	f7fb fdea 	bl	8003f08 <memset>
 8008334:	4620      	mov	r0, r4
 8008336:	bd70      	pop	{r4, r5, r6, pc}

08008338 <__sfp_lock_acquire>:
 8008338:	4801      	ldr	r0, [pc, #4]	; (8008340 <__sfp_lock_acquire+0x8>)
 800833a:	f000 b8b3 	b.w	80084a4 <__retarget_lock_acquire_recursive>
 800833e:	bf00      	nop
 8008340:	200002c0 	.word	0x200002c0

08008344 <__sfp_lock_release>:
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <__sfp_lock_release+0x8>)
 8008346:	f000 b8ae 	b.w	80084a6 <__retarget_lock_release_recursive>
 800834a:	bf00      	nop
 800834c:	200002c0 	.word	0x200002c0

08008350 <__sinit_lock_acquire>:
 8008350:	4801      	ldr	r0, [pc, #4]	; (8008358 <__sinit_lock_acquire+0x8>)
 8008352:	f000 b8a7 	b.w	80084a4 <__retarget_lock_acquire_recursive>
 8008356:	bf00      	nop
 8008358:	200002bb 	.word	0x200002bb

0800835c <__sinit_lock_release>:
 800835c:	4801      	ldr	r0, [pc, #4]	; (8008364 <__sinit_lock_release+0x8>)
 800835e:	f000 b8a2 	b.w	80084a6 <__retarget_lock_release_recursive>
 8008362:	bf00      	nop
 8008364:	200002bb 	.word	0x200002bb

08008368 <__sinit>:
 8008368:	b510      	push	{r4, lr}
 800836a:	4604      	mov	r4, r0
 800836c:	f7ff fff0 	bl	8008350 <__sinit_lock_acquire>
 8008370:	69a3      	ldr	r3, [r4, #24]
 8008372:	b11b      	cbz	r3, 800837c <__sinit+0x14>
 8008374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008378:	f7ff bff0 	b.w	800835c <__sinit_lock_release>
 800837c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008380:	6523      	str	r3, [r4, #80]	; 0x50
 8008382:	4b13      	ldr	r3, [pc, #76]	; (80083d0 <__sinit+0x68>)
 8008384:	4a13      	ldr	r2, [pc, #76]	; (80083d4 <__sinit+0x6c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	62a2      	str	r2, [r4, #40]	; 0x28
 800838a:	42a3      	cmp	r3, r4
 800838c:	bf04      	itt	eq
 800838e:	2301      	moveq	r3, #1
 8008390:	61a3      	streq	r3, [r4, #24]
 8008392:	4620      	mov	r0, r4
 8008394:	f000 f820 	bl	80083d8 <__sfp>
 8008398:	6060      	str	r0, [r4, #4]
 800839a:	4620      	mov	r0, r4
 800839c:	f000 f81c 	bl	80083d8 <__sfp>
 80083a0:	60a0      	str	r0, [r4, #8]
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f818 	bl	80083d8 <__sfp>
 80083a8:	2200      	movs	r2, #0
 80083aa:	60e0      	str	r0, [r4, #12]
 80083ac:	2104      	movs	r1, #4
 80083ae:	6860      	ldr	r0, [r4, #4]
 80083b0:	f7ff ff82 	bl	80082b8 <std>
 80083b4:	68a0      	ldr	r0, [r4, #8]
 80083b6:	2201      	movs	r2, #1
 80083b8:	2109      	movs	r1, #9
 80083ba:	f7ff ff7d 	bl	80082b8 <std>
 80083be:	68e0      	ldr	r0, [r4, #12]
 80083c0:	2202      	movs	r2, #2
 80083c2:	2112      	movs	r1, #18
 80083c4:	f7ff ff78 	bl	80082b8 <std>
 80083c8:	2301      	movs	r3, #1
 80083ca:	61a3      	str	r3, [r4, #24]
 80083cc:	e7d2      	b.n	8008374 <__sinit+0xc>
 80083ce:	bf00      	nop
 80083d0:	08009778 	.word	0x08009778
 80083d4:	08008301 	.word	0x08008301

080083d8 <__sfp>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	4607      	mov	r7, r0
 80083dc:	f7ff ffac 	bl	8008338 <__sfp_lock_acquire>
 80083e0:	4b1e      	ldr	r3, [pc, #120]	; (800845c <__sfp+0x84>)
 80083e2:	681e      	ldr	r6, [r3, #0]
 80083e4:	69b3      	ldr	r3, [r6, #24]
 80083e6:	b913      	cbnz	r3, 80083ee <__sfp+0x16>
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7ff ffbd 	bl	8008368 <__sinit>
 80083ee:	3648      	adds	r6, #72	; 0x48
 80083f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	d503      	bpl.n	8008400 <__sfp+0x28>
 80083f8:	6833      	ldr	r3, [r6, #0]
 80083fa:	b30b      	cbz	r3, 8008440 <__sfp+0x68>
 80083fc:	6836      	ldr	r6, [r6, #0]
 80083fe:	e7f7      	b.n	80083f0 <__sfp+0x18>
 8008400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008404:	b9d5      	cbnz	r5, 800843c <__sfp+0x64>
 8008406:	4b16      	ldr	r3, [pc, #88]	; (8008460 <__sfp+0x88>)
 8008408:	60e3      	str	r3, [r4, #12]
 800840a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800840e:	6665      	str	r5, [r4, #100]	; 0x64
 8008410:	f000 f847 	bl	80084a2 <__retarget_lock_init_recursive>
 8008414:	f7ff ff96 	bl	8008344 <__sfp_lock_release>
 8008418:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800841c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008420:	6025      	str	r5, [r4, #0]
 8008422:	61a5      	str	r5, [r4, #24]
 8008424:	2208      	movs	r2, #8
 8008426:	4629      	mov	r1, r5
 8008428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800842c:	f7fb fd6c 	bl	8003f08 <memset>
 8008430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008438:	4620      	mov	r0, r4
 800843a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800843c:	3468      	adds	r4, #104	; 0x68
 800843e:	e7d9      	b.n	80083f4 <__sfp+0x1c>
 8008440:	2104      	movs	r1, #4
 8008442:	4638      	mov	r0, r7
 8008444:	f7ff ff62 	bl	800830c <__sfmoreglue>
 8008448:	4604      	mov	r4, r0
 800844a:	6030      	str	r0, [r6, #0]
 800844c:	2800      	cmp	r0, #0
 800844e:	d1d5      	bne.n	80083fc <__sfp+0x24>
 8008450:	f7ff ff78 	bl	8008344 <__sfp_lock_release>
 8008454:	230c      	movs	r3, #12
 8008456:	603b      	str	r3, [r7, #0]
 8008458:	e7ee      	b.n	8008438 <__sfp+0x60>
 800845a:	bf00      	nop
 800845c:	08009778 	.word	0x08009778
 8008460:	ffff0001 	.word	0xffff0001

08008464 <_fwalk_reent>:
 8008464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008468:	4606      	mov	r6, r0
 800846a:	4688      	mov	r8, r1
 800846c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008470:	2700      	movs	r7, #0
 8008472:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008476:	f1b9 0901 	subs.w	r9, r9, #1
 800847a:	d505      	bpl.n	8008488 <_fwalk_reent+0x24>
 800847c:	6824      	ldr	r4, [r4, #0]
 800847e:	2c00      	cmp	r4, #0
 8008480:	d1f7      	bne.n	8008472 <_fwalk_reent+0xe>
 8008482:	4638      	mov	r0, r7
 8008484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008488:	89ab      	ldrh	r3, [r5, #12]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d907      	bls.n	800849e <_fwalk_reent+0x3a>
 800848e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008492:	3301      	adds	r3, #1
 8008494:	d003      	beq.n	800849e <_fwalk_reent+0x3a>
 8008496:	4629      	mov	r1, r5
 8008498:	4630      	mov	r0, r6
 800849a:	47c0      	blx	r8
 800849c:	4307      	orrs	r7, r0
 800849e:	3568      	adds	r5, #104	; 0x68
 80084a0:	e7e9      	b.n	8008476 <_fwalk_reent+0x12>

080084a2 <__retarget_lock_init_recursive>:
 80084a2:	4770      	bx	lr

080084a4 <__retarget_lock_acquire_recursive>:
 80084a4:	4770      	bx	lr

080084a6 <__retarget_lock_release_recursive>:
 80084a6:	4770      	bx	lr

080084a8 <__swhatbuf_r>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	460e      	mov	r6, r1
 80084ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b0:	2900      	cmp	r1, #0
 80084b2:	b096      	sub	sp, #88	; 0x58
 80084b4:	4614      	mov	r4, r2
 80084b6:	461d      	mov	r5, r3
 80084b8:	da07      	bge.n	80084ca <__swhatbuf_r+0x22>
 80084ba:	2300      	movs	r3, #0
 80084bc:	602b      	str	r3, [r5, #0]
 80084be:	89b3      	ldrh	r3, [r6, #12]
 80084c0:	061a      	lsls	r2, r3, #24
 80084c2:	d410      	bmi.n	80084e6 <__swhatbuf_r+0x3e>
 80084c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084c8:	e00e      	b.n	80084e8 <__swhatbuf_r+0x40>
 80084ca:	466a      	mov	r2, sp
 80084cc:	f000 f902 	bl	80086d4 <_fstat_r>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	dbf2      	blt.n	80084ba <__swhatbuf_r+0x12>
 80084d4:	9a01      	ldr	r2, [sp, #4]
 80084d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084de:	425a      	negs	r2, r3
 80084e0:	415a      	adcs	r2, r3
 80084e2:	602a      	str	r2, [r5, #0]
 80084e4:	e7ee      	b.n	80084c4 <__swhatbuf_r+0x1c>
 80084e6:	2340      	movs	r3, #64	; 0x40
 80084e8:	2000      	movs	r0, #0
 80084ea:	6023      	str	r3, [r4, #0]
 80084ec:	b016      	add	sp, #88	; 0x58
 80084ee:	bd70      	pop	{r4, r5, r6, pc}

080084f0 <__smakebuf_r>:
 80084f0:	898b      	ldrh	r3, [r1, #12]
 80084f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084f4:	079d      	lsls	r5, r3, #30
 80084f6:	4606      	mov	r6, r0
 80084f8:	460c      	mov	r4, r1
 80084fa:	d507      	bpl.n	800850c <__smakebuf_r+0x1c>
 80084fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	6123      	str	r3, [r4, #16]
 8008504:	2301      	movs	r3, #1
 8008506:	6163      	str	r3, [r4, #20]
 8008508:	b002      	add	sp, #8
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	ab01      	add	r3, sp, #4
 800850e:	466a      	mov	r2, sp
 8008510:	f7ff ffca 	bl	80084a8 <__swhatbuf_r>
 8008514:	9900      	ldr	r1, [sp, #0]
 8008516:	4605      	mov	r5, r0
 8008518:	4630      	mov	r0, r6
 800851a:	f7ff f97f 	bl	800781c <_malloc_r>
 800851e:	b948      	cbnz	r0, 8008534 <__smakebuf_r+0x44>
 8008520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008524:	059a      	lsls	r2, r3, #22
 8008526:	d4ef      	bmi.n	8008508 <__smakebuf_r+0x18>
 8008528:	f023 0303 	bic.w	r3, r3, #3
 800852c:	f043 0302 	orr.w	r3, r3, #2
 8008530:	81a3      	strh	r3, [r4, #12]
 8008532:	e7e3      	b.n	80084fc <__smakebuf_r+0xc>
 8008534:	4b0d      	ldr	r3, [pc, #52]	; (800856c <__smakebuf_r+0x7c>)
 8008536:	62b3      	str	r3, [r6, #40]	; 0x28
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	6020      	str	r0, [r4, #0]
 800853c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008540:	81a3      	strh	r3, [r4, #12]
 8008542:	9b00      	ldr	r3, [sp, #0]
 8008544:	6163      	str	r3, [r4, #20]
 8008546:	9b01      	ldr	r3, [sp, #4]
 8008548:	6120      	str	r0, [r4, #16]
 800854a:	b15b      	cbz	r3, 8008564 <__smakebuf_r+0x74>
 800854c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008550:	4630      	mov	r0, r6
 8008552:	f000 f8d1 	bl	80086f8 <_isatty_r>
 8008556:	b128      	cbz	r0, 8008564 <__smakebuf_r+0x74>
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	f043 0301 	orr.w	r3, r3, #1
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	89a0      	ldrh	r0, [r4, #12]
 8008566:	4305      	orrs	r5, r0
 8008568:	81a5      	strh	r5, [r4, #12]
 800856a:	e7cd      	b.n	8008508 <__smakebuf_r+0x18>
 800856c:	08008301 	.word	0x08008301

08008570 <_malloc_usable_size_r>:
 8008570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008574:	1f18      	subs	r0, r3, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	bfbc      	itt	lt
 800857a:	580b      	ldrlt	r3, [r1, r0]
 800857c:	18c0      	addlt	r0, r0, r3
 800857e:	4770      	bx	lr

08008580 <_raise_r>:
 8008580:	291f      	cmp	r1, #31
 8008582:	b538      	push	{r3, r4, r5, lr}
 8008584:	4604      	mov	r4, r0
 8008586:	460d      	mov	r5, r1
 8008588:	d904      	bls.n	8008594 <_raise_r+0x14>
 800858a:	2316      	movs	r3, #22
 800858c:	6003      	str	r3, [r0, #0]
 800858e:	f04f 30ff 	mov.w	r0, #4294967295
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008596:	b112      	cbz	r2, 800859e <_raise_r+0x1e>
 8008598:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800859c:	b94b      	cbnz	r3, 80085b2 <_raise_r+0x32>
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 f830 	bl	8008604 <_getpid_r>
 80085a4:	462a      	mov	r2, r5
 80085a6:	4601      	mov	r1, r0
 80085a8:	4620      	mov	r0, r4
 80085aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ae:	f000 b817 	b.w	80085e0 <_kill_r>
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d00a      	beq.n	80085cc <_raise_r+0x4c>
 80085b6:	1c59      	adds	r1, r3, #1
 80085b8:	d103      	bne.n	80085c2 <_raise_r+0x42>
 80085ba:	2316      	movs	r3, #22
 80085bc:	6003      	str	r3, [r0, #0]
 80085be:	2001      	movs	r0, #1
 80085c0:	e7e7      	b.n	8008592 <_raise_r+0x12>
 80085c2:	2400      	movs	r4, #0
 80085c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085c8:	4628      	mov	r0, r5
 80085ca:	4798      	blx	r3
 80085cc:	2000      	movs	r0, #0
 80085ce:	e7e0      	b.n	8008592 <_raise_r+0x12>

080085d0 <raise>:
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <raise+0xc>)
 80085d2:	4601      	mov	r1, r0
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	f7ff bfd3 	b.w	8008580 <_raise_r>
 80085da:	bf00      	nop
 80085dc:	20000008 	.word	0x20000008

080085e0 <_kill_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4d07      	ldr	r5, [pc, #28]	; (8008600 <_kill_r+0x20>)
 80085e4:	2300      	movs	r3, #0
 80085e6:	4604      	mov	r4, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	4611      	mov	r1, r2
 80085ec:	602b      	str	r3, [r5, #0]
 80085ee:	f7fa f8b7 	bl	8002760 <_kill>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	d102      	bne.n	80085fc <_kill_r+0x1c>
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	b103      	cbz	r3, 80085fc <_kill_r+0x1c>
 80085fa:	6023      	str	r3, [r4, #0]
 80085fc:	bd38      	pop	{r3, r4, r5, pc}
 80085fe:	bf00      	nop
 8008600:	200002b4 	.word	0x200002b4

08008604 <_getpid_r>:
 8008604:	f7fa b8a4 	b.w	8002750 <_getpid>

08008608 <__sread>:
 8008608:	b510      	push	{r4, lr}
 800860a:	460c      	mov	r4, r1
 800860c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008610:	f000 f894 	bl	800873c <_read_r>
 8008614:	2800      	cmp	r0, #0
 8008616:	bfab      	itete	ge
 8008618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800861a:	89a3      	ldrhlt	r3, [r4, #12]
 800861c:	181b      	addge	r3, r3, r0
 800861e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008622:	bfac      	ite	ge
 8008624:	6563      	strge	r3, [r4, #84]	; 0x54
 8008626:	81a3      	strhlt	r3, [r4, #12]
 8008628:	bd10      	pop	{r4, pc}

0800862a <__swrite>:
 800862a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800862e:	461f      	mov	r7, r3
 8008630:	898b      	ldrh	r3, [r1, #12]
 8008632:	05db      	lsls	r3, r3, #23
 8008634:	4605      	mov	r5, r0
 8008636:	460c      	mov	r4, r1
 8008638:	4616      	mov	r6, r2
 800863a:	d505      	bpl.n	8008648 <__swrite+0x1e>
 800863c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008640:	2302      	movs	r3, #2
 8008642:	2200      	movs	r2, #0
 8008644:	f000 f868 	bl	8008718 <_lseek_r>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800864e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008652:	81a3      	strh	r3, [r4, #12]
 8008654:	4632      	mov	r2, r6
 8008656:	463b      	mov	r3, r7
 8008658:	4628      	mov	r0, r5
 800865a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800865e:	f000 b817 	b.w	8008690 <_write_r>

08008662 <__sseek>:
 8008662:	b510      	push	{r4, lr}
 8008664:	460c      	mov	r4, r1
 8008666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866a:	f000 f855 	bl	8008718 <_lseek_r>
 800866e:	1c43      	adds	r3, r0, #1
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	bf15      	itete	ne
 8008674:	6560      	strne	r0, [r4, #84]	; 0x54
 8008676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800867a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800867e:	81a3      	strheq	r3, [r4, #12]
 8008680:	bf18      	it	ne
 8008682:	81a3      	strhne	r3, [r4, #12]
 8008684:	bd10      	pop	{r4, pc}

08008686 <__sclose>:
 8008686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800868a:	f000 b813 	b.w	80086b4 <_close_r>
	...

08008690 <_write_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d07      	ldr	r5, [pc, #28]	; (80086b0 <_write_r+0x20>)
 8008694:	4604      	mov	r4, r0
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
 800869a:	2200      	movs	r2, #0
 800869c:	602a      	str	r2, [r5, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	f7fa f895 	bl	80027ce <_write>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_write_r+0x1e>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_write_r+0x1e>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	200002b4 	.word	0x200002b4

080086b4 <_close_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d06      	ldr	r5, [pc, #24]	; (80086d0 <_close_r+0x1c>)
 80086b8:	2300      	movs	r3, #0
 80086ba:	4604      	mov	r4, r0
 80086bc:	4608      	mov	r0, r1
 80086be:	602b      	str	r3, [r5, #0]
 80086c0:	f7fa f8a1 	bl	8002806 <_close>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_close_r+0x1a>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_close_r+0x1a>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	200002b4 	.word	0x200002b4

080086d4 <_fstat_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d07      	ldr	r5, [pc, #28]	; (80086f4 <_fstat_r+0x20>)
 80086d8:	2300      	movs	r3, #0
 80086da:	4604      	mov	r4, r0
 80086dc:	4608      	mov	r0, r1
 80086de:	4611      	mov	r1, r2
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	f7fa f89c 	bl	800281e <_fstat>
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	d102      	bne.n	80086f0 <_fstat_r+0x1c>
 80086ea:	682b      	ldr	r3, [r5, #0]
 80086ec:	b103      	cbz	r3, 80086f0 <_fstat_r+0x1c>
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	bd38      	pop	{r3, r4, r5, pc}
 80086f2:	bf00      	nop
 80086f4:	200002b4 	.word	0x200002b4

080086f8 <_isatty_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4d06      	ldr	r5, [pc, #24]	; (8008714 <_isatty_r+0x1c>)
 80086fc:	2300      	movs	r3, #0
 80086fe:	4604      	mov	r4, r0
 8008700:	4608      	mov	r0, r1
 8008702:	602b      	str	r3, [r5, #0]
 8008704:	f7fa f89b 	bl	800283e <_isatty>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d102      	bne.n	8008712 <_isatty_r+0x1a>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	b103      	cbz	r3, 8008712 <_isatty_r+0x1a>
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	200002b4 	.word	0x200002b4

08008718 <_lseek_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4d07      	ldr	r5, [pc, #28]	; (8008738 <_lseek_r+0x20>)
 800871c:	4604      	mov	r4, r0
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	2200      	movs	r2, #0
 8008724:	602a      	str	r2, [r5, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	f7fa f894 	bl	8002854 <_lseek>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_lseek_r+0x1e>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_lseek_r+0x1e>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	200002b4 	.word	0x200002b4

0800873c <_read_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d07      	ldr	r5, [pc, #28]	; (800875c <_read_r+0x20>)
 8008740:	4604      	mov	r4, r0
 8008742:	4608      	mov	r0, r1
 8008744:	4611      	mov	r1, r2
 8008746:	2200      	movs	r2, #0
 8008748:	602a      	str	r2, [r5, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	f7fa f822 	bl	8002794 <_read>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_read_r+0x1e>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_read_r+0x1e>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	200002b4 	.word	0x200002b4

08008760 <pow>:
 8008760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008764:	ec59 8b10 	vmov	r8, r9, d0
 8008768:	ec57 6b11 	vmov	r6, r7, d1
 800876c:	f000 f8a8 	bl	80088c0 <__ieee754_pow>
 8008770:	4b4e      	ldr	r3, [pc, #312]	; (80088ac <pow+0x14c>)
 8008772:	f993 3000 	ldrsb.w	r3, [r3]
 8008776:	3301      	adds	r3, #1
 8008778:	ec55 4b10 	vmov	r4, r5, d0
 800877c:	d015      	beq.n	80087aa <pow+0x4a>
 800877e:	4632      	mov	r2, r6
 8008780:	463b      	mov	r3, r7
 8008782:	4630      	mov	r0, r6
 8008784:	4639      	mov	r1, r7
 8008786:	f7f8 f9d1 	bl	8000b2c <__aeabi_dcmpun>
 800878a:	b970      	cbnz	r0, 80087aa <pow+0x4a>
 800878c:	4642      	mov	r2, r8
 800878e:	464b      	mov	r3, r9
 8008790:	4640      	mov	r0, r8
 8008792:	4649      	mov	r1, r9
 8008794:	f7f8 f9ca 	bl	8000b2c <__aeabi_dcmpun>
 8008798:	2200      	movs	r2, #0
 800879a:	2300      	movs	r3, #0
 800879c:	b148      	cbz	r0, 80087b2 <pow+0x52>
 800879e:	4630      	mov	r0, r6
 80087a0:	4639      	mov	r1, r7
 80087a2:	f7f8 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d17d      	bne.n	80088a6 <pow+0x146>
 80087aa:	ec45 4b10 	vmov	d0, r4, r5
 80087ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b2:	4640      	mov	r0, r8
 80087b4:	4649      	mov	r1, r9
 80087b6:	f7f8 f987 	bl	8000ac8 <__aeabi_dcmpeq>
 80087ba:	b1e0      	cbz	r0, 80087f6 <pow+0x96>
 80087bc:	2200      	movs	r2, #0
 80087be:	2300      	movs	r3, #0
 80087c0:	4630      	mov	r0, r6
 80087c2:	4639      	mov	r1, r7
 80087c4:	f7f8 f980 	bl	8000ac8 <__aeabi_dcmpeq>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d16c      	bne.n	80088a6 <pow+0x146>
 80087cc:	ec47 6b10 	vmov	d0, r6, r7
 80087d0:	f000 fe55 	bl	800947e <finite>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d0e8      	beq.n	80087aa <pow+0x4a>
 80087d8:	2200      	movs	r2, #0
 80087da:	2300      	movs	r3, #0
 80087dc:	4630      	mov	r0, r6
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f8 f97c 	bl	8000adc <__aeabi_dcmplt>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d0e0      	beq.n	80087aa <pow+0x4a>
 80087e8:	f7fb fb64 	bl	8003eb4 <__errno>
 80087ec:	2321      	movs	r3, #33	; 0x21
 80087ee:	6003      	str	r3, [r0, #0]
 80087f0:	2400      	movs	r4, #0
 80087f2:	4d2f      	ldr	r5, [pc, #188]	; (80088b0 <pow+0x150>)
 80087f4:	e7d9      	b.n	80087aa <pow+0x4a>
 80087f6:	ec45 4b10 	vmov	d0, r4, r5
 80087fa:	f000 fe40 	bl	800947e <finite>
 80087fe:	bbb8      	cbnz	r0, 8008870 <pow+0x110>
 8008800:	ec49 8b10 	vmov	d0, r8, r9
 8008804:	f000 fe3b 	bl	800947e <finite>
 8008808:	b390      	cbz	r0, 8008870 <pow+0x110>
 800880a:	ec47 6b10 	vmov	d0, r6, r7
 800880e:	f000 fe36 	bl	800947e <finite>
 8008812:	b368      	cbz	r0, 8008870 <pow+0x110>
 8008814:	4622      	mov	r2, r4
 8008816:	462b      	mov	r3, r5
 8008818:	4620      	mov	r0, r4
 800881a:	4629      	mov	r1, r5
 800881c:	f7f8 f986 	bl	8000b2c <__aeabi_dcmpun>
 8008820:	b160      	cbz	r0, 800883c <pow+0xdc>
 8008822:	f7fb fb47 	bl	8003eb4 <__errno>
 8008826:	2321      	movs	r3, #33	; 0x21
 8008828:	6003      	str	r3, [r0, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	2300      	movs	r3, #0
 800882e:	4610      	mov	r0, r2
 8008830:	4619      	mov	r1, r3
 8008832:	f7f8 f80b 	bl	800084c <__aeabi_ddiv>
 8008836:	4604      	mov	r4, r0
 8008838:	460d      	mov	r5, r1
 800883a:	e7b6      	b.n	80087aa <pow+0x4a>
 800883c:	f7fb fb3a 	bl	8003eb4 <__errno>
 8008840:	2322      	movs	r3, #34	; 0x22
 8008842:	6003      	str	r3, [r0, #0]
 8008844:	2200      	movs	r2, #0
 8008846:	2300      	movs	r3, #0
 8008848:	4640      	mov	r0, r8
 800884a:	4649      	mov	r1, r9
 800884c:	f7f8 f946 	bl	8000adc <__aeabi_dcmplt>
 8008850:	2400      	movs	r4, #0
 8008852:	b158      	cbz	r0, 800886c <pow+0x10c>
 8008854:	ec47 6b10 	vmov	d0, r6, r7
 8008858:	f000 fe1c 	bl	8009494 <rint>
 800885c:	4632      	mov	r2, r6
 800885e:	ec51 0b10 	vmov	r0, r1, d0
 8008862:	463b      	mov	r3, r7
 8008864:	f7f8 f930 	bl	8000ac8 <__aeabi_dcmpeq>
 8008868:	2800      	cmp	r0, #0
 800886a:	d0c2      	beq.n	80087f2 <pow+0x92>
 800886c:	4d11      	ldr	r5, [pc, #68]	; (80088b4 <pow+0x154>)
 800886e:	e79c      	b.n	80087aa <pow+0x4a>
 8008870:	2200      	movs	r2, #0
 8008872:	2300      	movs	r3, #0
 8008874:	4620      	mov	r0, r4
 8008876:	4629      	mov	r1, r5
 8008878:	f7f8 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800887c:	2800      	cmp	r0, #0
 800887e:	d094      	beq.n	80087aa <pow+0x4a>
 8008880:	ec49 8b10 	vmov	d0, r8, r9
 8008884:	f000 fdfb 	bl	800947e <finite>
 8008888:	2800      	cmp	r0, #0
 800888a:	d08e      	beq.n	80087aa <pow+0x4a>
 800888c:	ec47 6b10 	vmov	d0, r6, r7
 8008890:	f000 fdf5 	bl	800947e <finite>
 8008894:	2800      	cmp	r0, #0
 8008896:	d088      	beq.n	80087aa <pow+0x4a>
 8008898:	f7fb fb0c 	bl	8003eb4 <__errno>
 800889c:	2322      	movs	r3, #34	; 0x22
 800889e:	6003      	str	r3, [r0, #0]
 80088a0:	2400      	movs	r4, #0
 80088a2:	2500      	movs	r5, #0
 80088a4:	e781      	b.n	80087aa <pow+0x4a>
 80088a6:	4d04      	ldr	r5, [pc, #16]	; (80088b8 <pow+0x158>)
 80088a8:	2400      	movs	r4, #0
 80088aa:	e77e      	b.n	80087aa <pow+0x4a>
 80088ac:	200001dc 	.word	0x200001dc
 80088b0:	fff00000 	.word	0xfff00000
 80088b4:	7ff00000 	.word	0x7ff00000
 80088b8:	3ff00000 	.word	0x3ff00000
 80088bc:	00000000 	.word	0x00000000

080088c0 <__ieee754_pow>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	ed2d 8b06 	vpush	{d8-d10}
 80088c8:	b08d      	sub	sp, #52	; 0x34
 80088ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 80088ce:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80088d2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80088d6:	ea56 0100 	orrs.w	r1, r6, r0
 80088da:	ec53 2b10 	vmov	r2, r3, d0
 80088de:	f000 84d1 	beq.w	8009284 <__ieee754_pow+0x9c4>
 80088e2:	497f      	ldr	r1, [pc, #508]	; (8008ae0 <__ieee754_pow+0x220>)
 80088e4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80088e8:	428c      	cmp	r4, r1
 80088ea:	ee10 8a10 	vmov	r8, s0
 80088ee:	4699      	mov	r9, r3
 80088f0:	dc09      	bgt.n	8008906 <__ieee754_pow+0x46>
 80088f2:	d103      	bne.n	80088fc <__ieee754_pow+0x3c>
 80088f4:	b97a      	cbnz	r2, 8008916 <__ieee754_pow+0x56>
 80088f6:	42a6      	cmp	r6, r4
 80088f8:	dd02      	ble.n	8008900 <__ieee754_pow+0x40>
 80088fa:	e00c      	b.n	8008916 <__ieee754_pow+0x56>
 80088fc:	428e      	cmp	r6, r1
 80088fe:	dc02      	bgt.n	8008906 <__ieee754_pow+0x46>
 8008900:	428e      	cmp	r6, r1
 8008902:	d110      	bne.n	8008926 <__ieee754_pow+0x66>
 8008904:	b178      	cbz	r0, 8008926 <__ieee754_pow+0x66>
 8008906:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800890a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800890e:	ea54 0308 	orrs.w	r3, r4, r8
 8008912:	f000 84b7 	beq.w	8009284 <__ieee754_pow+0x9c4>
 8008916:	4873      	ldr	r0, [pc, #460]	; (8008ae4 <__ieee754_pow+0x224>)
 8008918:	b00d      	add	sp, #52	; 0x34
 800891a:	ecbd 8b06 	vpop	{d8-d10}
 800891e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008922:	f7ff b931 	b.w	8007b88 <nan>
 8008926:	f1b9 0f00 	cmp.w	r9, #0
 800892a:	da36      	bge.n	800899a <__ieee754_pow+0xda>
 800892c:	496e      	ldr	r1, [pc, #440]	; (8008ae8 <__ieee754_pow+0x228>)
 800892e:	428e      	cmp	r6, r1
 8008930:	dc51      	bgt.n	80089d6 <__ieee754_pow+0x116>
 8008932:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8008936:	428e      	cmp	r6, r1
 8008938:	f340 84af 	ble.w	800929a <__ieee754_pow+0x9da>
 800893c:	1531      	asrs	r1, r6, #20
 800893e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008942:	2914      	cmp	r1, #20
 8008944:	dd0f      	ble.n	8008966 <__ieee754_pow+0xa6>
 8008946:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800894a:	fa20 fc01 	lsr.w	ip, r0, r1
 800894e:	fa0c f101 	lsl.w	r1, ip, r1
 8008952:	4281      	cmp	r1, r0
 8008954:	f040 84a1 	bne.w	800929a <__ieee754_pow+0x9da>
 8008958:	f00c 0c01 	and.w	ip, ip, #1
 800895c:	f1cc 0102 	rsb	r1, ip, #2
 8008960:	9100      	str	r1, [sp, #0]
 8008962:	b180      	cbz	r0, 8008986 <__ieee754_pow+0xc6>
 8008964:	e059      	b.n	8008a1a <__ieee754_pow+0x15a>
 8008966:	2800      	cmp	r0, #0
 8008968:	d155      	bne.n	8008a16 <__ieee754_pow+0x156>
 800896a:	f1c1 0114 	rsb	r1, r1, #20
 800896e:	fa46 fc01 	asr.w	ip, r6, r1
 8008972:	fa0c f101 	lsl.w	r1, ip, r1
 8008976:	42b1      	cmp	r1, r6
 8008978:	f040 848c 	bne.w	8009294 <__ieee754_pow+0x9d4>
 800897c:	f00c 0c01 	and.w	ip, ip, #1
 8008980:	f1cc 0102 	rsb	r1, ip, #2
 8008984:	9100      	str	r1, [sp, #0]
 8008986:	4959      	ldr	r1, [pc, #356]	; (8008aec <__ieee754_pow+0x22c>)
 8008988:	428e      	cmp	r6, r1
 800898a:	d12d      	bne.n	80089e8 <__ieee754_pow+0x128>
 800898c:	2f00      	cmp	r7, #0
 800898e:	da79      	bge.n	8008a84 <__ieee754_pow+0x1c4>
 8008990:	4956      	ldr	r1, [pc, #344]	; (8008aec <__ieee754_pow+0x22c>)
 8008992:	2000      	movs	r0, #0
 8008994:	f7f7 ff5a 	bl	800084c <__aeabi_ddiv>
 8008998:	e016      	b.n	80089c8 <__ieee754_pow+0x108>
 800899a:	2100      	movs	r1, #0
 800899c:	9100      	str	r1, [sp, #0]
 800899e:	2800      	cmp	r0, #0
 80089a0:	d13b      	bne.n	8008a1a <__ieee754_pow+0x15a>
 80089a2:	494f      	ldr	r1, [pc, #316]	; (8008ae0 <__ieee754_pow+0x220>)
 80089a4:	428e      	cmp	r6, r1
 80089a6:	d1ee      	bne.n	8008986 <__ieee754_pow+0xc6>
 80089a8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80089ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80089b0:	ea53 0308 	orrs.w	r3, r3, r8
 80089b4:	f000 8466 	beq.w	8009284 <__ieee754_pow+0x9c4>
 80089b8:	4b4d      	ldr	r3, [pc, #308]	; (8008af0 <__ieee754_pow+0x230>)
 80089ba:	429c      	cmp	r4, r3
 80089bc:	dd0d      	ble.n	80089da <__ieee754_pow+0x11a>
 80089be:	2f00      	cmp	r7, #0
 80089c0:	f280 8464 	bge.w	800928c <__ieee754_pow+0x9cc>
 80089c4:	2000      	movs	r0, #0
 80089c6:	2100      	movs	r1, #0
 80089c8:	ec41 0b10 	vmov	d0, r0, r1
 80089cc:	b00d      	add	sp, #52	; 0x34
 80089ce:	ecbd 8b06 	vpop	{d8-d10}
 80089d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d6:	2102      	movs	r1, #2
 80089d8:	e7e0      	b.n	800899c <__ieee754_pow+0xdc>
 80089da:	2f00      	cmp	r7, #0
 80089dc:	daf2      	bge.n	80089c4 <__ieee754_pow+0x104>
 80089de:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80089e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80089e6:	e7ef      	b.n	80089c8 <__ieee754_pow+0x108>
 80089e8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80089ec:	d104      	bne.n	80089f8 <__ieee754_pow+0x138>
 80089ee:	4610      	mov	r0, r2
 80089f0:	4619      	mov	r1, r3
 80089f2:	f7f7 fe01 	bl	80005f8 <__aeabi_dmul>
 80089f6:	e7e7      	b.n	80089c8 <__ieee754_pow+0x108>
 80089f8:	493e      	ldr	r1, [pc, #248]	; (8008af4 <__ieee754_pow+0x234>)
 80089fa:	428f      	cmp	r7, r1
 80089fc:	d10d      	bne.n	8008a1a <__ieee754_pow+0x15a>
 80089fe:	f1b9 0f00 	cmp.w	r9, #0
 8008a02:	db0a      	blt.n	8008a1a <__ieee754_pow+0x15a>
 8008a04:	ec43 2b10 	vmov	d0, r2, r3
 8008a08:	b00d      	add	sp, #52	; 0x34
 8008a0a:	ecbd 8b06 	vpop	{d8-d10}
 8008a0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a12:	f000 bc77 	b.w	8009304 <__ieee754_sqrt>
 8008a16:	2100      	movs	r1, #0
 8008a18:	9100      	str	r1, [sp, #0]
 8008a1a:	ec43 2b10 	vmov	d0, r2, r3
 8008a1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a22:	f000 fd23 	bl	800946c <fabs>
 8008a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a2a:	ec51 0b10 	vmov	r0, r1, d0
 8008a2e:	f1b8 0f00 	cmp.w	r8, #0
 8008a32:	d12a      	bne.n	8008a8a <__ieee754_pow+0x1ca>
 8008a34:	b12c      	cbz	r4, 8008a42 <__ieee754_pow+0x182>
 8008a36:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008aec <__ieee754_pow+0x22c>
 8008a3a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008a3e:	45e6      	cmp	lr, ip
 8008a40:	d123      	bne.n	8008a8a <__ieee754_pow+0x1ca>
 8008a42:	2f00      	cmp	r7, #0
 8008a44:	da05      	bge.n	8008a52 <__ieee754_pow+0x192>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	4927      	ldr	r1, [pc, #156]	; (8008aec <__ieee754_pow+0x22c>)
 8008a4e:	f7f7 fefd 	bl	800084c <__aeabi_ddiv>
 8008a52:	f1b9 0f00 	cmp.w	r9, #0
 8008a56:	dab7      	bge.n	80089c8 <__ieee754_pow+0x108>
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008a5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008a62:	4323      	orrs	r3, r4
 8008a64:	d108      	bne.n	8008a78 <__ieee754_pow+0x1b8>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	f7f7 fc0b 	bl	8000288 <__aeabi_dsub>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	e78d      	b.n	8008994 <__ieee754_pow+0xd4>
 8008a78:	9b00      	ldr	r3, [sp, #0]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d1a4      	bne.n	80089c8 <__ieee754_pow+0x108>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a84:	4610      	mov	r0, r2
 8008a86:	4619      	mov	r1, r3
 8008a88:	e79e      	b.n	80089c8 <__ieee754_pow+0x108>
 8008a8a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008a8e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8008a92:	950a      	str	r5, [sp, #40]	; 0x28
 8008a94:	9d00      	ldr	r5, [sp, #0]
 8008a96:	46ac      	mov	ip, r5
 8008a98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a9a:	ea5c 0505 	orrs.w	r5, ip, r5
 8008a9e:	d0e4      	beq.n	8008a6a <__ieee754_pow+0x1aa>
 8008aa0:	4b15      	ldr	r3, [pc, #84]	; (8008af8 <__ieee754_pow+0x238>)
 8008aa2:	429e      	cmp	r6, r3
 8008aa4:	f340 80fc 	ble.w	8008ca0 <__ieee754_pow+0x3e0>
 8008aa8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008aac:	429e      	cmp	r6, r3
 8008aae:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <__ieee754_pow+0x230>)
 8008ab0:	dd07      	ble.n	8008ac2 <__ieee754_pow+0x202>
 8008ab2:	429c      	cmp	r4, r3
 8008ab4:	dc0a      	bgt.n	8008acc <__ieee754_pow+0x20c>
 8008ab6:	2f00      	cmp	r7, #0
 8008ab8:	da84      	bge.n	80089c4 <__ieee754_pow+0x104>
 8008aba:	a307      	add	r3, pc, #28	; (adr r3, 8008ad8 <__ieee754_pow+0x218>)
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	e795      	b.n	80089ee <__ieee754_pow+0x12e>
 8008ac2:	429c      	cmp	r4, r3
 8008ac4:	dbf7      	blt.n	8008ab6 <__ieee754_pow+0x1f6>
 8008ac6:	4b09      	ldr	r3, [pc, #36]	; (8008aec <__ieee754_pow+0x22c>)
 8008ac8:	429c      	cmp	r4, r3
 8008aca:	dd17      	ble.n	8008afc <__ieee754_pow+0x23c>
 8008acc:	2f00      	cmp	r7, #0
 8008ace:	dcf4      	bgt.n	8008aba <__ieee754_pow+0x1fa>
 8008ad0:	e778      	b.n	80089c4 <__ieee754_pow+0x104>
 8008ad2:	bf00      	nop
 8008ad4:	f3af 8000 	nop.w
 8008ad8:	8800759c 	.word	0x8800759c
 8008adc:	7e37e43c 	.word	0x7e37e43c
 8008ae0:	7ff00000 	.word	0x7ff00000
 8008ae4:	08009bc8 	.word	0x08009bc8
 8008ae8:	433fffff 	.word	0x433fffff
 8008aec:	3ff00000 	.word	0x3ff00000
 8008af0:	3fefffff 	.word	0x3fefffff
 8008af4:	3fe00000 	.word	0x3fe00000
 8008af8:	41e00000 	.word	0x41e00000
 8008afc:	4b64      	ldr	r3, [pc, #400]	; (8008c90 <__ieee754_pow+0x3d0>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	f7f7 fbc2 	bl	8000288 <__aeabi_dsub>
 8008b04:	a356      	add	r3, pc, #344	; (adr r3, 8008c60 <__ieee754_pow+0x3a0>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	f7f7 fd73 	bl	80005f8 <__aeabi_dmul>
 8008b12:	a355      	add	r3, pc, #340	; (adr r3, 8008c68 <__ieee754_pow+0x3a8>)
 8008b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b18:	4606      	mov	r6, r0
 8008b1a:	460f      	mov	r7, r1
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f7f7 fd6a 	bl	80005f8 <__aeabi_dmul>
 8008b24:	4b5b      	ldr	r3, [pc, #364]	; (8008c94 <__ieee754_pow+0x3d4>)
 8008b26:	4682      	mov	sl, r0
 8008b28:	468b      	mov	fp, r1
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	4629      	mov	r1, r5
 8008b30:	f7f7 fd62 	bl	80005f8 <__aeabi_dmul>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	a14d      	add	r1, pc, #308	; (adr r1, 8008c70 <__ieee754_pow+0x3b0>)
 8008b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b3e:	f7f7 fba3 	bl	8000288 <__aeabi_dsub>
 8008b42:	4622      	mov	r2, r4
 8008b44:	462b      	mov	r3, r5
 8008b46:	f7f7 fd57 	bl	80005f8 <__aeabi_dmul>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	2000      	movs	r0, #0
 8008b50:	4951      	ldr	r1, [pc, #324]	; (8008c98 <__ieee754_pow+0x3d8>)
 8008b52:	f7f7 fb99 	bl	8000288 <__aeabi_dsub>
 8008b56:	4622      	mov	r2, r4
 8008b58:	4680      	mov	r8, r0
 8008b5a:	4689      	mov	r9, r1
 8008b5c:	462b      	mov	r3, r5
 8008b5e:	4620      	mov	r0, r4
 8008b60:	4629      	mov	r1, r5
 8008b62:	f7f7 fd49 	bl	80005f8 <__aeabi_dmul>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	f7f7 fd43 	bl	80005f8 <__aeabi_dmul>
 8008b72:	a341      	add	r3, pc, #260	; (adr r3, 8008c78 <__ieee754_pow+0x3b8>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	f7f7 fd3e 	bl	80005f8 <__aeabi_dmul>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4650      	mov	r0, sl
 8008b82:	4659      	mov	r1, fp
 8008b84:	f7f7 fb80 	bl	8000288 <__aeabi_dsub>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	4689      	mov	r9, r1
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f7 fb7a 	bl	800028c <__adddf3>
 8008b98:	2400      	movs	r4, #0
 8008b9a:	4632      	mov	r2, r6
 8008b9c:	463b      	mov	r3, r7
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	f7f7 fb71 	bl	8000288 <__aeabi_dsub>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4640      	mov	r0, r8
 8008bac:	4649      	mov	r1, r9
 8008bae:	f7f7 fb6b 	bl	8000288 <__aeabi_dsub>
 8008bb2:	9b00      	ldr	r3, [sp, #0]
 8008bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	4682      	mov	sl, r0
 8008bbc:	468b      	mov	fp, r1
 8008bbe:	f040 81f1 	bne.w	8008fa4 <__ieee754_pow+0x6e4>
 8008bc2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008c80 <__ieee754_pow+0x3c0>
 8008bc6:	eeb0 8a47 	vmov.f32	s16, s14
 8008bca:	eef0 8a67 	vmov.f32	s17, s15
 8008bce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	4632      	mov	r2, r6
 8008bd6:	463b      	mov	r3, r7
 8008bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bdc:	f7f7 fb54 	bl	8000288 <__aeabi_dsub>
 8008be0:	4622      	mov	r2, r4
 8008be2:	462b      	mov	r3, r5
 8008be4:	f7f7 fd08 	bl	80005f8 <__aeabi_dmul>
 8008be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bec:	4680      	mov	r8, r0
 8008bee:	4689      	mov	r9, r1
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	f7f7 fd00 	bl	80005f8 <__aeabi_dmul>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	4649      	mov	r1, r9
 8008c00:	f7f7 fb44 	bl	800028c <__adddf3>
 8008c04:	4632      	mov	r2, r6
 8008c06:	463b      	mov	r3, r7
 8008c08:	4680      	mov	r8, r0
 8008c0a:	4689      	mov	r9, r1
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	4629      	mov	r1, r5
 8008c10:	f7f7 fcf2 	bl	80005f8 <__aeabi_dmul>
 8008c14:	460b      	mov	r3, r1
 8008c16:	4604      	mov	r4, r0
 8008c18:	460d      	mov	r5, r1
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	4640      	mov	r0, r8
 8008c20:	f7f7 fb34 	bl	800028c <__adddf3>
 8008c24:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <__ieee754_pow+0x3dc>)
 8008c26:	4299      	cmp	r1, r3
 8008c28:	ec45 4b19 	vmov	d9, r4, r5
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	460f      	mov	r7, r1
 8008c30:	468b      	mov	fp, r1
 8008c32:	f340 82fe 	ble.w	8009232 <__ieee754_pow+0x972>
 8008c36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008c3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008c3e:	4303      	orrs	r3, r0
 8008c40:	f000 81f0 	beq.w	8009024 <__ieee754_pow+0x764>
 8008c44:	a310      	add	r3, pc, #64	; (adr r3, 8008c88 <__ieee754_pow+0x3c8>)
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	ec51 0b18 	vmov	r0, r1, d8
 8008c4e:	f7f7 fcd3 	bl	80005f8 <__aeabi_dmul>
 8008c52:	a30d      	add	r3, pc, #52	; (adr r3, 8008c88 <__ieee754_pow+0x3c8>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	e6cb      	b.n	80089f2 <__ieee754_pow+0x132>
 8008c5a:	bf00      	nop
 8008c5c:	f3af 8000 	nop.w
 8008c60:	60000000 	.word	0x60000000
 8008c64:	3ff71547 	.word	0x3ff71547
 8008c68:	f85ddf44 	.word	0xf85ddf44
 8008c6c:	3e54ae0b 	.word	0x3e54ae0b
 8008c70:	55555555 	.word	0x55555555
 8008c74:	3fd55555 	.word	0x3fd55555
 8008c78:	652b82fe 	.word	0x652b82fe
 8008c7c:	3ff71547 	.word	0x3ff71547
 8008c80:	00000000 	.word	0x00000000
 8008c84:	bff00000 	.word	0xbff00000
 8008c88:	8800759c 	.word	0x8800759c
 8008c8c:	7e37e43c 	.word	0x7e37e43c
 8008c90:	3ff00000 	.word	0x3ff00000
 8008c94:	3fd00000 	.word	0x3fd00000
 8008c98:	3fe00000 	.word	0x3fe00000
 8008c9c:	408fffff 	.word	0x408fffff
 8008ca0:	4bd7      	ldr	r3, [pc, #860]	; (8009000 <__ieee754_pow+0x740>)
 8008ca2:	ea03 0309 	and.w	r3, r3, r9
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	b92b      	cbnz	r3, 8008cb6 <__ieee754_pow+0x3f6>
 8008caa:	4bd6      	ldr	r3, [pc, #856]	; (8009004 <__ieee754_pow+0x744>)
 8008cac:	f7f7 fca4 	bl	80005f8 <__aeabi_dmul>
 8008cb0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	1523      	asrs	r3, r4, #20
 8008cb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008cbc:	4413      	add	r3, r2
 8008cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc0:	4bd1      	ldr	r3, [pc, #836]	; (8009008 <__ieee754_pow+0x748>)
 8008cc2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008cc6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008cca:	429c      	cmp	r4, r3
 8008ccc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008cd0:	dd08      	ble.n	8008ce4 <__ieee754_pow+0x424>
 8008cd2:	4bce      	ldr	r3, [pc, #824]	; (800900c <__ieee754_pow+0x74c>)
 8008cd4:	429c      	cmp	r4, r3
 8008cd6:	f340 8163 	ble.w	8008fa0 <__ieee754_pow+0x6e0>
 8008cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cdc:	3301      	adds	r3, #1
 8008cde:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008ce4:	2400      	movs	r4, #0
 8008ce6:	00e3      	lsls	r3, r4, #3
 8008ce8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cea:	4bc9      	ldr	r3, [pc, #804]	; (8009010 <__ieee754_pow+0x750>)
 8008cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cf0:	ed93 7b00 	vldr	d7, [r3]
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	ec53 2b17 	vmov	r2, r3, d7
 8008cfa:	eeb0 8a47 	vmov.f32	s16, s14
 8008cfe:	eef0 8a67 	vmov.f32	s17, s15
 8008d02:	4682      	mov	sl, r0
 8008d04:	f7f7 fac0 	bl	8000288 <__aeabi_dsub>
 8008d08:	4652      	mov	r2, sl
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	460f      	mov	r7, r1
 8008d0e:	462b      	mov	r3, r5
 8008d10:	ec51 0b18 	vmov	r0, r1, d8
 8008d14:	f7f7 faba 	bl	800028c <__adddf3>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	49bd      	ldr	r1, [pc, #756]	; (8009014 <__ieee754_pow+0x754>)
 8008d20:	f7f7 fd94 	bl	800084c <__aeabi_ddiv>
 8008d24:	ec41 0b19 	vmov	d9, r0, r1
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	4639      	mov	r1, r7
 8008d30:	f7f7 fc62 	bl	80005f8 <__aeabi_dmul>
 8008d34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d40:	2300      	movs	r3, #0
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008d48:	46ab      	mov	fp, r5
 8008d4a:	106d      	asrs	r5, r5, #1
 8008d4c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008d50:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008d54:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	4649      	mov	r1, r9
 8008d5e:	4614      	mov	r4, r2
 8008d60:	461d      	mov	r5, r3
 8008d62:	f7f7 fc49 	bl	80005f8 <__aeabi_dmul>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	f7f7 fa8b 	bl	8000288 <__aeabi_dsub>
 8008d72:	ec53 2b18 	vmov	r2, r3, d8
 8008d76:	4606      	mov	r6, r0
 8008d78:	460f      	mov	r7, r1
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	f7f7 fa83 	bl	8000288 <__aeabi_dsub>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4650      	mov	r0, sl
 8008d88:	4659      	mov	r1, fp
 8008d8a:	f7f7 fa7d 	bl	8000288 <__aeabi_dsub>
 8008d8e:	4642      	mov	r2, r8
 8008d90:	464b      	mov	r3, r9
 8008d92:	f7f7 fc31 	bl	80005f8 <__aeabi_dmul>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	f7f7 fa73 	bl	8000288 <__aeabi_dsub>
 8008da2:	ec53 2b19 	vmov	r2, r3, d9
 8008da6:	f7f7 fc27 	bl	80005f8 <__aeabi_dmul>
 8008daa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dae:	ec41 0b18 	vmov	d8, r0, r1
 8008db2:	4610      	mov	r0, r2
 8008db4:	4619      	mov	r1, r3
 8008db6:	f7f7 fc1f 	bl	80005f8 <__aeabi_dmul>
 8008dba:	a37d      	add	r3, pc, #500	; (adr r3, 8008fb0 <__ieee754_pow+0x6f0>)
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	460d      	mov	r5, r1
 8008dc4:	f7f7 fc18 	bl	80005f8 <__aeabi_dmul>
 8008dc8:	a37b      	add	r3, pc, #492	; (adr r3, 8008fb8 <__ieee754_pow+0x6f8>)
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	f7f7 fa5d 	bl	800028c <__adddf3>
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	462b      	mov	r3, r5
 8008dd6:	f7f7 fc0f 	bl	80005f8 <__aeabi_dmul>
 8008dda:	a379      	add	r3, pc, #484	; (adr r3, 8008fc0 <__ieee754_pow+0x700>)
 8008ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de0:	f7f7 fa54 	bl	800028c <__adddf3>
 8008de4:	4622      	mov	r2, r4
 8008de6:	462b      	mov	r3, r5
 8008de8:	f7f7 fc06 	bl	80005f8 <__aeabi_dmul>
 8008dec:	a376      	add	r3, pc, #472	; (adr r3, 8008fc8 <__ieee754_pow+0x708>)
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	f7f7 fa4b 	bl	800028c <__adddf3>
 8008df6:	4622      	mov	r2, r4
 8008df8:	462b      	mov	r3, r5
 8008dfa:	f7f7 fbfd 	bl	80005f8 <__aeabi_dmul>
 8008dfe:	a374      	add	r3, pc, #464	; (adr r3, 8008fd0 <__ieee754_pow+0x710>)
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	f7f7 fa42 	bl	800028c <__adddf3>
 8008e08:	4622      	mov	r2, r4
 8008e0a:	462b      	mov	r3, r5
 8008e0c:	f7f7 fbf4 	bl	80005f8 <__aeabi_dmul>
 8008e10:	a371      	add	r3, pc, #452	; (adr r3, 8008fd8 <__ieee754_pow+0x718>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f7f7 fa39 	bl	800028c <__adddf3>
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	460f      	mov	r7, r1
 8008e20:	462b      	mov	r3, r5
 8008e22:	4620      	mov	r0, r4
 8008e24:	4629      	mov	r1, r5
 8008e26:	f7f7 fbe7 	bl	80005f8 <__aeabi_dmul>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4630      	mov	r0, r6
 8008e30:	4639      	mov	r1, r7
 8008e32:	f7f7 fbe1 	bl	80005f8 <__aeabi_dmul>
 8008e36:	4642      	mov	r2, r8
 8008e38:	4604      	mov	r4, r0
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e42:	f7f7 fa23 	bl	800028c <__adddf3>
 8008e46:	ec53 2b18 	vmov	r2, r3, d8
 8008e4a:	f7f7 fbd5 	bl	80005f8 <__aeabi_dmul>
 8008e4e:	4622      	mov	r2, r4
 8008e50:	462b      	mov	r3, r5
 8008e52:	f7f7 fa1b 	bl	800028c <__adddf3>
 8008e56:	4642      	mov	r2, r8
 8008e58:	4682      	mov	sl, r0
 8008e5a:	468b      	mov	fp, r1
 8008e5c:	464b      	mov	r3, r9
 8008e5e:	4640      	mov	r0, r8
 8008e60:	4649      	mov	r1, r9
 8008e62:	f7f7 fbc9 	bl	80005f8 <__aeabi_dmul>
 8008e66:	4b6c      	ldr	r3, [pc, #432]	; (8009018 <__ieee754_pow+0x758>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460f      	mov	r7, r1
 8008e6e:	f7f7 fa0d 	bl	800028c <__adddf3>
 8008e72:	4652      	mov	r2, sl
 8008e74:	465b      	mov	r3, fp
 8008e76:	f7f7 fa09 	bl	800028c <__adddf3>
 8008e7a:	9c04      	ldr	r4, [sp, #16]
 8008e7c:	460d      	mov	r5, r1
 8008e7e:	4622      	mov	r2, r4
 8008e80:	460b      	mov	r3, r1
 8008e82:	4640      	mov	r0, r8
 8008e84:	4649      	mov	r1, r9
 8008e86:	f7f7 fbb7 	bl	80005f8 <__aeabi_dmul>
 8008e8a:	4b63      	ldr	r3, [pc, #396]	; (8009018 <__ieee754_pow+0x758>)
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	4689      	mov	r9, r1
 8008e90:	2200      	movs	r2, #0
 8008e92:	4620      	mov	r0, r4
 8008e94:	4629      	mov	r1, r5
 8008e96:	f7f7 f9f7 	bl	8000288 <__aeabi_dsub>
 8008e9a:	4632      	mov	r2, r6
 8008e9c:	463b      	mov	r3, r7
 8008e9e:	f7f7 f9f3 	bl	8000288 <__aeabi_dsub>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4650      	mov	r0, sl
 8008ea8:	4659      	mov	r1, fp
 8008eaa:	f7f7 f9ed 	bl	8000288 <__aeabi_dsub>
 8008eae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008eb2:	f7f7 fba1 	bl	80005f8 <__aeabi_dmul>
 8008eb6:	4622      	mov	r2, r4
 8008eb8:	4606      	mov	r6, r0
 8008eba:	460f      	mov	r7, r1
 8008ebc:	462b      	mov	r3, r5
 8008ebe:	ec51 0b18 	vmov	r0, r1, d8
 8008ec2:	f7f7 fb99 	bl	80005f8 <__aeabi_dmul>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4630      	mov	r0, r6
 8008ecc:	4639      	mov	r1, r7
 8008ece:	f7f7 f9dd 	bl	800028c <__adddf3>
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460f      	mov	r7, r1
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	4640      	mov	r0, r8
 8008edc:	4649      	mov	r1, r9
 8008ede:	f7f7 f9d5 	bl	800028c <__adddf3>
 8008ee2:	9c04      	ldr	r4, [sp, #16]
 8008ee4:	a33e      	add	r3, pc, #248	; (adr r3, 8008fe0 <__ieee754_pow+0x720>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	4620      	mov	r0, r4
 8008eec:	460d      	mov	r5, r1
 8008eee:	f7f7 fb83 	bl	80005f8 <__aeabi_dmul>
 8008ef2:	4642      	mov	r2, r8
 8008ef4:	ec41 0b18 	vmov	d8, r0, r1
 8008ef8:	464b      	mov	r3, r9
 8008efa:	4620      	mov	r0, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	f7f7 f9c3 	bl	8000288 <__aeabi_dsub>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4630      	mov	r0, r6
 8008f08:	4639      	mov	r1, r7
 8008f0a:	f7f7 f9bd 	bl	8000288 <__aeabi_dsub>
 8008f0e:	a336      	add	r3, pc, #216	; (adr r3, 8008fe8 <__ieee754_pow+0x728>)
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f7f7 fb70 	bl	80005f8 <__aeabi_dmul>
 8008f18:	a335      	add	r3, pc, #212	; (adr r3, 8008ff0 <__ieee754_pow+0x730>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	4606      	mov	r6, r0
 8008f20:	460f      	mov	r7, r1
 8008f22:	4620      	mov	r0, r4
 8008f24:	4629      	mov	r1, r5
 8008f26:	f7f7 fb67 	bl	80005f8 <__aeabi_dmul>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4630      	mov	r0, r6
 8008f30:	4639      	mov	r1, r7
 8008f32:	f7f7 f9ab 	bl	800028c <__adddf3>
 8008f36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f38:	4b38      	ldr	r3, [pc, #224]	; (800901c <__ieee754_pow+0x75c>)
 8008f3a:	4413      	add	r3, r2
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f7f7 f9a4 	bl	800028c <__adddf3>
 8008f44:	4682      	mov	sl, r0
 8008f46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f48:	468b      	mov	fp, r1
 8008f4a:	f7f7 faeb 	bl	8000524 <__aeabi_i2d>
 8008f4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f50:	4b33      	ldr	r3, [pc, #204]	; (8009020 <__ieee754_pow+0x760>)
 8008f52:	4413      	add	r3, r2
 8008f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f58:	4606      	mov	r6, r0
 8008f5a:	460f      	mov	r7, r1
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	465b      	mov	r3, fp
 8008f60:	ec51 0b18 	vmov	r0, r1, d8
 8008f64:	f7f7 f992 	bl	800028c <__adddf3>
 8008f68:	4642      	mov	r2, r8
 8008f6a:	464b      	mov	r3, r9
 8008f6c:	f7f7 f98e 	bl	800028c <__adddf3>
 8008f70:	4632      	mov	r2, r6
 8008f72:	463b      	mov	r3, r7
 8008f74:	f7f7 f98a 	bl	800028c <__adddf3>
 8008f78:	9c04      	ldr	r4, [sp, #16]
 8008f7a:	4632      	mov	r2, r6
 8008f7c:	463b      	mov	r3, r7
 8008f7e:	4620      	mov	r0, r4
 8008f80:	460d      	mov	r5, r1
 8008f82:	f7f7 f981 	bl	8000288 <__aeabi_dsub>
 8008f86:	4642      	mov	r2, r8
 8008f88:	464b      	mov	r3, r9
 8008f8a:	f7f7 f97d 	bl	8000288 <__aeabi_dsub>
 8008f8e:	ec53 2b18 	vmov	r2, r3, d8
 8008f92:	f7f7 f979 	bl	8000288 <__aeabi_dsub>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	4659      	mov	r1, fp
 8008f9e:	e606      	b.n	8008bae <__ieee754_pow+0x2ee>
 8008fa0:	2401      	movs	r4, #1
 8008fa2:	e6a0      	b.n	8008ce6 <__ieee754_pow+0x426>
 8008fa4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008ff8 <__ieee754_pow+0x738>
 8008fa8:	e60d      	b.n	8008bc6 <__ieee754_pow+0x306>
 8008faa:	bf00      	nop
 8008fac:	f3af 8000 	nop.w
 8008fb0:	4a454eef 	.word	0x4a454eef
 8008fb4:	3fca7e28 	.word	0x3fca7e28
 8008fb8:	93c9db65 	.word	0x93c9db65
 8008fbc:	3fcd864a 	.word	0x3fcd864a
 8008fc0:	a91d4101 	.word	0xa91d4101
 8008fc4:	3fd17460 	.word	0x3fd17460
 8008fc8:	518f264d 	.word	0x518f264d
 8008fcc:	3fd55555 	.word	0x3fd55555
 8008fd0:	db6fabff 	.word	0xdb6fabff
 8008fd4:	3fdb6db6 	.word	0x3fdb6db6
 8008fd8:	33333303 	.word	0x33333303
 8008fdc:	3fe33333 	.word	0x3fe33333
 8008fe0:	e0000000 	.word	0xe0000000
 8008fe4:	3feec709 	.word	0x3feec709
 8008fe8:	dc3a03fd 	.word	0xdc3a03fd
 8008fec:	3feec709 	.word	0x3feec709
 8008ff0:	145b01f5 	.word	0x145b01f5
 8008ff4:	be3e2fe0 	.word	0xbe3e2fe0
 8008ff8:	00000000 	.word	0x00000000
 8008ffc:	3ff00000 	.word	0x3ff00000
 8009000:	7ff00000 	.word	0x7ff00000
 8009004:	43400000 	.word	0x43400000
 8009008:	0003988e 	.word	0x0003988e
 800900c:	000bb679 	.word	0x000bb679
 8009010:	08009c30 	.word	0x08009c30
 8009014:	3ff00000 	.word	0x3ff00000
 8009018:	40080000 	.word	0x40080000
 800901c:	08009c50 	.word	0x08009c50
 8009020:	08009c40 	.word	0x08009c40
 8009024:	a3b5      	add	r3, pc, #724	; (adr r3, 80092fc <__ieee754_pow+0xa3c>)
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	4640      	mov	r0, r8
 800902c:	4649      	mov	r1, r9
 800902e:	f7f7 f92d 	bl	800028c <__adddf3>
 8009032:	4622      	mov	r2, r4
 8009034:	ec41 0b1a 	vmov	d10, r0, r1
 8009038:	462b      	mov	r3, r5
 800903a:	4630      	mov	r0, r6
 800903c:	4639      	mov	r1, r7
 800903e:	f7f7 f923 	bl	8000288 <__aeabi_dsub>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	ec51 0b1a 	vmov	r0, r1, d10
 800904a:	f7f7 fd65 	bl	8000b18 <__aeabi_dcmpgt>
 800904e:	2800      	cmp	r0, #0
 8009050:	f47f adf8 	bne.w	8008c44 <__ieee754_pow+0x384>
 8009054:	4aa4      	ldr	r2, [pc, #656]	; (80092e8 <__ieee754_pow+0xa28>)
 8009056:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800905a:	4293      	cmp	r3, r2
 800905c:	f340 810b 	ble.w	8009276 <__ieee754_pow+0x9b6>
 8009060:	151b      	asrs	r3, r3, #20
 8009062:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009066:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800906a:	fa4a f303 	asr.w	r3, sl, r3
 800906e:	445b      	add	r3, fp
 8009070:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009074:	4e9d      	ldr	r6, [pc, #628]	; (80092ec <__ieee754_pow+0xa2c>)
 8009076:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800907a:	4116      	asrs	r6, r2
 800907c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009080:	2000      	movs	r0, #0
 8009082:	ea23 0106 	bic.w	r1, r3, r6
 8009086:	f1c2 0214 	rsb	r2, r2, #20
 800908a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800908e:	fa4a fa02 	asr.w	sl, sl, r2
 8009092:	f1bb 0f00 	cmp.w	fp, #0
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4620      	mov	r0, r4
 800909c:	4629      	mov	r1, r5
 800909e:	bfb8      	it	lt
 80090a0:	f1ca 0a00 	rsblt	sl, sl, #0
 80090a4:	f7f7 f8f0 	bl	8000288 <__aeabi_dsub>
 80090a8:	ec41 0b19 	vmov	d9, r0, r1
 80090ac:	4642      	mov	r2, r8
 80090ae:	464b      	mov	r3, r9
 80090b0:	ec51 0b19 	vmov	r0, r1, d9
 80090b4:	f7f7 f8ea 	bl	800028c <__adddf3>
 80090b8:	2400      	movs	r4, #0
 80090ba:	a379      	add	r3, pc, #484	; (adr r3, 80092a0 <__ieee754_pow+0x9e0>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	4620      	mov	r0, r4
 80090c2:	460d      	mov	r5, r1
 80090c4:	f7f7 fa98 	bl	80005f8 <__aeabi_dmul>
 80090c8:	ec53 2b19 	vmov	r2, r3, d9
 80090cc:	4606      	mov	r6, r0
 80090ce:	460f      	mov	r7, r1
 80090d0:	4620      	mov	r0, r4
 80090d2:	4629      	mov	r1, r5
 80090d4:	f7f7 f8d8 	bl	8000288 <__aeabi_dsub>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4640      	mov	r0, r8
 80090de:	4649      	mov	r1, r9
 80090e0:	f7f7 f8d2 	bl	8000288 <__aeabi_dsub>
 80090e4:	a370      	add	r3, pc, #448	; (adr r3, 80092a8 <__ieee754_pow+0x9e8>)
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	f7f7 fa85 	bl	80005f8 <__aeabi_dmul>
 80090ee:	a370      	add	r3, pc, #448	; (adr r3, 80092b0 <__ieee754_pow+0x9f0>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	4680      	mov	r8, r0
 80090f6:	4689      	mov	r9, r1
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 fa7c 	bl	80005f8 <__aeabi_dmul>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4640      	mov	r0, r8
 8009106:	4649      	mov	r1, r9
 8009108:	f7f7 f8c0 	bl	800028c <__adddf3>
 800910c:	4604      	mov	r4, r0
 800910e:	460d      	mov	r5, r1
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4630      	mov	r0, r6
 8009116:	4639      	mov	r1, r7
 8009118:	f7f7 f8b8 	bl	800028c <__adddf3>
 800911c:	4632      	mov	r2, r6
 800911e:	463b      	mov	r3, r7
 8009120:	4680      	mov	r8, r0
 8009122:	4689      	mov	r9, r1
 8009124:	f7f7 f8b0 	bl	8000288 <__aeabi_dsub>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4620      	mov	r0, r4
 800912e:	4629      	mov	r1, r5
 8009130:	f7f7 f8aa 	bl	8000288 <__aeabi_dsub>
 8009134:	4642      	mov	r2, r8
 8009136:	4606      	mov	r6, r0
 8009138:	460f      	mov	r7, r1
 800913a:	464b      	mov	r3, r9
 800913c:	4640      	mov	r0, r8
 800913e:	4649      	mov	r1, r9
 8009140:	f7f7 fa5a 	bl	80005f8 <__aeabi_dmul>
 8009144:	a35c      	add	r3, pc, #368	; (adr r3, 80092b8 <__ieee754_pow+0x9f8>)
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	4604      	mov	r4, r0
 800914c:	460d      	mov	r5, r1
 800914e:	f7f7 fa53 	bl	80005f8 <__aeabi_dmul>
 8009152:	a35b      	add	r3, pc, #364	; (adr r3, 80092c0 <__ieee754_pow+0xa00>)
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f7f7 f896 	bl	8000288 <__aeabi_dsub>
 800915c:	4622      	mov	r2, r4
 800915e:	462b      	mov	r3, r5
 8009160:	f7f7 fa4a 	bl	80005f8 <__aeabi_dmul>
 8009164:	a358      	add	r3, pc, #352	; (adr r3, 80092c8 <__ieee754_pow+0xa08>)
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	f7f7 f88f 	bl	800028c <__adddf3>
 800916e:	4622      	mov	r2, r4
 8009170:	462b      	mov	r3, r5
 8009172:	f7f7 fa41 	bl	80005f8 <__aeabi_dmul>
 8009176:	a356      	add	r3, pc, #344	; (adr r3, 80092d0 <__ieee754_pow+0xa10>)
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f7f7 f884 	bl	8000288 <__aeabi_dsub>
 8009180:	4622      	mov	r2, r4
 8009182:	462b      	mov	r3, r5
 8009184:	f7f7 fa38 	bl	80005f8 <__aeabi_dmul>
 8009188:	a353      	add	r3, pc, #332	; (adr r3, 80092d8 <__ieee754_pow+0xa18>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f7f7 f87d 	bl	800028c <__adddf3>
 8009192:	4622      	mov	r2, r4
 8009194:	462b      	mov	r3, r5
 8009196:	f7f7 fa2f 	bl	80005f8 <__aeabi_dmul>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	4640      	mov	r0, r8
 80091a0:	4649      	mov	r1, r9
 80091a2:	f7f7 f871 	bl	8000288 <__aeabi_dsub>
 80091a6:	4604      	mov	r4, r0
 80091a8:	460d      	mov	r5, r1
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	4640      	mov	r0, r8
 80091b0:	4649      	mov	r1, r9
 80091b2:	f7f7 fa21 	bl	80005f8 <__aeabi_dmul>
 80091b6:	2200      	movs	r2, #0
 80091b8:	ec41 0b19 	vmov	d9, r0, r1
 80091bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091c0:	4620      	mov	r0, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	f7f7 f860 	bl	8000288 <__aeabi_dsub>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	ec51 0b19 	vmov	r0, r1, d9
 80091d0:	f7f7 fb3c 	bl	800084c <__aeabi_ddiv>
 80091d4:	4632      	mov	r2, r6
 80091d6:	4604      	mov	r4, r0
 80091d8:	460d      	mov	r5, r1
 80091da:	463b      	mov	r3, r7
 80091dc:	4640      	mov	r0, r8
 80091de:	4649      	mov	r1, r9
 80091e0:	f7f7 fa0a 	bl	80005f8 <__aeabi_dmul>
 80091e4:	4632      	mov	r2, r6
 80091e6:	463b      	mov	r3, r7
 80091e8:	f7f7 f850 	bl	800028c <__adddf3>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4620      	mov	r0, r4
 80091f2:	4629      	mov	r1, r5
 80091f4:	f7f7 f848 	bl	8000288 <__aeabi_dsub>
 80091f8:	4642      	mov	r2, r8
 80091fa:	464b      	mov	r3, r9
 80091fc:	f7f7 f844 	bl	8000288 <__aeabi_dsub>
 8009200:	460b      	mov	r3, r1
 8009202:	4602      	mov	r2, r0
 8009204:	493a      	ldr	r1, [pc, #232]	; (80092f0 <__ieee754_pow+0xa30>)
 8009206:	2000      	movs	r0, #0
 8009208:	f7f7 f83e 	bl	8000288 <__aeabi_dsub>
 800920c:	e9cd 0100 	strd	r0, r1, [sp]
 8009210:	9b01      	ldr	r3, [sp, #4]
 8009212:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800921a:	da2f      	bge.n	800927c <__ieee754_pow+0x9bc>
 800921c:	4650      	mov	r0, sl
 800921e:	ed9d 0b00 	vldr	d0, [sp]
 8009222:	f000 f9c1 	bl	80095a8 <scalbn>
 8009226:	ec51 0b10 	vmov	r0, r1, d0
 800922a:	ec53 2b18 	vmov	r2, r3, d8
 800922e:	f7ff bbe0 	b.w	80089f2 <__ieee754_pow+0x132>
 8009232:	4b30      	ldr	r3, [pc, #192]	; (80092f4 <__ieee754_pow+0xa34>)
 8009234:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009238:	429e      	cmp	r6, r3
 800923a:	f77f af0b 	ble.w	8009054 <__ieee754_pow+0x794>
 800923e:	4b2e      	ldr	r3, [pc, #184]	; (80092f8 <__ieee754_pow+0xa38>)
 8009240:	440b      	add	r3, r1
 8009242:	4303      	orrs	r3, r0
 8009244:	d00b      	beq.n	800925e <__ieee754_pow+0x99e>
 8009246:	a326      	add	r3, pc, #152	; (adr r3, 80092e0 <__ieee754_pow+0xa20>)
 8009248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924c:	ec51 0b18 	vmov	r0, r1, d8
 8009250:	f7f7 f9d2 	bl	80005f8 <__aeabi_dmul>
 8009254:	a322      	add	r3, pc, #136	; (adr r3, 80092e0 <__ieee754_pow+0xa20>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7ff bbca 	b.w	80089f2 <__ieee754_pow+0x132>
 800925e:	4622      	mov	r2, r4
 8009260:	462b      	mov	r3, r5
 8009262:	f7f7 f811 	bl	8000288 <__aeabi_dsub>
 8009266:	4642      	mov	r2, r8
 8009268:	464b      	mov	r3, r9
 800926a:	f7f7 fc4b 	bl	8000b04 <__aeabi_dcmpge>
 800926e:	2800      	cmp	r0, #0
 8009270:	f43f aef0 	beq.w	8009054 <__ieee754_pow+0x794>
 8009274:	e7e7      	b.n	8009246 <__ieee754_pow+0x986>
 8009276:	f04f 0a00 	mov.w	sl, #0
 800927a:	e717      	b.n	80090ac <__ieee754_pow+0x7ec>
 800927c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009280:	4619      	mov	r1, r3
 8009282:	e7d2      	b.n	800922a <__ieee754_pow+0x96a>
 8009284:	491a      	ldr	r1, [pc, #104]	; (80092f0 <__ieee754_pow+0xa30>)
 8009286:	2000      	movs	r0, #0
 8009288:	f7ff bb9e 	b.w	80089c8 <__ieee754_pow+0x108>
 800928c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009290:	f7ff bb9a 	b.w	80089c8 <__ieee754_pow+0x108>
 8009294:	9000      	str	r0, [sp, #0]
 8009296:	f7ff bb76 	b.w	8008986 <__ieee754_pow+0xc6>
 800929a:	2100      	movs	r1, #0
 800929c:	f7ff bb60 	b.w	8008960 <__ieee754_pow+0xa0>
 80092a0:	00000000 	.word	0x00000000
 80092a4:	3fe62e43 	.word	0x3fe62e43
 80092a8:	fefa39ef 	.word	0xfefa39ef
 80092ac:	3fe62e42 	.word	0x3fe62e42
 80092b0:	0ca86c39 	.word	0x0ca86c39
 80092b4:	be205c61 	.word	0xbe205c61
 80092b8:	72bea4d0 	.word	0x72bea4d0
 80092bc:	3e663769 	.word	0x3e663769
 80092c0:	c5d26bf1 	.word	0xc5d26bf1
 80092c4:	3ebbbd41 	.word	0x3ebbbd41
 80092c8:	af25de2c 	.word	0xaf25de2c
 80092cc:	3f11566a 	.word	0x3f11566a
 80092d0:	16bebd93 	.word	0x16bebd93
 80092d4:	3f66c16c 	.word	0x3f66c16c
 80092d8:	5555553e 	.word	0x5555553e
 80092dc:	3fc55555 	.word	0x3fc55555
 80092e0:	c2f8f359 	.word	0xc2f8f359
 80092e4:	01a56e1f 	.word	0x01a56e1f
 80092e8:	3fe00000 	.word	0x3fe00000
 80092ec:	000fffff 	.word	0x000fffff
 80092f0:	3ff00000 	.word	0x3ff00000
 80092f4:	4090cbff 	.word	0x4090cbff
 80092f8:	3f6f3400 	.word	0x3f6f3400
 80092fc:	652b82fe 	.word	0x652b82fe
 8009300:	3c971547 	.word	0x3c971547

08009304 <__ieee754_sqrt>:
 8009304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009308:	ec55 4b10 	vmov	r4, r5, d0
 800930c:	4e56      	ldr	r6, [pc, #344]	; (8009468 <__ieee754_sqrt+0x164>)
 800930e:	43ae      	bics	r6, r5
 8009310:	ee10 0a10 	vmov	r0, s0
 8009314:	ee10 3a10 	vmov	r3, s0
 8009318:	4629      	mov	r1, r5
 800931a:	462a      	mov	r2, r5
 800931c:	d110      	bne.n	8009340 <__ieee754_sqrt+0x3c>
 800931e:	ee10 2a10 	vmov	r2, s0
 8009322:	462b      	mov	r3, r5
 8009324:	f7f7 f968 	bl	80005f8 <__aeabi_dmul>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4620      	mov	r0, r4
 800932e:	4629      	mov	r1, r5
 8009330:	f7f6 ffac 	bl	800028c <__adddf3>
 8009334:	4604      	mov	r4, r0
 8009336:	460d      	mov	r5, r1
 8009338:	ec45 4b10 	vmov	d0, r4, r5
 800933c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009340:	2d00      	cmp	r5, #0
 8009342:	dc10      	bgt.n	8009366 <__ieee754_sqrt+0x62>
 8009344:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009348:	4330      	orrs	r0, r6
 800934a:	d0f5      	beq.n	8009338 <__ieee754_sqrt+0x34>
 800934c:	b15d      	cbz	r5, 8009366 <__ieee754_sqrt+0x62>
 800934e:	ee10 2a10 	vmov	r2, s0
 8009352:	462b      	mov	r3, r5
 8009354:	ee10 0a10 	vmov	r0, s0
 8009358:	f7f6 ff96 	bl	8000288 <__aeabi_dsub>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	f7f7 fa74 	bl	800084c <__aeabi_ddiv>
 8009364:	e7e6      	b.n	8009334 <__ieee754_sqrt+0x30>
 8009366:	1509      	asrs	r1, r1, #20
 8009368:	d076      	beq.n	8009458 <__ieee754_sqrt+0x154>
 800936a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800936e:	07ce      	lsls	r6, r1, #31
 8009370:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009374:	bf5e      	ittt	pl
 8009376:	0fda      	lsrpl	r2, r3, #31
 8009378:	005b      	lslpl	r3, r3, #1
 800937a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800937e:	0fda      	lsrs	r2, r3, #31
 8009380:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009384:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009388:	2000      	movs	r0, #0
 800938a:	106d      	asrs	r5, r5, #1
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	f04f 0e16 	mov.w	lr, #22
 8009392:	4684      	mov	ip, r0
 8009394:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009398:	eb0c 0401 	add.w	r4, ip, r1
 800939c:	4294      	cmp	r4, r2
 800939e:	bfde      	ittt	le
 80093a0:	1b12      	suble	r2, r2, r4
 80093a2:	eb04 0c01 	addle.w	ip, r4, r1
 80093a6:	1840      	addle	r0, r0, r1
 80093a8:	0052      	lsls	r2, r2, #1
 80093aa:	f1be 0e01 	subs.w	lr, lr, #1
 80093ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80093b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80093b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80093ba:	d1ed      	bne.n	8009398 <__ieee754_sqrt+0x94>
 80093bc:	4671      	mov	r1, lr
 80093be:	2720      	movs	r7, #32
 80093c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80093c4:	4562      	cmp	r2, ip
 80093c6:	eb04 060e 	add.w	r6, r4, lr
 80093ca:	dc02      	bgt.n	80093d2 <__ieee754_sqrt+0xce>
 80093cc:	d113      	bne.n	80093f6 <__ieee754_sqrt+0xf2>
 80093ce:	429e      	cmp	r6, r3
 80093d0:	d811      	bhi.n	80093f6 <__ieee754_sqrt+0xf2>
 80093d2:	2e00      	cmp	r6, #0
 80093d4:	eb06 0e04 	add.w	lr, r6, r4
 80093d8:	da43      	bge.n	8009462 <__ieee754_sqrt+0x15e>
 80093da:	f1be 0f00 	cmp.w	lr, #0
 80093de:	db40      	blt.n	8009462 <__ieee754_sqrt+0x15e>
 80093e0:	f10c 0801 	add.w	r8, ip, #1
 80093e4:	eba2 020c 	sub.w	r2, r2, ip
 80093e8:	429e      	cmp	r6, r3
 80093ea:	bf88      	it	hi
 80093ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80093f0:	1b9b      	subs	r3, r3, r6
 80093f2:	4421      	add	r1, r4
 80093f4:	46c4      	mov	ip, r8
 80093f6:	0052      	lsls	r2, r2, #1
 80093f8:	3f01      	subs	r7, #1
 80093fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80093fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009402:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009406:	d1dd      	bne.n	80093c4 <__ieee754_sqrt+0xc0>
 8009408:	4313      	orrs	r3, r2
 800940a:	d006      	beq.n	800941a <__ieee754_sqrt+0x116>
 800940c:	1c4c      	adds	r4, r1, #1
 800940e:	bf13      	iteet	ne
 8009410:	3101      	addne	r1, #1
 8009412:	3001      	addeq	r0, #1
 8009414:	4639      	moveq	r1, r7
 8009416:	f021 0101 	bicne.w	r1, r1, #1
 800941a:	1043      	asrs	r3, r0, #1
 800941c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009420:	0849      	lsrs	r1, r1, #1
 8009422:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009426:	07c2      	lsls	r2, r0, #31
 8009428:	bf48      	it	mi
 800942a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800942e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009432:	460c      	mov	r4, r1
 8009434:	463d      	mov	r5, r7
 8009436:	e77f      	b.n	8009338 <__ieee754_sqrt+0x34>
 8009438:	0ada      	lsrs	r2, r3, #11
 800943a:	3815      	subs	r0, #21
 800943c:	055b      	lsls	r3, r3, #21
 800943e:	2a00      	cmp	r2, #0
 8009440:	d0fa      	beq.n	8009438 <__ieee754_sqrt+0x134>
 8009442:	02d7      	lsls	r7, r2, #11
 8009444:	d50a      	bpl.n	800945c <__ieee754_sqrt+0x158>
 8009446:	f1c1 0420 	rsb	r4, r1, #32
 800944a:	fa23 f404 	lsr.w	r4, r3, r4
 800944e:	1e4d      	subs	r5, r1, #1
 8009450:	408b      	lsls	r3, r1
 8009452:	4322      	orrs	r2, r4
 8009454:	1b41      	subs	r1, r0, r5
 8009456:	e788      	b.n	800936a <__ieee754_sqrt+0x66>
 8009458:	4608      	mov	r0, r1
 800945a:	e7f0      	b.n	800943e <__ieee754_sqrt+0x13a>
 800945c:	0052      	lsls	r2, r2, #1
 800945e:	3101      	adds	r1, #1
 8009460:	e7ef      	b.n	8009442 <__ieee754_sqrt+0x13e>
 8009462:	46e0      	mov	r8, ip
 8009464:	e7be      	b.n	80093e4 <__ieee754_sqrt+0xe0>
 8009466:	bf00      	nop
 8009468:	7ff00000 	.word	0x7ff00000

0800946c <fabs>:
 800946c:	ec51 0b10 	vmov	r0, r1, d0
 8009470:	ee10 2a10 	vmov	r2, s0
 8009474:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009478:	ec43 2b10 	vmov	d0, r2, r3
 800947c:	4770      	bx	lr

0800947e <finite>:
 800947e:	b082      	sub	sp, #8
 8009480:	ed8d 0b00 	vstr	d0, [sp]
 8009484:	9801      	ldr	r0, [sp, #4]
 8009486:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800948a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800948e:	0fc0      	lsrs	r0, r0, #31
 8009490:	b002      	add	sp, #8
 8009492:	4770      	bx	lr

08009494 <rint>:
 8009494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009496:	ec51 0b10 	vmov	r0, r1, d0
 800949a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800949e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80094a2:	2e13      	cmp	r6, #19
 80094a4:	ee10 4a10 	vmov	r4, s0
 80094a8:	460b      	mov	r3, r1
 80094aa:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80094ae:	dc58      	bgt.n	8009562 <rint+0xce>
 80094b0:	2e00      	cmp	r6, #0
 80094b2:	da2b      	bge.n	800950c <rint+0x78>
 80094b4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80094b8:	4302      	orrs	r2, r0
 80094ba:	d023      	beq.n	8009504 <rint+0x70>
 80094bc:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80094c0:	4302      	orrs	r2, r0
 80094c2:	4254      	negs	r4, r2
 80094c4:	4314      	orrs	r4, r2
 80094c6:	0c4b      	lsrs	r3, r1, #17
 80094c8:	0b24      	lsrs	r4, r4, #12
 80094ca:	045b      	lsls	r3, r3, #17
 80094cc:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80094d0:	ea44 0103 	orr.w	r1, r4, r3
 80094d4:	4b32      	ldr	r3, [pc, #200]	; (80095a0 <rint+0x10c>)
 80094d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80094da:	e9d3 6700 	ldrd	r6, r7, [r3]
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4630      	mov	r0, r6
 80094e4:	4639      	mov	r1, r7
 80094e6:	f7f6 fed1 	bl	800028c <__adddf3>
 80094ea:	e9cd 0100 	strd	r0, r1, [sp]
 80094ee:	463b      	mov	r3, r7
 80094f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094f4:	4632      	mov	r2, r6
 80094f6:	f7f6 fec7 	bl	8000288 <__aeabi_dsub>
 80094fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094fe:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009502:	4639      	mov	r1, r7
 8009504:	ec41 0b10 	vmov	d0, r0, r1
 8009508:	b003      	add	sp, #12
 800950a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800950c:	4a25      	ldr	r2, [pc, #148]	; (80095a4 <rint+0x110>)
 800950e:	4132      	asrs	r2, r6
 8009510:	ea01 0702 	and.w	r7, r1, r2
 8009514:	4307      	orrs	r7, r0
 8009516:	d0f5      	beq.n	8009504 <rint+0x70>
 8009518:	0851      	lsrs	r1, r2, #1
 800951a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800951e:	4314      	orrs	r4, r2
 8009520:	d00c      	beq.n	800953c <rint+0xa8>
 8009522:	ea23 0201 	bic.w	r2, r3, r1
 8009526:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800952a:	2e13      	cmp	r6, #19
 800952c:	fa43 f606 	asr.w	r6, r3, r6
 8009530:	bf0c      	ite	eq
 8009532:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009536:	2400      	movne	r4, #0
 8009538:	ea42 0306 	orr.w	r3, r2, r6
 800953c:	4918      	ldr	r1, [pc, #96]	; (80095a0 <rint+0x10c>)
 800953e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009542:	4622      	mov	r2, r4
 8009544:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009548:	4620      	mov	r0, r4
 800954a:	4629      	mov	r1, r5
 800954c:	f7f6 fe9e 	bl	800028c <__adddf3>
 8009550:	e9cd 0100 	strd	r0, r1, [sp]
 8009554:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009558:	4622      	mov	r2, r4
 800955a:	462b      	mov	r3, r5
 800955c:	f7f6 fe94 	bl	8000288 <__aeabi_dsub>
 8009560:	e7d0      	b.n	8009504 <rint+0x70>
 8009562:	2e33      	cmp	r6, #51	; 0x33
 8009564:	dd07      	ble.n	8009576 <rint+0xe2>
 8009566:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800956a:	d1cb      	bne.n	8009504 <rint+0x70>
 800956c:	ee10 2a10 	vmov	r2, s0
 8009570:	f7f6 fe8c 	bl	800028c <__adddf3>
 8009574:	e7c6      	b.n	8009504 <rint+0x70>
 8009576:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800957a:	f04f 36ff 	mov.w	r6, #4294967295
 800957e:	40d6      	lsrs	r6, r2
 8009580:	4230      	tst	r0, r6
 8009582:	d0bf      	beq.n	8009504 <rint+0x70>
 8009584:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009588:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800958c:	bf1f      	itttt	ne
 800958e:	ea24 0101 	bicne.w	r1, r4, r1
 8009592:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009596:	fa44 f202 	asrne.w	r2, r4, r2
 800959a:	ea41 0402 	orrne.w	r4, r1, r2
 800959e:	e7cd      	b.n	800953c <rint+0xa8>
 80095a0:	08009c60 	.word	0x08009c60
 80095a4:	000fffff 	.word	0x000fffff

080095a8 <scalbn>:
 80095a8:	b570      	push	{r4, r5, r6, lr}
 80095aa:	ec55 4b10 	vmov	r4, r5, d0
 80095ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80095b2:	4606      	mov	r6, r0
 80095b4:	462b      	mov	r3, r5
 80095b6:	b99a      	cbnz	r2, 80095e0 <scalbn+0x38>
 80095b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80095bc:	4323      	orrs	r3, r4
 80095be:	d036      	beq.n	800962e <scalbn+0x86>
 80095c0:	4b39      	ldr	r3, [pc, #228]	; (80096a8 <scalbn+0x100>)
 80095c2:	4629      	mov	r1, r5
 80095c4:	ee10 0a10 	vmov	r0, s0
 80095c8:	2200      	movs	r2, #0
 80095ca:	f7f7 f815 	bl	80005f8 <__aeabi_dmul>
 80095ce:	4b37      	ldr	r3, [pc, #220]	; (80096ac <scalbn+0x104>)
 80095d0:	429e      	cmp	r6, r3
 80095d2:	4604      	mov	r4, r0
 80095d4:	460d      	mov	r5, r1
 80095d6:	da10      	bge.n	80095fa <scalbn+0x52>
 80095d8:	a32b      	add	r3, pc, #172	; (adr r3, 8009688 <scalbn+0xe0>)
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	e03a      	b.n	8009656 <scalbn+0xae>
 80095e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80095e4:	428a      	cmp	r2, r1
 80095e6:	d10c      	bne.n	8009602 <scalbn+0x5a>
 80095e8:	ee10 2a10 	vmov	r2, s0
 80095ec:	4620      	mov	r0, r4
 80095ee:	4629      	mov	r1, r5
 80095f0:	f7f6 fe4c 	bl	800028c <__adddf3>
 80095f4:	4604      	mov	r4, r0
 80095f6:	460d      	mov	r5, r1
 80095f8:	e019      	b.n	800962e <scalbn+0x86>
 80095fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80095fe:	460b      	mov	r3, r1
 8009600:	3a36      	subs	r2, #54	; 0x36
 8009602:	4432      	add	r2, r6
 8009604:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009608:	428a      	cmp	r2, r1
 800960a:	dd08      	ble.n	800961e <scalbn+0x76>
 800960c:	2d00      	cmp	r5, #0
 800960e:	a120      	add	r1, pc, #128	; (adr r1, 8009690 <scalbn+0xe8>)
 8009610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009614:	da1c      	bge.n	8009650 <scalbn+0xa8>
 8009616:	a120      	add	r1, pc, #128	; (adr r1, 8009698 <scalbn+0xf0>)
 8009618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800961c:	e018      	b.n	8009650 <scalbn+0xa8>
 800961e:	2a00      	cmp	r2, #0
 8009620:	dd08      	ble.n	8009634 <scalbn+0x8c>
 8009622:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009626:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800962a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800962e:	ec45 4b10 	vmov	d0, r4, r5
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009638:	da19      	bge.n	800966e <scalbn+0xc6>
 800963a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800963e:	429e      	cmp	r6, r3
 8009640:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009644:	dd0a      	ble.n	800965c <scalbn+0xb4>
 8009646:	a112      	add	r1, pc, #72	; (adr r1, 8009690 <scalbn+0xe8>)
 8009648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e2      	bne.n	8009616 <scalbn+0x6e>
 8009650:	a30f      	add	r3, pc, #60	; (adr r3, 8009690 <scalbn+0xe8>)
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f7f6 ffcf 	bl	80005f8 <__aeabi_dmul>
 800965a:	e7cb      	b.n	80095f4 <scalbn+0x4c>
 800965c:	a10a      	add	r1, pc, #40	; (adr r1, 8009688 <scalbn+0xe0>)
 800965e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d0b8      	beq.n	80095d8 <scalbn+0x30>
 8009666:	a10e      	add	r1, pc, #56	; (adr r1, 80096a0 <scalbn+0xf8>)
 8009668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966c:	e7b4      	b.n	80095d8 <scalbn+0x30>
 800966e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009672:	3236      	adds	r2, #54	; 0x36
 8009674:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009678:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800967c:	4620      	mov	r0, r4
 800967e:	4b0c      	ldr	r3, [pc, #48]	; (80096b0 <scalbn+0x108>)
 8009680:	2200      	movs	r2, #0
 8009682:	e7e8      	b.n	8009656 <scalbn+0xae>
 8009684:	f3af 8000 	nop.w
 8009688:	c2f8f359 	.word	0xc2f8f359
 800968c:	01a56e1f 	.word	0x01a56e1f
 8009690:	8800759c 	.word	0x8800759c
 8009694:	7e37e43c 	.word	0x7e37e43c
 8009698:	8800759c 	.word	0x8800759c
 800969c:	fe37e43c 	.word	0xfe37e43c
 80096a0:	c2f8f359 	.word	0xc2f8f359
 80096a4:	81a56e1f 	.word	0x81a56e1f
 80096a8:	43500000 	.word	0x43500000
 80096ac:	ffff3cb0 	.word	0xffff3cb0
 80096b0:	3c900000 	.word	0x3c900000

080096b4 <_init>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	bf00      	nop
 80096b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ba:	bc08      	pop	{r3}
 80096bc:	469e      	mov	lr, r3
 80096be:	4770      	bx	lr

080096c0 <_fini>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	bf00      	nop
 80096c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c6:	bc08      	pop	{r3}
 80096c8:	469e      	mov	lr, r3
 80096ca:	4770      	bx	lr
