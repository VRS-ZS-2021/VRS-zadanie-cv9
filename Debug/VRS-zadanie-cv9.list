
VRS-zadanie-cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08009868  08009868  00019868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e08  08009e08  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009e08  08009e08  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e08  08009e08  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e08  08009e08  00019e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e0c  08009e0c  00019e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000000ec  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200002cc  200002cc  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a8b7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002011  00000000  00000000  0002aac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000820  00000000  00000000  0002d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018278  00000000  00000000  0002dc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007cf0  00000000  00000000  00045e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b648  00000000  00000000  0004db78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c91c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bac  00000000  00000000  000c9214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800984c 	.word	0x0800984c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800984c 	.word	0x0800984c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	619a      	str	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <resetSegments>:
void setDigit(uint8_t pos);


/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f7ff ffdc 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f7ff ffd6 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000d48:	2102      	movs	r1, #2
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <resetSegments+0x58>)
 8000d4c:	f7ff ffd2 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000d50:	2120      	movs	r1, #32
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <resetSegments+0x58>)
 8000d54:	f7ff ffce 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000d58:	2110      	movs	r1, #16
 8000d5a:	480a      	ldr	r0, [pc, #40]	; (8000d84 <resetSegments+0x58>)
 8000d5c:	f7ff ffca 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000d60:	2101      	movs	r1, #1
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f7ff ffc5 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f7ff ffc0 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000d74:	2108      	movs	r1, #8
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f7ff ffbb 	bl	8000cf4 <LL_GPIO_SetOutputPin>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	48000400 	.word	0x48000400

08000d88 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f7ff ffbc 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f7ff ffb6 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000da4:	2102      	movs	r1, #2
 8000da6:	480e      	ldr	r0, [pc, #56]	; (8000de0 <setSegments+0x58>)
 8000da8:	f7ff ffb2 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000dac:	2120      	movs	r1, #32
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <setSegments+0x58>)
 8000db0:	f7ff ffae 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000db4:	2110      	movs	r1, #16
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <setSegments+0x58>)
 8000db8:	f7ff ffaa 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f7ff ffa5 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f7ff ffa0 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000dd0:	2108      	movs	r1, #8
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd6:	f7ff ff9b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	48000400 	.word	0x48000400

08000de4 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000de8:	2104      	movs	r1, #4
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f7ff ff8f 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000df2:	2101      	movs	r1, #1
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <resetDigits+0x3c>)
 8000df6:	f7ff ff8b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f7ff ff86 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8000e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f7ff ff80 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f7ff ff7b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	48000400 	.word	0x48000400

08000e24 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8000e28:	2101      	movs	r1, #1
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <setDigits+0x3c>)
 8000e2c:	f7ff ff62 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000e30:	2110      	movs	r1, #16
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f7ff ff5d 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8000e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f7ff ff57 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8000e46:	2104      	movs	r1, #4
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f7ff ff52 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e56:	f7ff ff4d 	bl	8000cf4 <LL_GPIO_SetOutputPin>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	48000400 	.word	0x48000400

08000e64 <setDecimalPoint>:

void setDecimalPoint(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4802      	ldr	r0, [pc, #8]	; (8000e74 <setDecimalPoint+0x10>)
 8000e6c:	f7ff ff50 	bl	8000d10 <LL_GPIO_ResetOutputPin>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	48000400 	.word	0x48000400

08000e78 <set_sign>:

void set_sign(char sign){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<6))
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	3b30      	subs	r3, #48	; 0x30
 8000e86:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <set_sign+0xc8>)
 8000e88:	5cd3      	ldrb	r3, [r2, r3]
 8000e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d004      	beq.n	8000e9c <set_sign+0x24>
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000e92:	2102      	movs	r1, #2
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f7ff ff3a 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<5))
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	3b30      	subs	r3, #48	; 0x30
 8000ea0:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <set_sign+0xc8>)
 8000ea2:	5cd3      	ldrb	r3, [r2, r3]
 8000ea4:	f003 0320 	and.w	r3, r3, #32
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d004      	beq.n	8000eb6 <set_sign+0x3e>
		LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000eac:	2101      	movs	r1, #1
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f7ff ff2d 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<4))
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	3b30      	subs	r3, #48	; 0x30
 8000eba:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <set_sign+0xc8>)
 8000ebc:	5cd3      	ldrb	r3, [r2, r3]
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <set_sign+0x5a>
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f7ff ff1f 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<3))
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	3b30      	subs	r3, #48	; 0x30
 8000ed6:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <set_sign+0xc8>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <set_sign+0x72>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4817      	ldr	r0, [pc, #92]	; (8000f44 <set_sign+0xcc>)
 8000ee6:	f7ff ff13 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<2))
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	3b30      	subs	r3, #48	; 0x30
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <set_sign+0xc8>)
 8000ef0:	5cd3      	ldrb	r3, [r2, r3]
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <set_sign+0x8e>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f7ff ff05 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<1))
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	3b30      	subs	r3, #48	; 0x30
 8000f0a:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <set_sign+0xc8>)
 8000f0c:	5cd3      	ldrb	r3, [r2, r3]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d004      	beq.n	8000f20 <set_sign+0xa8>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000f16:	2108      	movs	r1, #8
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f7ff fef8 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<0))
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	3b30      	subs	r3, #48	; 0x30
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <set_sign+0xc8>)
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <set_sign+0xc0>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000f30:	2110      	movs	r1, #16
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <set_sign+0xcc>)
 8000f34:	f7ff feec 	bl	8000d10 <LL_GPIO_ResetOutputPin>

}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	080098ac 	.word	0x080098ac
 8000f44:	48000400 	.word	0x48000400

08000f48 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d823      	bhi.n	8000fa0 <setDigit+0x58>
 8000f58:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <setDigit+0x18>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000f71 	.word	0x08000f71
 8000f64:	08000f7d 	.word	0x08000f7d
 8000f68:	08000f8b 	.word	0x08000f8b
 8000f6c:	08000f97 	.word	0x08000f97
	{
	case 0:
		DIGIT_4_ON;
 8000f70:	2104      	movs	r1, #4
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f7ff febd 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f7a:	e011      	b.n	8000fa0 <setDigit+0x58>
	case 1:
		DIGIT_3_ON;
 8000f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f84:	f7ff feb6 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f88:	e00a      	b.n	8000fa0 <setDigit+0x58>
	case 2:
		DIGIT_2_ON;
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f7ff feb0 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f94:	e004      	b.n	8000fa0 <setDigit+0x58>
	case 3:
		DIGIT_1_ON;
 8000f96:	2101      	movs	r1, #1
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <setDigit+0x60>)
 8000f9a:	f7ff feab 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f9e:	bf00      	nop
	}
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	48000400 	.word	0x48000400

08000fac <display_sign>:
void display_sign(char sign_1,char sign_2, char sign_3,char sign_4,int index_dot,int act_index)
{
 8000fac:	b490      	push	{r4, r7}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4623      	mov	r3, r4
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71bb      	strb	r3, [r7, #6]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	717b      	strb	r3, [r7, #5]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	713b      	strb	r3, [r7, #4]
	Display_sign[0] = sign_1;
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <display_sign+0x48>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	7013      	strb	r3, [r2, #0]
	Display_sign[1] = sign_2;
 8000fd0:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <display_sign+0x48>)
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	7053      	strb	r3, [r2, #1]
	Display_sign[2] = sign_3;
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <display_sign+0x48>)
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	7093      	strb	r3, [r2, #2]
	Display_sign[3] = sign_4;
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <display_sign+0x48>)
 8000fde:	793b      	ldrb	r3, [r7, #4]
 8000fe0:	70d3      	strb	r3, [r2, #3]
	//index_for_dot = index_dot;
	actual_index = act_index;
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <display_sign+0x4c>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc90      	pop	{r4, r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2000022c 	.word	0x2000022c
 8000ff8:	20000228 	.word	0x20000228

08000ffc <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e034      	b.n	8001072 <updateDisplay+0x76>
	{

		setDigit(i);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff9c 	bl	8000f48 <setDigit>
		set_sign(Display_sign[3-i]);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f1c3 0303 	rsb	r3, r3, #3
 8001016:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <updateDisplay+0x88>)
 8001018:	5cd3      	ldrb	r3, [r2, r3]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff2c 	bl	8000e78 <set_sign>

		//set dot
		if((int8_t)actual_index - (int8_t)index_for_dot + 4 - i == 0){
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <updateDisplay+0x8c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <updateDisplay+0x90>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b25b      	sxtb	r3, r3
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	1d1a      	adds	r2, r3, #4
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	429a      	cmp	r2, r3
 8001036:	d101      	bne.n	800103c <updateDisplay+0x40>
			setDecimalPoint();
 8001038:	f7ff ff14 	bl	8000e64 <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <updateDisplay+0x94>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	4914      	ldr	r1, [pc, #80]	; (8001094 <updateDisplay+0x98>)
 8001044:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 8001048:	bf00      	nop
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <updateDisplay+0x98>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	1c94      	adds	r4, r2, #2
 8001052:	f143 0500 	adc.w	r5, r3, #0
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <updateDisplay+0x94>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	42ab      	cmp	r3, r5
 800105e:	bf08      	it	eq
 8001060:	42a2      	cmpeq	r2, r4
 8001062:	d3f2      	bcc.n	800104a <updateDisplay+0x4e>

		resetDigits();
 8001064:	f7ff febe 	bl	8000de4 <resetDigits>
		resetSegments();
 8001068:	f7ff fe60 	bl	8000d2c <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	3301      	adds	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d9c7      	bls.n	8001008 <updateDisplay+0xc>
	}
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bdb0      	pop	{r4, r5, r7, pc}
 8001082:	bf00      	nop
 8001084:	2000022c 	.word	0x2000022c
 8001088:	20000228 	.word	0x20000228
 800108c:	20000218 	.word	0x20000218
 8001090:	20000200 	.word	0x20000200
 8001094:	20000208 	.word	0x20000208

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011b6:	695a      	ldr	r2, [r3, #20]
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4313      	orrs	r3, r2
 80011be:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c2:	695a      	ldr	r2, [r3, #20]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4013      	ands	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000

080011dc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <LL_SYSCFG_SetEXTISource+0x58>)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	0c1b      	lsrs	r3, r3, #16
 80011f6:	43db      	mvns	r3, r3
 80011f8:	ea02 0103 	and.w	r1, r2, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	0c1b      	lsrs	r3, r3, #16
 8001200:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	fa03 f202 	lsl.w	r2, r3, r2
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <LL_SYSCFG_SetEXTISource+0x58>)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	430a      	orrs	r2, r1
 8001222:	3302      	adds	r3, #2
 8001224:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40010000 	.word	0x40010000

08001238 <LL_GPIO_SetPinMode>:
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	613b      	str	r3, [r7, #16]
  return result;
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	fab3 f383 	clz	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2103      	movs	r1, #3
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	61bb      	str	r3, [r7, #24]
  return result;
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fab3 f383 	clz	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	431a      	orrs	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	601a      	str	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_GPIO_SetPinPull>:
{
 8001296:	b480      	push	{r7}
 8001298:	b089      	sub	sp, #36	; 0x24
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa93 f3a3 	rbit	r3, r3
 80012b0:	613b      	str	r3, [r7, #16]
  return result;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	fab3 f383 	clz	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2103      	movs	r1, #3
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	401a      	ands	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	61bb      	str	r3, [r7, #24]
  return result;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	431a      	orrs	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	60da      	str	r2, [r3, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3724      	adds	r7, #36	; 0x24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_GPIO_ResetOutputPin>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001332:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001336:	f7ff ff39 	bl	80011ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800133a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800133e:	f7ff ff35 	bl	80011ac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001342:	f641 119f 	movw	r1, #6559	; 0x199f
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f7ff ffd3 	bl	80012f4 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 800134e:	2133      	movs	r1, #51	; 0x33
 8001350:	482b      	ldr	r0, [pc, #172]	; (8001400 <MX_GPIO_Init+0xf0>)
 8001352:	f7ff ffcf 	bl	80012f4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001356:	f641 139f 	movw	r3, #6559	; 0x199f
 800135a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800135c:	2301      	movs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f002 f8c2 	bl	80034fc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001378:	2333      	movs	r3, #51	; 0x33
 800137a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800137c:	2301      	movs	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	481b      	ldr	r0, [pc, #108]	; (8001400 <MX_GPIO_Init+0xf0>)
 8001392:	f002 f8b3 	bl	80034fc <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001396:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff ff1e 	bl	80011dc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2108      	movs	r1, #8
 80013a4:	4816      	ldr	r0, [pc, #88]	; (8001400 <MX_GPIO_Init+0xf0>)
 80013a6:	f7ff ff76 	bl	8001296 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2108      	movs	r1, #8
 80013ae:	4814      	ldr	r0, [pc, #80]	; (8001400 <MX_GPIO_Init+0xf0>)
 80013b0:	f7ff ff42 	bl	8001238 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80013b4:	2308      	movs	r3, #8
 80013b6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013bc:	2301      	movs	r3, #1
 80013be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80013c8:	2302      	movs	r3, #2
 80013ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fe9a 	bl	800310c <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80013d8:	f7ff fe5e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 80013dc:	4603      	mov	r3, r0
 80013de:	2200      	movs	r2, #0
 80013e0:	2101      	movs	r1, #1
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff feae 	bl	8001144 <NVIC_EncodePriority>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4619      	mov	r1, r3
 80013ec:	2009      	movs	r0, #9
 80013ee:	f7ff fe7f 	bl	80010f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80013f2:	2009      	movs	r0, #9
 80013f4:	f7ff fe5e 	bl	80010b4 <__NVIC_EnableIRQ>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	48000400 	.word	0x48000400

08001404 <__NVIC_GetPriorityGrouping>:
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f043 0201 	orr.w	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800158a:	f023 0306 	bic.w	r3, r3, #6
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	430a      	orrs	r2, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	60da      	str	r2, [r3, #12]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	60da      	str	r2, [r3, #12]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f043 0204 	orr.w	r2, r3, #4
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 0204 	bic.w	r2, r3, #4
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b02      	cmp	r3, #2
 8001618:	d101      	bne.n	800161e <LL_I2C_IsActiveFlag_TXIS+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b04      	cmp	r3, #4
 800163e:	d101      	bne.n	8001644 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f003 0320 	and.w	r3, r3, #32
 8001662:	2b20      	cmp	r3, #32
 8001664:	d101      	bne.n	800166a <LL_I2C_IsActiveFlag_STOP+0x18>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <LL_I2C_IsActiveFlag_STOP+0x1a>
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	f043 0220 	orr.w	r2, r3, #32
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	61da      	str	r2, [r3, #28]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	605a      	str	r2, [r3, #4]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	0d5b      	lsrs	r3, r3, #21
 80016ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <LL_I2C_HandleTransfer+0x48>)
 80016d4:	430b      	orrs	r3, r1
 80016d6:	43db      	mvns	r3, r3
 80016d8:	401a      	ands	r2, r3
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4319      	orrs	r1, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	041b      	lsls	r3, r3, #16
 80016e4:	4319      	orrs	r1, r3
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4319      	orrs	r1, r3
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	431a      	orrs	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	03ff7bff 	.word	0x03ff7bff

08001704 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	b2db      	uxtb	r3, r3
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_AHB1_GRP1_EnableClock>:
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4013      	ands	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40021000 	.word	0x40021000

0800176c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <LL_APB1_GRP1_EnableClock+0x2c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001782:	69da      	ldr	r2, [r3, #28]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4013      	ands	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000

0800179c <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08e      	sub	sp, #56	; 0x38
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
 80017c4:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80017c6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80017ca:	f7ff ffb7 	bl	800173c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80017ce:	23c0      	movs	r3, #192	; 0xc0
 80017d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017d2:	2302      	movs	r3, #2
 80017d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80017da:	2301      	movs	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017de:	2301      	movs	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80017e2:	2304      	movs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	4821      	ldr	r0, [pc, #132]	; (8001870 <MX_I2C1_Init+0xd4>)
 80017ec:	f001 fe86 	bl	80034fc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80017f0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80017f4:	f7ff ffba 	bl	800176c <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017f8:	f7ff fe04 	bl	8001404 <__NVIC_GetPriorityGrouping>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fe54 	bl	80014b0 <NVIC_EncodePriority>
 8001808:	4603      	mov	r3, r0
 800180a:	4619      	mov	r1, r3
 800180c:	201f      	movs	r0, #31
 800180e:	f7ff fe25 	bl	800145c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001812:	201f      	movs	r0, #31
 8001814:	f7ff fe04 	bl	8001420 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001818:	4816      	ldr	r0, [pc, #88]	; (8001874 <MX_I2C1_Init+0xd8>)
 800181a:	f7ff ff3d 	bl	8001698 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800181e:	4815      	ldr	r0, [pc, #84]	; (8001874 <MX_I2C1_Init+0xd8>)
 8001820:	f7ff fec1 	bl	80015a6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001824:	4813      	ldr	r0, [pc, #76]	; (8001874 <MX_I2C1_Init+0xd8>)
 8001826:	f7ff fe96 	bl	8001556 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800182a:	4812      	ldr	r0, [pc, #72]	; (8001874 <MX_I2C1_Init+0xd8>)
 800182c:	f7ff fe83 	bl	8001536 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <MX_I2C1_Init+0xdc>)
 8001836:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001840:	2302      	movs	r3, #2
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	4808      	ldr	r0, [pc, #32]	; (8001874 <MX_I2C1_Init+0xd8>)
 8001854:	f001 ff65 	bl	8003722 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_I2C1_Init+0xd8>)
 800185e:	f7ff fe8a 	bl	8001576 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <MX_I2C1_Init+0xd8>)
 8001864:	f7ff fe57 	bl	8001516 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	48000400 	.word	0x48000400
 8001874:	40005400 	.word	0x40005400
 8001878:	2000090e 	.word	0x2000090e

0800187c <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af02      	add	r7, sp, #8
 8001882:	4604      	mov	r4, r0
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4623      	mov	r3, r4
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	4603      	mov	r3, r0
 8001890:	71bb      	strb	r3, [r7, #6]
 8001892:	460b      	mov	r3, r1
 8001894:	717b      	strb	r3, [r7, #5]
 8001896:	4613      	mov	r3, r2
 8001898:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 800189a:	793b      	ldrb	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a6:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80018a8:	7979      	ldrb	r1, [r7, #5]
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <i2c_master_write+0x80>)
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2302      	movs	r3, #2
 80018b6:	2200      	movs	r2, #0
 80018b8:	4811      	ldr	r0, [pc, #68]	; (8001900 <i2c_master_write+0x84>)
 80018ba:	f7ff fefd 	bl	80016b8 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 80018be:	79bb      	ldrb	r3, [r7, #6]
 80018c0:	4619      	mov	r1, r3
 80018c2:	480f      	ldr	r0, [pc, #60]	; (8001900 <i2c_master_write+0x84>)
 80018c4:	f7ff ff2b 	bl	800171e <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80018c8:	e00a      	b.n	80018e0 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <i2c_master_write+0x84>)
 80018cc:	f7ff fe9b 	bl	8001606 <LL_I2C_IsActiveFlag_TXIS>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4619      	mov	r1, r3
 80018da:	4809      	ldr	r0, [pc, #36]	; (8001900 <i2c_master_write+0x84>)
 80018dc:	f7ff ff1f 	bl	800171e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <i2c_master_write+0x84>)
 80018e2:	f7ff feb6 	bl	8001652 <LL_I2C_IsActiveFlag_STOP>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0ee      	beq.n	80018ca <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <i2c_master_write+0x84>)
 80018ee:	f7ff fec3 	bl	8001678 <LL_I2C_ClearFlag_STOP>
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	80002000 	.word	0x80002000
 8001900:	40005400 	.word	0x40005400

08001904 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af02      	add	r7, sp, #8
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4603      	mov	r3, r0
 8001914:	70fb      	strb	r3, [r7, #3]
 8001916:	460b      	mov	r3, r1
 8001918:	70bb      	strb	r3, [r7, #2]
 800191a:	4613      	mov	r3, r2
 800191c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800191e:	4a30      	ldr	r2, [pc, #192]	; (80019e0 <i2c_master_read+0xdc>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001924:	7c3b      	ldrb	r3, [r7, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 800192a:	78bb      	ldrb	r3, [r7, #2]
 800192c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001930:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <i2c_master_read+0xe0>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001938:	482b      	ldr	r0, [pc, #172]	; (80019e8 <i2c_master_read+0xe4>)
 800193a:	f7ff fe44 	bl	80015c6 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800193e:	7879      	ldrb	r1, [r7, #1]
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <i2c_master_read+0xe8>)
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2301      	movs	r3, #1
 800194c:	2200      	movs	r2, #0
 800194e:	4826      	ldr	r0, [pc, #152]	; (80019e8 <i2c_master_read+0xe4>)
 8001950:	f7ff feb2 	bl	80016b8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001954:	e00a      	b.n	800196c <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001956:	4824      	ldr	r0, [pc, #144]	; (80019e8 <i2c_master_read+0xe4>)
 8001958:	f7ff fe55 	bl	8001606 <LL_I2C_IsActiveFlag_TXIS>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr); //adresa, ktoru chceme citat - posielame do slave zariadenia
 8001962:	78bb      	ldrb	r3, [r7, #2]
 8001964:	4619      	mov	r1, r3
 8001966:	4820      	ldr	r0, [pc, #128]	; (80019e8 <i2c_master_read+0xe4>)
 8001968:	f7ff fed9 	bl	800171e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800196c:	481e      	ldr	r0, [pc, #120]	; (80019e8 <i2c_master_read+0xe4>)
 800196e:	f7ff fe70 	bl	8001652 <LL_I2C_IsActiveFlag_STOP>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0ee      	beq.n	8001956 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001978:	481b      	ldr	r0, [pc, #108]	; (80019e8 <i2c_master_read+0xe4>)
 800197a:	f7ff fe7d 	bl	8001678 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 800197e:	bf00      	nop
 8001980:	4819      	ldr	r0, [pc, #100]	; (80019e8 <i2c_master_read+0xe4>)
 8001982:	f7ff fe66 	bl	8001652 <LL_I2C_IsActiveFlag_STOP>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f9      	bne.n	8001980 <i2c_master_read+0x7c>

	//citam register od slejva, LL_I2C_HandleTransfer- dolezita funkcia
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 800198c:	7879      	ldrb	r1, [r7, #1]
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <i2c_master_read+0xec>)
 8001992:	9201      	str	r2, [sp, #4]
 8001994:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001998:	9200      	str	r2, [sp, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	4812      	ldr	r0, [pc, #72]	; (80019e8 <i2c_master_read+0xe4>)
 800199e:	f7ff fe8b 	bl	80016b8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80019a2:	bf00      	nop
 80019a4:	4810      	ldr	r0, [pc, #64]	; (80019e8 <i2c_master_read+0xe4>)
 80019a6:	f7ff fe54 	bl	8001652 <LL_I2C_IsActiveFlag_STOP>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f9      	beq.n	80019a4 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <i2c_master_read+0xe4>)
 80019b2:	f7ff fe61 	bl	8001678 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 80019b6:	480c      	ldr	r0, [pc, #48]	; (80019e8 <i2c_master_read+0xe4>)
 80019b8:	f7ff fe15 	bl	80015e6 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <i2c_master_read+0xe4>)
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <i2c_master_read+0xe4>)
 80019c2:	f043 0310 	orr.w	r3, r3, #16
 80019c6:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <i2c_master_read+0xf0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <i2c_master_read+0xe0>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <i2c_master_read+0xdc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000230 	.word	0x20000230
 80019e4:	20000210 	.word	0x20000210
 80019e8:	40005400 	.word	0x40005400
 80019ec:	80002000 	.word	0x80002000
 80019f0:	80002400 	.word	0x80002400
 80019f4:	20000211 	.word	0x20000211

080019f8 <I2C1_EV_IRQHandler_fun>:


void I2C1_EV_IRQHandler_fun(void)
{
 80019f8:	b598      	push	{r3, r4, r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80019fc:	4812      	ldr	r0, [pc, #72]	; (8001a48 <I2C1_EV_IRQHandler_fun+0x50>)
 80019fe:	f7ff fe15 	bl	800162c <LL_I2C_IsActiveFlag_RXNE>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01c      	beq.n	8001a42 <I2C1_EV_IRQHandler_fun+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <I2C1_EV_IRQHandler_fun+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <I2C1_EV_IRQHandler_fun+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	1c59      	adds	r1, r3, #1
 8001a14:	b2c8      	uxtb	r0, r1
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <I2C1_EV_IRQHandler_fun+0x58>)
 8001a18:	7008      	strb	r0, [r1, #0]
 8001a1a:	18d4      	adds	r4, r2, r3
 8001a1c:	480a      	ldr	r0, [pc, #40]	; (8001a48 <I2C1_EV_IRQHandler_fun+0x50>)
 8001a1e:	f7ff fe71 	bl	8001704 <LL_I2C_ReceiveData8>
 8001a22:	4603      	mov	r3, r0
 8001a24:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <I2C1_EV_IRQHandler_fun+0x58>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b13      	cmp	r3, #19
 8001a2e:	d903      	bls.n	8001a38 <I2C1_EV_IRQHandler_fun+0x40>
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <I2C1_EV_IRQHandler_fun+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	e001      	b.n	8001a3c <I2C1_EV_IRQHandler_fun+0x44>
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <I2C1_EV_IRQHandler_fun+0x58>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <I2C1_EV_IRQHandler_fun+0x5c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
	}
}
 8001a42:	bf00      	nop
 8001a44:	bd98      	pop	{r3, r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40005400 	.word	0x40005400
 8001a4c:	20000230 	.word	0x20000230
 8001a50:	20000211 	.word	0x20000211
 8001a54:	20000210 	.word	0x20000210

08001a58 <iks01a1_init>:
#include "iks01a1.h"

uint8_t data = 0;

uint8_t iks01a1_init(void){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	LL_mDelay(500);
 8001a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a62:	f002 fabd 	bl	8003fe0 <LL_mDelay>
	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 fa2e 	bl	8001ec8 <lps25hb_read_byte>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
	//val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);

	if(!(val == LPS25HB_WHO_AM_I_VALUE))
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2bbd      	cmp	r3, #189	; 0xbd
 8001a74:	d001      	beq.n	8001a7a <iks01a1_init+0x22>
	{
		return 0; //bad who am I value
 8001a76:	2300      	movs	r3, #0
 8001a78:	e02a      	b.n	8001ad0 <iks01a1_init+0x78>
	}

	ctrl = hts221_read_byte(LPS25HB_CTRL_REG1);
 8001a7a:	2020      	movs	r0, #32
 8001a7c:	f000 fa3c 	bl	8001ef8 <hts221_read_byte>
 8001a80:	4603      	mov	r3, r0
 8001a82:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 7;
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a8a:	71bb      	strb	r3, [r7, #6]
	lps25hb_write_byte(LPS25HB_CTRL_REG1, ctrl); //active mode
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	2020      	movs	r0, #32
 8001a92:	f000 fa83 	bl	8001f9c <lps25hb_write_byte>


	LL_mDelay(500);
 8001a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a9a:	f002 faa1 	bl	8003fe0 <LL_mDelay>
	val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f000 fa2a 	bl	8001ef8 <hts221_read_byte>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]

	if(!(val == HTS221_WHO_AM_I_VALUE))
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2bbc      	cmp	r3, #188	; 0xbc
 8001aac:	d001      	beq.n	8001ab2 <iks01a1_init+0x5a>
	{
		return 0; //bad who am I value
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e00e      	b.n	8001ad0 <iks01a1_init+0x78>
	}

	ctrl = hts221_read_byte(HTS221_CTRL_REG1);
 8001ab2:	2020      	movs	r0, #32
 8001ab4:	f000 fa20 	bl	8001ef8 <hts221_read_byte>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 7;
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ac2:	71bb      	strb	r3, [r7, #6]
	hts221_write_byte(HTS221_CTRL_REG1, ctrl); //active mode
 8001ac4:	79bb      	ldrb	r3, [r7, #6]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	2020      	movs	r0, #32
 8001aca:	f000 fa55 	bl	8001f78 <hts221_write_byte>
	//uint8_t ctrltest = hts221_read_byte(HTS221_CTRL_REG1);

	//ctrl = ctrltest;

	return 1;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <hts221_start_measurement>:

void hts221_start_measurement(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	uint8_t ctrl = hts221_read_byte(LPS25HB_CTRL_REG2);
 8001ade:	2021      	movs	r0, #33	; 0x21
 8001ae0:	f000 fa0a 	bl	8001ef8 <hts221_read_byte>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
	ctrl |= 0x1;
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	71fb      	strb	r3, [r7, #7]
	lps25hb_write_byte(LPS25HB_CTRL_REG2, ctrl); //activate measurement
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4619      	mov	r1, r3
 8001af4:	2021      	movs	r0, #33	; 0x21
 8001af6:	f000 fa51 	bl	8001f9c <lps25hb_write_byte>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <lps25hb_start_measurement>:

void lps25hb_start_measurement(void) {
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
	uint8_t ctrl = hts221_read_byte(HTS221_CTRL_REG2);
 8001b08:	2021      	movs	r0, #33	; 0x21
 8001b0a:	f000 f9f5 	bl	8001ef8 <hts221_read_byte>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
	ctrl |= 0x1;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	71fb      	strb	r3, [r7, #7]
	hts221_write_byte(HTS221_CTRL_REG2, ctrl); //activate measurement
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	2021      	movs	r0, #33	; 0x21
 8001b20:	f000 fa2a 	bl	8001f78 <hts221_write_byte>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <hts221_get_humidity>:

void hts221_get_humidity(float* out) { //humidity measurement (%)
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	uint8_t data[2], h0_rh, h1_rh;
	int16_t h_out, h0_t0_out, h1_t0_out;



	uint8_t availability = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 8001b38:	2027      	movs	r0, #39	; 0x27
 8001b3a:	f000 f9dd 	bl	8001ef8 <hts221_read_byte>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1) >> 1;
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <hts221_get_humidity+0x3a>
		hts221_start_measurement();
 8001b50:	f7ff ffc2 	bl	8001ad8 <hts221_start_measurement>
		availability = hts221_read_byte(HTS221_STATUS_REG);
 8001b54:	2027      	movs	r0, #39	; 0x27
 8001b56:	f000 f9cf 	bl	8001ef8 <hts221_read_byte>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(0x1<<1);
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	75fb      	strb	r3, [r7, #23]
	}

	h0_rh = hts221_read_byte(HTS221_H0_RH)/2;
 8001b66:	2030      	movs	r0, #48	; 0x30
 8001b68:	f000 f9c6 	bl	8001ef8 <hts221_read_byte>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	75bb      	strb	r3, [r7, #22]
	h1_rh = hts221_read_byte(HTS221_H1_RH)/2;
 8001b72:	2031      	movs	r0, #49	; 0x31
 8001b74:	f000 f9c0 	bl	8001ef8 <hts221_read_byte>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	757b      	strb	r3, [r7, #21]

	hts221_readArray(data, HTS221_H0_T0_OUT, 2);
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	2202      	movs	r2, #2
 8001b84:	2136      	movs	r1, #54	; 0x36
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f9ce 	bl	8001f28 <hts221_readArray>
	h0_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 8001b8c:	7b7b      	ldrb	r3, [r7, #13]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	7b3b      	ldrb	r3, [r7, #12]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_H1_T0_OUT, 2);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	213a      	movs	r1, #58	; 0x3a
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f9c0 	bl	8001f28 <hts221_readArray>
	h1_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 8001ba8:	7b7b      	ldrb	r3, [r7, #13]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	7b3b      	ldrb	r3, [r7, #12]
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	823b      	strh	r3, [r7, #16]

	hts221_readArray(data, HTS221_HUMIDITY_ADDR, 2);
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	2202      	movs	r2, #2
 8001bbc:	2128      	movs	r1, #40	; 0x28
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f9b2 	bl	8001f28 <hts221_readArray>

	h_out = ((uint16_t)data[1]) << 8 | data[0];
 8001bc4:	7b7b      	ldrb	r3, [r7, #13]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	7b3b      	ldrb	r3, [r7, #12]
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	81fb      	strh	r3, [r7, #14]
	*out = (float)((h1_rh-h0_rh)*(h_out-h0_t0_out)/(float)(h1_t0_out-h0_t0_out)+h0_rh);
 8001bd2:	7d7a      	ldrb	r2, [r7, #21]
 8001bd4:	7dbb      	ldrb	r3, [r7, #22]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001bdc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001be0:	1a8a      	subs	r2, r1, r2
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	ee07 3a90 	vmov	s15, r3
 8001bea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001bf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c04:	7dbb      	ldrb	r3, [r7, #22]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	edc3 7a00 	vstr	s15, [r3]
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <hts221_get_temperature>:

void hts221_get_temperature(float* out) { //temperature measurement (°C)
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	int16_t t_out, t0_out, t1_out, t0_degc, t1_degc;

	uint8_t availability = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 8001c2c:	2027      	movs	r0, #39	; 0x27
 8001c2e:	f000 f963 	bl	8001ef8 <hts221_read_byte>
 8001c32:	4603      	mov	r3, r0
 8001c34:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1);
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <hts221_get_temperature+0x3a>
		hts221_start_measurement();
 8001c44:	f7ff ff48 	bl	8001ad8 <hts221_start_measurement>
		availability = hts221_read_byte(HTS221_STATUS_REG);
 8001c48:	2027      	movs	r0, #39	; 0x27
 8001c4a:	f000 f955 	bl	8001ef8 <hts221_read_byte>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1);
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
	}

	uint8_t tmp = hts221_read_byte(HTS221_T0_T1_DEGC_MSB);
 8001c5a:	2035      	movs	r0, #53	; 0x35
 8001c5c:	f000 f94c 	bl	8001ef8 <hts221_read_byte>
 8001c60:	4603      	mov	r3, r0
 8001c62:	75bb      	strb	r3, [r7, #22]
	uint16_t tmp2;

	t0_degc = hts221_read_byte(HTS221_T0_DEGC);
 8001c64:	2032      	movs	r0, #50	; 0x32
 8001c66:	f000 f947 	bl	8001ef8 <hts221_read_byte>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	82bb      	strh	r3, [r7, #20]
	t1_degc = hts221_read_byte(HTS221_T1_DEGC);
 8001c6e:	2033      	movs	r0, #51	; 0x33
 8001c70:	f000 f942 	bl	8001ef8 <hts221_read_byte>
 8001c74:	4603      	mov	r3, r0
 8001c76:	827b      	strh	r3, [r7, #18]

	t0_degc += ((tmp & 0x3)<<8);
 8001c78:	7dbb      	ldrb	r3, [r7, #22]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	8abb      	ldrh	r3, [r7, #20]
 8001c86:	4413      	add	r3, r2
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	82bb      	strh	r3, [r7, #20]
	t0_degc /= 8;
 8001c8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da00      	bge.n	8001c96 <hts221_get_temperature+0x76>
 8001c94:	3307      	adds	r3, #7
 8001c96:	10db      	asrs	r3, r3, #3
 8001c98:	82bb      	strh	r3, [r7, #20]

	tmp2 = ((tmp & (0x3)<<2))<<6;
 8001c9a:	7dbb      	ldrb	r3, [r7, #22]
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca4:	823b      	strh	r3, [r7, #16]
	t1_degc += ((tmp & ((0x3)<<2))<<6);
 8001ca6:	7dbb      	ldrb	r3, [r7, #22]
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	8a7b      	ldrh	r3, [r7, #18]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	827b      	strh	r3, [r7, #18]
	t1_degc /= 8;
 8001cba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	da00      	bge.n	8001cc4 <hts221_get_temperature+0xa4>
 8001cc2:	3307      	adds	r3, #7
 8001cc4:	10db      	asrs	r3, r3, #3
 8001cc6:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_T0_OUT, 2);
 8001cc8:	f107 0308 	add.w	r3, r7, #8
 8001ccc:	2202      	movs	r2, #2
 8001cce:	213c      	movs	r1, #60	; 0x3c
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 f929 	bl	8001f28 <hts221_readArray>
	t0_out = (((uint16_t)data[1]) << 8) | data[0];
 8001cd6:	7a7b      	ldrb	r3, [r7, #9]
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	7a3b      	ldrb	r3, [r7, #8]
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	81fb      	strh	r3, [r7, #14]
	hts221_readArray(data, HTS221_T1_OUT, 2);
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	2202      	movs	r2, #2
 8001cea:	213e      	movs	r1, #62	; 0x3e
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f91b 	bl	8001f28 <hts221_readArray>
	t1_out = (((uint16_t)data[1]) << 8) | data[0];
 8001cf2:	7a7b      	ldrb	r3, [r7, #9]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	7a3b      	ldrb	r3, [r7, #8]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	81bb      	strh	r3, [r7, #12]

	hts221_readArray(data, HTS221_TEMPERATURE_ADDR, 2);
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	2202      	movs	r2, #2
 8001d06:	212a      	movs	r1, #42	; 0x2a
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f90d 	bl	8001f28 <hts221_readArray>

	t_out = ((uint16_t)data[1]) << 8 | data[0];
 8001d0e:	7a7b      	ldrb	r3, [r7, #9]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	7a3b      	ldrb	r3, [r7, #8]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	817b      	strh	r3, [r7, #10]
	*out = (float)((t1_degc - t0_degc)*(t_out-t0_out)/(float)(t1_out-t0_out)+t0_degc);
 8001d1c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001d2a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d2e:	1a8a      	subs	r2, r1, r2
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d3c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	edc3 7a00 	vstr	s15, [r3]
}
 8001d68:	bf00      	nop
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <lps25hb_get_pressure>:

void lps25hb_get_pressure(float* out) { //pressure measurement (hPa = mBAR)
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pressure;// ref_pressure;

	uint8_t availability = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	75fb      	strb	r3, [r7, #23]
	availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001d7c:	2027      	movs	r0, #39	; 0x27
 8001d7e:	f000 f8a3 	bl	8001ec8 <lps25hb_read_byte>
 8001d82:	4603      	mov	r3, r0
 8001d84:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1)>>1;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10a      	bne.n	8001daa <lps25hb_get_pressure+0x3a>
		lps25hb_start_measurement();
 8001d94:	f7ff feb5 	bl	8001b02 <lps25hb_start_measurement>
		availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001d98:	2027      	movs	r0, #39	; 0x27
 8001d9a:	f000 f895 	bl	8001ec8 <lps25hb_read_byte>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1<<1);
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	75fb      	strb	r3, [r7, #23]
	}

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDR, 3);
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	2203      	movs	r2, #3
 8001db0:	2128      	movs	r1, #40	; 0x28
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f8cc 	bl	8001f50 <lps25hb_readArray>
	pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8001db8:	7bbb      	ldrb	r3, [r7, #14]
 8001dba:	041b      	lsls	r3, r3, #16
 8001dbc:	7b7a      	ldrb	r2, [r7, #13]
 8001dbe:	0212      	lsls	r2, r2, #8
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	7b3a      	ldrb	r2, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]

	/*lps25hb_readArray(data, LPS25HB_REF_PRESSURE_ADDR, 3);
	ref_pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];*/

	*out =  (float)(pressure)/(float)(4096);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dd2:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001de8 <lps25hb_get_pressure+0x78>
 8001dd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	45800000 	.word	0x45800000
 8001dec:	00000000 	.word	0x00000000

08001df0 <lps25hb_get_altitude>:

void lps25hb_get_altitude(float* out) { //altitude measurement (m.n.m./AMSL)
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pressure;

	uint8_t availability = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	75fb      	strb	r3, [r7, #23]
	availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001dfc:	2027      	movs	r0, #39	; 0x27
 8001dfe:	f000 f863 	bl	8001ec8 <lps25hb_read_byte>
 8001e02:	4603      	mov	r3, r0
 8001e04:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1)>>1;
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10a      	bne.n	8001e2a <lps25hb_get_altitude+0x3a>
		lps25hb_start_measurement();
 8001e14:	f7ff fe75 	bl	8001b02 <lps25hb_start_measurement>
		availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001e18:	2027      	movs	r0, #39	; 0x27
 8001e1a:	f000 f855 	bl	8001ec8 <lps25hb_read_byte>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1<<1);
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	75fb      	strb	r3, [r7, #23]
	}

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDR, 3);
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	2203      	movs	r2, #3
 8001e30:	2128      	movs	r1, #40	; 0x28
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f88c 	bl	8001f50 <lps25hb_readArray>
	pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	7b7a      	ldrb	r2, [r7, #13]
 8001e3e:	0212      	lsls	r2, r2, #8
 8001e40:	4313      	orrs	r3, r2
 8001e42:	7b3a      	ldrb	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

	*out = 44330*(1-pow((float)(pressure)/(float)(4096*1013.25f),(1/5.255f)));
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e52:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001ec0 <lps25hb_get_altitude+0xd0>
 8001e56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e5a:	ee16 0a90 	vmov	r0, s13
 8001e5e:	f7fe fb73 	bl	8000548 <__aeabi_f2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001eb0 <lps25hb_get_altitude+0xc0>
 8001e6a:	ec43 2b10 	vmov	d0, r2, r3
 8001e6e:	f006 fd43 	bl	80088f8 <pow>
 8001e72:	ec53 2b10 	vmov	r2, r3, d0
 8001e76:	f04f 0000 	mov.w	r0, #0
 8001e7a:	4912      	ldr	r1, [pc, #72]	; (8001ec4 <lps25hb_get_altitude+0xd4>)
 8001e7c:	f7fe fa04 	bl	8000288 <__aeabi_dsub>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	a30b      	add	r3, pc, #44	; (adr r3, 8001eb8 <lps25hb_get_altitude+0xc8>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe fbb3 	bl	80005f8 <__aeabi_dmul>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fea5 	bl	8000be8 <__aeabi_d2f>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	f3af 8000 	nop.w
 8001eb0:	c0000000 	.word	0xc0000000
 8001eb4:	3fc85b95 	.word	0x3fc85b95
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40e5a540 	.word	0x40e5a540
 8001ec0:	4a7d5000 	.word	0x4a7d5000
 8001ec4:	3ff00000 	.word	0x3ff00000

08001ec8 <lps25hb_read_byte>:

uint8_t lps25hb_read_byte(uint8_t reg_addr) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <lps25hb_read_byte+0x2c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, LPS25HB_DEVICE_ADDRESS, 0));
 8001ed8:	79fa      	ldrb	r2, [r7, #7]
 8001eda:	2300      	movs	r3, #0
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	23bb      	movs	r3, #187	; 0xbb
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <lps25hb_read_byte+0x2c>)
 8001ee4:	f7ff fd0e 	bl	8001904 <i2c_master_read>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	781b      	ldrb	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000212 	.word	0x20000212

08001ef8 <hts221_read_byte>:

uint8_t hts221_read_byte(uint8_t reg_addr) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <hts221_read_byte+0x2c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, HTS221_DEVICE_ADDRESS, 0));
 8001f08:	79fa      	ldrb	r2, [r7, #7]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	23be      	movs	r3, #190	; 0xbe
 8001f10:	2101      	movs	r1, #1
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <hts221_read_byte+0x2c>)
 8001f14:	f7ff fcf6 	bl	8001904 <i2c_master_read>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	781b      	ldrb	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000212 	.word	0x20000212

08001f28 <hts221_readArray>:
{
	i2c_master_read(data, length, reg, LSM6DS0_DEVICE_ADDRESS, 1);
}

void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	70fb      	strb	r3, [r7, #3]
 8001f34:	4613      	mov	r3, r2
 8001f36:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, HTS221_DEVICE_ADDRESS, 1);
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	78b9      	ldrb	r1, [r7, #2]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	23be      	movs	r3, #190	; 0xbe
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fcde 	bl	8001904 <i2c_master_read>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <lps25hb_readArray>:

void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, LPS25HB_DEVICE_ADDRESS, 1);
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	78b9      	ldrb	r1, [r7, #2]
 8001f64:	2301      	movs	r3, #1
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	23bb      	movs	r3, #187	; 0xbb
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fcca 	bl	8001904 <i2c_master_read>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <hts221_write_byte>:
{
	i2c_master_write(value, reg_addr, LSM6DS0_DEVICE_ADDRESS, 0);
}

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460a      	mov	r2, r1
 8001f82:	71fb      	strb	r3, [r7, #7]
 8001f84:	4613      	mov	r3, r2
 8001f86:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, HTS221_DEVICE_ADDRESS, 0);
 8001f88:	79f9      	ldrb	r1, [r7, #7]
 8001f8a:	79b8      	ldrb	r0, [r7, #6]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	22be      	movs	r2, #190	; 0xbe
 8001f90:	f7ff fc74 	bl	800187c <i2c_master_write>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS25HB_DEVICE_ADDRESS, 0);
 8001fac:	79f9      	ldrb	r1, [r7, #7]
 8001fae:	79b8      	ldrb	r0, [r7, #6]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	22bb      	movs	r2, #187	; 0xbb
 8001fb4:	f7ff fc62 	bl	800187c <i2c_master_write>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <__NVIC_SetPriorityGrouping>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <LL_RCC_HSI_Enable+0x1c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <LL_RCC_HSI_Enable+0x1c>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000

08002028 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <LL_RCC_HSI_IsReady+0x20>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b02      	cmp	r3, #2
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40021000 	.word	0x40021000

0800204c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4904      	ldr	r1, [pc, #16]	; (8002074 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000

08002078 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <LL_RCC_SetSysClkSource+0x24>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 0203 	bic.w	r2, r3, #3
 8002088:	4904      	ldr	r1, [pc, #16]	; (800209c <LL_RCC_SetSysClkSource+0x24>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000

080020a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <LL_RCC_GetSysClkSource+0x18>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 030c 	and.w	r3, r3, #12
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000

080020bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020cc:	4904      	ldr	r1, [pc, #16]	; (80020e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40021000 	.word	0x40021000

080020e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f4:	4904      	ldr	r1, [pc, #16]	; (8002108 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40021000 	.word	0x40021000

0800210c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211c:	4904      	ldr	r1, [pc, #16]	; (8002130 <LL_RCC_SetAPB2Prescaler+0x24>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40021000 	.word	0x40021000

08002134 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <LL_RCC_SetI2CClockSource+0x2c>)
 800213e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0e1b      	lsrs	r3, r3, #24
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800214e:	4904      	ldr	r1, [pc, #16]	; (8002160 <LL_RCC_SetI2CClockSource+0x2c>)
 8002150:	4313      	orrs	r3, r2
 8002152:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40021000 	.word	0x40021000

08002164 <LL_APB1_GRP1_EnableClock>:
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <LL_APB1_GRP1_EnableClock+0x2c>)
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	4907      	ldr	r1, [pc, #28]	; (8002190 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <LL_APB1_GRP1_EnableClock+0x2c>)
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4013      	ands	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40021000 	.word	0x40021000

08002194 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40021000 	.word	0x40021000

080021c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <LL_FLASH_SetLatency+0x24>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 0207 	bic.w	r2, r3, #7
 80021d4:	4904      	ldr	r1, [pc, #16]	; (80021e8 <LL_FLASH_SetLatency+0x24>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40022000 	.word	0x40022000

080021ec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <LL_FLASH_GetLatency+0x18>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000

08002208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002210:	2001      	movs	r0, #1
 8002212:	f7ff ffbf 	bl	8002194 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002216:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800221a:	f7ff ffa3 	bl	8002164 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221e:	2003      	movs	r0, #3
 8002220:	f7ff fece 	bl	8001fc0 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002224:	f000 fa12 	bl	800264c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Systick_Init();
 8002228:	f000 fda2 	bl	8002d70 <Systick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222c:	f7ff f870 	bl	8001310 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002230:	f7ff fab4 	bl	800179c <MX_I2C1_Init>
  MX_TIM3_Init();
 8002234:	f000 fdae 	bl	8002d94 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  error = 0;
 8002238:	4ba8      	ldr	r3, [pc, #672]	; (80024dc <main+0x2d4>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
  if(!iks01a1_init()) error = 1;
 800223e:	f7ff fc0b 	bl	8001a58 <iks01a1_init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <main+0x46>
 8002248:	4ba4      	ldr	r3, [pc, #656]	; (80024dc <main+0x2d4>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]


  setSegments();
 800224e:	f7fe fd9b 	bl	8000d88 <setSegments>
  setDigits();
 8002252:	f7fe fde7 	bl	8000e24 <setDigits>
  LL_mDelay(2000);
 8002256:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800225a:	f001 fec1 	bl	8003fe0 <LL_mDelay>
  resetDigits();
 800225e:	f7fe fdc1 	bl	8000de4 <resetDigits>
  resetSegments();
 8002262:	f7fe fd63 	bl	8000d2c <resetSegments>

  mode = 0;
 8002266:	4b9e      	ldr	r3, [pc, #632]	; (80024e0 <main+0x2d8>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(error) { //value from who am I register is no correct
 800226c:	4b9b      	ldr	r3, [pc, #620]	; (80024dc <main+0x2d4>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00e      	beq.n	8002292 <main+0x8a>
		  strcpy(display_text,"I2C_who_am_I_error\0");
 8002274:	4a9b      	ldr	r2, [pc, #620]	; (80024e4 <main+0x2dc>)
 8002276:	4b9c      	ldr	r3, [pc, #624]	; (80024e8 <main+0x2e0>)
 8002278:	4615      	mov	r5, r2
 800227a:	461c      	mov	r4, r3
 800227c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227e:	6028      	str	r0, [r5, #0]
 8002280:	6069      	str	r1, [r5, #4]
 8002282:	60aa      	str	r2, [r5, #8]
 8002284:	60eb      	str	r3, [r5, #12]
 8002286:	8823      	ldrh	r3, [r4, #0]
 8002288:	78a2      	ldrb	r2, [r4, #2]
 800228a:	822b      	strh	r3, [r5, #16]
 800228c:	4613      	mov	r3, r2
 800228e:	74ab      	strb	r3, [r5, #18]
 8002290:	e17a      	b.n	8002588 <main+0x380>
	  } else{
		  hts221_start_measurement();
 8002292:	f7ff fc21 	bl	8001ad8 <hts221_start_measurement>
		  lps25hb_start_measurement();
 8002296:	f7ff fc34 	bl	8001b02 <lps25hb_start_measurement>
		  hts221_get_humidity(&humidity);
 800229a:	4894      	ldr	r0, [pc, #592]	; (80024ec <main+0x2e4>)
 800229c:	f7ff fc46 	bl	8001b2c <hts221_get_humidity>
		  hts221_get_temperature(&temperature);
 80022a0:	4893      	ldr	r0, [pc, #588]	; (80024f0 <main+0x2e8>)
 80022a2:	f7ff fcbd 	bl	8001c20 <hts221_get_temperature>
		  lps25hb_get_pressure(&pressure);
 80022a6:	4893      	ldr	r0, [pc, #588]	; (80024f4 <main+0x2ec>)
 80022a8:	f7ff fd62 	bl	8001d70 <lps25hb_get_pressure>
		  lps25hb_start_measurement();
 80022ac:	f7ff fc29 	bl	8001b02 <lps25hb_start_measurement>
		  lps25hb_get_altitude(&altitude);
 80022b0:	4891      	ldr	r0, [pc, #580]	; (80024f8 <main+0x2f0>)
 80022b2:	f7ff fd9d 	bl	8001df0 <lps25hb_get_altitude>

		  if (mode == 0 && act_index == 0) { //data to display
 80022b6:	4b8a      	ldr	r3, [pc, #552]	; (80024e0 <main+0x2d8>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d151      	bne.n	8002362 <main+0x15a>
 80022be:	4b8f      	ldr	r3, [pc, #572]	; (80024fc <main+0x2f4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d14d      	bne.n	8002362 <main+0x15a>
			  if(temperature>=100){
 80022c6:	4b8a      	ldr	r3, [pc, #552]	; (80024f0 <main+0x2e8>)
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002500 <main+0x2f8>
 80022d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	db02      	blt.n	80022e0 <main+0xd8>
				temperature=99.9;
 80022da:	4b85      	ldr	r3, [pc, #532]	; (80024f0 <main+0x2e8>)
 80022dc:	4a89      	ldr	r2, [pc, #548]	; (8002504 <main+0x2fc>)
 80022de:	601a      	str	r2, [r3, #0]
			  }
			  if(temperature<=-100){
 80022e0:	4b83      	ldr	r3, [pc, #524]	; (80024f0 <main+0x2e8>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8002508 <main+0x300>
 80022ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f2:	d802      	bhi.n	80022fa <main+0xf2>
				temperature=-99.9;
 80022f4:	4b7e      	ldr	r3, [pc, #504]	; (80024f0 <main+0x2e8>)
 80022f6:	4a85      	ldr	r2, [pc, #532]	; (800250c <main+0x304>)
 80022f8:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "TEMP_%2.1f", temperature);
 80022fa:	4b7d      	ldr	r3, [pc, #500]	; (80024f0 <main+0x2e8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f922 	bl	8000548 <__aeabi_f2d>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4981      	ldr	r1, [pc, #516]	; (8002510 <main+0x308>)
 800230a:	4876      	ldr	r0, [pc, #472]	; (80024e4 <main+0x2dc>)
 800230c:	f002 fd50 	bl	8004db0 <siprintf>

		      for(int i=0; i<strlen(display_text); i++){
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	e016      	b.n	8002344 <main+0x13c>
		          if(display_text[i]=='.'){
 8002316:	4a73      	ldr	r2, [pc, #460]	; (80024e4 <main+0x2dc>)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b2e      	cmp	r3, #46	; 0x2e
 8002320:	d10d      	bne.n	800233e <main+0x136>
		              display_text[i] = display_text[i+1];
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3301      	adds	r3, #1
 8002326:	4a6f      	ldr	r2, [pc, #444]	; (80024e4 <main+0x2dc>)
 8002328:	5cd1      	ldrb	r1, [r2, r3]
 800232a:	4a6e      	ldr	r2, [pc, #440]	; (80024e4 <main+0x2dc>)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	460a      	mov	r2, r1
 8002332:	701a      	strb	r2, [r3, #0]
		              display_text[i+1] = '\0';
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3301      	adds	r3, #1
 8002338:	4a6a      	ldr	r2, [pc, #424]	; (80024e4 <main+0x2dc>)
 800233a:	2100      	movs	r1, #0
 800233c:	54d1      	strb	r1, [r2, r3]
		      for(int i=0; i<strlen(display_text); i++){
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3301      	adds	r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	4867      	ldr	r0, [pc, #412]	; (80024e4 <main+0x2dc>)
 8002346:	f7fd ff43 	bl	80001d0 <strlen>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	429a      	cmp	r2, r3
 8002350:	d8e1      	bhi.n	8002316 <main+0x10e>
		          }
		      }
		      index_for_dot=strlen(display_text)-1;
 8002352:	4864      	ldr	r0, [pc, #400]	; (80024e4 <main+0x2dc>)
 8002354:	f7fd ff3c 	bl	80001d0 <strlen>
 8002358:	4603      	mov	r3, r0
 800235a:	3b01      	subs	r3, #1
 800235c:	461a      	mov	r2, r3
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <main+0x30c>)
 8002360:	601a      	str	r2, [r3, #0]
		   }

		   if (mode == 1 && act_index == 0){
 8002362:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <main+0x2d8>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d12a      	bne.n	80023c0 <main+0x1b8>
 800236a:	4b64      	ldr	r3, [pc, #400]	; (80024fc <main+0x2f4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d126      	bne.n	80023c0 <main+0x1b8>
			  if(humidity>=100){
 8002372:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <main+0x2e4>)
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002500 <main+0x2f8>
 800237c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002384:	db02      	blt.n	800238c <main+0x184>
				humidity=99;
 8002386:	4b59      	ldr	r3, [pc, #356]	; (80024ec <main+0x2e4>)
 8002388:	4a63      	ldr	r2, [pc, #396]	; (8002518 <main+0x310>)
 800238a:	601a      	str	r2, [r3, #0]
			  }
			  if(humidity<0){
 800238c:	4b57      	ldr	r3, [pc, #348]	; (80024ec <main+0x2e4>)
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239a:	d503      	bpl.n	80023a4 <main+0x19c>
				humidity = 0;
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <main+0x2e4>)
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "HUM_%2.0f", humidity);
 80023a4:	4b51      	ldr	r3, [pc, #324]	; (80024ec <main+0x2e4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8cd 	bl	8000548 <__aeabi_f2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	495a      	ldr	r1, [pc, #360]	; (800251c <main+0x314>)
 80023b4:	484b      	ldr	r0, [pc, #300]	; (80024e4 <main+0x2dc>)
 80023b6:	f002 fcfb 	bl	8004db0 <siprintf>
			  index_for_dot=100;
 80023ba:	4b56      	ldr	r3, [pc, #344]	; (8002514 <main+0x30c>)
 80023bc:	2264      	movs	r2, #100	; 0x64
 80023be:	601a      	str	r2, [r3, #0]
		   }


		   if (mode == 2 && act_index == 0){
 80023c0:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <main+0x2d8>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d158      	bne.n	800247a <main+0x272>
 80023c8:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <main+0x2f4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d154      	bne.n	800247a <main+0x272>
			  if(pressure>=10000){
 80023d0:	4b48      	ldr	r3, [pc, #288]	; (80024f4 <main+0x2ec>)
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002520 <main+0x318>
 80023da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e2:	db02      	blt.n	80023ea <main+0x1e2>
				pressure=9999.99;
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <main+0x2ec>)
 80023e6:	4a4f      	ldr	r2, [pc, #316]	; (8002524 <main+0x31c>)
 80023e8:	601a      	str	r2, [r3, #0]
			  }
			  if(pressure<0){
 80023ea:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <main+0x2ec>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f8:	d503      	bpl.n	8002402 <main+0x1fa>
				pressure = 0;
 80023fa:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <main+0x2ec>)
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "BAR_%4.2f", pressure);
 8002402:	4b3c      	ldr	r3, [pc, #240]	; (80024f4 <main+0x2ec>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f89e 	bl	8000548 <__aeabi_f2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4945      	ldr	r1, [pc, #276]	; (8002528 <main+0x320>)
 8002412:	4834      	ldr	r0, [pc, #208]	; (80024e4 <main+0x2dc>)
 8002414:	f002 fccc 	bl	8004db0 <siprintf>

		      for(int i=0; i<strlen(display_text); i++){
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	e01e      	b.n	800245c <main+0x254>
		          if(display_text[i]=='.'){
 800241e:	4a31      	ldr	r2, [pc, #196]	; (80024e4 <main+0x2dc>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b2e      	cmp	r3, #46	; 0x2e
 8002428:	d115      	bne.n	8002456 <main+0x24e>
		              display_text[i] = display_text[i+1];
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3301      	adds	r3, #1
 800242e:	4a2d      	ldr	r2, [pc, #180]	; (80024e4 <main+0x2dc>)
 8002430:	5cd1      	ldrb	r1, [r2, r3]
 8002432:	4a2c      	ldr	r2, [pc, #176]	; (80024e4 <main+0x2dc>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4413      	add	r3, r2
 8002438:	460a      	mov	r2, r1
 800243a:	701a      	strb	r2, [r3, #0]
		              display_text[i+1] = display_text[i+2];
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	1c9a      	adds	r2, r3, #2
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3301      	adds	r3, #1
 8002444:	4927      	ldr	r1, [pc, #156]	; (80024e4 <main+0x2dc>)
 8002446:	5c89      	ldrb	r1, [r1, r2]
 8002448:	4a26      	ldr	r2, [pc, #152]	; (80024e4 <main+0x2dc>)
 800244a:	54d1      	strb	r1, [r2, r3]
		              display_text[i+2] = '\0';
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	3302      	adds	r3, #2
 8002450:	4a24      	ldr	r2, [pc, #144]	; (80024e4 <main+0x2dc>)
 8002452:	2100      	movs	r1, #0
 8002454:	54d1      	strb	r1, [r2, r3]
		      for(int i=0; i<strlen(display_text); i++){
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3301      	adds	r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	4821      	ldr	r0, [pc, #132]	; (80024e4 <main+0x2dc>)
 800245e:	f7fd feb7 	bl	80001d0 <strlen>
 8002462:	4602      	mov	r2, r0
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	429a      	cmp	r2, r3
 8002468:	d8d9      	bhi.n	800241e <main+0x216>
		          }
		      }
		      index_for_dot=strlen(display_text)-2;
 800246a:	481e      	ldr	r0, [pc, #120]	; (80024e4 <main+0x2dc>)
 800246c:	f7fd feb0 	bl	80001d0 <strlen>
 8002470:	4603      	mov	r3, r0
 8002472:	3b02      	subs	r3, #2
 8002474:	461a      	mov	r2, r3
 8002476:	4b27      	ldr	r3, [pc, #156]	; (8002514 <main+0x30c>)
 8002478:	601a      	str	r2, [r3, #0]
		   }

		   if(mode == 3 && act_index == 0){
 800247a:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <main+0x2d8>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b03      	cmp	r3, #3
 8002480:	f040 8082 	bne.w	8002588 <main+0x380>
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <main+0x2f4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d17d      	bne.n	8002588 <main+0x380>
			  if(altitude>=10000){
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <main+0x2f0>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002520 <main+0x318>
 8002496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249e:	db02      	blt.n	80024a6 <main+0x29e>
				altitude = 9999.9;
 80024a0:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <main+0x2f0>)
 80024a2:	4a22      	ldr	r2, [pc, #136]	; (800252c <main+0x324>)
 80024a4:	601a      	str	r2, [r3, #0]
			  }
			  if(altitude<=-10000){
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <main+0x2f0>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002530 <main+0x328>
 80024b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	d802      	bhi.n	80024c0 <main+0x2b8>
				altitude = -9999.9;
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <main+0x2f0>)
 80024bc:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <main+0x32c>)
 80024be:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "ALT_%4.1f", altitude);
 80024c0:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <main+0x2f0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f83f 	bl	8000548 <__aeabi_f2d>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	491a      	ldr	r1, [pc, #104]	; (8002538 <main+0x330>)
 80024d0:	4804      	ldr	r0, [pc, #16]	; (80024e4 <main+0x2dc>)
 80024d2:	f002 fc6d 	bl	8004db0 <siprintf>

		      for(int i=0; i<strlen(display_text); i++){
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	e046      	b.n	800256a <main+0x362>
 80024dc:	2000024c 	.word	0x2000024c
 80024e0:	20000244 	.word	0x20000244
 80024e4:	20000258 	.word	0x20000258
 80024e8:	08009868 	.word	0x08009868
 80024ec:	20000240 	.word	0x20000240
 80024f0:	20000238 	.word	0x20000238
 80024f4:	2000023c 	.word	0x2000023c
 80024f8:	20000248 	.word	0x20000248
 80024fc:	20000214 	.word	0x20000214
 8002500:	42c80000 	.word	0x42c80000
 8002504:	42c7cccd 	.word	0x42c7cccd
 8002508:	c2c80000 	.word	0xc2c80000
 800250c:	c2c7cccd 	.word	0xc2c7cccd
 8002510:	0800987c 	.word	0x0800987c
 8002514:	20000218 	.word	0x20000218
 8002518:	42c60000 	.word	0x42c60000
 800251c:	08009888 	.word	0x08009888
 8002520:	461c4000 	.word	0x461c4000
 8002524:	461c3ff6 	.word	0x461c3ff6
 8002528:	08009894 	.word	0x08009894
 800252c:	461c3f9a 	.word	0x461c3f9a
 8002530:	c61c4000 	.word	0xc61c4000
 8002534:	c61c3f9a 	.word	0xc61c3f9a
 8002538:	080098a0 	.word	0x080098a0
		          if(display_text[i]=='.'){
 800253c:	4a3d      	ldr	r2, [pc, #244]	; (8002634 <main+0x42c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b2e      	cmp	r3, #46	; 0x2e
 8002546:	d10d      	bne.n	8002564 <main+0x35c>
		              display_text[i] = display_text[i+1];
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3301      	adds	r3, #1
 800254c:	4a39      	ldr	r2, [pc, #228]	; (8002634 <main+0x42c>)
 800254e:	5cd1      	ldrb	r1, [r2, r3]
 8002550:	4a38      	ldr	r2, [pc, #224]	; (8002634 <main+0x42c>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	460a      	mov	r2, r1
 8002558:	701a      	strb	r2, [r3, #0]
		              display_text[i+1] = '\0';
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3301      	adds	r3, #1
 800255e:	4a35      	ldr	r2, [pc, #212]	; (8002634 <main+0x42c>)
 8002560:	2100      	movs	r1, #0
 8002562:	54d1      	strb	r1, [r2, r3]
		      for(int i=0; i<strlen(display_text); i++){
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3301      	adds	r3, #1
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	4832      	ldr	r0, [pc, #200]	; (8002634 <main+0x42c>)
 800256c:	f7fd fe30 	bl	80001d0 <strlen>
 8002570:	4602      	mov	r2, r0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	d8e1      	bhi.n	800253c <main+0x334>
		          }
		      }
		      index_for_dot=strlen(display_text)-1;
 8002578:	482e      	ldr	r0, [pc, #184]	; (8002634 <main+0x42c>)
 800257a:	f7fd fe29 	bl	80001d0 <strlen>
 800257e:	4603      	mov	r3, r0
 8002580:	3b01      	subs	r3, #1
 8002582:	461a      	mov	r2, r3
 8002584:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <main+0x430>)
 8002586:	601a      	str	r2, [r3, #0]
		   }
	  }

	  if(disp_time > (saved_time + 500)) //moving characters on display
 8002588:	4b2c      	ldr	r3, [pc, #176]	; (800263c <main+0x434>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f512 78fa 	adds.w	r8, r2, #500	; 0x1f4
 8002592:	f143 0900 	adc.w	r9, r3, #0
 8002596:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <main+0x438>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	4599      	cmp	r9, r3
 800259e:	bf08      	it	eq
 80025a0:	4590      	cmpeq	r8, r2
 80025a2:	f4bf ae63 	bcs.w	800226c <main+0x64>
	  	  {

	  		  display_sign(display_text[act_index],display_text[act_index+1],display_text[act_index+2],display_text[act_index+3],index_for_dot,act_index);
 80025a6:	4b27      	ldr	r3, [pc, #156]	; (8002644 <main+0x43c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <main+0x42c>)
 80025ac:	5cd0      	ldrb	r0, [r2, r3]
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <main+0x43c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <main+0x42c>)
 80025b6:	5cd1      	ldrb	r1, [r2, r3]
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <main+0x43c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3302      	adds	r3, #2
 80025be:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <main+0x42c>)
 80025c0:	5cd4      	ldrb	r4, [r2, r3]
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <main+0x43c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3303      	adds	r3, #3
 80025c8:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <main+0x42c>)
 80025ca:	5cd5      	ldrb	r5, [r2, r3]
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <main+0x430>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <main+0x43c>)
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	9201      	str	r2, [sp, #4]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	462b      	mov	r3, r5
 80025da:	4622      	mov	r2, r4
 80025dc:	f7fe fce6 	bl	8000fac <display_sign>
	  	  	  saved_time = disp_time;
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <main+0x438>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	4915      	ldr	r1, [pc, #84]	; (800263c <main+0x434>)
 80025e8:	e9c1 2300 	strd	r2, r3, [r1]

	  	  	  if(right){ //urcovanie smeru
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <main+0x440>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <main+0x3f8>
	  	  		  act_index++;
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <main+0x43c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <main+0x43c>)
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e004      	b.n	800260a <main+0x402>
	  	  	  } else {
	  	  		  act_index--;
 8002600:	4b10      	ldr	r3, [pc, #64]	; (8002644 <main+0x43c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3b01      	subs	r3, #1
 8002606:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <main+0x43c>)
 8002608:	6013      	str	r3, [r2, #0]
	  	  	  }
	  	  	  if(act_index == strlen(display_text)-4) {
 800260a:	480a      	ldr	r0, [pc, #40]	; (8002634 <main+0x42c>)
 800260c:	f7fd fde0 	bl	80001d0 <strlen>
 8002610:	4603      	mov	r3, r0
 8002612:	3b04      	subs	r3, #4
 8002614:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <main+0x43c>)
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	4293      	cmp	r3, r2
 800261a:	d102      	bne.n	8002622 <main+0x41a>
	  	  		  right = 0;
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <main+0x440>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
	  	  	  }
	  	  	  if (act_index == 0){
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <main+0x43c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f47f ae20 	bne.w	800226c <main+0x64>
	  	  		  right = 1;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <main+0x440>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]
	  if(error) { //value from who am I register is no correct
 8002632:	e61b      	b.n	800226c <main+0x64>
 8002634:	20000258 	.word	0x20000258
 8002638:	20000218 	.word	0x20000218
 800263c:	20000250 	.word	0x20000250
 8002640:	20000200 	.word	0x20000200
 8002644:	20000214 	.word	0x20000214
 8002648:	20000000 	.word	0x20000000

0800264c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002650:	2000      	movs	r0, #0
 8002652:	f7ff fdb7 	bl	80021c4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002656:	bf00      	nop
 8002658:	f7ff fdc8 	bl	80021ec <LL_FLASH_GetLatency>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1fa      	bne.n	8002658 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8002662:	f7ff fcd1 	bl	8002008 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002666:	bf00      	nop
 8002668:	f7ff fcde 	bl	8002028 <LL_RCC_HSI_IsReady>
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d1fa      	bne.n	8002668 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002672:	2010      	movs	r0, #16
 8002674:	f7ff fcea 	bl	800204c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002678:	2000      	movs	r0, #0
 800267a:	f7ff fd1f 	bl	80020bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800267e:	2000      	movs	r0, #0
 8002680:	f7ff fd30 	bl	80020e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002684:	2000      	movs	r0, #0
 8002686:	f7ff fd41 	bl	800210c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800268a:	2000      	movs	r0, #0
 800268c:	f7ff fcf4 	bl	8002078 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002690:	bf00      	nop
 8002692:	f7ff fd05 	bl	80020a0 <LL_RCC_GetSysClkSource>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1fa      	bne.n	8002692 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800269c:	4805      	ldr	r0, [pc, #20]	; (80026b4 <SystemClock_Config+0x68>)
 800269e:	f001 fc91 	bl	8003fc4 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80026a2:	4804      	ldr	r0, [pc, #16]	; (80026b4 <SystemClock_Config+0x68>)
 80026a4:	f001 fcc2 	bl	800402c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80026a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80026ac:	f7ff fd42 	bl	8002134 <LL_RCC_SetI2CClockSource>
}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	007a1200 	.word	0x007a1200

080026b8 <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint16_t samples_window, uint16_t samples_required)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	4608      	mov	r0, r1
 80026c2:	4611      	mov	r1, r2
 80026c4:	461a      	mov	r2, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	70fb      	strb	r3, [r7, #3]
 80026ca:	460b      	mov	r3, r1
 80026cc:	70bb      	strb	r3, [r7, #2]
 80026ce:	4613      	mov	r3, r2
 80026d0:	803b      	strh	r3, [r7, #0]
	//type your code for "checkButtonState" implementation here:
	uint16_t detection = 0, timeout = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	81fb      	strh	r3, [r7, #14]
 80026d6:	2300      	movs	r3, #0
 80026d8:	81bb      	strh	r3, [r7, #12]
	while(timeout <= samples_window){ // cyklus bezi pokial nedocita potrebny pocet vzoriek a ak nahodou nastane detekcia funkcia sa ukonci a vrati 1
 80026da:	e020      	b.n	800271e <checkButtonState+0x66>
		uint8_t actual_value = BUTTON_READ_VALUE;
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <checkButtonState+0x90>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	72fb      	strb	r3, [r7, #11]
		if((actual_value && edge) || (!(actual_value) && !(edge))) {
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <checkButtonState+0x3c>
 80026ee:	78bb      	ldrb	r3, [r7, #2]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <checkButtonState+0x48>
 80026f4:	7afb      	ldrb	r3, [r7, #11]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <checkButtonState+0x50>
 80026fa:	78bb      	ldrb	r3, [r7, #2]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <checkButtonState+0x50>
			detection++;
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	3301      	adds	r3, #1
 8002704:	81fb      	strh	r3, [r7, #14]
 8002706:	e001      	b.n	800270c <checkButtonState+0x54>
		}
		else{
			detection = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	81fb      	strh	r3, [r7, #14]
		}

		timeout++;
 800270c:	89bb      	ldrh	r3, [r7, #12]
 800270e:	3301      	adds	r3, #1
 8002710:	81bb      	strh	r3, [r7, #12]

		if(detection == samples_required){
 8002712:	89fa      	ldrh	r2, [r7, #14]
 8002714:	8b3b      	ldrh	r3, [r7, #24]
 8002716:	429a      	cmp	r2, r3
 8002718:	d101      	bne.n	800271e <checkButtonState+0x66>
			return 1;
 800271a:	2301      	movs	r3, #1
 800271c:	e00e      	b.n	800273c <checkButtonState+0x84>
	while(timeout <= samples_window){ // cyklus bezi pokial nedocita potrebny pocet vzoriek a ak nahodou nastane detekcia funkcia sa ukonci a vrati 1
 800271e:	89ba      	ldrh	r2, [r7, #12]
 8002720:	883b      	ldrh	r3, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d9da      	bls.n	80026dc <checkButtonState+0x24>
		}
	}
	if (((timeout > samples_window) && (detection != samples_required))){ //ak cyklus dobehol a nenapocitali sme dostatocny pocet vzoriek iducich po sebe vrati 0
 8002726:	89ba      	ldrh	r2, [r7, #12]
 8002728:	883b      	ldrh	r3, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d905      	bls.n	800273a <checkButtonState+0x82>
 800272e:	89fa      	ldrh	r2, [r7, #14]
 8002730:	8b3b      	ldrh	r3, [r7, #24]
 8002732:	429a      	cmp	r2, r3
 8002734:	d001      	beq.n	800273a <checkButtonState+0x82>
		return 0;
 8002736:	2300      	movs	r3, #0
 8002738:	e000      	b.n	800273c <checkButtonState+0x84>
	}
	return 0;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	48000400 	.word	0x48000400

0800274c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4013      	ands	r3, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40010400 	.word	0x40010400

08002778 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6153      	str	r3, [r2, #20]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40010400 	.word	0x40010400

08002798 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f06f 0201 	mvn.w	r2, #1
 80027a6:	611a      	str	r2, [r3, #16]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027de:	e7fe      	b.n	80027de <NMI_Handler+0x4>

080027e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <HardFault_Handler+0x4>

080027e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <MemManage_Handler+0x4>

080027ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <BusFault_Handler+0x4>

080027f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <UsageFault_Handler+0x4>

080027f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */
	disp_time++;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <SysTick_Handler+0x20>)
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	1c50      	adds	r0, r2, #1
 8002830:	f143 0100 	adc.w	r1, r3, #0
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <SysTick_Handler+0x20>)
 8002836:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	20000200 	.word	0x20000200

08002848 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET) {
 800284e:	2008      	movs	r0, #8
 8002850:	f7ff ff7c 	bl	800274c <LL_EXTI_IsActiveFlag_0_31>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d022      	beq.n	80028a0 <EXTI3_IRQHandler+0x58>
		  if(checkButtonState(GPIOB,
 800285a:	f44f 6316 	mov.w	r3, #2400	; 0x960
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002864:	2200      	movs	r2, #0
 8002866:	2103      	movs	r1, #3
 8002868:	480f      	ldr	r0, [pc, #60]	; (80028a8 <EXTI3_IRQHandler+0x60>)
 800286a:	f7ff ff25 	bl	80026b8 <checkButtonState>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d012      	beq.n	800289a <EXTI3_IRQHandler+0x52>
							3,
							0,
							2500,
							2400)) {
			  mode++;
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <EXTI3_IRQHandler+0x64>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <EXTI3_IRQHandler+0x64>)
 800287e:	701a      	strb	r2, [r3, #0]
			  if(mode >= 4) mode = 0;
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <EXTI3_IRQHandler+0x64>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d902      	bls.n	800288e <EXTI3_IRQHandler+0x46>
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <EXTI3_IRQHandler+0x64>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
			  act_index=0, right=1;
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <EXTI3_IRQHandler+0x68>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <EXTI3_IRQHandler+0x6c>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]

		  }
		  LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 800289a:	2008      	movs	r0, #8
 800289c:	f7ff ff6c 	bl	8002778 <LL_EXTI_ClearFlag_0_31>
	  }
  /* USER CODE END EXTI3_IRQn 0 */
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	48000400 	.word	0x48000400
 80028ac:	20000244 	.word	0x20000244
 80028b0:	20000214 	.word	0x20000214
 80028b4:	20000000 	.word	0x20000000

080028b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 80028bc:	4806      	ldr	r0, [pc, #24]	; (80028d8 <TIM3_IRQHandler+0x20>)
 80028be:	f7ff ff79 	bl	80027b4 <LL_TIM_IsActiveFlag_UPDATE>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <TIM3_IRQHandler+0x14>
		{
			updateDisplay();
 80028c8:	f7fe fb98 	bl	8000ffc <updateDisplay>
		}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <TIM3_IRQHandler+0x20>)
 80028ce:	f7ff ff63 	bl	8002798 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40000400 	.word	0x40000400

080028dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C1_EV_IRQHandler_fun();
 80028e0:	f7ff f88a 	bl	80019f8 <I2C1_EV_IRQHandler_fun>
  /* USER CODE END I2C1_EV_IRQn 0 */
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
	return 1;
 80028ec:	2301      	movs	r3, #1
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_kill>:

int _kill(int pid, int sig)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002902:	f001 fba3 	bl	800404c <__errno>
 8002906:	4603      	mov	r3, r0
 8002908:	2216      	movs	r2, #22
 800290a:	601a      	str	r2, [r3, #0]
	return -1;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_exit>:

void _exit (int status)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002920:	f04f 31ff 	mov.w	r1, #4294967295
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ffe7 	bl	80028f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800292a:	e7fe      	b.n	800292a <_exit+0x12>

0800292c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	e00a      	b.n	8002954 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800293e:	f3af 8000 	nop.w
 8002942:	4601      	mov	r1, r0
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	60ba      	str	r2, [r7, #8]
 800294a:	b2ca      	uxtb	r2, r1
 800294c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3301      	adds	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	dbf0      	blt.n	800293e <_read+0x12>
	}

return len;
 800295c:	687b      	ldr	r3, [r7, #4]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	e009      	b.n	800298c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	60ba      	str	r2, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	dbf1      	blt.n	8002978 <_write+0x12>
	}
	return len;
 8002994:	687b      	ldr	r3, [r7, #4]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_close>:

int _close(int file)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
	return -1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c6:	605a      	str	r2, [r3, #4]
	return 0;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <_isatty>:

int _isatty(int file)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
	return 1;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
	return 0;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <_sbrk+0x5c>)
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <_sbrk+0x60>)
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <_sbrk+0x64>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <_sbrk+0x64>)
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <_sbrk+0x68>)
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d207      	bcs.n	8002a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a38:	f001 fb08 	bl	800404c <__errno>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	220c      	movs	r2, #12
 8002a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	e009      	b.n	8002a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <_sbrk+0x64>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <_sbrk+0x64>)
 8002a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20003000 	.word	0x20003000
 8002a68:	00000400 	.word	0x00000400
 8002a6c:	2000021c 	.word	0x2000021c
 8002a70:	200002d0 	.word	0x200002d0

08002a74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <SystemInit+0x20>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <SystemInit+0x20>)
 8002a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_GetPriorityGrouping>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 0307 	and.w	r3, r3, #7
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_EnableIRQ>:
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db0b      	blt.n	8002ade <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	4907      	ldr	r1, [pc, #28]	; (8002aec <__NVIC_EnableIRQ+0x38>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e100 	.word	0xe000e100

08002af0 <__NVIC_SetPriority>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	db0a      	blt.n	8002b1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	490c      	ldr	r1, [pc, #48]	; (8002b3c <__NVIC_SetPriority+0x4c>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	0112      	lsls	r2, r2, #4
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	440b      	add	r3, r1
 8002b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b18:	e00a      	b.n	8002b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4908      	ldr	r1, [pc, #32]	; (8002b40 <__NVIC_SetPriority+0x50>)
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	3b04      	subs	r3, #4
 8002b28:	0112      	lsls	r2, r2, #4
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	761a      	strb	r2, [r3, #24]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000e100 	.word	0xe000e100
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <NVIC_EncodePriority>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f1c3 0307 	rsb	r3, r3, #7
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	bf28      	it	cs
 8002b62:	2304      	movcs	r3, #4
 8002b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d902      	bls.n	8002b74 <NVIC_EncodePriority+0x30>
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3b03      	subs	r3, #3
 8002b72:	e000      	b.n	8002b76 <NVIC_EncodePriority+0x32>
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	401a      	ands	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	4313      	orrs	r3, r2
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3724      	adds	r7, #36	; 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <LL_APB1_GRP1_EnableClock>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	4907      	ldr	r1, [pc, #28]	; (8002bd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bca:	68fb      	ldr	r3, [r7, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40021000 	.word	0x40021000

08002bdc <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <LL_SYSTICK_EnableIT+0x1c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <LL_SYSTICK_EnableIT+0x1c>)
 8002be6:	f043 0302 	orr.w	r3, r3, #2
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000e010 	.word	0xe000e010

08002bfc <LL_TIM_EnableCounter>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_TIM_EnableARRPreload>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_TIM_OC_DisableFast>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d028      	beq.n	8002c9e <LL_TIM_OC_DisableFast+0x62>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d023      	beq.n	8002c9a <LL_TIM_OC_DisableFast+0x5e>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d01e      	beq.n	8002c96 <LL_TIM_OC_DisableFast+0x5a>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d019      	beq.n	8002c92 <LL_TIM_OC_DisableFast+0x56>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c64:	d013      	beq.n	8002c8e <LL_TIM_OC_DisableFast+0x52>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	d00d      	beq.n	8002c8a <LL_TIM_OC_DisableFast+0x4e>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c74:	d007      	beq.n	8002c86 <LL_TIM_OC_DisableFast+0x4a>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d101      	bne.n	8002c82 <LL_TIM_OC_DisableFast+0x46>
 8002c7e:	2307      	movs	r3, #7
 8002c80:	e00e      	b.n	8002ca0 <LL_TIM_OC_DisableFast+0x64>
 8002c82:	2308      	movs	r3, #8
 8002c84:	e00c      	b.n	8002ca0 <LL_TIM_OC_DisableFast+0x64>
 8002c86:	2306      	movs	r3, #6
 8002c88:	e00a      	b.n	8002ca0 <LL_TIM_OC_DisableFast+0x64>
 8002c8a:	2305      	movs	r3, #5
 8002c8c:	e008      	b.n	8002ca0 <LL_TIM_OC_DisableFast+0x64>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	e006      	b.n	8002ca0 <LL_TIM_OC_DisableFast+0x64>
 8002c92:	2303      	movs	r3, #3
 8002c94:	e004      	b.n	8002ca0 <LL_TIM_OC_DisableFast+0x64>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e002      	b.n	8002ca0 <LL_TIM_OC_DisableFast+0x64>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <LL_TIM_OC_DisableFast+0x64>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3318      	adds	r3, #24
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <LL_TIM_OC_DisableFast+0x9c>)
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	440b      	add	r3, r1
 8002cb0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	4908      	ldr	r1, [pc, #32]	; (8002cdc <LL_TIM_OC_DisableFast+0xa0>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	408b      	lsls	r3, r1
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	080098f8 	.word	0x080098f8
 8002cdc:	08009904 	.word	0x08009904

08002ce0 <LL_TIM_SetClockSource>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002cf2:	f023 0307 	bic.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_TIM_SetTriggerOutput>:
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	605a      	str	r2, [r3, #4]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_TIM_DisableMasterSlaveMode>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	60da      	str	r2, [r3, #12]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <Systick_Init>:

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void Systick_Init(void){
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <Systick_Init+0x20>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0; /* Load the SysTick Counter Value */
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <Systick_Init+0x20>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (SysTick_CTRL_TICKINT_Msk   |  /* Enable SysTick exception */
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <Systick_Init+0x20>)
 8002d82:	2207      	movs	r2, #7
 8002d84:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_ENABLE_Msk) |    /* Enable SysTick system timer */
					 SysTick_CTRL_CLKSOURCE_Msk;   /* Use processor clock source */
	LL_SYSTICK_EnableIT();
 8002d86:	f7ff ff29 	bl	8002bdc <LL_SYSTICK_EnableIT>
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	e000e010 	.word	0xe000e010

08002d94 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08e      	sub	sp, #56	; 0x38
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	2220      	movs	r2, #32
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 f975 	bl	80040a0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002db6:	2002      	movs	r0, #2
 8002db8:	f7ff fef8 	bl	8002bac <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002dbc:	f7ff fe6c 	bl	8002a98 <__NVIC_GetPriorityGrouping>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	210f      	movs	r1, #15
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff febc 	bl	8002b44 <NVIC_EncodePriority>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	201d      	movs	r0, #29
 8002dd2:	f7ff fe8d 	bl	8002af0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002dd6:	201d      	movs	r0, #29
 8002dd8:	f7ff fe6c 	bl	8002ab4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8002ddc:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002de0:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002de2:	2300      	movs	r3, #0
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;
 8002de6:	2313      	movs	r3, #19
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002dea:	2300      	movs	r3, #0
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df2:	4619      	mov	r1, r3
 8002df4:	4817      	ldr	r0, [pc, #92]	; (8002e54 <MX_TIM3_Init+0xc0>)
 8002df6:	f000 fd61 	bl	80038bc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002dfa:	4816      	ldr	r0, [pc, #88]	; (8002e54 <MX_TIM3_Init+0xc0>)
 8002dfc:	f7ff ff0e 	bl	8002c1c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002e00:	2100      	movs	r1, #0
 8002e02:	4814      	ldr	r0, [pc, #80]	; (8002e54 <MX_TIM3_Init+0xc0>)
 8002e04:	f7ff ff6c 	bl	8002ce0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002e08:	2310      	movs	r3, #16
 8002e0a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002e1c:	1d3b      	adds	r3, r7, #4
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2101      	movs	r1, #1
 8002e22:	480c      	ldr	r0, [pc, #48]	; (8002e54 <MX_TIM3_Init+0xc0>)
 8002e24:	f000 fdbc 	bl	80039a0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002e28:	2101      	movs	r1, #1
 8002e2a:	480a      	ldr	r0, [pc, #40]	; (8002e54 <MX_TIM3_Init+0xc0>)
 8002e2c:	f7ff ff06 	bl	8002c3c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002e30:	2100      	movs	r1, #0
 8002e32:	4808      	ldr	r0, [pc, #32]	; (8002e54 <MX_TIM3_Init+0xc0>)
 8002e34:	f7ff ff69 	bl	8002d0a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002e38:	4806      	ldr	r0, [pc, #24]	; (8002e54 <MX_TIM3_Init+0xc0>)
 8002e3a:	f7ff ff79 	bl	8002d30 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM3);
 8002e3e:	4805      	ldr	r0, [pc, #20]	; (8002e54 <MX_TIM3_Init+0xc0>)
 8002e40:	f7ff ff86 	bl	8002d50 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002e44:	4803      	ldr	r0, [pc, #12]	; (8002e54 <MX_TIM3_Init+0xc0>)
 8002e46:	f7ff fed9 	bl	8002bfc <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 8002e4a:	bf00      	nop
 8002e4c:	3738      	adds	r7, #56	; 0x38
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40000400 	.word	0x40000400

08002e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e5c:	480d      	ldr	r0, [pc, #52]	; (8002e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e5e:	490e      	ldr	r1, [pc, #56]	; (8002e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e60:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <LoopForever+0xe>)
  movs r3, #0
 8002e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e64:	e002      	b.n	8002e6c <LoopCopyDataInit>

08002e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6a:	3304      	adds	r3, #4

08002e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e70:	d3f9      	bcc.n	8002e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e72:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e74:	4c0b      	ldr	r4, [pc, #44]	; (8002ea4 <LoopForever+0x16>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e78:	e001      	b.n	8002e7e <LoopFillZerobss>

08002e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e7c:	3204      	adds	r2, #4

08002e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e80:	d3fb      	bcc.n	8002e7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e82:	f7ff fdf7 	bl	8002a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e86:	f001 f8e7 	bl	8004058 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e8a:	f7ff f9bd 	bl	8002208 <main>

08002e8e <LoopForever>:

LoopForever:
    b LoopForever
 8002e8e:	e7fe      	b.n	8002e8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e90:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e98:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002e9c:	08009e10 	.word	0x08009e10
  ldr r2, =_sbss
 8002ea0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002ea4:	200002cc 	.word	0x200002cc

08002ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ea8:	e7fe      	b.n	8002ea8 <ADC1_2_IRQHandler>
	...

08002eac <LL_EXTI_EnableIT_0_31>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <LL_EXTI_EnableIT_0_31+0x20>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4904      	ldr	r1, [pc, #16]	; (8002ecc <LL_EXTI_EnableIT_0_31+0x20>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <LL_EXTI_EnableIT_32_63>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <LL_EXTI_EnableIT_32_63+0x20>)
 8002eda:	6a1a      	ldr	r2, [r3, #32]
 8002edc:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <LL_EXTI_EnableIT_32_63+0x20>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	620b      	str	r3, [r1, #32]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <LL_EXTI_DisableIT_0_31>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <LL_EXTI_DisableIT_0_31+0x24>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	4904      	ldr	r1, [pc, #16]	; (8002f18 <LL_EXTI_DisableIT_0_31+0x24>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40010400 	.word	0x40010400

08002f1c <LL_EXTI_DisableIT_32_63>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <LL_EXTI_DisableIT_32_63+0x24>)
 8002f26:	6a1a      	ldr	r2, [r3, #32]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	4904      	ldr	r1, [pc, #16]	; (8002f40 <LL_EXTI_DisableIT_32_63+0x24>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	620b      	str	r3, [r1, #32]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40010400 	.word	0x40010400

08002f44 <LL_EXTI_EnableEvent_0_31>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	4904      	ldr	r1, [pc, #16]	; (8002f64 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40010400 	.word	0x40010400

08002f68 <LL_EXTI_EnableEvent_32_63>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f74:	4904      	ldr	r1, [pc, #16]	; (8002f88 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40010400 	.word	0x40010400

08002f8c <LL_EXTI_DisableEvent_0_31>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <LL_EXTI_DisableEvent_32_63>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40010400 	.word	0x40010400

08002fdc <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	4904      	ldr	r1, [pc, #16]	; (8002ffc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40010400 	.word	0x40010400

08003000 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800300a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800300c:	4904      	ldr	r1, [pc, #16]	; (8003020 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4313      	orrs	r3, r2
 8003012:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40010400 	.word	0x40010400

08003024 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	43db      	mvns	r3, r3
 8003034:	4904      	ldr	r1, [pc, #16]	; (8003048 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003036:	4013      	ands	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40010400 	.word	0x40010400

0800304c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	43db      	mvns	r3, r3
 800305c:	4904      	ldr	r1, [pc, #16]	; (8003070 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800305e:	4013      	ands	r3, r2
 8003060:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010400 	.word	0x40010400

08003074 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	60cb      	str	r3, [r1, #12]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40010400 	.word	0x40010400

08003098 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	4904      	ldr	r1, [pc, #16]	; (80030b8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40010400 	.word	0x40010400

080030bc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	4904      	ldr	r1, [pc, #16]	; (80030e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	60cb      	str	r3, [r1, #12]
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40010400 	.word	0x40010400

080030e4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	4904      	ldr	r1, [pc, #16]	; (8003108 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40010400 	.word	0x40010400

0800310c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7a1b      	ldrb	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80cd 	beq.w	80032bc <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d061      	beq.n	80031ee <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7a5b      	ldrb	r3, [r3, #9]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d01c      	beq.n	800316c <LL_EXTI_Init+0x60>
 8003132:	2b02      	cmp	r3, #2
 8003134:	dc25      	bgt.n	8003182 <LL_EXTI_Init+0x76>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <LL_EXTI_Init+0x34>
 800313a:	2b01      	cmp	r3, #1
 800313c:	d00b      	beq.n	8003156 <LL_EXTI_Init+0x4a>
 800313e:	e020      	b.n	8003182 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff21 	bl	8002f8c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff feac 	bl	8002eac <LL_EXTI_EnableIT_0_31>
          break;
 8003154:	e018      	b.n	8003188 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff feca 	bl	8002ef4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff feed 	bl	8002f44 <LL_EXTI_EnableEvent_0_31>
          break;
 800316a:	e00d      	b.n	8003188 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fe9b 	bl	8002eac <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fee2 	bl	8002f44 <LL_EXTI_EnableEvent_0_31>
          break;
 8003180:	e002      	b.n	8003188 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
          break;
 8003186:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7a9b      	ldrb	r3, [r3, #10]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d02e      	beq.n	80031ee <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	7a9b      	ldrb	r3, [r3, #10]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d01c      	beq.n	80031d2 <LL_EXTI_Init+0xc6>
 8003198:	2b03      	cmp	r3, #3
 800319a:	dc25      	bgt.n	80031e8 <LL_EXTI_Init+0xdc>
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <LL_EXTI_Init+0x9a>
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d00b      	beq.n	80031bc <LL_EXTI_Init+0xb0>
 80031a4:	e020      	b.n	80031e8 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff86 	bl	80030bc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff11 	bl	8002fdc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80031ba:	e019      	b.n	80031f0 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff2f 	bl	8003024 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ff52 	bl	8003074 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80031d0:	e00e      	b.n	80031f0 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ff00 	bl	8002fdc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff47 	bl	8003074 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80031e6:	e003      	b.n	80031f0 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
            break;
 80031ec:	e000      	b.n	80031f0 <LL_EXTI_Init+0xe4>
        }
      }
 80031ee:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d076      	beq.n	80032e6 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	7a5b      	ldrb	r3, [r3, #9]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d01c      	beq.n	800323a <LL_EXTI_Init+0x12e>
 8003200:	2b02      	cmp	r3, #2
 8003202:	dc25      	bgt.n	8003250 <LL_EXTI_Init+0x144>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <LL_EXTI_Init+0x102>
 8003208:	2b01      	cmp	r3, #1
 800320a:	d00b      	beq.n	8003224 <LL_EXTI_Init+0x118>
 800320c:	e020      	b.n	8003250 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fece 	bl	8002fb4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fe57 	bl	8002ed0 <LL_EXTI_EnableIT_32_63>
          break;
 8003222:	e018      	b.n	8003256 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fe77 	bl	8002f1c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fe98 	bl	8002f68 <LL_EXTI_EnableEvent_32_63>
          break;
 8003238:	e00d      	b.n	8003256 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fe46 	bl	8002ed0 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fe8d 	bl	8002f68 <LL_EXTI_EnableEvent_32_63>
          break;
 800324e:	e002      	b.n	8003256 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
          break;
 8003254:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7a9b      	ldrb	r3, [r3, #10]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d043      	beq.n	80032e6 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	7a9b      	ldrb	r3, [r3, #10]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d01c      	beq.n	80032a0 <LL_EXTI_Init+0x194>
 8003266:	2b03      	cmp	r3, #3
 8003268:	dc25      	bgt.n	80032b6 <LL_EXTI_Init+0x1aa>
 800326a:	2b01      	cmp	r3, #1
 800326c:	d002      	beq.n	8003274 <LL_EXTI_Init+0x168>
 800326e:	2b02      	cmp	r3, #2
 8003270:	d00b      	beq.n	800328a <LL_EXTI_Init+0x17e>
 8003272:	e020      	b.n	80032b6 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff33 	bl	80030e4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff febc 	bl	8003000 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8003288:	e02e      	b.n	80032e8 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fedc 	bl	800304c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fefd 	bl	8003098 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800329e:	e023      	b.n	80032e8 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff feab 	bl	8003000 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fef2 	bl	8003098 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80032b4:	e018      	b.n	80032e8 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
            break;
 80032ba:	e015      	b.n	80032e8 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fe17 	bl	8002ef4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fe5e 	bl	8002f8c <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fe21 	bl	8002f1c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fe68 	bl	8002fb4 <LL_EXTI_DisableEvent_32_63>
 80032e4:	e000      	b.n	80032e8 <LL_EXTI_Init+0x1dc>
      }
 80032e6:	bf00      	nop
#endif
  }
  return status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <LL_GPIO_SetPinMode>:
{
 80032f2:	b480      	push	{r7}
 80032f4:	b089      	sub	sp, #36	; 0x24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	613b      	str	r3, [r7, #16]
  return result;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2103      	movs	r1, #3
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	401a      	ands	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	61bb      	str	r3, [r7, #24]
  return result;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	431a      	orrs	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]
}
 8003344:	bf00      	nop
 8003346:	3724      	adds	r7, #36	; 0x24
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_GPIO_SetPinOutputType>:
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	43db      	mvns	r3, r3
 8003364:	401a      	ands	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	431a      	orrs	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	605a      	str	r2, [r3, #4]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_GPIO_SetPinSpeed>:
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	613b      	str	r3, [r7, #16]
  return result;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2103      	movs	r1, #3
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	401a      	ands	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	61bb      	str	r3, [r7, #24]
  return result;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	431a      	orrs	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	609a      	str	r2, [r3, #8]
}
 80033d2:	bf00      	nop
 80033d4:	3724      	adds	r7, #36	; 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <LL_GPIO_SetPinPull>:
{
 80033de:	b480      	push	{r7}
 80033e0:	b089      	sub	sp, #36	; 0x24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	613b      	str	r3, [r7, #16]
  return result;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	2103      	movs	r1, #3
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	401a      	ands	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	61bb      	str	r3, [r7, #24]
  return result;
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	fab3 f383 	clz	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	431a      	orrs	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	60da      	str	r2, [r3, #12]
}
 8003430:	bf00      	nop
 8003432:	3724      	adds	r7, #36	; 0x24
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_GPIO_SetAFPin_0_7>:
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	613b      	str	r3, [r7, #16]
  return result;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	210f      	movs	r1, #15
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	401a      	ands	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	61bb      	str	r3, [r7, #24]
  return result;
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	431a      	orrs	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	621a      	str	r2, [r3, #32]
}
 800348e:	bf00      	nop
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <LL_GPIO_SetAFPin_8_15>:
{
 800349a:	b480      	push	{r7}
 800349c:	b089      	sub	sp, #36	; 0x24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	613b      	str	r3, [r7, #16]
  return result;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	210f      	movs	r1, #15
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	401a      	ands	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	61bb      	str	r3, [r7, #24]
  return result;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	431a      	orrs	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80034f0:	bf00      	nop
 80034f2:	3724      	adds	r7, #36	; 0x24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	613b      	str	r3, [r7, #16]
  return result;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800351e:	e051      	b.n	80035c4 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	2101      	movs	r1, #1
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d043      	beq.n	80035be <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d003      	beq.n	8003546 <LL_GPIO_Init+0x4a>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d10e      	bne.n	8003564 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	461a      	mov	r2, r3
 800354c:	69b9      	ldr	r1, [r7, #24]
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ff16 	bl	8003380 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	461a      	mov	r2, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fef6 	bl	8003350 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	461a      	mov	r2, r3
 800356a:	69b9      	ldr	r1, [r7, #24]
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff36 	bl	80033de <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d11a      	bne.n	80035b0 <LL_GPIO_Init+0xb4>
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	60bb      	str	r3, [r7, #8]
  return result;
 8003586:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b07      	cmp	r3, #7
 8003590:	d807      	bhi.n	80035a2 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	461a      	mov	r2, r3
 8003598:	69b9      	ldr	r1, [r7, #24]
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ff4e 	bl	800343c <LL_GPIO_SetAFPin_0_7>
 80035a0:	e006      	b.n	80035b0 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	461a      	mov	r2, r3
 80035a8:	69b9      	ldr	r1, [r7, #24]
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ff75 	bl	800349a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	461a      	mov	r2, r3
 80035b6:	69b9      	ldr	r1, [r7, #24]
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff fe9a 	bl	80032f2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3301      	adds	r3, #1
 80035c2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	fa22 f303 	lsr.w	r3, r2, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1a6      	bne.n	8003520 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <LL_I2C_Enable>:
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f043 0201 	orr.w	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	601a      	str	r2, [r3, #0]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_I2C_Disable>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f023 0201 	bic.w	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	601a      	str	r2, [r3, #0]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_I2C_ConfigFilters>:
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	0219      	lsls	r1, r3, #8
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	430b      	orrs	r3, r1
 8003638:	431a      	orrs	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	601a      	str	r2, [r3, #0]
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_I2C_SetOwnAddress1>:
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800365e:	f023 0307 	bic.w	r3, r3, #7
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	430a      	orrs	r2, r1
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	609a      	str	r2, [r3, #8]
}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <LL_I2C_EnableOwnAddress1>:
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	609a      	str	r2, [r3, #8]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_I2C_DisableOwnAddress1>:
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	609a      	str	r2, [r3, #8]
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_I2C_SetTiming>:
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	611a      	str	r2, [r3, #16]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <LL_I2C_SetMode>:
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_I2C_AcknowledgeNextData>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	605a      	str	r2, [r3, #4]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff65 	bl	80035fc <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	461a      	mov	r2, r3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff6d 	bl	800361c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4619      	mov	r1, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ffb6 	bl	80036ba <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff44 	bl	80035dc <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ffa0 	bl	800369a <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6919      	ldr	r1, [r3, #16]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	461a      	mov	r2, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff70 	bl	800364a <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff81 	bl	800367a <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ffa9 	bl	80036d6 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ffb6 	bl	80036fc <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <LL_TIM_SetPrescaler>:
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <LL_TIM_SetAutoReload>:
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <LL_TIM_SetRepetitionCounter>:
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <LL_TIM_OC_SetCompareCH1>:
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_TIM_OC_SetCompareCH2>:
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <LL_TIM_OC_SetCompareCH3>:
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_TIM_OC_SetCompareCH4>:
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <LL_TIM_OC_SetCompareCH5>:
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_TIM_OC_SetCompareCH6>:
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	615a      	str	r2, [r3, #20]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a2f      	ldr	r2, [pc, #188]	; (800398c <LL_TIM_Init+0xd0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <LL_TIM_Init+0x28>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038da:	d003      	beq.n	80038e4 <LL_TIM_Init+0x28>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a2c      	ldr	r2, [pc, #176]	; (8003990 <LL_TIM_Init+0xd4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d106      	bne.n	80038f2 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a25      	ldr	r2, [pc, #148]	; (800398c <LL_TIM_Init+0xd0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <LL_TIM_Init+0x66>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003900:	d00f      	beq.n	8003922 <LL_TIM_Init+0x66>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a22      	ldr	r2, [pc, #136]	; (8003990 <LL_TIM_Init+0xd4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <LL_TIM_Init+0x66>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a21      	ldr	r2, [pc, #132]	; (8003994 <LL_TIM_Init+0xd8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <LL_TIM_Init+0x66>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a20      	ldr	r2, [pc, #128]	; (8003998 <LL_TIM_Init+0xdc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <LL_TIM_Init+0x66>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1f      	ldr	r2, [pc, #124]	; (800399c <LL_TIM_Init+0xe0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d106      	bne.n	8003930 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	4619      	mov	r1, r3
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff3a 	bl	80037b6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff26 	bl	800379a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a0e      	ldr	r2, [pc, #56]	; (800398c <LL_TIM_Init+0xd0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <LL_TIM_Init+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <LL_TIM_Init+0xd8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <LL_TIM_Init+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <LL_TIM_Init+0xdc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <LL_TIM_Init+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a0c      	ldr	r2, [pc, #48]	; (800399c <LL_TIM_Init+0xe0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d105      	bne.n	800397a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff2c 	bl	80037d2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ff8d 	bl	800389a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40000400 	.word	0x40000400
 8003994:	40014000 	.word	0x40014000
 8003998:	40014400 	.word	0x40014400
 800399c:	40014800 	.word	0x40014800

080039a0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b6:	d045      	beq.n	8003a44 <LL_TIM_OC_Init+0xa4>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039be:	d848      	bhi.n	8003a52 <LL_TIM_OC_Init+0xb2>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c6:	d036      	beq.n	8003a36 <LL_TIM_OC_Init+0x96>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ce:	d840      	bhi.n	8003a52 <LL_TIM_OC_Init+0xb2>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d6:	d027      	beq.n	8003a28 <LL_TIM_OC_Init+0x88>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d838      	bhi.n	8003a52 <LL_TIM_OC_Init+0xb2>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e6:	d018      	beq.n	8003a1a <LL_TIM_OC_Init+0x7a>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ee:	d830      	bhi.n	8003a52 <LL_TIM_OC_Init+0xb2>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d003      	beq.n	80039fe <LL_TIM_OC_Init+0x5e>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d007      	beq.n	8003a0c <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80039fc:	e029      	b.n	8003a52 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f82d 	bl	8003a60 <OC1Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0a:	e023      	b.n	8003a54 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f8a0 	bl	8003b54 <OC2Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	75fb      	strb	r3, [r7, #23]
      break;
 8003a18:	e01c      	b.n	8003a54 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f917 	bl	8003c50 <OC3Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	75fb      	strb	r3, [r7, #23]
      break;
 8003a26:	e015      	b.n	8003a54 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f98e 	bl	8003d4c <OC4Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	75fb      	strb	r3, [r7, #23]
      break;
 8003a34:	e00e      	b.n	8003a54 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f9ed 	bl	8003e18 <OC5Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	75fb      	strb	r3, [r7, #23]
      break;
 8003a42:	e007      	b.n	8003a54 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fa44 	bl	8003ed4 <OC6Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a50:	e000      	b.n	8003a54 <LL_TIM_OC_Init+0xb4>
      break;
 8003a52:	bf00      	nop
  }

  return result;
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0201 	bic.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0303 	bic.w	r3, r3, #3
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f023 0202 	bic.w	r2, r3, #2
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0201 	bic.w	r2, r3, #1
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <OC1Config+0xe4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <OC1Config+0x7e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1f      	ldr	r2, [pc, #124]	; (8003b48 <OC1Config+0xe8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <OC1Config+0x7e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <OC1Config+0xec>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <OC1Config+0x7e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <OC1Config+0xf0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d11e      	bne.n	8003b1c <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f023 0208 	bic.w	r2, r3, #8
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f023 0204 	bic.w	r2, r3, #4
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fe5d 	bl	80037ee <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800

08003b54 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f023 0210 	bic.w	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	0212      	lsls	r2, r2, #8
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0220 	bic.w	r2, r3, #32
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 0210 	bic.w	r2, r3, #16
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <OC2Config+0xec>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <OC2Config+0x84>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <OC2Config+0xf0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <OC2Config+0x84>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a1f      	ldr	r2, [pc, #124]	; (8003c48 <OC2Config+0xf4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <OC2Config+0x84>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a1e      	ldr	r2, [pc, #120]	; (8003c4c <OC2Config+0xf8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d11f      	bne.n	8003c18 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	019b      	lsls	r3, r3, #6
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	019b      	lsls	r3, r3, #6
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fded 	bl	800380a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800

08003c50 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0303 	bic.w	r3, r3, #3
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <OC3Config+0xec>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00b      	beq.n	8003cd2 <OC3Config+0x82>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a20      	ldr	r2, [pc, #128]	; (8003d40 <OC3Config+0xf0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <OC3Config+0x82>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1f      	ldr	r2, [pc, #124]	; (8003d44 <OC3Config+0xf4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <OC3Config+0x82>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <OC3Config+0xf8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d11f      	bne.n	8003d12 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	029b      	lsls	r3, r3, #10
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	029b      	lsls	r3, r3, #10
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	015b      	lsls	r3, r3, #5
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	4619      	mov	r1, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fd7e 	bl	8003826 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	40014000 	.word	0x40014000
 8003d44:	40014400 	.word	0x40014400
 8003d48:	40014800 	.word	0x40014800

08003d4c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	0212      	lsls	r2, r2, #8
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	031b      	lsls	r3, r3, #12
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	031b      	lsls	r3, r3, #12
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <OC4Config+0xbc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00b      	beq.n	8003dd0 <OC4Config+0x84>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a14      	ldr	r2, [pc, #80]	; (8003e0c <OC4Config+0xc0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <OC4Config+0x84>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <OC4Config+0xc4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <OC4Config+0x84>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <OC4Config+0xc8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d107      	bne.n	8003de0 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	019b      	lsls	r3, r3, #6
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fd25 	bl	8003842 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400
 8003e14:	40014800 	.word	0x40014800

08003e18 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	041b      	lsls	r3, r3, #16
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <OC5Config+0xac>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00b      	beq.n	8003e8c <OC5Config+0x74>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <OC5Config+0xb0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <OC5Config+0x74>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a13      	ldr	r2, [pc, #76]	; (8003ecc <OC5Config+0xb4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <OC5Config+0x74>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <OC5Config+0xb8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d109      	bne.n	8003ea0 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff fcd6 	bl	800385e <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40014000 	.word	0x40014000
 8003ecc:	40014400 	.word	0x40014400
 8003ed0:	40014800 	.word	0x40014800

08003ed4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	0212      	lsls	r2, r2, #8
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	051b      	lsls	r3, r3, #20
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	051b      	lsls	r3, r3, #20
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <OC6Config+0xac>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <OC6Config+0x76>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <OC6Config+0xb0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <OC6Config+0x76>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <OC6Config+0xb4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <OC6Config+0x76>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a11      	ldr	r2, [pc, #68]	; (8003f8c <OC6Config+0xb8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d109      	bne.n	8003f5e <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	029b      	lsls	r3, r3, #10
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff fc87 	bl	800387e <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800

08003f90 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <LL_InitTick+0x30>)
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <LL_InitTick+0x30>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <LL_InitTick+0x30>)
 8003fb0:	2205      	movs	r2, #5
 8003fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	e000e010 	.word	0xe000e010

08003fc4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003fcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffdd 	bl	8003f90 <LL_InitTick>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003fe8:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <LL_mDelay+0x48>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003fee:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d00c      	beq.n	8004012 <LL_mDelay+0x32>
  {
    Delay++;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003ffe:	e008      	b.n	8004012 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <LL_mDelay+0x48>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <LL_mDelay+0x32>
    {
      Delay--;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f3      	bne.n	8004000 <LL_mDelay+0x20>
    }
  }
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	e000e010 	.word	0xe000e010

0800402c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004034:	4a04      	ldr	r2, [pc, #16]	; (8004048 <LL_SetSystemCoreClock+0x1c>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6013      	str	r3, [r2, #0]
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000004 	.word	0x20000004

0800404c <__errno>:
 800404c:	4b01      	ldr	r3, [pc, #4]	; (8004054 <__errno+0x8>)
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000008 	.word	0x20000008

08004058 <__libc_init_array>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	4d0d      	ldr	r5, [pc, #52]	; (8004090 <__libc_init_array+0x38>)
 800405c:	4c0d      	ldr	r4, [pc, #52]	; (8004094 <__libc_init_array+0x3c>)
 800405e:	1b64      	subs	r4, r4, r5
 8004060:	10a4      	asrs	r4, r4, #2
 8004062:	2600      	movs	r6, #0
 8004064:	42a6      	cmp	r6, r4
 8004066:	d109      	bne.n	800407c <__libc_init_array+0x24>
 8004068:	4d0b      	ldr	r5, [pc, #44]	; (8004098 <__libc_init_array+0x40>)
 800406a:	4c0c      	ldr	r4, [pc, #48]	; (800409c <__libc_init_array+0x44>)
 800406c:	f005 fbee 	bl	800984c <_init>
 8004070:	1b64      	subs	r4, r4, r5
 8004072:	10a4      	asrs	r4, r4, #2
 8004074:	2600      	movs	r6, #0
 8004076:	42a6      	cmp	r6, r4
 8004078:	d105      	bne.n	8004086 <__libc_init_array+0x2e>
 800407a:	bd70      	pop	{r4, r5, r6, pc}
 800407c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004080:	4798      	blx	r3
 8004082:	3601      	adds	r6, #1
 8004084:	e7ee      	b.n	8004064 <__libc_init_array+0xc>
 8004086:	f855 3b04 	ldr.w	r3, [r5], #4
 800408a:	4798      	blx	r3
 800408c:	3601      	adds	r6, #1
 800408e:	e7f2      	b.n	8004076 <__libc_init_array+0x1e>
 8004090:	08009e08 	.word	0x08009e08
 8004094:	08009e08 	.word	0x08009e08
 8004098:	08009e08 	.word	0x08009e08
 800409c:	08009e0c 	.word	0x08009e0c

080040a0 <memset>:
 80040a0:	4402      	add	r2, r0
 80040a2:	4603      	mov	r3, r0
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d100      	bne.n	80040aa <memset+0xa>
 80040a8:	4770      	bx	lr
 80040aa:	f803 1b01 	strb.w	r1, [r3], #1
 80040ae:	e7f9      	b.n	80040a4 <memset+0x4>

080040b0 <__cvt>:
 80040b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040b4:	ec55 4b10 	vmov	r4, r5, d0
 80040b8:	2d00      	cmp	r5, #0
 80040ba:	460e      	mov	r6, r1
 80040bc:	4619      	mov	r1, r3
 80040be:	462b      	mov	r3, r5
 80040c0:	bfbb      	ittet	lt
 80040c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040c6:	461d      	movlt	r5, r3
 80040c8:	2300      	movge	r3, #0
 80040ca:	232d      	movlt	r3, #45	; 0x2d
 80040cc:	700b      	strb	r3, [r1, #0]
 80040ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80040d4:	4691      	mov	r9, r2
 80040d6:	f023 0820 	bic.w	r8, r3, #32
 80040da:	bfbc      	itt	lt
 80040dc:	4622      	movlt	r2, r4
 80040de:	4614      	movlt	r4, r2
 80040e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040e4:	d005      	beq.n	80040f2 <__cvt+0x42>
 80040e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040ea:	d100      	bne.n	80040ee <__cvt+0x3e>
 80040ec:	3601      	adds	r6, #1
 80040ee:	2102      	movs	r1, #2
 80040f0:	e000      	b.n	80040f4 <__cvt+0x44>
 80040f2:	2103      	movs	r1, #3
 80040f4:	ab03      	add	r3, sp, #12
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	ab02      	add	r3, sp, #8
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	ec45 4b10 	vmov	d0, r4, r5
 8004100:	4653      	mov	r3, sl
 8004102:	4632      	mov	r2, r6
 8004104:	f001 fdb4 	bl	8005c70 <_dtoa_r>
 8004108:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800410c:	4607      	mov	r7, r0
 800410e:	d102      	bne.n	8004116 <__cvt+0x66>
 8004110:	f019 0f01 	tst.w	r9, #1
 8004114:	d022      	beq.n	800415c <__cvt+0xac>
 8004116:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800411a:	eb07 0906 	add.w	r9, r7, r6
 800411e:	d110      	bne.n	8004142 <__cvt+0x92>
 8004120:	783b      	ldrb	r3, [r7, #0]
 8004122:	2b30      	cmp	r3, #48	; 0x30
 8004124:	d10a      	bne.n	800413c <__cvt+0x8c>
 8004126:	2200      	movs	r2, #0
 8004128:	2300      	movs	r3, #0
 800412a:	4620      	mov	r0, r4
 800412c:	4629      	mov	r1, r5
 800412e:	f7fc fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004132:	b918      	cbnz	r0, 800413c <__cvt+0x8c>
 8004134:	f1c6 0601 	rsb	r6, r6, #1
 8004138:	f8ca 6000 	str.w	r6, [sl]
 800413c:	f8da 3000 	ldr.w	r3, [sl]
 8004140:	4499      	add	r9, r3
 8004142:	2200      	movs	r2, #0
 8004144:	2300      	movs	r3, #0
 8004146:	4620      	mov	r0, r4
 8004148:	4629      	mov	r1, r5
 800414a:	f7fc fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800414e:	b108      	cbz	r0, 8004154 <__cvt+0xa4>
 8004150:	f8cd 900c 	str.w	r9, [sp, #12]
 8004154:	2230      	movs	r2, #48	; 0x30
 8004156:	9b03      	ldr	r3, [sp, #12]
 8004158:	454b      	cmp	r3, r9
 800415a:	d307      	bcc.n	800416c <__cvt+0xbc>
 800415c:	9b03      	ldr	r3, [sp, #12]
 800415e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004160:	1bdb      	subs	r3, r3, r7
 8004162:	4638      	mov	r0, r7
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	b004      	add	sp, #16
 8004168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800416c:	1c59      	adds	r1, r3, #1
 800416e:	9103      	str	r1, [sp, #12]
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e7f0      	b.n	8004156 <__cvt+0xa6>

08004174 <__exponent>:
 8004174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004176:	4603      	mov	r3, r0
 8004178:	2900      	cmp	r1, #0
 800417a:	bfb8      	it	lt
 800417c:	4249      	neglt	r1, r1
 800417e:	f803 2b02 	strb.w	r2, [r3], #2
 8004182:	bfb4      	ite	lt
 8004184:	222d      	movlt	r2, #45	; 0x2d
 8004186:	222b      	movge	r2, #43	; 0x2b
 8004188:	2909      	cmp	r1, #9
 800418a:	7042      	strb	r2, [r0, #1]
 800418c:	dd2a      	ble.n	80041e4 <__exponent+0x70>
 800418e:	f10d 0407 	add.w	r4, sp, #7
 8004192:	46a4      	mov	ip, r4
 8004194:	270a      	movs	r7, #10
 8004196:	46a6      	mov	lr, r4
 8004198:	460a      	mov	r2, r1
 800419a:	fb91 f6f7 	sdiv	r6, r1, r7
 800419e:	fb07 1516 	mls	r5, r7, r6, r1
 80041a2:	3530      	adds	r5, #48	; 0x30
 80041a4:	2a63      	cmp	r2, #99	; 0x63
 80041a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80041aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80041ae:	4631      	mov	r1, r6
 80041b0:	dcf1      	bgt.n	8004196 <__exponent+0x22>
 80041b2:	3130      	adds	r1, #48	; 0x30
 80041b4:	f1ae 0502 	sub.w	r5, lr, #2
 80041b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041bc:	1c44      	adds	r4, r0, #1
 80041be:	4629      	mov	r1, r5
 80041c0:	4561      	cmp	r1, ip
 80041c2:	d30a      	bcc.n	80041da <__exponent+0x66>
 80041c4:	f10d 0209 	add.w	r2, sp, #9
 80041c8:	eba2 020e 	sub.w	r2, r2, lr
 80041cc:	4565      	cmp	r5, ip
 80041ce:	bf88      	it	hi
 80041d0:	2200      	movhi	r2, #0
 80041d2:	4413      	add	r3, r2
 80041d4:	1a18      	subs	r0, r3, r0
 80041d6:	b003      	add	sp, #12
 80041d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041e2:	e7ed      	b.n	80041c0 <__exponent+0x4c>
 80041e4:	2330      	movs	r3, #48	; 0x30
 80041e6:	3130      	adds	r1, #48	; 0x30
 80041e8:	7083      	strb	r3, [r0, #2]
 80041ea:	70c1      	strb	r1, [r0, #3]
 80041ec:	1d03      	adds	r3, r0, #4
 80041ee:	e7f1      	b.n	80041d4 <__exponent+0x60>

080041f0 <_printf_float>:
 80041f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f4:	ed2d 8b02 	vpush	{d8}
 80041f8:	b08d      	sub	sp, #52	; 0x34
 80041fa:	460c      	mov	r4, r1
 80041fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004200:	4616      	mov	r6, r2
 8004202:	461f      	mov	r7, r3
 8004204:	4605      	mov	r5, r0
 8004206:	f002 fe8f 	bl	8006f28 <_localeconv_r>
 800420a:	f8d0 a000 	ldr.w	sl, [r0]
 800420e:	4650      	mov	r0, sl
 8004210:	f7fb ffde 	bl	80001d0 <strlen>
 8004214:	2300      	movs	r3, #0
 8004216:	930a      	str	r3, [sp, #40]	; 0x28
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	9305      	str	r3, [sp, #20]
 800421c:	f8d8 3000 	ldr.w	r3, [r8]
 8004220:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004224:	3307      	adds	r3, #7
 8004226:	f023 0307 	bic.w	r3, r3, #7
 800422a:	f103 0208 	add.w	r2, r3, #8
 800422e:	f8c8 2000 	str.w	r2, [r8]
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800423a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800423e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004242:	9307      	str	r3, [sp, #28]
 8004244:	f8cd 8018 	str.w	r8, [sp, #24]
 8004248:	ee08 0a10 	vmov	s16, r0
 800424c:	4b9f      	ldr	r3, [pc, #636]	; (80044cc <_printf_float+0x2dc>)
 800424e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004252:	f04f 32ff 	mov.w	r2, #4294967295
 8004256:	f7fc fc69 	bl	8000b2c <__aeabi_dcmpun>
 800425a:	bb88      	cbnz	r0, 80042c0 <_printf_float+0xd0>
 800425c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004260:	4b9a      	ldr	r3, [pc, #616]	; (80044cc <_printf_float+0x2dc>)
 8004262:	f04f 32ff 	mov.w	r2, #4294967295
 8004266:	f7fc fc43 	bl	8000af0 <__aeabi_dcmple>
 800426a:	bb48      	cbnz	r0, 80042c0 <_printf_float+0xd0>
 800426c:	2200      	movs	r2, #0
 800426e:	2300      	movs	r3, #0
 8004270:	4640      	mov	r0, r8
 8004272:	4649      	mov	r1, r9
 8004274:	f7fc fc32 	bl	8000adc <__aeabi_dcmplt>
 8004278:	b110      	cbz	r0, 8004280 <_printf_float+0x90>
 800427a:	232d      	movs	r3, #45	; 0x2d
 800427c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004280:	4b93      	ldr	r3, [pc, #588]	; (80044d0 <_printf_float+0x2e0>)
 8004282:	4894      	ldr	r0, [pc, #592]	; (80044d4 <_printf_float+0x2e4>)
 8004284:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004288:	bf94      	ite	ls
 800428a:	4698      	movls	r8, r3
 800428c:	4680      	movhi	r8, r0
 800428e:	2303      	movs	r3, #3
 8004290:	6123      	str	r3, [r4, #16]
 8004292:	9b05      	ldr	r3, [sp, #20]
 8004294:	f023 0204 	bic.w	r2, r3, #4
 8004298:	6022      	str	r2, [r4, #0]
 800429a:	f04f 0900 	mov.w	r9, #0
 800429e:	9700      	str	r7, [sp, #0]
 80042a0:	4633      	mov	r3, r6
 80042a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80042a4:	4621      	mov	r1, r4
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 f9d8 	bl	800465c <_printf_common>
 80042ac:	3001      	adds	r0, #1
 80042ae:	f040 8090 	bne.w	80043d2 <_printf_float+0x1e2>
 80042b2:	f04f 30ff 	mov.w	r0, #4294967295
 80042b6:	b00d      	add	sp, #52	; 0x34
 80042b8:	ecbd 8b02 	vpop	{d8}
 80042bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c0:	4642      	mov	r2, r8
 80042c2:	464b      	mov	r3, r9
 80042c4:	4640      	mov	r0, r8
 80042c6:	4649      	mov	r1, r9
 80042c8:	f7fc fc30 	bl	8000b2c <__aeabi_dcmpun>
 80042cc:	b140      	cbz	r0, 80042e0 <_printf_float+0xf0>
 80042ce:	464b      	mov	r3, r9
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bfbc      	itt	lt
 80042d4:	232d      	movlt	r3, #45	; 0x2d
 80042d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042da:	487f      	ldr	r0, [pc, #508]	; (80044d8 <_printf_float+0x2e8>)
 80042dc:	4b7f      	ldr	r3, [pc, #508]	; (80044dc <_printf_float+0x2ec>)
 80042de:	e7d1      	b.n	8004284 <_printf_float+0x94>
 80042e0:	6863      	ldr	r3, [r4, #4]
 80042e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80042e6:	9206      	str	r2, [sp, #24]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	d13f      	bne.n	800436c <_printf_float+0x17c>
 80042ec:	2306      	movs	r3, #6
 80042ee:	6063      	str	r3, [r4, #4]
 80042f0:	9b05      	ldr	r3, [sp, #20]
 80042f2:	6861      	ldr	r1, [r4, #4]
 80042f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042f8:	2300      	movs	r3, #0
 80042fa:	9303      	str	r3, [sp, #12]
 80042fc:	ab0a      	add	r3, sp, #40	; 0x28
 80042fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004302:	ab09      	add	r3, sp, #36	; 0x24
 8004304:	ec49 8b10 	vmov	d0, r8, r9
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	6022      	str	r2, [r4, #0]
 800430c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004310:	4628      	mov	r0, r5
 8004312:	f7ff fecd 	bl	80040b0 <__cvt>
 8004316:	9b06      	ldr	r3, [sp, #24]
 8004318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800431a:	2b47      	cmp	r3, #71	; 0x47
 800431c:	4680      	mov	r8, r0
 800431e:	d108      	bne.n	8004332 <_printf_float+0x142>
 8004320:	1cc8      	adds	r0, r1, #3
 8004322:	db02      	blt.n	800432a <_printf_float+0x13a>
 8004324:	6863      	ldr	r3, [r4, #4]
 8004326:	4299      	cmp	r1, r3
 8004328:	dd41      	ble.n	80043ae <_printf_float+0x1be>
 800432a:	f1ab 0b02 	sub.w	fp, fp, #2
 800432e:	fa5f fb8b 	uxtb.w	fp, fp
 8004332:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004336:	d820      	bhi.n	800437a <_printf_float+0x18a>
 8004338:	3901      	subs	r1, #1
 800433a:	465a      	mov	r2, fp
 800433c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004340:	9109      	str	r1, [sp, #36]	; 0x24
 8004342:	f7ff ff17 	bl	8004174 <__exponent>
 8004346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004348:	1813      	adds	r3, r2, r0
 800434a:	2a01      	cmp	r2, #1
 800434c:	4681      	mov	r9, r0
 800434e:	6123      	str	r3, [r4, #16]
 8004350:	dc02      	bgt.n	8004358 <_printf_float+0x168>
 8004352:	6822      	ldr	r2, [r4, #0]
 8004354:	07d2      	lsls	r2, r2, #31
 8004356:	d501      	bpl.n	800435c <_printf_float+0x16c>
 8004358:	3301      	adds	r3, #1
 800435a:	6123      	str	r3, [r4, #16]
 800435c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004360:	2b00      	cmp	r3, #0
 8004362:	d09c      	beq.n	800429e <_printf_float+0xae>
 8004364:	232d      	movs	r3, #45	; 0x2d
 8004366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800436a:	e798      	b.n	800429e <_printf_float+0xae>
 800436c:	9a06      	ldr	r2, [sp, #24]
 800436e:	2a47      	cmp	r2, #71	; 0x47
 8004370:	d1be      	bne.n	80042f0 <_printf_float+0x100>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1bc      	bne.n	80042f0 <_printf_float+0x100>
 8004376:	2301      	movs	r3, #1
 8004378:	e7b9      	b.n	80042ee <_printf_float+0xfe>
 800437a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800437e:	d118      	bne.n	80043b2 <_printf_float+0x1c2>
 8004380:	2900      	cmp	r1, #0
 8004382:	6863      	ldr	r3, [r4, #4]
 8004384:	dd0b      	ble.n	800439e <_printf_float+0x1ae>
 8004386:	6121      	str	r1, [r4, #16]
 8004388:	b913      	cbnz	r3, 8004390 <_printf_float+0x1a0>
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	07d0      	lsls	r0, r2, #31
 800438e:	d502      	bpl.n	8004396 <_printf_float+0x1a6>
 8004390:	3301      	adds	r3, #1
 8004392:	440b      	add	r3, r1
 8004394:	6123      	str	r3, [r4, #16]
 8004396:	65a1      	str	r1, [r4, #88]	; 0x58
 8004398:	f04f 0900 	mov.w	r9, #0
 800439c:	e7de      	b.n	800435c <_printf_float+0x16c>
 800439e:	b913      	cbnz	r3, 80043a6 <_printf_float+0x1b6>
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	07d2      	lsls	r2, r2, #31
 80043a4:	d501      	bpl.n	80043aa <_printf_float+0x1ba>
 80043a6:	3302      	adds	r3, #2
 80043a8:	e7f4      	b.n	8004394 <_printf_float+0x1a4>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e7f2      	b.n	8004394 <_printf_float+0x1a4>
 80043ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80043b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043b4:	4299      	cmp	r1, r3
 80043b6:	db05      	blt.n	80043c4 <_printf_float+0x1d4>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	6121      	str	r1, [r4, #16]
 80043bc:	07d8      	lsls	r0, r3, #31
 80043be:	d5ea      	bpl.n	8004396 <_printf_float+0x1a6>
 80043c0:	1c4b      	adds	r3, r1, #1
 80043c2:	e7e7      	b.n	8004394 <_printf_float+0x1a4>
 80043c4:	2900      	cmp	r1, #0
 80043c6:	bfd4      	ite	le
 80043c8:	f1c1 0202 	rsble	r2, r1, #2
 80043cc:	2201      	movgt	r2, #1
 80043ce:	4413      	add	r3, r2
 80043d0:	e7e0      	b.n	8004394 <_printf_float+0x1a4>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	055a      	lsls	r2, r3, #21
 80043d6:	d407      	bmi.n	80043e8 <_printf_float+0x1f8>
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	4642      	mov	r2, r8
 80043dc:	4631      	mov	r1, r6
 80043de:	4628      	mov	r0, r5
 80043e0:	47b8      	blx	r7
 80043e2:	3001      	adds	r0, #1
 80043e4:	d12c      	bne.n	8004440 <_printf_float+0x250>
 80043e6:	e764      	b.n	80042b2 <_printf_float+0xc2>
 80043e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043ec:	f240 80e0 	bls.w	80045b0 <_printf_float+0x3c0>
 80043f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043f4:	2200      	movs	r2, #0
 80043f6:	2300      	movs	r3, #0
 80043f8:	f7fc fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d034      	beq.n	800446a <_printf_float+0x27a>
 8004400:	4a37      	ldr	r2, [pc, #220]	; (80044e0 <_printf_float+0x2f0>)
 8004402:	2301      	movs	r3, #1
 8004404:	4631      	mov	r1, r6
 8004406:	4628      	mov	r0, r5
 8004408:	47b8      	blx	r7
 800440a:	3001      	adds	r0, #1
 800440c:	f43f af51 	beq.w	80042b2 <_printf_float+0xc2>
 8004410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004414:	429a      	cmp	r2, r3
 8004416:	db02      	blt.n	800441e <_printf_float+0x22e>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	07d8      	lsls	r0, r3, #31
 800441c:	d510      	bpl.n	8004440 <_printf_float+0x250>
 800441e:	ee18 3a10 	vmov	r3, s16
 8004422:	4652      	mov	r2, sl
 8004424:	4631      	mov	r1, r6
 8004426:	4628      	mov	r0, r5
 8004428:	47b8      	blx	r7
 800442a:	3001      	adds	r0, #1
 800442c:	f43f af41 	beq.w	80042b2 <_printf_float+0xc2>
 8004430:	f04f 0800 	mov.w	r8, #0
 8004434:	f104 091a 	add.w	r9, r4, #26
 8004438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	4543      	cmp	r3, r8
 800443e:	dc09      	bgt.n	8004454 <_printf_float+0x264>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	079b      	lsls	r3, r3, #30
 8004444:	f100 8105 	bmi.w	8004652 <_printf_float+0x462>
 8004448:	68e0      	ldr	r0, [r4, #12]
 800444a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800444c:	4298      	cmp	r0, r3
 800444e:	bfb8      	it	lt
 8004450:	4618      	movlt	r0, r3
 8004452:	e730      	b.n	80042b6 <_printf_float+0xc6>
 8004454:	2301      	movs	r3, #1
 8004456:	464a      	mov	r2, r9
 8004458:	4631      	mov	r1, r6
 800445a:	4628      	mov	r0, r5
 800445c:	47b8      	blx	r7
 800445e:	3001      	adds	r0, #1
 8004460:	f43f af27 	beq.w	80042b2 <_printf_float+0xc2>
 8004464:	f108 0801 	add.w	r8, r8, #1
 8004468:	e7e6      	b.n	8004438 <_printf_float+0x248>
 800446a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	dc39      	bgt.n	80044e4 <_printf_float+0x2f4>
 8004470:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <_printf_float+0x2f0>)
 8004472:	2301      	movs	r3, #1
 8004474:	4631      	mov	r1, r6
 8004476:	4628      	mov	r0, r5
 8004478:	47b8      	blx	r7
 800447a:	3001      	adds	r0, #1
 800447c:	f43f af19 	beq.w	80042b2 <_printf_float+0xc2>
 8004480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004484:	4313      	orrs	r3, r2
 8004486:	d102      	bne.n	800448e <_printf_float+0x29e>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	07d9      	lsls	r1, r3, #31
 800448c:	d5d8      	bpl.n	8004440 <_printf_float+0x250>
 800448e:	ee18 3a10 	vmov	r3, s16
 8004492:	4652      	mov	r2, sl
 8004494:	4631      	mov	r1, r6
 8004496:	4628      	mov	r0, r5
 8004498:	47b8      	blx	r7
 800449a:	3001      	adds	r0, #1
 800449c:	f43f af09 	beq.w	80042b2 <_printf_float+0xc2>
 80044a0:	f04f 0900 	mov.w	r9, #0
 80044a4:	f104 0a1a 	add.w	sl, r4, #26
 80044a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044aa:	425b      	negs	r3, r3
 80044ac:	454b      	cmp	r3, r9
 80044ae:	dc01      	bgt.n	80044b4 <_printf_float+0x2c4>
 80044b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b2:	e792      	b.n	80043da <_printf_float+0x1ea>
 80044b4:	2301      	movs	r3, #1
 80044b6:	4652      	mov	r2, sl
 80044b8:	4631      	mov	r1, r6
 80044ba:	4628      	mov	r0, r5
 80044bc:	47b8      	blx	r7
 80044be:	3001      	adds	r0, #1
 80044c0:	f43f aef7 	beq.w	80042b2 <_printf_float+0xc2>
 80044c4:	f109 0901 	add.w	r9, r9, #1
 80044c8:	e7ee      	b.n	80044a8 <_printf_float+0x2b8>
 80044ca:	bf00      	nop
 80044cc:	7fefffff 	.word	0x7fefffff
 80044d0:	08009914 	.word	0x08009914
 80044d4:	08009918 	.word	0x08009918
 80044d8:	08009920 	.word	0x08009920
 80044dc:	0800991c 	.word	0x0800991c
 80044e0:	08009924 	.word	0x08009924
 80044e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044e8:	429a      	cmp	r2, r3
 80044ea:	bfa8      	it	ge
 80044ec:	461a      	movge	r2, r3
 80044ee:	2a00      	cmp	r2, #0
 80044f0:	4691      	mov	r9, r2
 80044f2:	dc37      	bgt.n	8004564 <_printf_float+0x374>
 80044f4:	f04f 0b00 	mov.w	fp, #0
 80044f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044fc:	f104 021a 	add.w	r2, r4, #26
 8004500:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004502:	9305      	str	r3, [sp, #20]
 8004504:	eba3 0309 	sub.w	r3, r3, r9
 8004508:	455b      	cmp	r3, fp
 800450a:	dc33      	bgt.n	8004574 <_printf_float+0x384>
 800450c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004510:	429a      	cmp	r2, r3
 8004512:	db3b      	blt.n	800458c <_printf_float+0x39c>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	07da      	lsls	r2, r3, #31
 8004518:	d438      	bmi.n	800458c <_printf_float+0x39c>
 800451a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800451c:	9b05      	ldr	r3, [sp, #20]
 800451e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	eba2 0901 	sub.w	r9, r2, r1
 8004526:	4599      	cmp	r9, r3
 8004528:	bfa8      	it	ge
 800452a:	4699      	movge	r9, r3
 800452c:	f1b9 0f00 	cmp.w	r9, #0
 8004530:	dc35      	bgt.n	800459e <_printf_float+0x3ae>
 8004532:	f04f 0800 	mov.w	r8, #0
 8004536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800453a:	f104 0a1a 	add.w	sl, r4, #26
 800453e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	eba3 0309 	sub.w	r3, r3, r9
 8004548:	4543      	cmp	r3, r8
 800454a:	f77f af79 	ble.w	8004440 <_printf_float+0x250>
 800454e:	2301      	movs	r3, #1
 8004550:	4652      	mov	r2, sl
 8004552:	4631      	mov	r1, r6
 8004554:	4628      	mov	r0, r5
 8004556:	47b8      	blx	r7
 8004558:	3001      	adds	r0, #1
 800455a:	f43f aeaa 	beq.w	80042b2 <_printf_float+0xc2>
 800455e:	f108 0801 	add.w	r8, r8, #1
 8004562:	e7ec      	b.n	800453e <_printf_float+0x34e>
 8004564:	4613      	mov	r3, r2
 8004566:	4631      	mov	r1, r6
 8004568:	4642      	mov	r2, r8
 800456a:	4628      	mov	r0, r5
 800456c:	47b8      	blx	r7
 800456e:	3001      	adds	r0, #1
 8004570:	d1c0      	bne.n	80044f4 <_printf_float+0x304>
 8004572:	e69e      	b.n	80042b2 <_printf_float+0xc2>
 8004574:	2301      	movs	r3, #1
 8004576:	4631      	mov	r1, r6
 8004578:	4628      	mov	r0, r5
 800457a:	9205      	str	r2, [sp, #20]
 800457c:	47b8      	blx	r7
 800457e:	3001      	adds	r0, #1
 8004580:	f43f ae97 	beq.w	80042b2 <_printf_float+0xc2>
 8004584:	9a05      	ldr	r2, [sp, #20]
 8004586:	f10b 0b01 	add.w	fp, fp, #1
 800458a:	e7b9      	b.n	8004500 <_printf_float+0x310>
 800458c:	ee18 3a10 	vmov	r3, s16
 8004590:	4652      	mov	r2, sl
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	d1be      	bne.n	800451a <_printf_float+0x32a>
 800459c:	e689      	b.n	80042b2 <_printf_float+0xc2>
 800459e:	9a05      	ldr	r2, [sp, #20]
 80045a0:	464b      	mov	r3, r9
 80045a2:	4442      	add	r2, r8
 80045a4:	4631      	mov	r1, r6
 80045a6:	4628      	mov	r0, r5
 80045a8:	47b8      	blx	r7
 80045aa:	3001      	adds	r0, #1
 80045ac:	d1c1      	bne.n	8004532 <_printf_float+0x342>
 80045ae:	e680      	b.n	80042b2 <_printf_float+0xc2>
 80045b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045b2:	2a01      	cmp	r2, #1
 80045b4:	dc01      	bgt.n	80045ba <_printf_float+0x3ca>
 80045b6:	07db      	lsls	r3, r3, #31
 80045b8:	d538      	bpl.n	800462c <_printf_float+0x43c>
 80045ba:	2301      	movs	r3, #1
 80045bc:	4642      	mov	r2, r8
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b8      	blx	r7
 80045c4:	3001      	adds	r0, #1
 80045c6:	f43f ae74 	beq.w	80042b2 <_printf_float+0xc2>
 80045ca:	ee18 3a10 	vmov	r3, s16
 80045ce:	4652      	mov	r2, sl
 80045d0:	4631      	mov	r1, r6
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	f43f ae6b 	beq.w	80042b2 <_printf_float+0xc2>
 80045dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045e0:	2200      	movs	r2, #0
 80045e2:	2300      	movs	r3, #0
 80045e4:	f7fc fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 80045e8:	b9d8      	cbnz	r0, 8004622 <_printf_float+0x432>
 80045ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ec:	f108 0201 	add.w	r2, r8, #1
 80045f0:	3b01      	subs	r3, #1
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	47b8      	blx	r7
 80045f8:	3001      	adds	r0, #1
 80045fa:	d10e      	bne.n	800461a <_printf_float+0x42a>
 80045fc:	e659      	b.n	80042b2 <_printf_float+0xc2>
 80045fe:	2301      	movs	r3, #1
 8004600:	4652      	mov	r2, sl
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	f43f ae52 	beq.w	80042b2 <_printf_float+0xc2>
 800460e:	f108 0801 	add.w	r8, r8, #1
 8004612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	4543      	cmp	r3, r8
 8004618:	dcf1      	bgt.n	80045fe <_printf_float+0x40e>
 800461a:	464b      	mov	r3, r9
 800461c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004620:	e6dc      	b.n	80043dc <_printf_float+0x1ec>
 8004622:	f04f 0800 	mov.w	r8, #0
 8004626:	f104 0a1a 	add.w	sl, r4, #26
 800462a:	e7f2      	b.n	8004612 <_printf_float+0x422>
 800462c:	2301      	movs	r3, #1
 800462e:	4642      	mov	r2, r8
 8004630:	e7df      	b.n	80045f2 <_printf_float+0x402>
 8004632:	2301      	movs	r3, #1
 8004634:	464a      	mov	r2, r9
 8004636:	4631      	mov	r1, r6
 8004638:	4628      	mov	r0, r5
 800463a:	47b8      	blx	r7
 800463c:	3001      	adds	r0, #1
 800463e:	f43f ae38 	beq.w	80042b2 <_printf_float+0xc2>
 8004642:	f108 0801 	add.w	r8, r8, #1
 8004646:	68e3      	ldr	r3, [r4, #12]
 8004648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800464a:	1a5b      	subs	r3, r3, r1
 800464c:	4543      	cmp	r3, r8
 800464e:	dcf0      	bgt.n	8004632 <_printf_float+0x442>
 8004650:	e6fa      	b.n	8004448 <_printf_float+0x258>
 8004652:	f04f 0800 	mov.w	r8, #0
 8004656:	f104 0919 	add.w	r9, r4, #25
 800465a:	e7f4      	b.n	8004646 <_printf_float+0x456>

0800465c <_printf_common>:
 800465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	4616      	mov	r6, r2
 8004662:	4699      	mov	r9, r3
 8004664:	688a      	ldr	r2, [r1, #8]
 8004666:	690b      	ldr	r3, [r1, #16]
 8004668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800466c:	4293      	cmp	r3, r2
 800466e:	bfb8      	it	lt
 8004670:	4613      	movlt	r3, r2
 8004672:	6033      	str	r3, [r6, #0]
 8004674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004678:	4607      	mov	r7, r0
 800467a:	460c      	mov	r4, r1
 800467c:	b10a      	cbz	r2, 8004682 <_printf_common+0x26>
 800467e:	3301      	adds	r3, #1
 8004680:	6033      	str	r3, [r6, #0]
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	0699      	lsls	r1, r3, #26
 8004686:	bf42      	ittt	mi
 8004688:	6833      	ldrmi	r3, [r6, #0]
 800468a:	3302      	addmi	r3, #2
 800468c:	6033      	strmi	r3, [r6, #0]
 800468e:	6825      	ldr	r5, [r4, #0]
 8004690:	f015 0506 	ands.w	r5, r5, #6
 8004694:	d106      	bne.n	80046a4 <_printf_common+0x48>
 8004696:	f104 0a19 	add.w	sl, r4, #25
 800469a:	68e3      	ldr	r3, [r4, #12]
 800469c:	6832      	ldr	r2, [r6, #0]
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	42ab      	cmp	r3, r5
 80046a2:	dc26      	bgt.n	80046f2 <_printf_common+0x96>
 80046a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046a8:	1e13      	subs	r3, r2, #0
 80046aa:	6822      	ldr	r2, [r4, #0]
 80046ac:	bf18      	it	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	0692      	lsls	r2, r2, #26
 80046b2:	d42b      	bmi.n	800470c <_printf_common+0xb0>
 80046b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b8:	4649      	mov	r1, r9
 80046ba:	4638      	mov	r0, r7
 80046bc:	47c0      	blx	r8
 80046be:	3001      	adds	r0, #1
 80046c0:	d01e      	beq.n	8004700 <_printf_common+0xa4>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	68e5      	ldr	r5, [r4, #12]
 80046c6:	6832      	ldr	r2, [r6, #0]
 80046c8:	f003 0306 	and.w	r3, r3, #6
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	bf08      	it	eq
 80046d0:	1aad      	subeq	r5, r5, r2
 80046d2:	68a3      	ldr	r3, [r4, #8]
 80046d4:	6922      	ldr	r2, [r4, #16]
 80046d6:	bf0c      	ite	eq
 80046d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046dc:	2500      	movne	r5, #0
 80046de:	4293      	cmp	r3, r2
 80046e0:	bfc4      	itt	gt
 80046e2:	1a9b      	subgt	r3, r3, r2
 80046e4:	18ed      	addgt	r5, r5, r3
 80046e6:	2600      	movs	r6, #0
 80046e8:	341a      	adds	r4, #26
 80046ea:	42b5      	cmp	r5, r6
 80046ec:	d11a      	bne.n	8004724 <_printf_common+0xc8>
 80046ee:	2000      	movs	r0, #0
 80046f0:	e008      	b.n	8004704 <_printf_common+0xa8>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4652      	mov	r2, sl
 80046f6:	4649      	mov	r1, r9
 80046f8:	4638      	mov	r0, r7
 80046fa:	47c0      	blx	r8
 80046fc:	3001      	adds	r0, #1
 80046fe:	d103      	bne.n	8004708 <_printf_common+0xac>
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004708:	3501      	adds	r5, #1
 800470a:	e7c6      	b.n	800469a <_printf_common+0x3e>
 800470c:	18e1      	adds	r1, r4, r3
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	2030      	movs	r0, #48	; 0x30
 8004712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004716:	4422      	add	r2, r4
 8004718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800471c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004720:	3302      	adds	r3, #2
 8004722:	e7c7      	b.n	80046b4 <_printf_common+0x58>
 8004724:	2301      	movs	r3, #1
 8004726:	4622      	mov	r2, r4
 8004728:	4649      	mov	r1, r9
 800472a:	4638      	mov	r0, r7
 800472c:	47c0      	blx	r8
 800472e:	3001      	adds	r0, #1
 8004730:	d0e6      	beq.n	8004700 <_printf_common+0xa4>
 8004732:	3601      	adds	r6, #1
 8004734:	e7d9      	b.n	80046ea <_printf_common+0x8e>
	...

08004738 <_printf_i>:
 8004738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800473c:	460c      	mov	r4, r1
 800473e:	4691      	mov	r9, r2
 8004740:	7e27      	ldrb	r7, [r4, #24]
 8004742:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004744:	2f78      	cmp	r7, #120	; 0x78
 8004746:	4680      	mov	r8, r0
 8004748:	469a      	mov	sl, r3
 800474a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800474e:	d807      	bhi.n	8004760 <_printf_i+0x28>
 8004750:	2f62      	cmp	r7, #98	; 0x62
 8004752:	d80a      	bhi.n	800476a <_printf_i+0x32>
 8004754:	2f00      	cmp	r7, #0
 8004756:	f000 80d8 	beq.w	800490a <_printf_i+0x1d2>
 800475a:	2f58      	cmp	r7, #88	; 0x58
 800475c:	f000 80a3 	beq.w	80048a6 <_printf_i+0x16e>
 8004760:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004768:	e03a      	b.n	80047e0 <_printf_i+0xa8>
 800476a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800476e:	2b15      	cmp	r3, #21
 8004770:	d8f6      	bhi.n	8004760 <_printf_i+0x28>
 8004772:	a001      	add	r0, pc, #4	; (adr r0, 8004778 <_printf_i+0x40>)
 8004774:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004778:	080047d1 	.word	0x080047d1
 800477c:	080047e5 	.word	0x080047e5
 8004780:	08004761 	.word	0x08004761
 8004784:	08004761 	.word	0x08004761
 8004788:	08004761 	.word	0x08004761
 800478c:	08004761 	.word	0x08004761
 8004790:	080047e5 	.word	0x080047e5
 8004794:	08004761 	.word	0x08004761
 8004798:	08004761 	.word	0x08004761
 800479c:	08004761 	.word	0x08004761
 80047a0:	08004761 	.word	0x08004761
 80047a4:	080048f1 	.word	0x080048f1
 80047a8:	08004815 	.word	0x08004815
 80047ac:	080048d3 	.word	0x080048d3
 80047b0:	08004761 	.word	0x08004761
 80047b4:	08004761 	.word	0x08004761
 80047b8:	08004913 	.word	0x08004913
 80047bc:	08004761 	.word	0x08004761
 80047c0:	08004815 	.word	0x08004815
 80047c4:	08004761 	.word	0x08004761
 80047c8:	08004761 	.word	0x08004761
 80047cc:	080048db 	.word	0x080048db
 80047d0:	680b      	ldr	r3, [r1, #0]
 80047d2:	1d1a      	adds	r2, r3, #4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	600a      	str	r2, [r1, #0]
 80047d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0a3      	b.n	800492c <_printf_i+0x1f4>
 80047e4:	6825      	ldr	r5, [r4, #0]
 80047e6:	6808      	ldr	r0, [r1, #0]
 80047e8:	062e      	lsls	r6, r5, #24
 80047ea:	f100 0304 	add.w	r3, r0, #4
 80047ee:	d50a      	bpl.n	8004806 <_printf_i+0xce>
 80047f0:	6805      	ldr	r5, [r0, #0]
 80047f2:	600b      	str	r3, [r1, #0]
 80047f4:	2d00      	cmp	r5, #0
 80047f6:	da03      	bge.n	8004800 <_printf_i+0xc8>
 80047f8:	232d      	movs	r3, #45	; 0x2d
 80047fa:	426d      	negs	r5, r5
 80047fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004800:	485e      	ldr	r0, [pc, #376]	; (800497c <_printf_i+0x244>)
 8004802:	230a      	movs	r3, #10
 8004804:	e019      	b.n	800483a <_printf_i+0x102>
 8004806:	f015 0f40 	tst.w	r5, #64	; 0x40
 800480a:	6805      	ldr	r5, [r0, #0]
 800480c:	600b      	str	r3, [r1, #0]
 800480e:	bf18      	it	ne
 8004810:	b22d      	sxthne	r5, r5
 8004812:	e7ef      	b.n	80047f4 <_printf_i+0xbc>
 8004814:	680b      	ldr	r3, [r1, #0]
 8004816:	6825      	ldr	r5, [r4, #0]
 8004818:	1d18      	adds	r0, r3, #4
 800481a:	6008      	str	r0, [r1, #0]
 800481c:	0628      	lsls	r0, r5, #24
 800481e:	d501      	bpl.n	8004824 <_printf_i+0xec>
 8004820:	681d      	ldr	r5, [r3, #0]
 8004822:	e002      	b.n	800482a <_printf_i+0xf2>
 8004824:	0669      	lsls	r1, r5, #25
 8004826:	d5fb      	bpl.n	8004820 <_printf_i+0xe8>
 8004828:	881d      	ldrh	r5, [r3, #0]
 800482a:	4854      	ldr	r0, [pc, #336]	; (800497c <_printf_i+0x244>)
 800482c:	2f6f      	cmp	r7, #111	; 0x6f
 800482e:	bf0c      	ite	eq
 8004830:	2308      	moveq	r3, #8
 8004832:	230a      	movne	r3, #10
 8004834:	2100      	movs	r1, #0
 8004836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800483a:	6866      	ldr	r6, [r4, #4]
 800483c:	60a6      	str	r6, [r4, #8]
 800483e:	2e00      	cmp	r6, #0
 8004840:	bfa2      	ittt	ge
 8004842:	6821      	ldrge	r1, [r4, #0]
 8004844:	f021 0104 	bicge.w	r1, r1, #4
 8004848:	6021      	strge	r1, [r4, #0]
 800484a:	b90d      	cbnz	r5, 8004850 <_printf_i+0x118>
 800484c:	2e00      	cmp	r6, #0
 800484e:	d04d      	beq.n	80048ec <_printf_i+0x1b4>
 8004850:	4616      	mov	r6, r2
 8004852:	fbb5 f1f3 	udiv	r1, r5, r3
 8004856:	fb03 5711 	mls	r7, r3, r1, r5
 800485a:	5dc7      	ldrb	r7, [r0, r7]
 800485c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004860:	462f      	mov	r7, r5
 8004862:	42bb      	cmp	r3, r7
 8004864:	460d      	mov	r5, r1
 8004866:	d9f4      	bls.n	8004852 <_printf_i+0x11a>
 8004868:	2b08      	cmp	r3, #8
 800486a:	d10b      	bne.n	8004884 <_printf_i+0x14c>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	07df      	lsls	r7, r3, #31
 8004870:	d508      	bpl.n	8004884 <_printf_i+0x14c>
 8004872:	6923      	ldr	r3, [r4, #16]
 8004874:	6861      	ldr	r1, [r4, #4]
 8004876:	4299      	cmp	r1, r3
 8004878:	bfde      	ittt	le
 800487a:	2330      	movle	r3, #48	; 0x30
 800487c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004880:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004884:	1b92      	subs	r2, r2, r6
 8004886:	6122      	str	r2, [r4, #16]
 8004888:	f8cd a000 	str.w	sl, [sp]
 800488c:	464b      	mov	r3, r9
 800488e:	aa03      	add	r2, sp, #12
 8004890:	4621      	mov	r1, r4
 8004892:	4640      	mov	r0, r8
 8004894:	f7ff fee2 	bl	800465c <_printf_common>
 8004898:	3001      	adds	r0, #1
 800489a:	d14c      	bne.n	8004936 <_printf_i+0x1fe>
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	b004      	add	sp, #16
 80048a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a6:	4835      	ldr	r0, [pc, #212]	; (800497c <_printf_i+0x244>)
 80048a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	680e      	ldr	r6, [r1, #0]
 80048b0:	061f      	lsls	r7, r3, #24
 80048b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80048b6:	600e      	str	r6, [r1, #0]
 80048b8:	d514      	bpl.n	80048e4 <_printf_i+0x1ac>
 80048ba:	07d9      	lsls	r1, r3, #31
 80048bc:	bf44      	itt	mi
 80048be:	f043 0320 	orrmi.w	r3, r3, #32
 80048c2:	6023      	strmi	r3, [r4, #0]
 80048c4:	b91d      	cbnz	r5, 80048ce <_printf_i+0x196>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	f023 0320 	bic.w	r3, r3, #32
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	2310      	movs	r3, #16
 80048d0:	e7b0      	b.n	8004834 <_printf_i+0xfc>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	f043 0320 	orr.w	r3, r3, #32
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	2378      	movs	r3, #120	; 0x78
 80048dc:	4828      	ldr	r0, [pc, #160]	; (8004980 <_printf_i+0x248>)
 80048de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048e2:	e7e3      	b.n	80048ac <_printf_i+0x174>
 80048e4:	065e      	lsls	r6, r3, #25
 80048e6:	bf48      	it	mi
 80048e8:	b2ad      	uxthmi	r5, r5
 80048ea:	e7e6      	b.n	80048ba <_printf_i+0x182>
 80048ec:	4616      	mov	r6, r2
 80048ee:	e7bb      	b.n	8004868 <_printf_i+0x130>
 80048f0:	680b      	ldr	r3, [r1, #0]
 80048f2:	6826      	ldr	r6, [r4, #0]
 80048f4:	6960      	ldr	r0, [r4, #20]
 80048f6:	1d1d      	adds	r5, r3, #4
 80048f8:	600d      	str	r5, [r1, #0]
 80048fa:	0635      	lsls	r5, r6, #24
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	d501      	bpl.n	8004904 <_printf_i+0x1cc>
 8004900:	6018      	str	r0, [r3, #0]
 8004902:	e002      	b.n	800490a <_printf_i+0x1d2>
 8004904:	0671      	lsls	r1, r6, #25
 8004906:	d5fb      	bpl.n	8004900 <_printf_i+0x1c8>
 8004908:	8018      	strh	r0, [r3, #0]
 800490a:	2300      	movs	r3, #0
 800490c:	6123      	str	r3, [r4, #16]
 800490e:	4616      	mov	r6, r2
 8004910:	e7ba      	b.n	8004888 <_printf_i+0x150>
 8004912:	680b      	ldr	r3, [r1, #0]
 8004914:	1d1a      	adds	r2, r3, #4
 8004916:	600a      	str	r2, [r1, #0]
 8004918:	681e      	ldr	r6, [r3, #0]
 800491a:	6862      	ldr	r2, [r4, #4]
 800491c:	2100      	movs	r1, #0
 800491e:	4630      	mov	r0, r6
 8004920:	f7fb fc5e 	bl	80001e0 <memchr>
 8004924:	b108      	cbz	r0, 800492a <_printf_i+0x1f2>
 8004926:	1b80      	subs	r0, r0, r6
 8004928:	6060      	str	r0, [r4, #4]
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	6123      	str	r3, [r4, #16]
 800492e:	2300      	movs	r3, #0
 8004930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004934:	e7a8      	b.n	8004888 <_printf_i+0x150>
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	4632      	mov	r2, r6
 800493a:	4649      	mov	r1, r9
 800493c:	4640      	mov	r0, r8
 800493e:	47d0      	blx	sl
 8004940:	3001      	adds	r0, #1
 8004942:	d0ab      	beq.n	800489c <_printf_i+0x164>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	079b      	lsls	r3, r3, #30
 8004948:	d413      	bmi.n	8004972 <_printf_i+0x23a>
 800494a:	68e0      	ldr	r0, [r4, #12]
 800494c:	9b03      	ldr	r3, [sp, #12]
 800494e:	4298      	cmp	r0, r3
 8004950:	bfb8      	it	lt
 8004952:	4618      	movlt	r0, r3
 8004954:	e7a4      	b.n	80048a0 <_printf_i+0x168>
 8004956:	2301      	movs	r3, #1
 8004958:	4632      	mov	r2, r6
 800495a:	4649      	mov	r1, r9
 800495c:	4640      	mov	r0, r8
 800495e:	47d0      	blx	sl
 8004960:	3001      	adds	r0, #1
 8004962:	d09b      	beq.n	800489c <_printf_i+0x164>
 8004964:	3501      	adds	r5, #1
 8004966:	68e3      	ldr	r3, [r4, #12]
 8004968:	9903      	ldr	r1, [sp, #12]
 800496a:	1a5b      	subs	r3, r3, r1
 800496c:	42ab      	cmp	r3, r5
 800496e:	dcf2      	bgt.n	8004956 <_printf_i+0x21e>
 8004970:	e7eb      	b.n	800494a <_printf_i+0x212>
 8004972:	2500      	movs	r5, #0
 8004974:	f104 0619 	add.w	r6, r4, #25
 8004978:	e7f5      	b.n	8004966 <_printf_i+0x22e>
 800497a:	bf00      	nop
 800497c:	08009926 	.word	0x08009926
 8004980:	08009937 	.word	0x08009937

08004984 <_scanf_float>:
 8004984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004988:	b087      	sub	sp, #28
 800498a:	4617      	mov	r7, r2
 800498c:	9303      	str	r3, [sp, #12]
 800498e:	688b      	ldr	r3, [r1, #8]
 8004990:	1e5a      	subs	r2, r3, #1
 8004992:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004996:	bf83      	ittte	hi
 8004998:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800499c:	195b      	addhi	r3, r3, r5
 800499e:	9302      	strhi	r3, [sp, #8]
 80049a0:	2300      	movls	r3, #0
 80049a2:	bf86      	itte	hi
 80049a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80049a8:	608b      	strhi	r3, [r1, #8]
 80049aa:	9302      	strls	r3, [sp, #8]
 80049ac:	680b      	ldr	r3, [r1, #0]
 80049ae:	468b      	mov	fp, r1
 80049b0:	2500      	movs	r5, #0
 80049b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80049b6:	f84b 3b1c 	str.w	r3, [fp], #28
 80049ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80049be:	4680      	mov	r8, r0
 80049c0:	460c      	mov	r4, r1
 80049c2:	465e      	mov	r6, fp
 80049c4:	46aa      	mov	sl, r5
 80049c6:	46a9      	mov	r9, r5
 80049c8:	9501      	str	r5, [sp, #4]
 80049ca:	68a2      	ldr	r2, [r4, #8]
 80049cc:	b152      	cbz	r2, 80049e4 <_scanf_float+0x60>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b4e      	cmp	r3, #78	; 0x4e
 80049d4:	d864      	bhi.n	8004aa0 <_scanf_float+0x11c>
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d83c      	bhi.n	8004a54 <_scanf_float+0xd0>
 80049da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80049de:	b2c8      	uxtb	r0, r1
 80049e0:	280e      	cmp	r0, #14
 80049e2:	d93a      	bls.n	8004a5a <_scanf_float+0xd6>
 80049e4:	f1b9 0f00 	cmp.w	r9, #0
 80049e8:	d003      	beq.n	80049f2 <_scanf_float+0x6e>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049f6:	f1ba 0f01 	cmp.w	sl, #1
 80049fa:	f200 8113 	bhi.w	8004c24 <_scanf_float+0x2a0>
 80049fe:	455e      	cmp	r6, fp
 8004a00:	f200 8105 	bhi.w	8004c0e <_scanf_float+0x28a>
 8004a04:	2501      	movs	r5, #1
 8004a06:	4628      	mov	r0, r5
 8004a08:	b007      	add	sp, #28
 8004a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004a12:	2a0d      	cmp	r2, #13
 8004a14:	d8e6      	bhi.n	80049e4 <_scanf_float+0x60>
 8004a16:	a101      	add	r1, pc, #4	; (adr r1, 8004a1c <_scanf_float+0x98>)
 8004a18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a1c:	08004b5b 	.word	0x08004b5b
 8004a20:	080049e5 	.word	0x080049e5
 8004a24:	080049e5 	.word	0x080049e5
 8004a28:	080049e5 	.word	0x080049e5
 8004a2c:	08004bbb 	.word	0x08004bbb
 8004a30:	08004b93 	.word	0x08004b93
 8004a34:	080049e5 	.word	0x080049e5
 8004a38:	080049e5 	.word	0x080049e5
 8004a3c:	08004b69 	.word	0x08004b69
 8004a40:	080049e5 	.word	0x080049e5
 8004a44:	080049e5 	.word	0x080049e5
 8004a48:	080049e5 	.word	0x080049e5
 8004a4c:	080049e5 	.word	0x080049e5
 8004a50:	08004b21 	.word	0x08004b21
 8004a54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004a58:	e7db      	b.n	8004a12 <_scanf_float+0x8e>
 8004a5a:	290e      	cmp	r1, #14
 8004a5c:	d8c2      	bhi.n	80049e4 <_scanf_float+0x60>
 8004a5e:	a001      	add	r0, pc, #4	; (adr r0, 8004a64 <_scanf_float+0xe0>)
 8004a60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a64:	08004b13 	.word	0x08004b13
 8004a68:	080049e5 	.word	0x080049e5
 8004a6c:	08004b13 	.word	0x08004b13
 8004a70:	08004ba7 	.word	0x08004ba7
 8004a74:	080049e5 	.word	0x080049e5
 8004a78:	08004ac1 	.word	0x08004ac1
 8004a7c:	08004afd 	.word	0x08004afd
 8004a80:	08004afd 	.word	0x08004afd
 8004a84:	08004afd 	.word	0x08004afd
 8004a88:	08004afd 	.word	0x08004afd
 8004a8c:	08004afd 	.word	0x08004afd
 8004a90:	08004afd 	.word	0x08004afd
 8004a94:	08004afd 	.word	0x08004afd
 8004a98:	08004afd 	.word	0x08004afd
 8004a9c:	08004afd 	.word	0x08004afd
 8004aa0:	2b6e      	cmp	r3, #110	; 0x6e
 8004aa2:	d809      	bhi.n	8004ab8 <_scanf_float+0x134>
 8004aa4:	2b60      	cmp	r3, #96	; 0x60
 8004aa6:	d8b2      	bhi.n	8004a0e <_scanf_float+0x8a>
 8004aa8:	2b54      	cmp	r3, #84	; 0x54
 8004aaa:	d077      	beq.n	8004b9c <_scanf_float+0x218>
 8004aac:	2b59      	cmp	r3, #89	; 0x59
 8004aae:	d199      	bne.n	80049e4 <_scanf_float+0x60>
 8004ab0:	2d07      	cmp	r5, #7
 8004ab2:	d197      	bne.n	80049e4 <_scanf_float+0x60>
 8004ab4:	2508      	movs	r5, #8
 8004ab6:	e029      	b.n	8004b0c <_scanf_float+0x188>
 8004ab8:	2b74      	cmp	r3, #116	; 0x74
 8004aba:	d06f      	beq.n	8004b9c <_scanf_float+0x218>
 8004abc:	2b79      	cmp	r3, #121	; 0x79
 8004abe:	e7f6      	b.n	8004aae <_scanf_float+0x12a>
 8004ac0:	6821      	ldr	r1, [r4, #0]
 8004ac2:	05c8      	lsls	r0, r1, #23
 8004ac4:	d51a      	bpl.n	8004afc <_scanf_float+0x178>
 8004ac6:	9b02      	ldr	r3, [sp, #8]
 8004ac8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004acc:	6021      	str	r1, [r4, #0]
 8004ace:	f109 0901 	add.w	r9, r9, #1
 8004ad2:	b11b      	cbz	r3, 8004adc <_scanf_float+0x158>
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	3201      	adds	r2, #1
 8004ad8:	9302      	str	r3, [sp, #8]
 8004ada:	60a2      	str	r2, [r4, #8]
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	60a3      	str	r3, [r4, #8]
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	6123      	str	r3, [r4, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	607b      	str	r3, [r7, #4]
 8004af0:	f340 8084 	ble.w	8004bfc <_scanf_float+0x278>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	3301      	adds	r3, #1
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	e766      	b.n	80049ca <_scanf_float+0x46>
 8004afc:	eb1a 0f05 	cmn.w	sl, r5
 8004b00:	f47f af70 	bne.w	80049e4 <_scanf_float+0x60>
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004b0a:	6022      	str	r2, [r4, #0]
 8004b0c:	f806 3b01 	strb.w	r3, [r6], #1
 8004b10:	e7e4      	b.n	8004adc <_scanf_float+0x158>
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	0610      	lsls	r0, r2, #24
 8004b16:	f57f af65 	bpl.w	80049e4 <_scanf_float+0x60>
 8004b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b1e:	e7f4      	b.n	8004b0a <_scanf_float+0x186>
 8004b20:	f1ba 0f00 	cmp.w	sl, #0
 8004b24:	d10e      	bne.n	8004b44 <_scanf_float+0x1c0>
 8004b26:	f1b9 0f00 	cmp.w	r9, #0
 8004b2a:	d10e      	bne.n	8004b4a <_scanf_float+0x1c6>
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b36:	d108      	bne.n	8004b4a <_scanf_float+0x1c6>
 8004b38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b3c:	6022      	str	r2, [r4, #0]
 8004b3e:	f04f 0a01 	mov.w	sl, #1
 8004b42:	e7e3      	b.n	8004b0c <_scanf_float+0x188>
 8004b44:	f1ba 0f02 	cmp.w	sl, #2
 8004b48:	d055      	beq.n	8004bf6 <_scanf_float+0x272>
 8004b4a:	2d01      	cmp	r5, #1
 8004b4c:	d002      	beq.n	8004b54 <_scanf_float+0x1d0>
 8004b4e:	2d04      	cmp	r5, #4
 8004b50:	f47f af48 	bne.w	80049e4 <_scanf_float+0x60>
 8004b54:	3501      	adds	r5, #1
 8004b56:	b2ed      	uxtb	r5, r5
 8004b58:	e7d8      	b.n	8004b0c <_scanf_float+0x188>
 8004b5a:	f1ba 0f01 	cmp.w	sl, #1
 8004b5e:	f47f af41 	bne.w	80049e4 <_scanf_float+0x60>
 8004b62:	f04f 0a02 	mov.w	sl, #2
 8004b66:	e7d1      	b.n	8004b0c <_scanf_float+0x188>
 8004b68:	b97d      	cbnz	r5, 8004b8a <_scanf_float+0x206>
 8004b6a:	f1b9 0f00 	cmp.w	r9, #0
 8004b6e:	f47f af3c 	bne.w	80049ea <_scanf_float+0x66>
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b7c:	f47f af39 	bne.w	80049f2 <_scanf_float+0x6e>
 8004b80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b84:	6022      	str	r2, [r4, #0]
 8004b86:	2501      	movs	r5, #1
 8004b88:	e7c0      	b.n	8004b0c <_scanf_float+0x188>
 8004b8a:	2d03      	cmp	r5, #3
 8004b8c:	d0e2      	beq.n	8004b54 <_scanf_float+0x1d0>
 8004b8e:	2d05      	cmp	r5, #5
 8004b90:	e7de      	b.n	8004b50 <_scanf_float+0x1cc>
 8004b92:	2d02      	cmp	r5, #2
 8004b94:	f47f af26 	bne.w	80049e4 <_scanf_float+0x60>
 8004b98:	2503      	movs	r5, #3
 8004b9a:	e7b7      	b.n	8004b0c <_scanf_float+0x188>
 8004b9c:	2d06      	cmp	r5, #6
 8004b9e:	f47f af21 	bne.w	80049e4 <_scanf_float+0x60>
 8004ba2:	2507      	movs	r5, #7
 8004ba4:	e7b2      	b.n	8004b0c <_scanf_float+0x188>
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	0591      	lsls	r1, r2, #22
 8004baa:	f57f af1b 	bpl.w	80049e4 <_scanf_float+0x60>
 8004bae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004bb2:	6022      	str	r2, [r4, #0]
 8004bb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004bb8:	e7a8      	b.n	8004b0c <_scanf_float+0x188>
 8004bba:	6822      	ldr	r2, [r4, #0]
 8004bbc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004bc0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004bc4:	d006      	beq.n	8004bd4 <_scanf_float+0x250>
 8004bc6:	0550      	lsls	r0, r2, #21
 8004bc8:	f57f af0c 	bpl.w	80049e4 <_scanf_float+0x60>
 8004bcc:	f1b9 0f00 	cmp.w	r9, #0
 8004bd0:	f43f af0f 	beq.w	80049f2 <_scanf_float+0x6e>
 8004bd4:	0591      	lsls	r1, r2, #22
 8004bd6:	bf58      	it	pl
 8004bd8:	9901      	ldrpl	r1, [sp, #4]
 8004bda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004bde:	bf58      	it	pl
 8004be0:	eba9 0101 	subpl.w	r1, r9, r1
 8004be4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004be8:	bf58      	it	pl
 8004bea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004bee:	6022      	str	r2, [r4, #0]
 8004bf0:	f04f 0900 	mov.w	r9, #0
 8004bf4:	e78a      	b.n	8004b0c <_scanf_float+0x188>
 8004bf6:	f04f 0a03 	mov.w	sl, #3
 8004bfa:	e787      	b.n	8004b0c <_scanf_float+0x188>
 8004bfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004c00:	4639      	mov	r1, r7
 8004c02:	4640      	mov	r0, r8
 8004c04:	4798      	blx	r3
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f43f aedf 	beq.w	80049ca <_scanf_float+0x46>
 8004c0c:	e6ea      	b.n	80049e4 <_scanf_float+0x60>
 8004c0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c16:	463a      	mov	r2, r7
 8004c18:	4640      	mov	r0, r8
 8004c1a:	4798      	blx	r3
 8004c1c:	6923      	ldr	r3, [r4, #16]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	6123      	str	r3, [r4, #16]
 8004c22:	e6ec      	b.n	80049fe <_scanf_float+0x7a>
 8004c24:	1e6b      	subs	r3, r5, #1
 8004c26:	2b06      	cmp	r3, #6
 8004c28:	d825      	bhi.n	8004c76 <_scanf_float+0x2f2>
 8004c2a:	2d02      	cmp	r5, #2
 8004c2c:	d836      	bhi.n	8004c9c <_scanf_float+0x318>
 8004c2e:	455e      	cmp	r6, fp
 8004c30:	f67f aee8 	bls.w	8004a04 <_scanf_float+0x80>
 8004c34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c3c:	463a      	mov	r2, r7
 8004c3e:	4640      	mov	r0, r8
 8004c40:	4798      	blx	r3
 8004c42:	6923      	ldr	r3, [r4, #16]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	6123      	str	r3, [r4, #16]
 8004c48:	e7f1      	b.n	8004c2e <_scanf_float+0x2aa>
 8004c4a:	9802      	ldr	r0, [sp, #8]
 8004c4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004c54:	9002      	str	r0, [sp, #8]
 8004c56:	463a      	mov	r2, r7
 8004c58:	4640      	mov	r0, r8
 8004c5a:	4798      	blx	r3
 8004c5c:	6923      	ldr	r3, [r4, #16]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	6123      	str	r3, [r4, #16]
 8004c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c66:	fa5f fa8a 	uxtb.w	sl, sl
 8004c6a:	f1ba 0f02 	cmp.w	sl, #2
 8004c6e:	d1ec      	bne.n	8004c4a <_scanf_float+0x2c6>
 8004c70:	3d03      	subs	r5, #3
 8004c72:	b2ed      	uxtb	r5, r5
 8004c74:	1b76      	subs	r6, r6, r5
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	05da      	lsls	r2, r3, #23
 8004c7a:	d52f      	bpl.n	8004cdc <_scanf_float+0x358>
 8004c7c:	055b      	lsls	r3, r3, #21
 8004c7e:	d510      	bpl.n	8004ca2 <_scanf_float+0x31e>
 8004c80:	455e      	cmp	r6, fp
 8004c82:	f67f aebf 	bls.w	8004a04 <_scanf_float+0x80>
 8004c86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c8e:	463a      	mov	r2, r7
 8004c90:	4640      	mov	r0, r8
 8004c92:	4798      	blx	r3
 8004c94:	6923      	ldr	r3, [r4, #16]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	6123      	str	r3, [r4, #16]
 8004c9a:	e7f1      	b.n	8004c80 <_scanf_float+0x2fc>
 8004c9c:	46aa      	mov	sl, r5
 8004c9e:	9602      	str	r6, [sp, #8]
 8004ca0:	e7df      	b.n	8004c62 <_scanf_float+0x2de>
 8004ca2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	2965      	cmp	r1, #101	; 0x65
 8004caa:	f103 33ff 	add.w	r3, r3, #4294967295
 8004cae:	f106 35ff 	add.w	r5, r6, #4294967295
 8004cb2:	6123      	str	r3, [r4, #16]
 8004cb4:	d00c      	beq.n	8004cd0 <_scanf_float+0x34c>
 8004cb6:	2945      	cmp	r1, #69	; 0x45
 8004cb8:	d00a      	beq.n	8004cd0 <_scanf_float+0x34c>
 8004cba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cbe:	463a      	mov	r2, r7
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	4798      	blx	r3
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	1eb5      	subs	r5, r6, #2
 8004cce:	6123      	str	r3, [r4, #16]
 8004cd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cd4:	463a      	mov	r2, r7
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	4798      	blx	r3
 8004cda:	462e      	mov	r6, r5
 8004cdc:	6825      	ldr	r5, [r4, #0]
 8004cde:	f015 0510 	ands.w	r5, r5, #16
 8004ce2:	d158      	bne.n	8004d96 <_scanf_float+0x412>
 8004ce4:	7035      	strb	r5, [r6, #0]
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf0:	d11c      	bne.n	8004d2c <_scanf_float+0x3a8>
 8004cf2:	9b01      	ldr	r3, [sp, #4]
 8004cf4:	454b      	cmp	r3, r9
 8004cf6:	eba3 0209 	sub.w	r2, r3, r9
 8004cfa:	d124      	bne.n	8004d46 <_scanf_float+0x3c2>
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4659      	mov	r1, fp
 8004d00:	4640      	mov	r0, r8
 8004d02:	f000 fe9b 	bl	8005a3c <_strtod_r>
 8004d06:	9b03      	ldr	r3, [sp, #12]
 8004d08:	6821      	ldr	r1, [r4, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f011 0f02 	tst.w	r1, #2
 8004d10:	ec57 6b10 	vmov	r6, r7, d0
 8004d14:	f103 0204 	add.w	r2, r3, #4
 8004d18:	d020      	beq.n	8004d5c <_scanf_float+0x3d8>
 8004d1a:	9903      	ldr	r1, [sp, #12]
 8004d1c:	600a      	str	r2, [r1, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	e9c3 6700 	strd	r6, r7, [r3]
 8004d24:	68e3      	ldr	r3, [r4, #12]
 8004d26:	3301      	adds	r3, #1
 8004d28:	60e3      	str	r3, [r4, #12]
 8004d2a:	e66c      	b.n	8004a06 <_scanf_float+0x82>
 8004d2c:	9b04      	ldr	r3, [sp, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0e4      	beq.n	8004cfc <_scanf_float+0x378>
 8004d32:	9905      	ldr	r1, [sp, #20]
 8004d34:	230a      	movs	r3, #10
 8004d36:	462a      	mov	r2, r5
 8004d38:	3101      	adds	r1, #1
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f000 ff08 	bl	8005b50 <_strtol_r>
 8004d40:	9b04      	ldr	r3, [sp, #16]
 8004d42:	9e05      	ldr	r6, [sp, #20]
 8004d44:	1ac2      	subs	r2, r0, r3
 8004d46:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004d4a:	429e      	cmp	r6, r3
 8004d4c:	bf28      	it	cs
 8004d4e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004d52:	4912      	ldr	r1, [pc, #72]	; (8004d9c <_scanf_float+0x418>)
 8004d54:	4630      	mov	r0, r6
 8004d56:	f000 f82b 	bl	8004db0 <siprintf>
 8004d5a:	e7cf      	b.n	8004cfc <_scanf_float+0x378>
 8004d5c:	f011 0f04 	tst.w	r1, #4
 8004d60:	9903      	ldr	r1, [sp, #12]
 8004d62:	600a      	str	r2, [r1, #0]
 8004d64:	d1db      	bne.n	8004d1e <_scanf_float+0x39a>
 8004d66:	f8d3 8000 	ldr.w	r8, [r3]
 8004d6a:	ee10 2a10 	vmov	r2, s0
 8004d6e:	ee10 0a10 	vmov	r0, s0
 8004d72:	463b      	mov	r3, r7
 8004d74:	4639      	mov	r1, r7
 8004d76:	f7fb fed9 	bl	8000b2c <__aeabi_dcmpun>
 8004d7a:	b128      	cbz	r0, 8004d88 <_scanf_float+0x404>
 8004d7c:	4808      	ldr	r0, [pc, #32]	; (8004da0 <_scanf_float+0x41c>)
 8004d7e:	f000 f811 	bl	8004da4 <nanf>
 8004d82:	ed88 0a00 	vstr	s0, [r8]
 8004d86:	e7cd      	b.n	8004d24 <_scanf_float+0x3a0>
 8004d88:	4630      	mov	r0, r6
 8004d8a:	4639      	mov	r1, r7
 8004d8c:	f7fb ff2c 	bl	8000be8 <__aeabi_d2f>
 8004d90:	f8c8 0000 	str.w	r0, [r8]
 8004d94:	e7c6      	b.n	8004d24 <_scanf_float+0x3a0>
 8004d96:	2500      	movs	r5, #0
 8004d98:	e635      	b.n	8004a06 <_scanf_float+0x82>
 8004d9a:	bf00      	nop
 8004d9c:	08009948 	.word	0x08009948
 8004da0:	08009d60 	.word	0x08009d60

08004da4 <nanf>:
 8004da4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004dac <nanf+0x8>
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	7fc00000 	.word	0x7fc00000

08004db0 <siprintf>:
 8004db0:	b40e      	push	{r1, r2, r3}
 8004db2:	b500      	push	{lr}
 8004db4:	b09c      	sub	sp, #112	; 0x70
 8004db6:	ab1d      	add	r3, sp, #116	; 0x74
 8004db8:	9002      	str	r0, [sp, #8]
 8004dba:	9006      	str	r0, [sp, #24]
 8004dbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dc0:	4809      	ldr	r0, [pc, #36]	; (8004de8 <siprintf+0x38>)
 8004dc2:	9107      	str	r1, [sp, #28]
 8004dc4:	9104      	str	r1, [sp, #16]
 8004dc6:	4909      	ldr	r1, [pc, #36]	; (8004dec <siprintf+0x3c>)
 8004dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dcc:	9105      	str	r1, [sp, #20]
 8004dce:	6800      	ldr	r0, [r0, #0]
 8004dd0:	9301      	str	r3, [sp, #4]
 8004dd2:	a902      	add	r1, sp, #8
 8004dd4:	f002 fea4 	bl	8007b20 <_svfiprintf_r>
 8004dd8:	9b02      	ldr	r3, [sp, #8]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	b01c      	add	sp, #112	; 0x70
 8004de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004de4:	b003      	add	sp, #12
 8004de6:	4770      	bx	lr
 8004de8:	20000008 	.word	0x20000008
 8004dec:	ffff0208 	.word	0xffff0208

08004df0 <sulp>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	4604      	mov	r4, r0
 8004df4:	460d      	mov	r5, r1
 8004df6:	ec45 4b10 	vmov	d0, r4, r5
 8004dfa:	4616      	mov	r6, r2
 8004dfc:	f002 fc2c 	bl	8007658 <__ulp>
 8004e00:	ec51 0b10 	vmov	r0, r1, d0
 8004e04:	b17e      	cbz	r6, 8004e26 <sulp+0x36>
 8004e06:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004e0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	dd09      	ble.n	8004e26 <sulp+0x36>
 8004e12:	051b      	lsls	r3, r3, #20
 8004e14:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004e18:	2400      	movs	r4, #0
 8004e1a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004e1e:	4622      	mov	r2, r4
 8004e20:	462b      	mov	r3, r5
 8004e22:	f7fb fbe9 	bl	80005f8 <__aeabi_dmul>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}

08004e28 <_strtod_l>:
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	b0a3      	sub	sp, #140	; 0x8c
 8004e2e:	461f      	mov	r7, r3
 8004e30:	2300      	movs	r3, #0
 8004e32:	931e      	str	r3, [sp, #120]	; 0x78
 8004e34:	4ba4      	ldr	r3, [pc, #656]	; (80050c8 <_strtod_l+0x2a0>)
 8004e36:	9219      	str	r2, [sp, #100]	; 0x64
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	9307      	str	r3, [sp, #28]
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	4688      	mov	r8, r1
 8004e42:	f7fb f9c5 	bl	80001d0 <strlen>
 8004e46:	f04f 0a00 	mov.w	sl, #0
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	f04f 0b00 	mov.w	fp, #0
 8004e50:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004e54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e56:	781a      	ldrb	r2, [r3, #0]
 8004e58:	2a2b      	cmp	r2, #43	; 0x2b
 8004e5a:	d04c      	beq.n	8004ef6 <_strtod_l+0xce>
 8004e5c:	d839      	bhi.n	8004ed2 <_strtod_l+0xaa>
 8004e5e:	2a0d      	cmp	r2, #13
 8004e60:	d832      	bhi.n	8004ec8 <_strtod_l+0xa0>
 8004e62:	2a08      	cmp	r2, #8
 8004e64:	d832      	bhi.n	8004ecc <_strtod_l+0xa4>
 8004e66:	2a00      	cmp	r2, #0
 8004e68:	d03c      	beq.n	8004ee4 <_strtod_l+0xbc>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	930e      	str	r3, [sp, #56]	; 0x38
 8004e6e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004e70:	7833      	ldrb	r3, [r6, #0]
 8004e72:	2b30      	cmp	r3, #48	; 0x30
 8004e74:	f040 80b4 	bne.w	8004fe0 <_strtod_l+0x1b8>
 8004e78:	7873      	ldrb	r3, [r6, #1]
 8004e7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004e7e:	2b58      	cmp	r3, #88	; 0x58
 8004e80:	d16c      	bne.n	8004f5c <_strtod_l+0x134>
 8004e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	ab1e      	add	r3, sp, #120	; 0x78
 8004e88:	9702      	str	r7, [sp, #8]
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	4a8f      	ldr	r2, [pc, #572]	; (80050cc <_strtod_l+0x2a4>)
 8004e8e:	ab1f      	add	r3, sp, #124	; 0x7c
 8004e90:	a91d      	add	r1, sp, #116	; 0x74
 8004e92:	4620      	mov	r0, r4
 8004e94:	f001 fd40 	bl	8006918 <__gethex>
 8004e98:	f010 0707 	ands.w	r7, r0, #7
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	d005      	beq.n	8004eac <_strtod_l+0x84>
 8004ea0:	2f06      	cmp	r7, #6
 8004ea2:	d12a      	bne.n	8004efa <_strtod_l+0xd2>
 8004ea4:	3601      	adds	r6, #1
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	961d      	str	r6, [sp, #116]	; 0x74
 8004eaa:	930e      	str	r3, [sp, #56]	; 0x38
 8004eac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f040 8596 	bne.w	80059e0 <_strtod_l+0xbb8>
 8004eb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eb6:	b1db      	cbz	r3, 8004ef0 <_strtod_l+0xc8>
 8004eb8:	4652      	mov	r2, sl
 8004eba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004ebe:	ec43 2b10 	vmov	d0, r2, r3
 8004ec2:	b023      	add	sp, #140	; 0x8c
 8004ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec8:	2a20      	cmp	r2, #32
 8004eca:	d1ce      	bne.n	8004e6a <_strtod_l+0x42>
 8004ecc:	3301      	adds	r3, #1
 8004ece:	931d      	str	r3, [sp, #116]	; 0x74
 8004ed0:	e7c0      	b.n	8004e54 <_strtod_l+0x2c>
 8004ed2:	2a2d      	cmp	r2, #45	; 0x2d
 8004ed4:	d1c9      	bne.n	8004e6a <_strtod_l+0x42>
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	920e      	str	r2, [sp, #56]	; 0x38
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	921d      	str	r2, [sp, #116]	; 0x74
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1c4      	bne.n	8004e6e <_strtod_l+0x46>
 8004ee4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ee6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f040 8576 	bne.w	80059dc <_strtod_l+0xbb4>
 8004ef0:	4652      	mov	r2, sl
 8004ef2:	465b      	mov	r3, fp
 8004ef4:	e7e3      	b.n	8004ebe <_strtod_l+0x96>
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	e7ee      	b.n	8004ed8 <_strtod_l+0xb0>
 8004efa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004efc:	b13a      	cbz	r2, 8004f0e <_strtod_l+0xe6>
 8004efe:	2135      	movs	r1, #53	; 0x35
 8004f00:	a820      	add	r0, sp, #128	; 0x80
 8004f02:	f002 fcb4 	bl	800786e <__copybits>
 8004f06:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f002 f879 	bl	8007000 <_Bfree>
 8004f0e:	3f01      	subs	r7, #1
 8004f10:	2f05      	cmp	r7, #5
 8004f12:	d807      	bhi.n	8004f24 <_strtod_l+0xfc>
 8004f14:	e8df f007 	tbb	[pc, r7]
 8004f18:	1d180b0e 	.word	0x1d180b0e
 8004f1c:	030e      	.short	0x030e
 8004f1e:	f04f 0b00 	mov.w	fp, #0
 8004f22:	46da      	mov	sl, fp
 8004f24:	0728      	lsls	r0, r5, #28
 8004f26:	d5c1      	bpl.n	8004eac <_strtod_l+0x84>
 8004f28:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004f2c:	e7be      	b.n	8004eac <_strtod_l+0x84>
 8004f2e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8004f32:	e7f7      	b.n	8004f24 <_strtod_l+0xfc>
 8004f34:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004f38:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004f3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004f42:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004f46:	e7ed      	b.n	8004f24 <_strtod_l+0xfc>
 8004f48:	f8df b184 	ldr.w	fp, [pc, #388]	; 80050d0 <_strtod_l+0x2a8>
 8004f4c:	f04f 0a00 	mov.w	sl, #0
 8004f50:	e7e8      	b.n	8004f24 <_strtod_l+0xfc>
 8004f52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004f56:	f04f 3aff 	mov.w	sl, #4294967295
 8004f5a:	e7e3      	b.n	8004f24 <_strtod_l+0xfc>
 8004f5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	921d      	str	r2, [sp, #116]	; 0x74
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	2b30      	cmp	r3, #48	; 0x30
 8004f66:	d0f9      	beq.n	8004f5c <_strtod_l+0x134>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d09f      	beq.n	8004eac <_strtod_l+0x84>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f04f 0900 	mov.w	r9, #0
 8004f72:	9304      	str	r3, [sp, #16]
 8004f74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f76:	930a      	str	r3, [sp, #40]	; 0x28
 8004f78:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004f7c:	464f      	mov	r7, r9
 8004f7e:	220a      	movs	r2, #10
 8004f80:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004f82:	7806      	ldrb	r6, [r0, #0]
 8004f84:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004f88:	b2d9      	uxtb	r1, r3
 8004f8a:	2909      	cmp	r1, #9
 8004f8c:	d92a      	bls.n	8004fe4 <_strtod_l+0x1bc>
 8004f8e:	9907      	ldr	r1, [sp, #28]
 8004f90:	462a      	mov	r2, r5
 8004f92:	f002 fedd 	bl	8007d50 <strncmp>
 8004f96:	b398      	cbz	r0, 8005000 <_strtod_l+0x1d8>
 8004f98:	2000      	movs	r0, #0
 8004f9a:	4633      	mov	r3, r6
 8004f9c:	463d      	mov	r5, r7
 8004f9e:	9007      	str	r0, [sp, #28]
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	2b65      	cmp	r3, #101	; 0x65
 8004fa4:	d001      	beq.n	8004faa <_strtod_l+0x182>
 8004fa6:	2b45      	cmp	r3, #69	; 0x45
 8004fa8:	d118      	bne.n	8004fdc <_strtod_l+0x1b4>
 8004faa:	b91d      	cbnz	r5, 8004fb4 <_strtod_l+0x18c>
 8004fac:	9b04      	ldr	r3, [sp, #16]
 8004fae:	4303      	orrs	r3, r0
 8004fb0:	d098      	beq.n	8004ee4 <_strtod_l+0xbc>
 8004fb2:	2500      	movs	r5, #0
 8004fb4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004fb8:	f108 0301 	add.w	r3, r8, #1
 8004fbc:	931d      	str	r3, [sp, #116]	; 0x74
 8004fbe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004fc2:	2b2b      	cmp	r3, #43	; 0x2b
 8004fc4:	d075      	beq.n	80050b2 <_strtod_l+0x28a>
 8004fc6:	2b2d      	cmp	r3, #45	; 0x2d
 8004fc8:	d07b      	beq.n	80050c2 <_strtod_l+0x29a>
 8004fca:	f04f 0c00 	mov.w	ip, #0
 8004fce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004fd2:	2909      	cmp	r1, #9
 8004fd4:	f240 8082 	bls.w	80050dc <_strtod_l+0x2b4>
 8004fd8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004fdc:	2600      	movs	r6, #0
 8004fde:	e09d      	b.n	800511c <_strtod_l+0x2f4>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e7c4      	b.n	8004f6e <_strtod_l+0x146>
 8004fe4:	2f08      	cmp	r7, #8
 8004fe6:	bfd8      	it	le
 8004fe8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004fea:	f100 0001 	add.w	r0, r0, #1
 8004fee:	bfda      	itte	le
 8004ff0:	fb02 3301 	mlale	r3, r2, r1, r3
 8004ff4:	9309      	strle	r3, [sp, #36]	; 0x24
 8004ff6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004ffa:	3701      	adds	r7, #1
 8004ffc:	901d      	str	r0, [sp, #116]	; 0x74
 8004ffe:	e7bf      	b.n	8004f80 <_strtod_l+0x158>
 8005000:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005002:	195a      	adds	r2, r3, r5
 8005004:	921d      	str	r2, [sp, #116]	; 0x74
 8005006:	5d5b      	ldrb	r3, [r3, r5]
 8005008:	2f00      	cmp	r7, #0
 800500a:	d037      	beq.n	800507c <_strtod_l+0x254>
 800500c:	9007      	str	r0, [sp, #28]
 800500e:	463d      	mov	r5, r7
 8005010:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005014:	2a09      	cmp	r2, #9
 8005016:	d912      	bls.n	800503e <_strtod_l+0x216>
 8005018:	2201      	movs	r2, #1
 800501a:	e7c2      	b.n	8004fa2 <_strtod_l+0x17a>
 800501c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	921d      	str	r2, [sp, #116]	; 0x74
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	3001      	adds	r0, #1
 8005026:	2b30      	cmp	r3, #48	; 0x30
 8005028:	d0f8      	beq.n	800501c <_strtod_l+0x1f4>
 800502a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800502e:	2a08      	cmp	r2, #8
 8005030:	f200 84db 	bhi.w	80059ea <_strtod_l+0xbc2>
 8005034:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005036:	9007      	str	r0, [sp, #28]
 8005038:	2000      	movs	r0, #0
 800503a:	920a      	str	r2, [sp, #40]	; 0x28
 800503c:	4605      	mov	r5, r0
 800503e:	3b30      	subs	r3, #48	; 0x30
 8005040:	f100 0201 	add.w	r2, r0, #1
 8005044:	d014      	beq.n	8005070 <_strtod_l+0x248>
 8005046:	9907      	ldr	r1, [sp, #28]
 8005048:	4411      	add	r1, r2
 800504a:	9107      	str	r1, [sp, #28]
 800504c:	462a      	mov	r2, r5
 800504e:	eb00 0e05 	add.w	lr, r0, r5
 8005052:	210a      	movs	r1, #10
 8005054:	4572      	cmp	r2, lr
 8005056:	d113      	bne.n	8005080 <_strtod_l+0x258>
 8005058:	182a      	adds	r2, r5, r0
 800505a:	2a08      	cmp	r2, #8
 800505c:	f105 0501 	add.w	r5, r5, #1
 8005060:	4405      	add	r5, r0
 8005062:	dc1c      	bgt.n	800509e <_strtod_l+0x276>
 8005064:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005066:	220a      	movs	r2, #10
 8005068:	fb02 3301 	mla	r3, r2, r1, r3
 800506c:	9309      	str	r3, [sp, #36]	; 0x24
 800506e:	2200      	movs	r2, #0
 8005070:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005072:	1c59      	adds	r1, r3, #1
 8005074:	911d      	str	r1, [sp, #116]	; 0x74
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	4610      	mov	r0, r2
 800507a:	e7c9      	b.n	8005010 <_strtod_l+0x1e8>
 800507c:	4638      	mov	r0, r7
 800507e:	e7d2      	b.n	8005026 <_strtod_l+0x1fe>
 8005080:	2a08      	cmp	r2, #8
 8005082:	dc04      	bgt.n	800508e <_strtod_l+0x266>
 8005084:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005086:	434e      	muls	r6, r1
 8005088:	9609      	str	r6, [sp, #36]	; 0x24
 800508a:	3201      	adds	r2, #1
 800508c:	e7e2      	b.n	8005054 <_strtod_l+0x22c>
 800508e:	f102 0c01 	add.w	ip, r2, #1
 8005092:	f1bc 0f10 	cmp.w	ip, #16
 8005096:	bfd8      	it	le
 8005098:	fb01 f909 	mulle.w	r9, r1, r9
 800509c:	e7f5      	b.n	800508a <_strtod_l+0x262>
 800509e:	2d10      	cmp	r5, #16
 80050a0:	bfdc      	itt	le
 80050a2:	220a      	movle	r2, #10
 80050a4:	fb02 3909 	mlale	r9, r2, r9, r3
 80050a8:	e7e1      	b.n	800506e <_strtod_l+0x246>
 80050aa:	2300      	movs	r3, #0
 80050ac:	9307      	str	r3, [sp, #28]
 80050ae:	2201      	movs	r2, #1
 80050b0:	e77c      	b.n	8004fac <_strtod_l+0x184>
 80050b2:	f04f 0c00 	mov.w	ip, #0
 80050b6:	f108 0302 	add.w	r3, r8, #2
 80050ba:	931d      	str	r3, [sp, #116]	; 0x74
 80050bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80050c0:	e785      	b.n	8004fce <_strtod_l+0x1a6>
 80050c2:	f04f 0c01 	mov.w	ip, #1
 80050c6:	e7f6      	b.n	80050b6 <_strtod_l+0x28e>
 80050c8:	08009ba0 	.word	0x08009ba0
 80050cc:	08009950 	.word	0x08009950
 80050d0:	7ff00000 	.word	0x7ff00000
 80050d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80050d6:	1c59      	adds	r1, r3, #1
 80050d8:	911d      	str	r1, [sp, #116]	; 0x74
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	d0f9      	beq.n	80050d4 <_strtod_l+0x2ac>
 80050e0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80050e4:	2908      	cmp	r1, #8
 80050e6:	f63f af79 	bhi.w	8004fdc <_strtod_l+0x1b4>
 80050ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80050ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80050f0:	9308      	str	r3, [sp, #32]
 80050f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80050f4:	1c59      	adds	r1, r3, #1
 80050f6:	911d      	str	r1, [sp, #116]	; 0x74
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80050fe:	2e09      	cmp	r6, #9
 8005100:	d937      	bls.n	8005172 <_strtod_l+0x34a>
 8005102:	9e08      	ldr	r6, [sp, #32]
 8005104:	1b89      	subs	r1, r1, r6
 8005106:	2908      	cmp	r1, #8
 8005108:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800510c:	dc02      	bgt.n	8005114 <_strtod_l+0x2ec>
 800510e:	4576      	cmp	r6, lr
 8005110:	bfa8      	it	ge
 8005112:	4676      	movge	r6, lr
 8005114:	f1bc 0f00 	cmp.w	ip, #0
 8005118:	d000      	beq.n	800511c <_strtod_l+0x2f4>
 800511a:	4276      	negs	r6, r6
 800511c:	2d00      	cmp	r5, #0
 800511e:	d14f      	bne.n	80051c0 <_strtod_l+0x398>
 8005120:	9904      	ldr	r1, [sp, #16]
 8005122:	4301      	orrs	r1, r0
 8005124:	f47f aec2 	bne.w	8004eac <_strtod_l+0x84>
 8005128:	2a00      	cmp	r2, #0
 800512a:	f47f aedb 	bne.w	8004ee4 <_strtod_l+0xbc>
 800512e:	2b69      	cmp	r3, #105	; 0x69
 8005130:	d027      	beq.n	8005182 <_strtod_l+0x35a>
 8005132:	dc24      	bgt.n	800517e <_strtod_l+0x356>
 8005134:	2b49      	cmp	r3, #73	; 0x49
 8005136:	d024      	beq.n	8005182 <_strtod_l+0x35a>
 8005138:	2b4e      	cmp	r3, #78	; 0x4e
 800513a:	f47f aed3 	bne.w	8004ee4 <_strtod_l+0xbc>
 800513e:	499e      	ldr	r1, [pc, #632]	; (80053b8 <_strtod_l+0x590>)
 8005140:	a81d      	add	r0, sp, #116	; 0x74
 8005142:	f001 fe41 	bl	8006dc8 <__match>
 8005146:	2800      	cmp	r0, #0
 8005148:	f43f aecc 	beq.w	8004ee4 <_strtod_l+0xbc>
 800514c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b28      	cmp	r3, #40	; 0x28
 8005152:	d12d      	bne.n	80051b0 <_strtod_l+0x388>
 8005154:	4999      	ldr	r1, [pc, #612]	; (80053bc <_strtod_l+0x594>)
 8005156:	aa20      	add	r2, sp, #128	; 0x80
 8005158:	a81d      	add	r0, sp, #116	; 0x74
 800515a:	f001 fe49 	bl	8006df0 <__hexnan>
 800515e:	2805      	cmp	r0, #5
 8005160:	d126      	bne.n	80051b0 <_strtod_l+0x388>
 8005162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005164:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005168:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800516c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005170:	e69c      	b.n	8004eac <_strtod_l+0x84>
 8005172:	210a      	movs	r1, #10
 8005174:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005178:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800517c:	e7b9      	b.n	80050f2 <_strtod_l+0x2ca>
 800517e:	2b6e      	cmp	r3, #110	; 0x6e
 8005180:	e7db      	b.n	800513a <_strtod_l+0x312>
 8005182:	498f      	ldr	r1, [pc, #572]	; (80053c0 <_strtod_l+0x598>)
 8005184:	a81d      	add	r0, sp, #116	; 0x74
 8005186:	f001 fe1f 	bl	8006dc8 <__match>
 800518a:	2800      	cmp	r0, #0
 800518c:	f43f aeaa 	beq.w	8004ee4 <_strtod_l+0xbc>
 8005190:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005192:	498c      	ldr	r1, [pc, #560]	; (80053c4 <_strtod_l+0x59c>)
 8005194:	3b01      	subs	r3, #1
 8005196:	a81d      	add	r0, sp, #116	; 0x74
 8005198:	931d      	str	r3, [sp, #116]	; 0x74
 800519a:	f001 fe15 	bl	8006dc8 <__match>
 800519e:	b910      	cbnz	r0, 80051a6 <_strtod_l+0x37e>
 80051a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051a2:	3301      	adds	r3, #1
 80051a4:	931d      	str	r3, [sp, #116]	; 0x74
 80051a6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80053d4 <_strtod_l+0x5ac>
 80051aa:	f04f 0a00 	mov.w	sl, #0
 80051ae:	e67d      	b.n	8004eac <_strtod_l+0x84>
 80051b0:	4885      	ldr	r0, [pc, #532]	; (80053c8 <_strtod_l+0x5a0>)
 80051b2:	f002 fdb5 	bl	8007d20 <nan>
 80051b6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80051ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80051be:	e675      	b.n	8004eac <_strtod_l+0x84>
 80051c0:	9b07      	ldr	r3, [sp, #28]
 80051c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051c4:	1af3      	subs	r3, r6, r3
 80051c6:	2f00      	cmp	r7, #0
 80051c8:	bf08      	it	eq
 80051ca:	462f      	moveq	r7, r5
 80051cc:	2d10      	cmp	r5, #16
 80051ce:	9308      	str	r3, [sp, #32]
 80051d0:	46a8      	mov	r8, r5
 80051d2:	bfa8      	it	ge
 80051d4:	f04f 0810 	movge.w	r8, #16
 80051d8:	f7fb f994 	bl	8000504 <__aeabi_ui2d>
 80051dc:	2d09      	cmp	r5, #9
 80051de:	4682      	mov	sl, r0
 80051e0:	468b      	mov	fp, r1
 80051e2:	dd13      	ble.n	800520c <_strtod_l+0x3e4>
 80051e4:	4b79      	ldr	r3, [pc, #484]	; (80053cc <_strtod_l+0x5a4>)
 80051e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80051ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80051ee:	f7fb fa03 	bl	80005f8 <__aeabi_dmul>
 80051f2:	4682      	mov	sl, r0
 80051f4:	4648      	mov	r0, r9
 80051f6:	468b      	mov	fp, r1
 80051f8:	f7fb f984 	bl	8000504 <__aeabi_ui2d>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4650      	mov	r0, sl
 8005202:	4659      	mov	r1, fp
 8005204:	f7fb f842 	bl	800028c <__adddf3>
 8005208:	4682      	mov	sl, r0
 800520a:	468b      	mov	fp, r1
 800520c:	2d0f      	cmp	r5, #15
 800520e:	dc38      	bgt.n	8005282 <_strtod_l+0x45a>
 8005210:	9b08      	ldr	r3, [sp, #32]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f43f ae4a 	beq.w	8004eac <_strtod_l+0x84>
 8005218:	dd24      	ble.n	8005264 <_strtod_l+0x43c>
 800521a:	2b16      	cmp	r3, #22
 800521c:	dc0b      	bgt.n	8005236 <_strtod_l+0x40e>
 800521e:	4d6b      	ldr	r5, [pc, #428]	; (80053cc <_strtod_l+0x5a4>)
 8005220:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005224:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005228:	4652      	mov	r2, sl
 800522a:	465b      	mov	r3, fp
 800522c:	f7fb f9e4 	bl	80005f8 <__aeabi_dmul>
 8005230:	4682      	mov	sl, r0
 8005232:	468b      	mov	fp, r1
 8005234:	e63a      	b.n	8004eac <_strtod_l+0x84>
 8005236:	9a08      	ldr	r2, [sp, #32]
 8005238:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800523c:	4293      	cmp	r3, r2
 800523e:	db20      	blt.n	8005282 <_strtod_l+0x45a>
 8005240:	4c62      	ldr	r4, [pc, #392]	; (80053cc <_strtod_l+0x5a4>)
 8005242:	f1c5 050f 	rsb	r5, r5, #15
 8005246:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800524a:	4652      	mov	r2, sl
 800524c:	465b      	mov	r3, fp
 800524e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005252:	f7fb f9d1 	bl	80005f8 <__aeabi_dmul>
 8005256:	9b08      	ldr	r3, [sp, #32]
 8005258:	1b5d      	subs	r5, r3, r5
 800525a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800525e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005262:	e7e3      	b.n	800522c <_strtod_l+0x404>
 8005264:	9b08      	ldr	r3, [sp, #32]
 8005266:	3316      	adds	r3, #22
 8005268:	db0b      	blt.n	8005282 <_strtod_l+0x45a>
 800526a:	9b07      	ldr	r3, [sp, #28]
 800526c:	4a57      	ldr	r2, [pc, #348]	; (80053cc <_strtod_l+0x5a4>)
 800526e:	1b9e      	subs	r6, r3, r6
 8005270:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005274:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005278:	4650      	mov	r0, sl
 800527a:	4659      	mov	r1, fp
 800527c:	f7fb fae6 	bl	800084c <__aeabi_ddiv>
 8005280:	e7d6      	b.n	8005230 <_strtod_l+0x408>
 8005282:	9b08      	ldr	r3, [sp, #32]
 8005284:	eba5 0808 	sub.w	r8, r5, r8
 8005288:	4498      	add	r8, r3
 800528a:	f1b8 0f00 	cmp.w	r8, #0
 800528e:	dd71      	ble.n	8005374 <_strtod_l+0x54c>
 8005290:	f018 030f 	ands.w	r3, r8, #15
 8005294:	d00a      	beq.n	80052ac <_strtod_l+0x484>
 8005296:	494d      	ldr	r1, [pc, #308]	; (80053cc <_strtod_l+0x5a4>)
 8005298:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800529c:	4652      	mov	r2, sl
 800529e:	465b      	mov	r3, fp
 80052a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052a4:	f7fb f9a8 	bl	80005f8 <__aeabi_dmul>
 80052a8:	4682      	mov	sl, r0
 80052aa:	468b      	mov	fp, r1
 80052ac:	f038 080f 	bics.w	r8, r8, #15
 80052b0:	d04d      	beq.n	800534e <_strtod_l+0x526>
 80052b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80052b6:	dd22      	ble.n	80052fe <_strtod_l+0x4d6>
 80052b8:	2500      	movs	r5, #0
 80052ba:	462e      	mov	r6, r5
 80052bc:	9509      	str	r5, [sp, #36]	; 0x24
 80052be:	9507      	str	r5, [sp, #28]
 80052c0:	2322      	movs	r3, #34	; 0x22
 80052c2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80053d4 <_strtod_l+0x5ac>
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	f04f 0a00 	mov.w	sl, #0
 80052cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f43f adec 	beq.w	8004eac <_strtod_l+0x84>
 80052d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80052d6:	4620      	mov	r0, r4
 80052d8:	f001 fe92 	bl	8007000 <_Bfree>
 80052dc:	9907      	ldr	r1, [sp, #28]
 80052de:	4620      	mov	r0, r4
 80052e0:	f001 fe8e 	bl	8007000 <_Bfree>
 80052e4:	4631      	mov	r1, r6
 80052e6:	4620      	mov	r0, r4
 80052e8:	f001 fe8a 	bl	8007000 <_Bfree>
 80052ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ee:	4620      	mov	r0, r4
 80052f0:	f001 fe86 	bl	8007000 <_Bfree>
 80052f4:	4629      	mov	r1, r5
 80052f6:	4620      	mov	r0, r4
 80052f8:	f001 fe82 	bl	8007000 <_Bfree>
 80052fc:	e5d6      	b.n	8004eac <_strtod_l+0x84>
 80052fe:	2300      	movs	r3, #0
 8005300:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005304:	4650      	mov	r0, sl
 8005306:	4659      	mov	r1, fp
 8005308:	4699      	mov	r9, r3
 800530a:	f1b8 0f01 	cmp.w	r8, #1
 800530e:	dc21      	bgt.n	8005354 <_strtod_l+0x52c>
 8005310:	b10b      	cbz	r3, 8005316 <_strtod_l+0x4ee>
 8005312:	4682      	mov	sl, r0
 8005314:	468b      	mov	fp, r1
 8005316:	4b2e      	ldr	r3, [pc, #184]	; (80053d0 <_strtod_l+0x5a8>)
 8005318:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800531c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005320:	4652      	mov	r2, sl
 8005322:	465b      	mov	r3, fp
 8005324:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005328:	f7fb f966 	bl	80005f8 <__aeabi_dmul>
 800532c:	4b29      	ldr	r3, [pc, #164]	; (80053d4 <_strtod_l+0x5ac>)
 800532e:	460a      	mov	r2, r1
 8005330:	400b      	ands	r3, r1
 8005332:	4929      	ldr	r1, [pc, #164]	; (80053d8 <_strtod_l+0x5b0>)
 8005334:	428b      	cmp	r3, r1
 8005336:	4682      	mov	sl, r0
 8005338:	d8be      	bhi.n	80052b8 <_strtod_l+0x490>
 800533a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800533e:	428b      	cmp	r3, r1
 8005340:	bf86      	itte	hi
 8005342:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80053dc <_strtod_l+0x5b4>
 8005346:	f04f 3aff 	movhi.w	sl, #4294967295
 800534a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800534e:	2300      	movs	r3, #0
 8005350:	9304      	str	r3, [sp, #16]
 8005352:	e081      	b.n	8005458 <_strtod_l+0x630>
 8005354:	f018 0f01 	tst.w	r8, #1
 8005358:	d007      	beq.n	800536a <_strtod_l+0x542>
 800535a:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <_strtod_l+0x5a8>)
 800535c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	f7fb f948 	bl	80005f8 <__aeabi_dmul>
 8005368:	2301      	movs	r3, #1
 800536a:	f109 0901 	add.w	r9, r9, #1
 800536e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005372:	e7ca      	b.n	800530a <_strtod_l+0x4e2>
 8005374:	d0eb      	beq.n	800534e <_strtod_l+0x526>
 8005376:	f1c8 0800 	rsb	r8, r8, #0
 800537a:	f018 020f 	ands.w	r2, r8, #15
 800537e:	d00a      	beq.n	8005396 <_strtod_l+0x56e>
 8005380:	4b12      	ldr	r3, [pc, #72]	; (80053cc <_strtod_l+0x5a4>)
 8005382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005386:	4650      	mov	r0, sl
 8005388:	4659      	mov	r1, fp
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	f7fb fa5d 	bl	800084c <__aeabi_ddiv>
 8005392:	4682      	mov	sl, r0
 8005394:	468b      	mov	fp, r1
 8005396:	ea5f 1828 	movs.w	r8, r8, asr #4
 800539a:	d0d8      	beq.n	800534e <_strtod_l+0x526>
 800539c:	f1b8 0f1f 	cmp.w	r8, #31
 80053a0:	dd1e      	ble.n	80053e0 <_strtod_l+0x5b8>
 80053a2:	2500      	movs	r5, #0
 80053a4:	462e      	mov	r6, r5
 80053a6:	9509      	str	r5, [sp, #36]	; 0x24
 80053a8:	9507      	str	r5, [sp, #28]
 80053aa:	2322      	movs	r3, #34	; 0x22
 80053ac:	f04f 0a00 	mov.w	sl, #0
 80053b0:	f04f 0b00 	mov.w	fp, #0
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	e789      	b.n	80052cc <_strtod_l+0x4a4>
 80053b8:	08009921 	.word	0x08009921
 80053bc:	08009964 	.word	0x08009964
 80053c0:	08009919 	.word	0x08009919
 80053c4:	08009aa4 	.word	0x08009aa4
 80053c8:	08009d60 	.word	0x08009d60
 80053cc:	08009c40 	.word	0x08009c40
 80053d0:	08009c18 	.word	0x08009c18
 80053d4:	7ff00000 	.word	0x7ff00000
 80053d8:	7ca00000 	.word	0x7ca00000
 80053dc:	7fefffff 	.word	0x7fefffff
 80053e0:	f018 0310 	ands.w	r3, r8, #16
 80053e4:	bf18      	it	ne
 80053e6:	236a      	movne	r3, #106	; 0x6a
 80053e8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80057a0 <_strtod_l+0x978>
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	4650      	mov	r0, sl
 80053f0:	4659      	mov	r1, fp
 80053f2:	2300      	movs	r3, #0
 80053f4:	f018 0f01 	tst.w	r8, #1
 80053f8:	d004      	beq.n	8005404 <_strtod_l+0x5dc>
 80053fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80053fe:	f7fb f8fb 	bl	80005f8 <__aeabi_dmul>
 8005402:	2301      	movs	r3, #1
 8005404:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005408:	f109 0908 	add.w	r9, r9, #8
 800540c:	d1f2      	bne.n	80053f4 <_strtod_l+0x5cc>
 800540e:	b10b      	cbz	r3, 8005414 <_strtod_l+0x5ec>
 8005410:	4682      	mov	sl, r0
 8005412:	468b      	mov	fp, r1
 8005414:	9b04      	ldr	r3, [sp, #16]
 8005416:	b1bb      	cbz	r3, 8005448 <_strtod_l+0x620>
 8005418:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800541c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005420:	2b00      	cmp	r3, #0
 8005422:	4659      	mov	r1, fp
 8005424:	dd10      	ble.n	8005448 <_strtod_l+0x620>
 8005426:	2b1f      	cmp	r3, #31
 8005428:	f340 8128 	ble.w	800567c <_strtod_l+0x854>
 800542c:	2b34      	cmp	r3, #52	; 0x34
 800542e:	bfde      	ittt	le
 8005430:	3b20      	suble	r3, #32
 8005432:	f04f 32ff 	movle.w	r2, #4294967295
 8005436:	fa02 f303 	lslle.w	r3, r2, r3
 800543a:	f04f 0a00 	mov.w	sl, #0
 800543e:	bfcc      	ite	gt
 8005440:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005444:	ea03 0b01 	andle.w	fp, r3, r1
 8005448:	2200      	movs	r2, #0
 800544a:	2300      	movs	r3, #0
 800544c:	4650      	mov	r0, sl
 800544e:	4659      	mov	r1, fp
 8005450:	f7fb fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005454:	2800      	cmp	r0, #0
 8005456:	d1a4      	bne.n	80053a2 <_strtod_l+0x57a>
 8005458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800545e:	462b      	mov	r3, r5
 8005460:	463a      	mov	r2, r7
 8005462:	4620      	mov	r0, r4
 8005464:	f001 fe38 	bl	80070d8 <__s2b>
 8005468:	9009      	str	r0, [sp, #36]	; 0x24
 800546a:	2800      	cmp	r0, #0
 800546c:	f43f af24 	beq.w	80052b8 <_strtod_l+0x490>
 8005470:	9b07      	ldr	r3, [sp, #28]
 8005472:	1b9e      	subs	r6, r3, r6
 8005474:	9b08      	ldr	r3, [sp, #32]
 8005476:	2b00      	cmp	r3, #0
 8005478:	bfb4      	ite	lt
 800547a:	4633      	movlt	r3, r6
 800547c:	2300      	movge	r3, #0
 800547e:	9310      	str	r3, [sp, #64]	; 0x40
 8005480:	9b08      	ldr	r3, [sp, #32]
 8005482:	2500      	movs	r5, #0
 8005484:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005488:	9318      	str	r3, [sp, #96]	; 0x60
 800548a:	462e      	mov	r6, r5
 800548c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548e:	4620      	mov	r0, r4
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	f001 fd75 	bl	8006f80 <_Balloc>
 8005496:	9007      	str	r0, [sp, #28]
 8005498:	2800      	cmp	r0, #0
 800549a:	f43f af11 	beq.w	80052c0 <_strtod_l+0x498>
 800549e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	3202      	adds	r2, #2
 80054a4:	f103 010c 	add.w	r1, r3, #12
 80054a8:	0092      	lsls	r2, r2, #2
 80054aa:	300c      	adds	r0, #12
 80054ac:	f001 fd5a 	bl	8006f64 <memcpy>
 80054b0:	ec4b ab10 	vmov	d0, sl, fp
 80054b4:	aa20      	add	r2, sp, #128	; 0x80
 80054b6:	a91f      	add	r1, sp, #124	; 0x7c
 80054b8:	4620      	mov	r0, r4
 80054ba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80054be:	f002 f947 	bl	8007750 <__d2b>
 80054c2:	901e      	str	r0, [sp, #120]	; 0x78
 80054c4:	2800      	cmp	r0, #0
 80054c6:	f43f aefb 	beq.w	80052c0 <_strtod_l+0x498>
 80054ca:	2101      	movs	r1, #1
 80054cc:	4620      	mov	r0, r4
 80054ce:	f001 fe9d 	bl	800720c <__i2b>
 80054d2:	4606      	mov	r6, r0
 80054d4:	2800      	cmp	r0, #0
 80054d6:	f43f aef3 	beq.w	80052c0 <_strtod_l+0x498>
 80054da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054dc:	9904      	ldr	r1, [sp, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bfab      	itete	ge
 80054e2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80054e4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80054e6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80054e8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80054ec:	bfac      	ite	ge
 80054ee:	eb03 0902 	addge.w	r9, r3, r2
 80054f2:	1ad7      	sublt	r7, r2, r3
 80054f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054f6:	eba3 0801 	sub.w	r8, r3, r1
 80054fa:	4490      	add	r8, r2
 80054fc:	4ba3      	ldr	r3, [pc, #652]	; (800578c <_strtod_l+0x964>)
 80054fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8005502:	4598      	cmp	r8, r3
 8005504:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005508:	f280 80cc 	bge.w	80056a4 <_strtod_l+0x87c>
 800550c:	eba3 0308 	sub.w	r3, r3, r8
 8005510:	2b1f      	cmp	r3, #31
 8005512:	eba2 0203 	sub.w	r2, r2, r3
 8005516:	f04f 0101 	mov.w	r1, #1
 800551a:	f300 80b6 	bgt.w	800568a <_strtod_l+0x862>
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	9311      	str	r3, [sp, #68]	; 0x44
 8005524:	2300      	movs	r3, #0
 8005526:	930c      	str	r3, [sp, #48]	; 0x30
 8005528:	eb09 0802 	add.w	r8, r9, r2
 800552c:	9b04      	ldr	r3, [sp, #16]
 800552e:	45c1      	cmp	r9, r8
 8005530:	4417      	add	r7, r2
 8005532:	441f      	add	r7, r3
 8005534:	464b      	mov	r3, r9
 8005536:	bfa8      	it	ge
 8005538:	4643      	movge	r3, r8
 800553a:	42bb      	cmp	r3, r7
 800553c:	bfa8      	it	ge
 800553e:	463b      	movge	r3, r7
 8005540:	2b00      	cmp	r3, #0
 8005542:	bfc2      	ittt	gt
 8005544:	eba8 0803 	subgt.w	r8, r8, r3
 8005548:	1aff      	subgt	r7, r7, r3
 800554a:	eba9 0903 	subgt.w	r9, r9, r3
 800554e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	dd17      	ble.n	8005584 <_strtod_l+0x75c>
 8005554:	4631      	mov	r1, r6
 8005556:	461a      	mov	r2, r3
 8005558:	4620      	mov	r0, r4
 800555a:	f001 ff13 	bl	8007384 <__pow5mult>
 800555e:	4606      	mov	r6, r0
 8005560:	2800      	cmp	r0, #0
 8005562:	f43f aead 	beq.w	80052c0 <_strtod_l+0x498>
 8005566:	4601      	mov	r1, r0
 8005568:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800556a:	4620      	mov	r0, r4
 800556c:	f001 fe64 	bl	8007238 <__multiply>
 8005570:	900f      	str	r0, [sp, #60]	; 0x3c
 8005572:	2800      	cmp	r0, #0
 8005574:	f43f aea4 	beq.w	80052c0 <_strtod_l+0x498>
 8005578:	991e      	ldr	r1, [sp, #120]	; 0x78
 800557a:	4620      	mov	r0, r4
 800557c:	f001 fd40 	bl	8007000 <_Bfree>
 8005580:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005582:	931e      	str	r3, [sp, #120]	; 0x78
 8005584:	f1b8 0f00 	cmp.w	r8, #0
 8005588:	f300 8091 	bgt.w	80056ae <_strtod_l+0x886>
 800558c:	9b08      	ldr	r3, [sp, #32]
 800558e:	2b00      	cmp	r3, #0
 8005590:	dd08      	ble.n	80055a4 <_strtod_l+0x77c>
 8005592:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005594:	9907      	ldr	r1, [sp, #28]
 8005596:	4620      	mov	r0, r4
 8005598:	f001 fef4 	bl	8007384 <__pow5mult>
 800559c:	9007      	str	r0, [sp, #28]
 800559e:	2800      	cmp	r0, #0
 80055a0:	f43f ae8e 	beq.w	80052c0 <_strtod_l+0x498>
 80055a4:	2f00      	cmp	r7, #0
 80055a6:	dd08      	ble.n	80055ba <_strtod_l+0x792>
 80055a8:	9907      	ldr	r1, [sp, #28]
 80055aa:	463a      	mov	r2, r7
 80055ac:	4620      	mov	r0, r4
 80055ae:	f001 ff43 	bl	8007438 <__lshift>
 80055b2:	9007      	str	r0, [sp, #28]
 80055b4:	2800      	cmp	r0, #0
 80055b6:	f43f ae83 	beq.w	80052c0 <_strtod_l+0x498>
 80055ba:	f1b9 0f00 	cmp.w	r9, #0
 80055be:	dd08      	ble.n	80055d2 <_strtod_l+0x7aa>
 80055c0:	4631      	mov	r1, r6
 80055c2:	464a      	mov	r2, r9
 80055c4:	4620      	mov	r0, r4
 80055c6:	f001 ff37 	bl	8007438 <__lshift>
 80055ca:	4606      	mov	r6, r0
 80055cc:	2800      	cmp	r0, #0
 80055ce:	f43f ae77 	beq.w	80052c0 <_strtod_l+0x498>
 80055d2:	9a07      	ldr	r2, [sp, #28]
 80055d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80055d6:	4620      	mov	r0, r4
 80055d8:	f001 ffb6 	bl	8007548 <__mdiff>
 80055dc:	4605      	mov	r5, r0
 80055de:	2800      	cmp	r0, #0
 80055e0:	f43f ae6e 	beq.w	80052c0 <_strtod_l+0x498>
 80055e4:	68c3      	ldr	r3, [r0, #12]
 80055e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80055e8:	2300      	movs	r3, #0
 80055ea:	60c3      	str	r3, [r0, #12]
 80055ec:	4631      	mov	r1, r6
 80055ee:	f001 ff8f 	bl	8007510 <__mcmp>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	da65      	bge.n	80056c2 <_strtod_l+0x89a>
 80055f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055f8:	ea53 030a 	orrs.w	r3, r3, sl
 80055fc:	f040 8087 	bne.w	800570e <_strtod_l+0x8e6>
 8005600:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005604:	2b00      	cmp	r3, #0
 8005606:	f040 8082 	bne.w	800570e <_strtod_l+0x8e6>
 800560a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800560e:	0d1b      	lsrs	r3, r3, #20
 8005610:	051b      	lsls	r3, r3, #20
 8005612:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005616:	d97a      	bls.n	800570e <_strtod_l+0x8e6>
 8005618:	696b      	ldr	r3, [r5, #20]
 800561a:	b913      	cbnz	r3, 8005622 <_strtod_l+0x7fa>
 800561c:	692b      	ldr	r3, [r5, #16]
 800561e:	2b01      	cmp	r3, #1
 8005620:	dd75      	ble.n	800570e <_strtod_l+0x8e6>
 8005622:	4629      	mov	r1, r5
 8005624:	2201      	movs	r2, #1
 8005626:	4620      	mov	r0, r4
 8005628:	f001 ff06 	bl	8007438 <__lshift>
 800562c:	4631      	mov	r1, r6
 800562e:	4605      	mov	r5, r0
 8005630:	f001 ff6e 	bl	8007510 <__mcmp>
 8005634:	2800      	cmp	r0, #0
 8005636:	dd6a      	ble.n	800570e <_strtod_l+0x8e6>
 8005638:	9904      	ldr	r1, [sp, #16]
 800563a:	4a55      	ldr	r2, [pc, #340]	; (8005790 <_strtod_l+0x968>)
 800563c:	465b      	mov	r3, fp
 800563e:	2900      	cmp	r1, #0
 8005640:	f000 8085 	beq.w	800574e <_strtod_l+0x926>
 8005644:	ea02 010b 	and.w	r1, r2, fp
 8005648:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800564c:	dc7f      	bgt.n	800574e <_strtod_l+0x926>
 800564e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005652:	f77f aeaa 	ble.w	80053aa <_strtod_l+0x582>
 8005656:	4a4f      	ldr	r2, [pc, #316]	; (8005794 <_strtod_l+0x96c>)
 8005658:	2300      	movs	r3, #0
 800565a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800565e:	4650      	mov	r0, sl
 8005660:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005664:	4659      	mov	r1, fp
 8005666:	f7fa ffc7 	bl	80005f8 <__aeabi_dmul>
 800566a:	460b      	mov	r3, r1
 800566c:	4303      	orrs	r3, r0
 800566e:	bf08      	it	eq
 8005670:	2322      	moveq	r3, #34	; 0x22
 8005672:	4682      	mov	sl, r0
 8005674:	468b      	mov	fp, r1
 8005676:	bf08      	it	eq
 8005678:	6023      	streq	r3, [r4, #0]
 800567a:	e62b      	b.n	80052d4 <_strtod_l+0x4ac>
 800567c:	f04f 32ff 	mov.w	r2, #4294967295
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	ea03 0a0a 	and.w	sl, r3, sl
 8005688:	e6de      	b.n	8005448 <_strtod_l+0x620>
 800568a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800568e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005692:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005696:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800569a:	fa01 f308 	lsl.w	r3, r1, r8
 800569e:	930c      	str	r3, [sp, #48]	; 0x30
 80056a0:	9111      	str	r1, [sp, #68]	; 0x44
 80056a2:	e741      	b.n	8005528 <_strtod_l+0x700>
 80056a4:	2300      	movs	r3, #0
 80056a6:	930c      	str	r3, [sp, #48]	; 0x30
 80056a8:	2301      	movs	r3, #1
 80056aa:	9311      	str	r3, [sp, #68]	; 0x44
 80056ac:	e73c      	b.n	8005528 <_strtod_l+0x700>
 80056ae:	991e      	ldr	r1, [sp, #120]	; 0x78
 80056b0:	4642      	mov	r2, r8
 80056b2:	4620      	mov	r0, r4
 80056b4:	f001 fec0 	bl	8007438 <__lshift>
 80056b8:	901e      	str	r0, [sp, #120]	; 0x78
 80056ba:	2800      	cmp	r0, #0
 80056bc:	f47f af66 	bne.w	800558c <_strtod_l+0x764>
 80056c0:	e5fe      	b.n	80052c0 <_strtod_l+0x498>
 80056c2:	465f      	mov	r7, fp
 80056c4:	d16e      	bne.n	80057a4 <_strtod_l+0x97c>
 80056c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056cc:	b342      	cbz	r2, 8005720 <_strtod_l+0x8f8>
 80056ce:	4a32      	ldr	r2, [pc, #200]	; (8005798 <_strtod_l+0x970>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d128      	bne.n	8005726 <_strtod_l+0x8fe>
 80056d4:	9b04      	ldr	r3, [sp, #16]
 80056d6:	4650      	mov	r0, sl
 80056d8:	b1eb      	cbz	r3, 8005716 <_strtod_l+0x8ee>
 80056da:	4a2d      	ldr	r2, [pc, #180]	; (8005790 <_strtod_l+0x968>)
 80056dc:	403a      	ands	r2, r7
 80056de:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80056e2:	f04f 31ff 	mov.w	r1, #4294967295
 80056e6:	d819      	bhi.n	800571c <_strtod_l+0x8f4>
 80056e8:	0d12      	lsrs	r2, r2, #20
 80056ea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80056ee:	fa01 f303 	lsl.w	r3, r1, r3
 80056f2:	4298      	cmp	r0, r3
 80056f4:	d117      	bne.n	8005726 <_strtod_l+0x8fe>
 80056f6:	4b29      	ldr	r3, [pc, #164]	; (800579c <_strtod_l+0x974>)
 80056f8:	429f      	cmp	r7, r3
 80056fa:	d102      	bne.n	8005702 <_strtod_l+0x8da>
 80056fc:	3001      	adds	r0, #1
 80056fe:	f43f addf 	beq.w	80052c0 <_strtod_l+0x498>
 8005702:	4b23      	ldr	r3, [pc, #140]	; (8005790 <_strtod_l+0x968>)
 8005704:	403b      	ands	r3, r7
 8005706:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800570a:	f04f 0a00 	mov.w	sl, #0
 800570e:	9b04      	ldr	r3, [sp, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1a0      	bne.n	8005656 <_strtod_l+0x82e>
 8005714:	e5de      	b.n	80052d4 <_strtod_l+0x4ac>
 8005716:	f04f 33ff 	mov.w	r3, #4294967295
 800571a:	e7ea      	b.n	80056f2 <_strtod_l+0x8ca>
 800571c:	460b      	mov	r3, r1
 800571e:	e7e8      	b.n	80056f2 <_strtod_l+0x8ca>
 8005720:	ea53 030a 	orrs.w	r3, r3, sl
 8005724:	d088      	beq.n	8005638 <_strtod_l+0x810>
 8005726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005728:	b1db      	cbz	r3, 8005762 <_strtod_l+0x93a>
 800572a:	423b      	tst	r3, r7
 800572c:	d0ef      	beq.n	800570e <_strtod_l+0x8e6>
 800572e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005730:	9a04      	ldr	r2, [sp, #16]
 8005732:	4650      	mov	r0, sl
 8005734:	4659      	mov	r1, fp
 8005736:	b1c3      	cbz	r3, 800576a <_strtod_l+0x942>
 8005738:	f7ff fb5a 	bl	8004df0 <sulp>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005744:	f7fa fda2 	bl	800028c <__adddf3>
 8005748:	4682      	mov	sl, r0
 800574a:	468b      	mov	fp, r1
 800574c:	e7df      	b.n	800570e <_strtod_l+0x8e6>
 800574e:	4013      	ands	r3, r2
 8005750:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005754:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005758:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800575c:	f04f 3aff 	mov.w	sl, #4294967295
 8005760:	e7d5      	b.n	800570e <_strtod_l+0x8e6>
 8005762:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005764:	ea13 0f0a 	tst.w	r3, sl
 8005768:	e7e0      	b.n	800572c <_strtod_l+0x904>
 800576a:	f7ff fb41 	bl	8004df0 <sulp>
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005776:	f7fa fd87 	bl	8000288 <__aeabi_dsub>
 800577a:	2200      	movs	r2, #0
 800577c:	2300      	movs	r3, #0
 800577e:	4682      	mov	sl, r0
 8005780:	468b      	mov	fp, r1
 8005782:	f7fb f9a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005786:	2800      	cmp	r0, #0
 8005788:	d0c1      	beq.n	800570e <_strtod_l+0x8e6>
 800578a:	e60e      	b.n	80053aa <_strtod_l+0x582>
 800578c:	fffffc02 	.word	0xfffffc02
 8005790:	7ff00000 	.word	0x7ff00000
 8005794:	39500000 	.word	0x39500000
 8005798:	000fffff 	.word	0x000fffff
 800579c:	7fefffff 	.word	0x7fefffff
 80057a0:	08009978 	.word	0x08009978
 80057a4:	4631      	mov	r1, r6
 80057a6:	4628      	mov	r0, r5
 80057a8:	f002 f82e 	bl	8007808 <__ratio>
 80057ac:	ec59 8b10 	vmov	r8, r9, d0
 80057b0:	ee10 0a10 	vmov	r0, s0
 80057b4:	2200      	movs	r2, #0
 80057b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057ba:	4649      	mov	r1, r9
 80057bc:	f7fb f998 	bl	8000af0 <__aeabi_dcmple>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d07c      	beq.n	80058be <_strtod_l+0xa96>
 80057c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d04c      	beq.n	8005864 <_strtod_l+0xa3c>
 80057ca:	4b95      	ldr	r3, [pc, #596]	; (8005a20 <_strtod_l+0xbf8>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80057d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005a20 <_strtod_l+0xbf8>
 80057d6:	f04f 0800 	mov.w	r8, #0
 80057da:	4b92      	ldr	r3, [pc, #584]	; (8005a24 <_strtod_l+0xbfc>)
 80057dc:	403b      	ands	r3, r7
 80057de:	9311      	str	r3, [sp, #68]	; 0x44
 80057e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80057e2:	4b91      	ldr	r3, [pc, #580]	; (8005a28 <_strtod_l+0xc00>)
 80057e4:	429a      	cmp	r2, r3
 80057e6:	f040 80b2 	bne.w	800594e <_strtod_l+0xb26>
 80057ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057f2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80057f6:	ec4b ab10 	vmov	d0, sl, fp
 80057fa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80057fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005802:	f001 ff29 	bl	8007658 <__ulp>
 8005806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800580a:	ec53 2b10 	vmov	r2, r3, d0
 800580e:	f7fa fef3 	bl	80005f8 <__aeabi_dmul>
 8005812:	4652      	mov	r2, sl
 8005814:	465b      	mov	r3, fp
 8005816:	f7fa fd39 	bl	800028c <__adddf3>
 800581a:	460b      	mov	r3, r1
 800581c:	4981      	ldr	r1, [pc, #516]	; (8005a24 <_strtod_l+0xbfc>)
 800581e:	4a83      	ldr	r2, [pc, #524]	; (8005a2c <_strtod_l+0xc04>)
 8005820:	4019      	ands	r1, r3
 8005822:	4291      	cmp	r1, r2
 8005824:	4682      	mov	sl, r0
 8005826:	d95e      	bls.n	80058e6 <_strtod_l+0xabe>
 8005828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800582a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800582e:	4293      	cmp	r3, r2
 8005830:	d103      	bne.n	800583a <_strtod_l+0xa12>
 8005832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005834:	3301      	adds	r3, #1
 8005836:	f43f ad43 	beq.w	80052c0 <_strtod_l+0x498>
 800583a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005a38 <_strtod_l+0xc10>
 800583e:	f04f 3aff 	mov.w	sl, #4294967295
 8005842:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005844:	4620      	mov	r0, r4
 8005846:	f001 fbdb 	bl	8007000 <_Bfree>
 800584a:	9907      	ldr	r1, [sp, #28]
 800584c:	4620      	mov	r0, r4
 800584e:	f001 fbd7 	bl	8007000 <_Bfree>
 8005852:	4631      	mov	r1, r6
 8005854:	4620      	mov	r0, r4
 8005856:	f001 fbd3 	bl	8007000 <_Bfree>
 800585a:	4629      	mov	r1, r5
 800585c:	4620      	mov	r0, r4
 800585e:	f001 fbcf 	bl	8007000 <_Bfree>
 8005862:	e613      	b.n	800548c <_strtod_l+0x664>
 8005864:	f1ba 0f00 	cmp.w	sl, #0
 8005868:	d11b      	bne.n	80058a2 <_strtod_l+0xa7a>
 800586a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800586e:	b9f3      	cbnz	r3, 80058ae <_strtod_l+0xa86>
 8005870:	4b6b      	ldr	r3, [pc, #428]	; (8005a20 <_strtod_l+0xbf8>)
 8005872:	2200      	movs	r2, #0
 8005874:	4640      	mov	r0, r8
 8005876:	4649      	mov	r1, r9
 8005878:	f7fb f930 	bl	8000adc <__aeabi_dcmplt>
 800587c:	b9d0      	cbnz	r0, 80058b4 <_strtod_l+0xa8c>
 800587e:	4640      	mov	r0, r8
 8005880:	4649      	mov	r1, r9
 8005882:	4b6b      	ldr	r3, [pc, #428]	; (8005a30 <_strtod_l+0xc08>)
 8005884:	2200      	movs	r2, #0
 8005886:	f7fa feb7 	bl	80005f8 <__aeabi_dmul>
 800588a:	4680      	mov	r8, r0
 800588c:	4689      	mov	r9, r1
 800588e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005892:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005896:	931b      	str	r3, [sp, #108]	; 0x6c
 8005898:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800589c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80058a0:	e79b      	b.n	80057da <_strtod_l+0x9b2>
 80058a2:	f1ba 0f01 	cmp.w	sl, #1
 80058a6:	d102      	bne.n	80058ae <_strtod_l+0xa86>
 80058a8:	2f00      	cmp	r7, #0
 80058aa:	f43f ad7e 	beq.w	80053aa <_strtod_l+0x582>
 80058ae:	4b61      	ldr	r3, [pc, #388]	; (8005a34 <_strtod_l+0xc0c>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	e78c      	b.n	80057ce <_strtod_l+0x9a6>
 80058b4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005a30 <_strtod_l+0xc08>
 80058b8:	f04f 0800 	mov.w	r8, #0
 80058bc:	e7e7      	b.n	800588e <_strtod_l+0xa66>
 80058be:	4b5c      	ldr	r3, [pc, #368]	; (8005a30 <_strtod_l+0xc08>)
 80058c0:	4640      	mov	r0, r8
 80058c2:	4649      	mov	r1, r9
 80058c4:	2200      	movs	r2, #0
 80058c6:	f7fa fe97 	bl	80005f8 <__aeabi_dmul>
 80058ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058cc:	4680      	mov	r8, r0
 80058ce:	4689      	mov	r9, r1
 80058d0:	b933      	cbnz	r3, 80058e0 <_strtod_l+0xab8>
 80058d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058d6:	9012      	str	r0, [sp, #72]	; 0x48
 80058d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80058da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80058de:	e7dd      	b.n	800589c <_strtod_l+0xa74>
 80058e0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80058e4:	e7f9      	b.n	80058da <_strtod_l+0xab2>
 80058e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80058ea:	9b04      	ldr	r3, [sp, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1a8      	bne.n	8005842 <_strtod_l+0xa1a>
 80058f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80058f6:	0d1b      	lsrs	r3, r3, #20
 80058f8:	051b      	lsls	r3, r3, #20
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d1a1      	bne.n	8005842 <_strtod_l+0xa1a>
 80058fe:	4640      	mov	r0, r8
 8005900:	4649      	mov	r1, r9
 8005902:	f7fb f9c1 	bl	8000c88 <__aeabi_d2lz>
 8005906:	f7fa fe49 	bl	800059c <__aeabi_l2d>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4640      	mov	r0, r8
 8005910:	4649      	mov	r1, r9
 8005912:	f7fa fcb9 	bl	8000288 <__aeabi_dsub>
 8005916:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800591c:	ea43 030a 	orr.w	r3, r3, sl
 8005920:	4313      	orrs	r3, r2
 8005922:	4680      	mov	r8, r0
 8005924:	4689      	mov	r9, r1
 8005926:	d053      	beq.n	80059d0 <_strtod_l+0xba8>
 8005928:	a335      	add	r3, pc, #212	; (adr r3, 8005a00 <_strtod_l+0xbd8>)
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f7fb f8d5 	bl	8000adc <__aeabi_dcmplt>
 8005932:	2800      	cmp	r0, #0
 8005934:	f47f acce 	bne.w	80052d4 <_strtod_l+0x4ac>
 8005938:	a333      	add	r3, pc, #204	; (adr r3, 8005a08 <_strtod_l+0xbe0>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	4640      	mov	r0, r8
 8005940:	4649      	mov	r1, r9
 8005942:	f7fb f8e9 	bl	8000b18 <__aeabi_dcmpgt>
 8005946:	2800      	cmp	r0, #0
 8005948:	f43f af7b 	beq.w	8005842 <_strtod_l+0xa1a>
 800594c:	e4c2      	b.n	80052d4 <_strtod_l+0x4ac>
 800594e:	9b04      	ldr	r3, [sp, #16]
 8005950:	b333      	cbz	r3, 80059a0 <_strtod_l+0xb78>
 8005952:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005954:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005958:	d822      	bhi.n	80059a0 <_strtod_l+0xb78>
 800595a:	a32d      	add	r3, pc, #180	; (adr r3, 8005a10 <_strtod_l+0xbe8>)
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	4640      	mov	r0, r8
 8005962:	4649      	mov	r1, r9
 8005964:	f7fb f8c4 	bl	8000af0 <__aeabi_dcmple>
 8005968:	b1a0      	cbz	r0, 8005994 <_strtod_l+0xb6c>
 800596a:	4649      	mov	r1, r9
 800596c:	4640      	mov	r0, r8
 800596e:	f7fb f91b 	bl	8000ba8 <__aeabi_d2uiz>
 8005972:	2801      	cmp	r0, #1
 8005974:	bf38      	it	cc
 8005976:	2001      	movcc	r0, #1
 8005978:	f7fa fdc4 	bl	8000504 <__aeabi_ui2d>
 800597c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800597e:	4680      	mov	r8, r0
 8005980:	4689      	mov	r9, r1
 8005982:	bb13      	cbnz	r3, 80059ca <_strtod_l+0xba2>
 8005984:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005988:	9014      	str	r0, [sp, #80]	; 0x50
 800598a:	9315      	str	r3, [sp, #84]	; 0x54
 800598c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005990:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005996:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005998:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	930d      	str	r3, [sp, #52]	; 0x34
 80059a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059a4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80059a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80059ac:	f001 fe54 	bl	8007658 <__ulp>
 80059b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059b4:	ec53 2b10 	vmov	r2, r3, d0
 80059b8:	f7fa fe1e 	bl	80005f8 <__aeabi_dmul>
 80059bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059c0:	f7fa fc64 	bl	800028c <__adddf3>
 80059c4:	4682      	mov	sl, r0
 80059c6:	468b      	mov	fp, r1
 80059c8:	e78f      	b.n	80058ea <_strtod_l+0xac2>
 80059ca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80059ce:	e7dd      	b.n	800598c <_strtod_l+0xb64>
 80059d0:	a311      	add	r3, pc, #68	; (adr r3, 8005a18 <_strtod_l+0xbf0>)
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	f7fb f881 	bl	8000adc <__aeabi_dcmplt>
 80059da:	e7b4      	b.n	8005946 <_strtod_l+0xb1e>
 80059dc:	2300      	movs	r3, #0
 80059de:	930e      	str	r3, [sp, #56]	; 0x38
 80059e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80059e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	f7ff ba65 	b.w	8004eb4 <_strtod_l+0x8c>
 80059ea:	2b65      	cmp	r3, #101	; 0x65
 80059ec:	f43f ab5d 	beq.w	80050aa <_strtod_l+0x282>
 80059f0:	2b45      	cmp	r3, #69	; 0x45
 80059f2:	f43f ab5a 	beq.w	80050aa <_strtod_l+0x282>
 80059f6:	2201      	movs	r2, #1
 80059f8:	f7ff bb92 	b.w	8005120 <_strtod_l+0x2f8>
 80059fc:	f3af 8000 	nop.w
 8005a00:	94a03595 	.word	0x94a03595
 8005a04:	3fdfffff 	.word	0x3fdfffff
 8005a08:	35afe535 	.word	0x35afe535
 8005a0c:	3fe00000 	.word	0x3fe00000
 8005a10:	ffc00000 	.word	0xffc00000
 8005a14:	41dfffff 	.word	0x41dfffff
 8005a18:	94a03595 	.word	0x94a03595
 8005a1c:	3fcfffff 	.word	0x3fcfffff
 8005a20:	3ff00000 	.word	0x3ff00000
 8005a24:	7ff00000 	.word	0x7ff00000
 8005a28:	7fe00000 	.word	0x7fe00000
 8005a2c:	7c9fffff 	.word	0x7c9fffff
 8005a30:	3fe00000 	.word	0x3fe00000
 8005a34:	bff00000 	.word	0xbff00000
 8005a38:	7fefffff 	.word	0x7fefffff

08005a3c <_strtod_r>:
 8005a3c:	4b01      	ldr	r3, [pc, #4]	; (8005a44 <_strtod_r+0x8>)
 8005a3e:	f7ff b9f3 	b.w	8004e28 <_strtod_l>
 8005a42:	bf00      	nop
 8005a44:	20000070 	.word	0x20000070

08005a48 <_strtol_l.isra.0>:
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a4e:	d001      	beq.n	8005a54 <_strtol_l.isra.0+0xc>
 8005a50:	2b24      	cmp	r3, #36	; 0x24
 8005a52:	d906      	bls.n	8005a62 <_strtol_l.isra.0+0x1a>
 8005a54:	f7fe fafa 	bl	800404c <__errno>
 8005a58:	2316      	movs	r3, #22
 8005a5a:	6003      	str	r3, [r0, #0]
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a62:	4f3a      	ldr	r7, [pc, #232]	; (8005b4c <_strtol_l.isra.0+0x104>)
 8005a64:	468e      	mov	lr, r1
 8005a66:	4676      	mov	r6, lr
 8005a68:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005a6c:	5de5      	ldrb	r5, [r4, r7]
 8005a6e:	f015 0508 	ands.w	r5, r5, #8
 8005a72:	d1f8      	bne.n	8005a66 <_strtol_l.isra.0+0x1e>
 8005a74:	2c2d      	cmp	r4, #45	; 0x2d
 8005a76:	d134      	bne.n	8005ae2 <_strtol_l.isra.0+0x9a>
 8005a78:	f89e 4000 	ldrb.w	r4, [lr]
 8005a7c:	f04f 0801 	mov.w	r8, #1
 8005a80:	f106 0e02 	add.w	lr, r6, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d05c      	beq.n	8005b42 <_strtol_l.isra.0+0xfa>
 8005a88:	2b10      	cmp	r3, #16
 8005a8a:	d10c      	bne.n	8005aa6 <_strtol_l.isra.0+0x5e>
 8005a8c:	2c30      	cmp	r4, #48	; 0x30
 8005a8e:	d10a      	bne.n	8005aa6 <_strtol_l.isra.0+0x5e>
 8005a90:	f89e 4000 	ldrb.w	r4, [lr]
 8005a94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005a98:	2c58      	cmp	r4, #88	; 0x58
 8005a9a:	d14d      	bne.n	8005b38 <_strtol_l.isra.0+0xf0>
 8005a9c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	f10e 0e02 	add.w	lr, lr, #2
 8005aa6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005aaa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005aae:	2600      	movs	r6, #0
 8005ab0:	fbbc f9f3 	udiv	r9, ip, r3
 8005ab4:	4635      	mov	r5, r6
 8005ab6:	fb03 ca19 	mls	sl, r3, r9, ip
 8005aba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005abe:	2f09      	cmp	r7, #9
 8005ac0:	d818      	bhi.n	8005af4 <_strtol_l.isra.0+0xac>
 8005ac2:	463c      	mov	r4, r7
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	dd24      	ble.n	8005b12 <_strtol_l.isra.0+0xca>
 8005ac8:	2e00      	cmp	r6, #0
 8005aca:	db1f      	blt.n	8005b0c <_strtol_l.isra.0+0xc4>
 8005acc:	45a9      	cmp	r9, r5
 8005ace:	d31d      	bcc.n	8005b0c <_strtol_l.isra.0+0xc4>
 8005ad0:	d101      	bne.n	8005ad6 <_strtol_l.isra.0+0x8e>
 8005ad2:	45a2      	cmp	sl, r4
 8005ad4:	db1a      	blt.n	8005b0c <_strtol_l.isra.0+0xc4>
 8005ad6:	fb05 4503 	mla	r5, r5, r3, r4
 8005ada:	2601      	movs	r6, #1
 8005adc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005ae0:	e7eb      	b.n	8005aba <_strtol_l.isra.0+0x72>
 8005ae2:	2c2b      	cmp	r4, #43	; 0x2b
 8005ae4:	bf08      	it	eq
 8005ae6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005aea:	46a8      	mov	r8, r5
 8005aec:	bf08      	it	eq
 8005aee:	f106 0e02 	addeq.w	lr, r6, #2
 8005af2:	e7c7      	b.n	8005a84 <_strtol_l.isra.0+0x3c>
 8005af4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005af8:	2f19      	cmp	r7, #25
 8005afa:	d801      	bhi.n	8005b00 <_strtol_l.isra.0+0xb8>
 8005afc:	3c37      	subs	r4, #55	; 0x37
 8005afe:	e7e1      	b.n	8005ac4 <_strtol_l.isra.0+0x7c>
 8005b00:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005b04:	2f19      	cmp	r7, #25
 8005b06:	d804      	bhi.n	8005b12 <_strtol_l.isra.0+0xca>
 8005b08:	3c57      	subs	r4, #87	; 0x57
 8005b0a:	e7db      	b.n	8005ac4 <_strtol_l.isra.0+0x7c>
 8005b0c:	f04f 36ff 	mov.w	r6, #4294967295
 8005b10:	e7e4      	b.n	8005adc <_strtol_l.isra.0+0x94>
 8005b12:	2e00      	cmp	r6, #0
 8005b14:	da05      	bge.n	8005b22 <_strtol_l.isra.0+0xda>
 8005b16:	2322      	movs	r3, #34	; 0x22
 8005b18:	6003      	str	r3, [r0, #0]
 8005b1a:	4665      	mov	r5, ip
 8005b1c:	b942      	cbnz	r2, 8005b30 <_strtol_l.isra.0+0xe8>
 8005b1e:	4628      	mov	r0, r5
 8005b20:	e79d      	b.n	8005a5e <_strtol_l.isra.0+0x16>
 8005b22:	f1b8 0f00 	cmp.w	r8, #0
 8005b26:	d000      	beq.n	8005b2a <_strtol_l.isra.0+0xe2>
 8005b28:	426d      	negs	r5, r5
 8005b2a:	2a00      	cmp	r2, #0
 8005b2c:	d0f7      	beq.n	8005b1e <_strtol_l.isra.0+0xd6>
 8005b2e:	b10e      	cbz	r6, 8005b34 <_strtol_l.isra.0+0xec>
 8005b30:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005b34:	6011      	str	r1, [r2, #0]
 8005b36:	e7f2      	b.n	8005b1e <_strtol_l.isra.0+0xd6>
 8005b38:	2430      	movs	r4, #48	; 0x30
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1b3      	bne.n	8005aa6 <_strtol_l.isra.0+0x5e>
 8005b3e:	2308      	movs	r3, #8
 8005b40:	e7b1      	b.n	8005aa6 <_strtol_l.isra.0+0x5e>
 8005b42:	2c30      	cmp	r4, #48	; 0x30
 8005b44:	d0a4      	beq.n	8005a90 <_strtol_l.isra.0+0x48>
 8005b46:	230a      	movs	r3, #10
 8005b48:	e7ad      	b.n	8005aa6 <_strtol_l.isra.0+0x5e>
 8005b4a:	bf00      	nop
 8005b4c:	080099a1 	.word	0x080099a1

08005b50 <_strtol_r>:
 8005b50:	f7ff bf7a 	b.w	8005a48 <_strtol_l.isra.0>

08005b54 <quorem>:
 8005b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b58:	6903      	ldr	r3, [r0, #16]
 8005b5a:	690c      	ldr	r4, [r1, #16]
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	4607      	mov	r7, r0
 8005b60:	f2c0 8081 	blt.w	8005c66 <quorem+0x112>
 8005b64:	3c01      	subs	r4, #1
 8005b66:	f101 0814 	add.w	r8, r1, #20
 8005b6a:	f100 0514 	add.w	r5, r0, #20
 8005b6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b88:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b8c:	d331      	bcc.n	8005bf2 <quorem+0x9e>
 8005b8e:	f04f 0e00 	mov.w	lr, #0
 8005b92:	4640      	mov	r0, r8
 8005b94:	46ac      	mov	ip, r5
 8005b96:	46f2      	mov	sl, lr
 8005b98:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b9c:	b293      	uxth	r3, r2
 8005b9e:	fb06 e303 	mla	r3, r6, r3, lr
 8005ba2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	ebaa 0303 	sub.w	r3, sl, r3
 8005bac:	0c12      	lsrs	r2, r2, #16
 8005bae:	f8dc a000 	ldr.w	sl, [ip]
 8005bb2:	fb06 e202 	mla	r2, r6, r2, lr
 8005bb6:	fa13 f38a 	uxtah	r3, r3, sl
 8005bba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bbe:	fa1f fa82 	uxth.w	sl, r2
 8005bc2:	f8dc 2000 	ldr.w	r2, [ip]
 8005bc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005bca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bd4:	4581      	cmp	r9, r0
 8005bd6:	f84c 3b04 	str.w	r3, [ip], #4
 8005bda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bde:	d2db      	bcs.n	8005b98 <quorem+0x44>
 8005be0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005be4:	b92b      	cbnz	r3, 8005bf2 <quorem+0x9e>
 8005be6:	9b01      	ldr	r3, [sp, #4]
 8005be8:	3b04      	subs	r3, #4
 8005bea:	429d      	cmp	r5, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	d32e      	bcc.n	8005c4e <quorem+0xfa>
 8005bf0:	613c      	str	r4, [r7, #16]
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	f001 fc8c 	bl	8007510 <__mcmp>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	db24      	blt.n	8005c46 <quorem+0xf2>
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f04f 0c00 	mov.w	ip, #0
 8005c04:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c08:	f8d0 e000 	ldr.w	lr, [r0]
 8005c0c:	b293      	uxth	r3, r2
 8005c0e:	ebac 0303 	sub.w	r3, ip, r3
 8005c12:	0c12      	lsrs	r2, r2, #16
 8005c14:	fa13 f38e 	uxtah	r3, r3, lr
 8005c18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c26:	45c1      	cmp	r9, r8
 8005c28:	f840 3b04 	str.w	r3, [r0], #4
 8005c2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c30:	d2e8      	bcs.n	8005c04 <quorem+0xb0>
 8005c32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c3a:	b922      	cbnz	r2, 8005c46 <quorem+0xf2>
 8005c3c:	3b04      	subs	r3, #4
 8005c3e:	429d      	cmp	r5, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	d30a      	bcc.n	8005c5a <quorem+0x106>
 8005c44:	613c      	str	r4, [r7, #16]
 8005c46:	4630      	mov	r0, r6
 8005c48:	b003      	add	sp, #12
 8005c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	3b04      	subs	r3, #4
 8005c52:	2a00      	cmp	r2, #0
 8005c54:	d1cc      	bne.n	8005bf0 <quorem+0x9c>
 8005c56:	3c01      	subs	r4, #1
 8005c58:	e7c7      	b.n	8005bea <quorem+0x96>
 8005c5a:	6812      	ldr	r2, [r2, #0]
 8005c5c:	3b04      	subs	r3, #4
 8005c5e:	2a00      	cmp	r2, #0
 8005c60:	d1f0      	bne.n	8005c44 <quorem+0xf0>
 8005c62:	3c01      	subs	r4, #1
 8005c64:	e7eb      	b.n	8005c3e <quorem+0xea>
 8005c66:	2000      	movs	r0, #0
 8005c68:	e7ee      	b.n	8005c48 <quorem+0xf4>
 8005c6a:	0000      	movs	r0, r0
 8005c6c:	0000      	movs	r0, r0
	...

08005c70 <_dtoa_r>:
 8005c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	ed2d 8b02 	vpush	{d8}
 8005c78:	ec57 6b10 	vmov	r6, r7, d0
 8005c7c:	b095      	sub	sp, #84	; 0x54
 8005c7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005c84:	9105      	str	r1, [sp, #20]
 8005c86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c90:	b975      	cbnz	r5, 8005cb0 <_dtoa_r+0x40>
 8005c92:	2010      	movs	r0, #16
 8005c94:	f001 f94c 	bl	8006f30 <malloc>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	6260      	str	r0, [r4, #36]	; 0x24
 8005c9c:	b920      	cbnz	r0, 8005ca8 <_dtoa_r+0x38>
 8005c9e:	4bb2      	ldr	r3, [pc, #712]	; (8005f68 <_dtoa_r+0x2f8>)
 8005ca0:	21ea      	movs	r1, #234	; 0xea
 8005ca2:	48b2      	ldr	r0, [pc, #712]	; (8005f6c <_dtoa_r+0x2fc>)
 8005ca4:	f002 f874 	bl	8007d90 <__assert_func>
 8005ca8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cac:	6005      	str	r5, [r0, #0]
 8005cae:	60c5      	str	r5, [r0, #12]
 8005cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cb2:	6819      	ldr	r1, [r3, #0]
 8005cb4:	b151      	cbz	r1, 8005ccc <_dtoa_r+0x5c>
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	604a      	str	r2, [r1, #4]
 8005cba:	2301      	movs	r3, #1
 8005cbc:	4093      	lsls	r3, r2
 8005cbe:	608b      	str	r3, [r1, #8]
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f001 f99d 	bl	8007000 <_Bfree>
 8005cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	1e3b      	subs	r3, r7, #0
 8005cce:	bfb9      	ittee	lt
 8005cd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cd4:	9303      	strlt	r3, [sp, #12]
 8005cd6:	2300      	movge	r3, #0
 8005cd8:	f8c8 3000 	strge.w	r3, [r8]
 8005cdc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005ce0:	4ba3      	ldr	r3, [pc, #652]	; (8005f70 <_dtoa_r+0x300>)
 8005ce2:	bfbc      	itt	lt
 8005ce4:	2201      	movlt	r2, #1
 8005ce6:	f8c8 2000 	strlt.w	r2, [r8]
 8005cea:	ea33 0309 	bics.w	r3, r3, r9
 8005cee:	d11b      	bne.n	8005d28 <_dtoa_r+0xb8>
 8005cf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cfc:	4333      	orrs	r3, r6
 8005cfe:	f000 857a 	beq.w	80067f6 <_dtoa_r+0xb86>
 8005d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d04:	b963      	cbnz	r3, 8005d20 <_dtoa_r+0xb0>
 8005d06:	4b9b      	ldr	r3, [pc, #620]	; (8005f74 <_dtoa_r+0x304>)
 8005d08:	e024      	b.n	8005d54 <_dtoa_r+0xe4>
 8005d0a:	4b9b      	ldr	r3, [pc, #620]	; (8005f78 <_dtoa_r+0x308>)
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	9800      	ldr	r0, [sp, #0]
 8005d16:	b015      	add	sp, #84	; 0x54
 8005d18:	ecbd 8b02 	vpop	{d8}
 8005d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d20:	4b94      	ldr	r3, [pc, #592]	; (8005f74 <_dtoa_r+0x304>)
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	3303      	adds	r3, #3
 8005d26:	e7f3      	b.n	8005d10 <_dtoa_r+0xa0>
 8005d28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	ec51 0b17 	vmov	r0, r1, d7
 8005d32:	2300      	movs	r3, #0
 8005d34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005d38:	f7fa fec6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d3c:	4680      	mov	r8, r0
 8005d3e:	b158      	cbz	r0, 8005d58 <_dtoa_r+0xe8>
 8005d40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d42:	2301      	movs	r3, #1
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8551 	beq.w	80067f0 <_dtoa_r+0xb80>
 8005d4e:	488b      	ldr	r0, [pc, #556]	; (8005f7c <_dtoa_r+0x30c>)
 8005d50:	6018      	str	r0, [r3, #0]
 8005d52:	1e43      	subs	r3, r0, #1
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	e7dd      	b.n	8005d14 <_dtoa_r+0xa4>
 8005d58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005d5c:	aa12      	add	r2, sp, #72	; 0x48
 8005d5e:	a913      	add	r1, sp, #76	; 0x4c
 8005d60:	4620      	mov	r0, r4
 8005d62:	f001 fcf5 	bl	8007750 <__d2b>
 8005d66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d6a:	4683      	mov	fp, r0
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	d07c      	beq.n	8005e6a <_dtoa_r+0x1fa>
 8005d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005d7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005d82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005d86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d8a:	4b7d      	ldr	r3, [pc, #500]	; (8005f80 <_dtoa_r+0x310>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	4630      	mov	r0, r6
 8005d90:	4639      	mov	r1, r7
 8005d92:	f7fa fa79 	bl	8000288 <__aeabi_dsub>
 8005d96:	a36e      	add	r3, pc, #440	; (adr r3, 8005f50 <_dtoa_r+0x2e0>)
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f7fa fc2c 	bl	80005f8 <__aeabi_dmul>
 8005da0:	a36d      	add	r3, pc, #436	; (adr r3, 8005f58 <_dtoa_r+0x2e8>)
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f7fa fa71 	bl	800028c <__adddf3>
 8005daa:	4606      	mov	r6, r0
 8005dac:	4628      	mov	r0, r5
 8005dae:	460f      	mov	r7, r1
 8005db0:	f7fa fbb8 	bl	8000524 <__aeabi_i2d>
 8005db4:	a36a      	add	r3, pc, #424	; (adr r3, 8005f60 <_dtoa_r+0x2f0>)
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f7fa fc1d 	bl	80005f8 <__aeabi_dmul>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	f7fa fa61 	bl	800028c <__adddf3>
 8005dca:	4606      	mov	r6, r0
 8005dcc:	460f      	mov	r7, r1
 8005dce:	f7fa fec3 	bl	8000b58 <__aeabi_d2iz>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	4682      	mov	sl, r0
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	4630      	mov	r0, r6
 8005dda:	4639      	mov	r1, r7
 8005ddc:	f7fa fe7e 	bl	8000adc <__aeabi_dcmplt>
 8005de0:	b148      	cbz	r0, 8005df6 <_dtoa_r+0x186>
 8005de2:	4650      	mov	r0, sl
 8005de4:	f7fa fb9e 	bl	8000524 <__aeabi_i2d>
 8005de8:	4632      	mov	r2, r6
 8005dea:	463b      	mov	r3, r7
 8005dec:	f7fa fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005df0:	b908      	cbnz	r0, 8005df6 <_dtoa_r+0x186>
 8005df2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005df6:	f1ba 0f16 	cmp.w	sl, #22
 8005dfa:	d854      	bhi.n	8005ea6 <_dtoa_r+0x236>
 8005dfc:	4b61      	ldr	r3, [pc, #388]	; (8005f84 <_dtoa_r+0x314>)
 8005dfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e0a:	f7fa fe67 	bl	8000adc <__aeabi_dcmplt>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d04b      	beq.n	8005eaa <_dtoa_r+0x23a>
 8005e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e16:	2300      	movs	r3, #0
 8005e18:	930e      	str	r3, [sp, #56]	; 0x38
 8005e1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e1c:	1b5d      	subs	r5, r3, r5
 8005e1e:	1e6b      	subs	r3, r5, #1
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	bf43      	ittte	mi
 8005e24:	2300      	movmi	r3, #0
 8005e26:	f1c5 0801 	rsbmi	r8, r5, #1
 8005e2a:	9304      	strmi	r3, [sp, #16]
 8005e2c:	f04f 0800 	movpl.w	r8, #0
 8005e30:	f1ba 0f00 	cmp.w	sl, #0
 8005e34:	db3b      	blt.n	8005eae <_dtoa_r+0x23e>
 8005e36:	9b04      	ldr	r3, [sp, #16]
 8005e38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005e3c:	4453      	add	r3, sl
 8005e3e:	9304      	str	r3, [sp, #16]
 8005e40:	2300      	movs	r3, #0
 8005e42:	9306      	str	r3, [sp, #24]
 8005e44:	9b05      	ldr	r3, [sp, #20]
 8005e46:	2b09      	cmp	r3, #9
 8005e48:	d869      	bhi.n	8005f1e <_dtoa_r+0x2ae>
 8005e4a:	2b05      	cmp	r3, #5
 8005e4c:	bfc4      	itt	gt
 8005e4e:	3b04      	subgt	r3, #4
 8005e50:	9305      	strgt	r3, [sp, #20]
 8005e52:	9b05      	ldr	r3, [sp, #20]
 8005e54:	f1a3 0302 	sub.w	r3, r3, #2
 8005e58:	bfcc      	ite	gt
 8005e5a:	2500      	movgt	r5, #0
 8005e5c:	2501      	movle	r5, #1
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d869      	bhi.n	8005f36 <_dtoa_r+0x2c6>
 8005e62:	e8df f003 	tbb	[pc, r3]
 8005e66:	4e2c      	.short	0x4e2c
 8005e68:	5a4c      	.short	0x5a4c
 8005e6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005e6e:	441d      	add	r5, r3
 8005e70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	bfc1      	itttt	gt
 8005e78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005e80:	fa09 f303 	lslgt.w	r3, r9, r3
 8005e84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e88:	bfda      	itte	le
 8005e8a:	f1c3 0320 	rsble	r3, r3, #32
 8005e8e:	fa06 f003 	lslle.w	r0, r6, r3
 8005e92:	4318      	orrgt	r0, r3
 8005e94:	f7fa fb36 	bl	8000504 <__aeabi_ui2d>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ea0:	3d01      	subs	r5, #1
 8005ea2:	9310      	str	r3, [sp, #64]	; 0x40
 8005ea4:	e771      	b.n	8005d8a <_dtoa_r+0x11a>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e7b6      	b.n	8005e18 <_dtoa_r+0x1a8>
 8005eaa:	900e      	str	r0, [sp, #56]	; 0x38
 8005eac:	e7b5      	b.n	8005e1a <_dtoa_r+0x1aa>
 8005eae:	f1ca 0300 	rsb	r3, sl, #0
 8005eb2:	9306      	str	r3, [sp, #24]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	eba8 080a 	sub.w	r8, r8, sl
 8005eba:	930d      	str	r3, [sp, #52]	; 0x34
 8005ebc:	e7c2      	b.n	8005e44 <_dtoa_r+0x1d4>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9308      	str	r3, [sp, #32]
 8005ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dc39      	bgt.n	8005f3c <_dtoa_r+0x2cc>
 8005ec8:	f04f 0901 	mov.w	r9, #1
 8005ecc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005ed6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005ed8:	2200      	movs	r2, #0
 8005eda:	6042      	str	r2, [r0, #4]
 8005edc:	2204      	movs	r2, #4
 8005ede:	f102 0614 	add.w	r6, r2, #20
 8005ee2:	429e      	cmp	r6, r3
 8005ee4:	6841      	ldr	r1, [r0, #4]
 8005ee6:	d92f      	bls.n	8005f48 <_dtoa_r+0x2d8>
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f001 f849 	bl	8006f80 <_Balloc>
 8005eee:	9000      	str	r0, [sp, #0]
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d14b      	bne.n	8005f8c <_dtoa_r+0x31c>
 8005ef4:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <_dtoa_r+0x318>)
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005efc:	e6d1      	b.n	8005ca2 <_dtoa_r+0x32>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e7de      	b.n	8005ec0 <_dtoa_r+0x250>
 8005f02:	2300      	movs	r3, #0
 8005f04:	9308      	str	r3, [sp, #32]
 8005f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f08:	eb0a 0903 	add.w	r9, sl, r3
 8005f0c:	f109 0301 	add.w	r3, r9, #1
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	9301      	str	r3, [sp, #4]
 8005f14:	bfb8      	it	lt
 8005f16:	2301      	movlt	r3, #1
 8005f18:	e7dd      	b.n	8005ed6 <_dtoa_r+0x266>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e7f2      	b.n	8005f04 <_dtoa_r+0x294>
 8005f1e:	2501      	movs	r5, #1
 8005f20:	2300      	movs	r3, #0
 8005f22:	9305      	str	r3, [sp, #20]
 8005f24:	9508      	str	r5, [sp, #32]
 8005f26:	f04f 39ff 	mov.w	r9, #4294967295
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f30:	2312      	movs	r3, #18
 8005f32:	9209      	str	r2, [sp, #36]	; 0x24
 8005f34:	e7cf      	b.n	8005ed6 <_dtoa_r+0x266>
 8005f36:	2301      	movs	r3, #1
 8005f38:	9308      	str	r3, [sp, #32]
 8005f3a:	e7f4      	b.n	8005f26 <_dtoa_r+0x2b6>
 8005f3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005f40:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f44:	464b      	mov	r3, r9
 8005f46:	e7c6      	b.n	8005ed6 <_dtoa_r+0x266>
 8005f48:	3101      	adds	r1, #1
 8005f4a:	6041      	str	r1, [r0, #4]
 8005f4c:	0052      	lsls	r2, r2, #1
 8005f4e:	e7c6      	b.n	8005ede <_dtoa_r+0x26e>
 8005f50:	636f4361 	.word	0x636f4361
 8005f54:	3fd287a7 	.word	0x3fd287a7
 8005f58:	8b60c8b3 	.word	0x8b60c8b3
 8005f5c:	3fc68a28 	.word	0x3fc68a28
 8005f60:	509f79fb 	.word	0x509f79fb
 8005f64:	3fd34413 	.word	0x3fd34413
 8005f68:	08009aae 	.word	0x08009aae
 8005f6c:	08009ac5 	.word	0x08009ac5
 8005f70:	7ff00000 	.word	0x7ff00000
 8005f74:	08009aaa 	.word	0x08009aaa
 8005f78:	08009aa1 	.word	0x08009aa1
 8005f7c:	08009925 	.word	0x08009925
 8005f80:	3ff80000 	.word	0x3ff80000
 8005f84:	08009c40 	.word	0x08009c40
 8005f88:	08009b24 	.word	0x08009b24
 8005f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f8e:	9a00      	ldr	r2, [sp, #0]
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	9b01      	ldr	r3, [sp, #4]
 8005f94:	2b0e      	cmp	r3, #14
 8005f96:	f200 80ad 	bhi.w	80060f4 <_dtoa_r+0x484>
 8005f9a:	2d00      	cmp	r5, #0
 8005f9c:	f000 80aa 	beq.w	80060f4 <_dtoa_r+0x484>
 8005fa0:	f1ba 0f00 	cmp.w	sl, #0
 8005fa4:	dd36      	ble.n	8006014 <_dtoa_r+0x3a4>
 8005fa6:	4ac3      	ldr	r2, [pc, #780]	; (80062b4 <_dtoa_r+0x644>)
 8005fa8:	f00a 030f 	and.w	r3, sl, #15
 8005fac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005fb0:	ed93 7b00 	vldr	d7, [r3]
 8005fb4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005fb8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005fbc:	eeb0 8a47 	vmov.f32	s16, s14
 8005fc0:	eef0 8a67 	vmov.f32	s17, s15
 8005fc4:	d016      	beq.n	8005ff4 <_dtoa_r+0x384>
 8005fc6:	4bbc      	ldr	r3, [pc, #752]	; (80062b8 <_dtoa_r+0x648>)
 8005fc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fd0:	f7fa fc3c 	bl	800084c <__aeabi_ddiv>
 8005fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fd8:	f007 070f 	and.w	r7, r7, #15
 8005fdc:	2503      	movs	r5, #3
 8005fde:	4eb6      	ldr	r6, [pc, #728]	; (80062b8 <_dtoa_r+0x648>)
 8005fe0:	b957      	cbnz	r7, 8005ff8 <_dtoa_r+0x388>
 8005fe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fe6:	ec53 2b18 	vmov	r2, r3, d8
 8005fea:	f7fa fc2f 	bl	800084c <__aeabi_ddiv>
 8005fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ff2:	e029      	b.n	8006048 <_dtoa_r+0x3d8>
 8005ff4:	2502      	movs	r5, #2
 8005ff6:	e7f2      	b.n	8005fde <_dtoa_r+0x36e>
 8005ff8:	07f9      	lsls	r1, r7, #31
 8005ffa:	d508      	bpl.n	800600e <_dtoa_r+0x39e>
 8005ffc:	ec51 0b18 	vmov	r0, r1, d8
 8006000:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006004:	f7fa faf8 	bl	80005f8 <__aeabi_dmul>
 8006008:	ec41 0b18 	vmov	d8, r0, r1
 800600c:	3501      	adds	r5, #1
 800600e:	107f      	asrs	r7, r7, #1
 8006010:	3608      	adds	r6, #8
 8006012:	e7e5      	b.n	8005fe0 <_dtoa_r+0x370>
 8006014:	f000 80a6 	beq.w	8006164 <_dtoa_r+0x4f4>
 8006018:	f1ca 0600 	rsb	r6, sl, #0
 800601c:	4ba5      	ldr	r3, [pc, #660]	; (80062b4 <_dtoa_r+0x644>)
 800601e:	4fa6      	ldr	r7, [pc, #664]	; (80062b8 <_dtoa_r+0x648>)
 8006020:	f006 020f 	and.w	r2, r6, #15
 8006024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006030:	f7fa fae2 	bl	80005f8 <__aeabi_dmul>
 8006034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006038:	1136      	asrs	r6, r6, #4
 800603a:	2300      	movs	r3, #0
 800603c:	2502      	movs	r5, #2
 800603e:	2e00      	cmp	r6, #0
 8006040:	f040 8085 	bne.w	800614e <_dtoa_r+0x4de>
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1d2      	bne.n	8005fee <_dtoa_r+0x37e>
 8006048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 808c 	beq.w	8006168 <_dtoa_r+0x4f8>
 8006050:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006054:	4b99      	ldr	r3, [pc, #612]	; (80062bc <_dtoa_r+0x64c>)
 8006056:	2200      	movs	r2, #0
 8006058:	4630      	mov	r0, r6
 800605a:	4639      	mov	r1, r7
 800605c:	f7fa fd3e 	bl	8000adc <__aeabi_dcmplt>
 8006060:	2800      	cmp	r0, #0
 8006062:	f000 8081 	beq.w	8006168 <_dtoa_r+0x4f8>
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d07d      	beq.n	8006168 <_dtoa_r+0x4f8>
 800606c:	f1b9 0f00 	cmp.w	r9, #0
 8006070:	dd3c      	ble.n	80060ec <_dtoa_r+0x47c>
 8006072:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006076:	9307      	str	r3, [sp, #28]
 8006078:	2200      	movs	r2, #0
 800607a:	4b91      	ldr	r3, [pc, #580]	; (80062c0 <_dtoa_r+0x650>)
 800607c:	4630      	mov	r0, r6
 800607e:	4639      	mov	r1, r7
 8006080:	f7fa faba 	bl	80005f8 <__aeabi_dmul>
 8006084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006088:	3501      	adds	r5, #1
 800608a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800608e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006092:	4628      	mov	r0, r5
 8006094:	f7fa fa46 	bl	8000524 <__aeabi_i2d>
 8006098:	4632      	mov	r2, r6
 800609a:	463b      	mov	r3, r7
 800609c:	f7fa faac 	bl	80005f8 <__aeabi_dmul>
 80060a0:	4b88      	ldr	r3, [pc, #544]	; (80062c4 <_dtoa_r+0x654>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	f7fa f8f2 	bl	800028c <__adddf3>
 80060a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80060ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060b0:	9303      	str	r3, [sp, #12]
 80060b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d15c      	bne.n	8006172 <_dtoa_r+0x502>
 80060b8:	4b83      	ldr	r3, [pc, #524]	; (80062c8 <_dtoa_r+0x658>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	4630      	mov	r0, r6
 80060be:	4639      	mov	r1, r7
 80060c0:	f7fa f8e2 	bl	8000288 <__aeabi_dsub>
 80060c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060c8:	4606      	mov	r6, r0
 80060ca:	460f      	mov	r7, r1
 80060cc:	f7fa fd24 	bl	8000b18 <__aeabi_dcmpgt>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	f040 8296 	bne.w	8006602 <_dtoa_r+0x992>
 80060d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80060da:	4630      	mov	r0, r6
 80060dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060e0:	4639      	mov	r1, r7
 80060e2:	f7fa fcfb 	bl	8000adc <__aeabi_dcmplt>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	f040 8288 	bne.w	80065fc <_dtoa_r+0x98c>
 80060ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f2c0 8158 	blt.w	80063ac <_dtoa_r+0x73c>
 80060fc:	f1ba 0f0e 	cmp.w	sl, #14
 8006100:	f300 8154 	bgt.w	80063ac <_dtoa_r+0x73c>
 8006104:	4b6b      	ldr	r3, [pc, #428]	; (80062b4 <_dtoa_r+0x644>)
 8006106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800610a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800610e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006110:	2b00      	cmp	r3, #0
 8006112:	f280 80e3 	bge.w	80062dc <_dtoa_r+0x66c>
 8006116:	9b01      	ldr	r3, [sp, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f300 80df 	bgt.w	80062dc <_dtoa_r+0x66c>
 800611e:	f040 826d 	bne.w	80065fc <_dtoa_r+0x98c>
 8006122:	4b69      	ldr	r3, [pc, #420]	; (80062c8 <_dtoa_r+0x658>)
 8006124:	2200      	movs	r2, #0
 8006126:	4640      	mov	r0, r8
 8006128:	4649      	mov	r1, r9
 800612a:	f7fa fa65 	bl	80005f8 <__aeabi_dmul>
 800612e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006132:	f7fa fce7 	bl	8000b04 <__aeabi_dcmpge>
 8006136:	9e01      	ldr	r6, [sp, #4]
 8006138:	4637      	mov	r7, r6
 800613a:	2800      	cmp	r0, #0
 800613c:	f040 8243 	bne.w	80065c6 <_dtoa_r+0x956>
 8006140:	9d00      	ldr	r5, [sp, #0]
 8006142:	2331      	movs	r3, #49	; 0x31
 8006144:	f805 3b01 	strb.w	r3, [r5], #1
 8006148:	f10a 0a01 	add.w	sl, sl, #1
 800614c:	e23f      	b.n	80065ce <_dtoa_r+0x95e>
 800614e:	07f2      	lsls	r2, r6, #31
 8006150:	d505      	bpl.n	800615e <_dtoa_r+0x4ee>
 8006152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006156:	f7fa fa4f 	bl	80005f8 <__aeabi_dmul>
 800615a:	3501      	adds	r5, #1
 800615c:	2301      	movs	r3, #1
 800615e:	1076      	asrs	r6, r6, #1
 8006160:	3708      	adds	r7, #8
 8006162:	e76c      	b.n	800603e <_dtoa_r+0x3ce>
 8006164:	2502      	movs	r5, #2
 8006166:	e76f      	b.n	8006048 <_dtoa_r+0x3d8>
 8006168:	9b01      	ldr	r3, [sp, #4]
 800616a:	f8cd a01c 	str.w	sl, [sp, #28]
 800616e:	930c      	str	r3, [sp, #48]	; 0x30
 8006170:	e78d      	b.n	800608e <_dtoa_r+0x41e>
 8006172:	9900      	ldr	r1, [sp, #0]
 8006174:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006178:	4b4e      	ldr	r3, [pc, #312]	; (80062b4 <_dtoa_r+0x644>)
 800617a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800617e:	4401      	add	r1, r0
 8006180:	9102      	str	r1, [sp, #8]
 8006182:	9908      	ldr	r1, [sp, #32]
 8006184:	eeb0 8a47 	vmov.f32	s16, s14
 8006188:	eef0 8a67 	vmov.f32	s17, s15
 800618c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006190:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006194:	2900      	cmp	r1, #0
 8006196:	d045      	beq.n	8006224 <_dtoa_r+0x5b4>
 8006198:	494c      	ldr	r1, [pc, #304]	; (80062cc <_dtoa_r+0x65c>)
 800619a:	2000      	movs	r0, #0
 800619c:	f7fa fb56 	bl	800084c <__aeabi_ddiv>
 80061a0:	ec53 2b18 	vmov	r2, r3, d8
 80061a4:	f7fa f870 	bl	8000288 <__aeabi_dsub>
 80061a8:	9d00      	ldr	r5, [sp, #0]
 80061aa:	ec41 0b18 	vmov	d8, r0, r1
 80061ae:	4639      	mov	r1, r7
 80061b0:	4630      	mov	r0, r6
 80061b2:	f7fa fcd1 	bl	8000b58 <__aeabi_d2iz>
 80061b6:	900c      	str	r0, [sp, #48]	; 0x30
 80061b8:	f7fa f9b4 	bl	8000524 <__aeabi_i2d>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4630      	mov	r0, r6
 80061c2:	4639      	mov	r1, r7
 80061c4:	f7fa f860 	bl	8000288 <__aeabi_dsub>
 80061c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061ca:	3330      	adds	r3, #48	; 0x30
 80061cc:	f805 3b01 	strb.w	r3, [r5], #1
 80061d0:	ec53 2b18 	vmov	r2, r3, d8
 80061d4:	4606      	mov	r6, r0
 80061d6:	460f      	mov	r7, r1
 80061d8:	f7fa fc80 	bl	8000adc <__aeabi_dcmplt>
 80061dc:	2800      	cmp	r0, #0
 80061de:	d165      	bne.n	80062ac <_dtoa_r+0x63c>
 80061e0:	4632      	mov	r2, r6
 80061e2:	463b      	mov	r3, r7
 80061e4:	4935      	ldr	r1, [pc, #212]	; (80062bc <_dtoa_r+0x64c>)
 80061e6:	2000      	movs	r0, #0
 80061e8:	f7fa f84e 	bl	8000288 <__aeabi_dsub>
 80061ec:	ec53 2b18 	vmov	r2, r3, d8
 80061f0:	f7fa fc74 	bl	8000adc <__aeabi_dcmplt>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f040 80b9 	bne.w	800636c <_dtoa_r+0x6fc>
 80061fa:	9b02      	ldr	r3, [sp, #8]
 80061fc:	429d      	cmp	r5, r3
 80061fe:	f43f af75 	beq.w	80060ec <_dtoa_r+0x47c>
 8006202:	4b2f      	ldr	r3, [pc, #188]	; (80062c0 <_dtoa_r+0x650>)
 8006204:	ec51 0b18 	vmov	r0, r1, d8
 8006208:	2200      	movs	r2, #0
 800620a:	f7fa f9f5 	bl	80005f8 <__aeabi_dmul>
 800620e:	4b2c      	ldr	r3, [pc, #176]	; (80062c0 <_dtoa_r+0x650>)
 8006210:	ec41 0b18 	vmov	d8, r0, r1
 8006214:	2200      	movs	r2, #0
 8006216:	4630      	mov	r0, r6
 8006218:	4639      	mov	r1, r7
 800621a:	f7fa f9ed 	bl	80005f8 <__aeabi_dmul>
 800621e:	4606      	mov	r6, r0
 8006220:	460f      	mov	r7, r1
 8006222:	e7c4      	b.n	80061ae <_dtoa_r+0x53e>
 8006224:	ec51 0b17 	vmov	r0, r1, d7
 8006228:	f7fa f9e6 	bl	80005f8 <__aeabi_dmul>
 800622c:	9b02      	ldr	r3, [sp, #8]
 800622e:	9d00      	ldr	r5, [sp, #0]
 8006230:	930c      	str	r3, [sp, #48]	; 0x30
 8006232:	ec41 0b18 	vmov	d8, r0, r1
 8006236:	4639      	mov	r1, r7
 8006238:	4630      	mov	r0, r6
 800623a:	f7fa fc8d 	bl	8000b58 <__aeabi_d2iz>
 800623e:	9011      	str	r0, [sp, #68]	; 0x44
 8006240:	f7fa f970 	bl	8000524 <__aeabi_i2d>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4630      	mov	r0, r6
 800624a:	4639      	mov	r1, r7
 800624c:	f7fa f81c 	bl	8000288 <__aeabi_dsub>
 8006250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006252:	3330      	adds	r3, #48	; 0x30
 8006254:	f805 3b01 	strb.w	r3, [r5], #1
 8006258:	9b02      	ldr	r3, [sp, #8]
 800625a:	429d      	cmp	r5, r3
 800625c:	4606      	mov	r6, r0
 800625e:	460f      	mov	r7, r1
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	d134      	bne.n	80062d0 <_dtoa_r+0x660>
 8006266:	4b19      	ldr	r3, [pc, #100]	; (80062cc <_dtoa_r+0x65c>)
 8006268:	ec51 0b18 	vmov	r0, r1, d8
 800626c:	f7fa f80e 	bl	800028c <__adddf3>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4630      	mov	r0, r6
 8006276:	4639      	mov	r1, r7
 8006278:	f7fa fc4e 	bl	8000b18 <__aeabi_dcmpgt>
 800627c:	2800      	cmp	r0, #0
 800627e:	d175      	bne.n	800636c <_dtoa_r+0x6fc>
 8006280:	ec53 2b18 	vmov	r2, r3, d8
 8006284:	4911      	ldr	r1, [pc, #68]	; (80062cc <_dtoa_r+0x65c>)
 8006286:	2000      	movs	r0, #0
 8006288:	f7f9 fffe 	bl	8000288 <__aeabi_dsub>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4630      	mov	r0, r6
 8006292:	4639      	mov	r1, r7
 8006294:	f7fa fc22 	bl	8000adc <__aeabi_dcmplt>
 8006298:	2800      	cmp	r0, #0
 800629a:	f43f af27 	beq.w	80060ec <_dtoa_r+0x47c>
 800629e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062a0:	1e6b      	subs	r3, r5, #1
 80062a2:	930c      	str	r3, [sp, #48]	; 0x30
 80062a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062a8:	2b30      	cmp	r3, #48	; 0x30
 80062aa:	d0f8      	beq.n	800629e <_dtoa_r+0x62e>
 80062ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80062b0:	e04a      	b.n	8006348 <_dtoa_r+0x6d8>
 80062b2:	bf00      	nop
 80062b4:	08009c40 	.word	0x08009c40
 80062b8:	08009c18 	.word	0x08009c18
 80062bc:	3ff00000 	.word	0x3ff00000
 80062c0:	40240000 	.word	0x40240000
 80062c4:	401c0000 	.word	0x401c0000
 80062c8:	40140000 	.word	0x40140000
 80062cc:	3fe00000 	.word	0x3fe00000
 80062d0:	4baf      	ldr	r3, [pc, #700]	; (8006590 <_dtoa_r+0x920>)
 80062d2:	f7fa f991 	bl	80005f8 <__aeabi_dmul>
 80062d6:	4606      	mov	r6, r0
 80062d8:	460f      	mov	r7, r1
 80062da:	e7ac      	b.n	8006236 <_dtoa_r+0x5c6>
 80062dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062e0:	9d00      	ldr	r5, [sp, #0]
 80062e2:	4642      	mov	r2, r8
 80062e4:	464b      	mov	r3, r9
 80062e6:	4630      	mov	r0, r6
 80062e8:	4639      	mov	r1, r7
 80062ea:	f7fa faaf 	bl	800084c <__aeabi_ddiv>
 80062ee:	f7fa fc33 	bl	8000b58 <__aeabi_d2iz>
 80062f2:	9002      	str	r0, [sp, #8]
 80062f4:	f7fa f916 	bl	8000524 <__aeabi_i2d>
 80062f8:	4642      	mov	r2, r8
 80062fa:	464b      	mov	r3, r9
 80062fc:	f7fa f97c 	bl	80005f8 <__aeabi_dmul>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4630      	mov	r0, r6
 8006306:	4639      	mov	r1, r7
 8006308:	f7f9 ffbe 	bl	8000288 <__aeabi_dsub>
 800630c:	9e02      	ldr	r6, [sp, #8]
 800630e:	9f01      	ldr	r7, [sp, #4]
 8006310:	3630      	adds	r6, #48	; 0x30
 8006312:	f805 6b01 	strb.w	r6, [r5], #1
 8006316:	9e00      	ldr	r6, [sp, #0]
 8006318:	1bae      	subs	r6, r5, r6
 800631a:	42b7      	cmp	r7, r6
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	d137      	bne.n	8006392 <_dtoa_r+0x722>
 8006322:	f7f9 ffb3 	bl	800028c <__adddf3>
 8006326:	4642      	mov	r2, r8
 8006328:	464b      	mov	r3, r9
 800632a:	4606      	mov	r6, r0
 800632c:	460f      	mov	r7, r1
 800632e:	f7fa fbf3 	bl	8000b18 <__aeabi_dcmpgt>
 8006332:	b9c8      	cbnz	r0, 8006368 <_dtoa_r+0x6f8>
 8006334:	4642      	mov	r2, r8
 8006336:	464b      	mov	r3, r9
 8006338:	4630      	mov	r0, r6
 800633a:	4639      	mov	r1, r7
 800633c:	f7fa fbc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006340:	b110      	cbz	r0, 8006348 <_dtoa_r+0x6d8>
 8006342:	9b02      	ldr	r3, [sp, #8]
 8006344:	07d9      	lsls	r1, r3, #31
 8006346:	d40f      	bmi.n	8006368 <_dtoa_r+0x6f8>
 8006348:	4620      	mov	r0, r4
 800634a:	4659      	mov	r1, fp
 800634c:	f000 fe58 	bl	8007000 <_Bfree>
 8006350:	2300      	movs	r3, #0
 8006352:	702b      	strb	r3, [r5, #0]
 8006354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006356:	f10a 0001 	add.w	r0, sl, #1
 800635a:	6018      	str	r0, [r3, #0]
 800635c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800635e:	2b00      	cmp	r3, #0
 8006360:	f43f acd8 	beq.w	8005d14 <_dtoa_r+0xa4>
 8006364:	601d      	str	r5, [r3, #0]
 8006366:	e4d5      	b.n	8005d14 <_dtoa_r+0xa4>
 8006368:	f8cd a01c 	str.w	sl, [sp, #28]
 800636c:	462b      	mov	r3, r5
 800636e:	461d      	mov	r5, r3
 8006370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006374:	2a39      	cmp	r2, #57	; 0x39
 8006376:	d108      	bne.n	800638a <_dtoa_r+0x71a>
 8006378:	9a00      	ldr	r2, [sp, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d1f7      	bne.n	800636e <_dtoa_r+0x6fe>
 800637e:	9a07      	ldr	r2, [sp, #28]
 8006380:	9900      	ldr	r1, [sp, #0]
 8006382:	3201      	adds	r2, #1
 8006384:	9207      	str	r2, [sp, #28]
 8006386:	2230      	movs	r2, #48	; 0x30
 8006388:	700a      	strb	r2, [r1, #0]
 800638a:	781a      	ldrb	r2, [r3, #0]
 800638c:	3201      	adds	r2, #1
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	e78c      	b.n	80062ac <_dtoa_r+0x63c>
 8006392:	4b7f      	ldr	r3, [pc, #508]	; (8006590 <_dtoa_r+0x920>)
 8006394:	2200      	movs	r2, #0
 8006396:	f7fa f92f 	bl	80005f8 <__aeabi_dmul>
 800639a:	2200      	movs	r2, #0
 800639c:	2300      	movs	r3, #0
 800639e:	4606      	mov	r6, r0
 80063a0:	460f      	mov	r7, r1
 80063a2:	f7fa fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d09b      	beq.n	80062e2 <_dtoa_r+0x672>
 80063aa:	e7cd      	b.n	8006348 <_dtoa_r+0x6d8>
 80063ac:	9a08      	ldr	r2, [sp, #32]
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	f000 80c4 	beq.w	800653c <_dtoa_r+0x8cc>
 80063b4:	9a05      	ldr	r2, [sp, #20]
 80063b6:	2a01      	cmp	r2, #1
 80063b8:	f300 80a8 	bgt.w	800650c <_dtoa_r+0x89c>
 80063bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063be:	2a00      	cmp	r2, #0
 80063c0:	f000 80a0 	beq.w	8006504 <_dtoa_r+0x894>
 80063c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063c8:	9e06      	ldr	r6, [sp, #24]
 80063ca:	4645      	mov	r5, r8
 80063cc:	9a04      	ldr	r2, [sp, #16]
 80063ce:	2101      	movs	r1, #1
 80063d0:	441a      	add	r2, r3
 80063d2:	4620      	mov	r0, r4
 80063d4:	4498      	add	r8, r3
 80063d6:	9204      	str	r2, [sp, #16]
 80063d8:	f000 ff18 	bl	800720c <__i2b>
 80063dc:	4607      	mov	r7, r0
 80063de:	2d00      	cmp	r5, #0
 80063e0:	dd0b      	ble.n	80063fa <_dtoa_r+0x78a>
 80063e2:	9b04      	ldr	r3, [sp, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	dd08      	ble.n	80063fa <_dtoa_r+0x78a>
 80063e8:	42ab      	cmp	r3, r5
 80063ea:	9a04      	ldr	r2, [sp, #16]
 80063ec:	bfa8      	it	ge
 80063ee:	462b      	movge	r3, r5
 80063f0:	eba8 0803 	sub.w	r8, r8, r3
 80063f4:	1aed      	subs	r5, r5, r3
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	9b06      	ldr	r3, [sp, #24]
 80063fc:	b1fb      	cbz	r3, 800643e <_dtoa_r+0x7ce>
 80063fe:	9b08      	ldr	r3, [sp, #32]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 809f 	beq.w	8006544 <_dtoa_r+0x8d4>
 8006406:	2e00      	cmp	r6, #0
 8006408:	dd11      	ble.n	800642e <_dtoa_r+0x7be>
 800640a:	4639      	mov	r1, r7
 800640c:	4632      	mov	r2, r6
 800640e:	4620      	mov	r0, r4
 8006410:	f000 ffb8 	bl	8007384 <__pow5mult>
 8006414:	465a      	mov	r2, fp
 8006416:	4601      	mov	r1, r0
 8006418:	4607      	mov	r7, r0
 800641a:	4620      	mov	r0, r4
 800641c:	f000 ff0c 	bl	8007238 <__multiply>
 8006420:	4659      	mov	r1, fp
 8006422:	9007      	str	r0, [sp, #28]
 8006424:	4620      	mov	r0, r4
 8006426:	f000 fdeb 	bl	8007000 <_Bfree>
 800642a:	9b07      	ldr	r3, [sp, #28]
 800642c:	469b      	mov	fp, r3
 800642e:	9b06      	ldr	r3, [sp, #24]
 8006430:	1b9a      	subs	r2, r3, r6
 8006432:	d004      	beq.n	800643e <_dtoa_r+0x7ce>
 8006434:	4659      	mov	r1, fp
 8006436:	4620      	mov	r0, r4
 8006438:	f000 ffa4 	bl	8007384 <__pow5mult>
 800643c:	4683      	mov	fp, r0
 800643e:	2101      	movs	r1, #1
 8006440:	4620      	mov	r0, r4
 8006442:	f000 fee3 	bl	800720c <__i2b>
 8006446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006448:	2b00      	cmp	r3, #0
 800644a:	4606      	mov	r6, r0
 800644c:	dd7c      	ble.n	8006548 <_dtoa_r+0x8d8>
 800644e:	461a      	mov	r2, r3
 8006450:	4601      	mov	r1, r0
 8006452:	4620      	mov	r0, r4
 8006454:	f000 ff96 	bl	8007384 <__pow5mult>
 8006458:	9b05      	ldr	r3, [sp, #20]
 800645a:	2b01      	cmp	r3, #1
 800645c:	4606      	mov	r6, r0
 800645e:	dd76      	ble.n	800654e <_dtoa_r+0x8de>
 8006460:	2300      	movs	r3, #0
 8006462:	9306      	str	r3, [sp, #24]
 8006464:	6933      	ldr	r3, [r6, #16]
 8006466:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800646a:	6918      	ldr	r0, [r3, #16]
 800646c:	f000 fe7e 	bl	800716c <__hi0bits>
 8006470:	f1c0 0020 	rsb	r0, r0, #32
 8006474:	9b04      	ldr	r3, [sp, #16]
 8006476:	4418      	add	r0, r3
 8006478:	f010 001f 	ands.w	r0, r0, #31
 800647c:	f000 8086 	beq.w	800658c <_dtoa_r+0x91c>
 8006480:	f1c0 0320 	rsb	r3, r0, #32
 8006484:	2b04      	cmp	r3, #4
 8006486:	dd7f      	ble.n	8006588 <_dtoa_r+0x918>
 8006488:	f1c0 001c 	rsb	r0, r0, #28
 800648c:	9b04      	ldr	r3, [sp, #16]
 800648e:	4403      	add	r3, r0
 8006490:	4480      	add	r8, r0
 8006492:	4405      	add	r5, r0
 8006494:	9304      	str	r3, [sp, #16]
 8006496:	f1b8 0f00 	cmp.w	r8, #0
 800649a:	dd05      	ble.n	80064a8 <_dtoa_r+0x838>
 800649c:	4659      	mov	r1, fp
 800649e:	4642      	mov	r2, r8
 80064a0:	4620      	mov	r0, r4
 80064a2:	f000 ffc9 	bl	8007438 <__lshift>
 80064a6:	4683      	mov	fp, r0
 80064a8:	9b04      	ldr	r3, [sp, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	dd05      	ble.n	80064ba <_dtoa_r+0x84a>
 80064ae:	4631      	mov	r1, r6
 80064b0:	461a      	mov	r2, r3
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 ffc0 	bl	8007438 <__lshift>
 80064b8:	4606      	mov	r6, r0
 80064ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d069      	beq.n	8006594 <_dtoa_r+0x924>
 80064c0:	4631      	mov	r1, r6
 80064c2:	4658      	mov	r0, fp
 80064c4:	f001 f824 	bl	8007510 <__mcmp>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	da63      	bge.n	8006594 <_dtoa_r+0x924>
 80064cc:	2300      	movs	r3, #0
 80064ce:	4659      	mov	r1, fp
 80064d0:	220a      	movs	r2, #10
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 fdb6 	bl	8007044 <__multadd>
 80064d8:	9b08      	ldr	r3, [sp, #32]
 80064da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064de:	4683      	mov	fp, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 818f 	beq.w	8006804 <_dtoa_r+0xb94>
 80064e6:	4639      	mov	r1, r7
 80064e8:	2300      	movs	r3, #0
 80064ea:	220a      	movs	r2, #10
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 fda9 	bl	8007044 <__multadd>
 80064f2:	f1b9 0f00 	cmp.w	r9, #0
 80064f6:	4607      	mov	r7, r0
 80064f8:	f300 808e 	bgt.w	8006618 <_dtoa_r+0x9a8>
 80064fc:	9b05      	ldr	r3, [sp, #20]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	dc50      	bgt.n	80065a4 <_dtoa_r+0x934>
 8006502:	e089      	b.n	8006618 <_dtoa_r+0x9a8>
 8006504:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006506:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800650a:	e75d      	b.n	80063c8 <_dtoa_r+0x758>
 800650c:	9b01      	ldr	r3, [sp, #4]
 800650e:	1e5e      	subs	r6, r3, #1
 8006510:	9b06      	ldr	r3, [sp, #24]
 8006512:	42b3      	cmp	r3, r6
 8006514:	bfbf      	itttt	lt
 8006516:	9b06      	ldrlt	r3, [sp, #24]
 8006518:	9606      	strlt	r6, [sp, #24]
 800651a:	1af2      	sublt	r2, r6, r3
 800651c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800651e:	bfb6      	itet	lt
 8006520:	189b      	addlt	r3, r3, r2
 8006522:	1b9e      	subge	r6, r3, r6
 8006524:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006526:	9b01      	ldr	r3, [sp, #4]
 8006528:	bfb8      	it	lt
 800652a:	2600      	movlt	r6, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	bfb5      	itete	lt
 8006530:	eba8 0503 	sublt.w	r5, r8, r3
 8006534:	9b01      	ldrge	r3, [sp, #4]
 8006536:	2300      	movlt	r3, #0
 8006538:	4645      	movge	r5, r8
 800653a:	e747      	b.n	80063cc <_dtoa_r+0x75c>
 800653c:	9e06      	ldr	r6, [sp, #24]
 800653e:	9f08      	ldr	r7, [sp, #32]
 8006540:	4645      	mov	r5, r8
 8006542:	e74c      	b.n	80063de <_dtoa_r+0x76e>
 8006544:	9a06      	ldr	r2, [sp, #24]
 8006546:	e775      	b.n	8006434 <_dtoa_r+0x7c4>
 8006548:	9b05      	ldr	r3, [sp, #20]
 800654a:	2b01      	cmp	r3, #1
 800654c:	dc18      	bgt.n	8006580 <_dtoa_r+0x910>
 800654e:	9b02      	ldr	r3, [sp, #8]
 8006550:	b9b3      	cbnz	r3, 8006580 <_dtoa_r+0x910>
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006558:	b9a3      	cbnz	r3, 8006584 <_dtoa_r+0x914>
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006560:	0d1b      	lsrs	r3, r3, #20
 8006562:	051b      	lsls	r3, r3, #20
 8006564:	b12b      	cbz	r3, 8006572 <_dtoa_r+0x902>
 8006566:	9b04      	ldr	r3, [sp, #16]
 8006568:	3301      	adds	r3, #1
 800656a:	9304      	str	r3, [sp, #16]
 800656c:	f108 0801 	add.w	r8, r8, #1
 8006570:	2301      	movs	r3, #1
 8006572:	9306      	str	r3, [sp, #24]
 8006574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006576:	2b00      	cmp	r3, #0
 8006578:	f47f af74 	bne.w	8006464 <_dtoa_r+0x7f4>
 800657c:	2001      	movs	r0, #1
 800657e:	e779      	b.n	8006474 <_dtoa_r+0x804>
 8006580:	2300      	movs	r3, #0
 8006582:	e7f6      	b.n	8006572 <_dtoa_r+0x902>
 8006584:	9b02      	ldr	r3, [sp, #8]
 8006586:	e7f4      	b.n	8006572 <_dtoa_r+0x902>
 8006588:	d085      	beq.n	8006496 <_dtoa_r+0x826>
 800658a:	4618      	mov	r0, r3
 800658c:	301c      	adds	r0, #28
 800658e:	e77d      	b.n	800648c <_dtoa_r+0x81c>
 8006590:	40240000 	.word	0x40240000
 8006594:	9b01      	ldr	r3, [sp, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	dc38      	bgt.n	800660c <_dtoa_r+0x99c>
 800659a:	9b05      	ldr	r3, [sp, #20]
 800659c:	2b02      	cmp	r3, #2
 800659e:	dd35      	ble.n	800660c <_dtoa_r+0x99c>
 80065a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80065a4:	f1b9 0f00 	cmp.w	r9, #0
 80065a8:	d10d      	bne.n	80065c6 <_dtoa_r+0x956>
 80065aa:	4631      	mov	r1, r6
 80065ac:	464b      	mov	r3, r9
 80065ae:	2205      	movs	r2, #5
 80065b0:	4620      	mov	r0, r4
 80065b2:	f000 fd47 	bl	8007044 <__multadd>
 80065b6:	4601      	mov	r1, r0
 80065b8:	4606      	mov	r6, r0
 80065ba:	4658      	mov	r0, fp
 80065bc:	f000 ffa8 	bl	8007510 <__mcmp>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	f73f adbd 	bgt.w	8006140 <_dtoa_r+0x4d0>
 80065c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c8:	9d00      	ldr	r5, [sp, #0]
 80065ca:	ea6f 0a03 	mvn.w	sl, r3
 80065ce:	f04f 0800 	mov.w	r8, #0
 80065d2:	4631      	mov	r1, r6
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 fd13 	bl	8007000 <_Bfree>
 80065da:	2f00      	cmp	r7, #0
 80065dc:	f43f aeb4 	beq.w	8006348 <_dtoa_r+0x6d8>
 80065e0:	f1b8 0f00 	cmp.w	r8, #0
 80065e4:	d005      	beq.n	80065f2 <_dtoa_r+0x982>
 80065e6:	45b8      	cmp	r8, r7
 80065e8:	d003      	beq.n	80065f2 <_dtoa_r+0x982>
 80065ea:	4641      	mov	r1, r8
 80065ec:	4620      	mov	r0, r4
 80065ee:	f000 fd07 	bl	8007000 <_Bfree>
 80065f2:	4639      	mov	r1, r7
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fd03 	bl	8007000 <_Bfree>
 80065fa:	e6a5      	b.n	8006348 <_dtoa_r+0x6d8>
 80065fc:	2600      	movs	r6, #0
 80065fe:	4637      	mov	r7, r6
 8006600:	e7e1      	b.n	80065c6 <_dtoa_r+0x956>
 8006602:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006604:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006608:	4637      	mov	r7, r6
 800660a:	e599      	b.n	8006140 <_dtoa_r+0x4d0>
 800660c:	9b08      	ldr	r3, [sp, #32]
 800660e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 80fd 	beq.w	8006812 <_dtoa_r+0xba2>
 8006618:	2d00      	cmp	r5, #0
 800661a:	dd05      	ble.n	8006628 <_dtoa_r+0x9b8>
 800661c:	4639      	mov	r1, r7
 800661e:	462a      	mov	r2, r5
 8006620:	4620      	mov	r0, r4
 8006622:	f000 ff09 	bl	8007438 <__lshift>
 8006626:	4607      	mov	r7, r0
 8006628:	9b06      	ldr	r3, [sp, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d05c      	beq.n	80066e8 <_dtoa_r+0xa78>
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	4620      	mov	r0, r4
 8006632:	f000 fca5 	bl	8006f80 <_Balloc>
 8006636:	4605      	mov	r5, r0
 8006638:	b928      	cbnz	r0, 8006646 <_dtoa_r+0x9d6>
 800663a:	4b80      	ldr	r3, [pc, #512]	; (800683c <_dtoa_r+0xbcc>)
 800663c:	4602      	mov	r2, r0
 800663e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006642:	f7ff bb2e 	b.w	8005ca2 <_dtoa_r+0x32>
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	3202      	adds	r2, #2
 800664a:	0092      	lsls	r2, r2, #2
 800664c:	f107 010c 	add.w	r1, r7, #12
 8006650:	300c      	adds	r0, #12
 8006652:	f000 fc87 	bl	8006f64 <memcpy>
 8006656:	2201      	movs	r2, #1
 8006658:	4629      	mov	r1, r5
 800665a:	4620      	mov	r0, r4
 800665c:	f000 feec 	bl	8007438 <__lshift>
 8006660:	9b00      	ldr	r3, [sp, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	9b00      	ldr	r3, [sp, #0]
 8006668:	444b      	add	r3, r9
 800666a:	9307      	str	r3, [sp, #28]
 800666c:	9b02      	ldr	r3, [sp, #8]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	46b8      	mov	r8, r7
 8006674:	9306      	str	r3, [sp, #24]
 8006676:	4607      	mov	r7, r0
 8006678:	9b01      	ldr	r3, [sp, #4]
 800667a:	4631      	mov	r1, r6
 800667c:	3b01      	subs	r3, #1
 800667e:	4658      	mov	r0, fp
 8006680:	9302      	str	r3, [sp, #8]
 8006682:	f7ff fa67 	bl	8005b54 <quorem>
 8006686:	4603      	mov	r3, r0
 8006688:	3330      	adds	r3, #48	; 0x30
 800668a:	9004      	str	r0, [sp, #16]
 800668c:	4641      	mov	r1, r8
 800668e:	4658      	mov	r0, fp
 8006690:	9308      	str	r3, [sp, #32]
 8006692:	f000 ff3d 	bl	8007510 <__mcmp>
 8006696:	463a      	mov	r2, r7
 8006698:	4681      	mov	r9, r0
 800669a:	4631      	mov	r1, r6
 800669c:	4620      	mov	r0, r4
 800669e:	f000 ff53 	bl	8007548 <__mdiff>
 80066a2:	68c2      	ldr	r2, [r0, #12]
 80066a4:	9b08      	ldr	r3, [sp, #32]
 80066a6:	4605      	mov	r5, r0
 80066a8:	bb02      	cbnz	r2, 80066ec <_dtoa_r+0xa7c>
 80066aa:	4601      	mov	r1, r0
 80066ac:	4658      	mov	r0, fp
 80066ae:	f000 ff2f 	bl	8007510 <__mcmp>
 80066b2:	9b08      	ldr	r3, [sp, #32]
 80066b4:	4602      	mov	r2, r0
 80066b6:	4629      	mov	r1, r5
 80066b8:	4620      	mov	r0, r4
 80066ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80066be:	f000 fc9f 	bl	8007000 <_Bfree>
 80066c2:	9b05      	ldr	r3, [sp, #20]
 80066c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066c6:	9d01      	ldr	r5, [sp, #4]
 80066c8:	ea43 0102 	orr.w	r1, r3, r2
 80066cc:	9b06      	ldr	r3, [sp, #24]
 80066ce:	430b      	orrs	r3, r1
 80066d0:	9b08      	ldr	r3, [sp, #32]
 80066d2:	d10d      	bne.n	80066f0 <_dtoa_r+0xa80>
 80066d4:	2b39      	cmp	r3, #57	; 0x39
 80066d6:	d029      	beq.n	800672c <_dtoa_r+0xabc>
 80066d8:	f1b9 0f00 	cmp.w	r9, #0
 80066dc:	dd01      	ble.n	80066e2 <_dtoa_r+0xa72>
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	3331      	adds	r3, #49	; 0x31
 80066e2:	9a02      	ldr	r2, [sp, #8]
 80066e4:	7013      	strb	r3, [r2, #0]
 80066e6:	e774      	b.n	80065d2 <_dtoa_r+0x962>
 80066e8:	4638      	mov	r0, r7
 80066ea:	e7b9      	b.n	8006660 <_dtoa_r+0x9f0>
 80066ec:	2201      	movs	r2, #1
 80066ee:	e7e2      	b.n	80066b6 <_dtoa_r+0xa46>
 80066f0:	f1b9 0f00 	cmp.w	r9, #0
 80066f4:	db06      	blt.n	8006704 <_dtoa_r+0xa94>
 80066f6:	9905      	ldr	r1, [sp, #20]
 80066f8:	ea41 0909 	orr.w	r9, r1, r9
 80066fc:	9906      	ldr	r1, [sp, #24]
 80066fe:	ea59 0101 	orrs.w	r1, r9, r1
 8006702:	d120      	bne.n	8006746 <_dtoa_r+0xad6>
 8006704:	2a00      	cmp	r2, #0
 8006706:	ddec      	ble.n	80066e2 <_dtoa_r+0xa72>
 8006708:	4659      	mov	r1, fp
 800670a:	2201      	movs	r2, #1
 800670c:	4620      	mov	r0, r4
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	f000 fe92 	bl	8007438 <__lshift>
 8006714:	4631      	mov	r1, r6
 8006716:	4683      	mov	fp, r0
 8006718:	f000 fefa 	bl	8007510 <__mcmp>
 800671c:	2800      	cmp	r0, #0
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	dc02      	bgt.n	8006728 <_dtoa_r+0xab8>
 8006722:	d1de      	bne.n	80066e2 <_dtoa_r+0xa72>
 8006724:	07da      	lsls	r2, r3, #31
 8006726:	d5dc      	bpl.n	80066e2 <_dtoa_r+0xa72>
 8006728:	2b39      	cmp	r3, #57	; 0x39
 800672a:	d1d8      	bne.n	80066de <_dtoa_r+0xa6e>
 800672c:	9a02      	ldr	r2, [sp, #8]
 800672e:	2339      	movs	r3, #57	; 0x39
 8006730:	7013      	strb	r3, [r2, #0]
 8006732:	462b      	mov	r3, r5
 8006734:	461d      	mov	r5, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800673c:	2a39      	cmp	r2, #57	; 0x39
 800673e:	d050      	beq.n	80067e2 <_dtoa_r+0xb72>
 8006740:	3201      	adds	r2, #1
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	e745      	b.n	80065d2 <_dtoa_r+0x962>
 8006746:	2a00      	cmp	r2, #0
 8006748:	dd03      	ble.n	8006752 <_dtoa_r+0xae2>
 800674a:	2b39      	cmp	r3, #57	; 0x39
 800674c:	d0ee      	beq.n	800672c <_dtoa_r+0xabc>
 800674e:	3301      	adds	r3, #1
 8006750:	e7c7      	b.n	80066e2 <_dtoa_r+0xa72>
 8006752:	9a01      	ldr	r2, [sp, #4]
 8006754:	9907      	ldr	r1, [sp, #28]
 8006756:	f802 3c01 	strb.w	r3, [r2, #-1]
 800675a:	428a      	cmp	r2, r1
 800675c:	d02a      	beq.n	80067b4 <_dtoa_r+0xb44>
 800675e:	4659      	mov	r1, fp
 8006760:	2300      	movs	r3, #0
 8006762:	220a      	movs	r2, #10
 8006764:	4620      	mov	r0, r4
 8006766:	f000 fc6d 	bl	8007044 <__multadd>
 800676a:	45b8      	cmp	r8, r7
 800676c:	4683      	mov	fp, r0
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	f04f 020a 	mov.w	r2, #10
 8006776:	4641      	mov	r1, r8
 8006778:	4620      	mov	r0, r4
 800677a:	d107      	bne.n	800678c <_dtoa_r+0xb1c>
 800677c:	f000 fc62 	bl	8007044 <__multadd>
 8006780:	4680      	mov	r8, r0
 8006782:	4607      	mov	r7, r0
 8006784:	9b01      	ldr	r3, [sp, #4]
 8006786:	3301      	adds	r3, #1
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	e775      	b.n	8006678 <_dtoa_r+0xa08>
 800678c:	f000 fc5a 	bl	8007044 <__multadd>
 8006790:	4639      	mov	r1, r7
 8006792:	4680      	mov	r8, r0
 8006794:	2300      	movs	r3, #0
 8006796:	220a      	movs	r2, #10
 8006798:	4620      	mov	r0, r4
 800679a:	f000 fc53 	bl	8007044 <__multadd>
 800679e:	4607      	mov	r7, r0
 80067a0:	e7f0      	b.n	8006784 <_dtoa_r+0xb14>
 80067a2:	f1b9 0f00 	cmp.w	r9, #0
 80067a6:	9a00      	ldr	r2, [sp, #0]
 80067a8:	bfcc      	ite	gt
 80067aa:	464d      	movgt	r5, r9
 80067ac:	2501      	movle	r5, #1
 80067ae:	4415      	add	r5, r2
 80067b0:	f04f 0800 	mov.w	r8, #0
 80067b4:	4659      	mov	r1, fp
 80067b6:	2201      	movs	r2, #1
 80067b8:	4620      	mov	r0, r4
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	f000 fe3c 	bl	8007438 <__lshift>
 80067c0:	4631      	mov	r1, r6
 80067c2:	4683      	mov	fp, r0
 80067c4:	f000 fea4 	bl	8007510 <__mcmp>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	dcb2      	bgt.n	8006732 <_dtoa_r+0xac2>
 80067cc:	d102      	bne.n	80067d4 <_dtoa_r+0xb64>
 80067ce:	9b01      	ldr	r3, [sp, #4]
 80067d0:	07db      	lsls	r3, r3, #31
 80067d2:	d4ae      	bmi.n	8006732 <_dtoa_r+0xac2>
 80067d4:	462b      	mov	r3, r5
 80067d6:	461d      	mov	r5, r3
 80067d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067dc:	2a30      	cmp	r2, #48	; 0x30
 80067de:	d0fa      	beq.n	80067d6 <_dtoa_r+0xb66>
 80067e0:	e6f7      	b.n	80065d2 <_dtoa_r+0x962>
 80067e2:	9a00      	ldr	r2, [sp, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d1a5      	bne.n	8006734 <_dtoa_r+0xac4>
 80067e8:	f10a 0a01 	add.w	sl, sl, #1
 80067ec:	2331      	movs	r3, #49	; 0x31
 80067ee:	e779      	b.n	80066e4 <_dtoa_r+0xa74>
 80067f0:	4b13      	ldr	r3, [pc, #76]	; (8006840 <_dtoa_r+0xbd0>)
 80067f2:	f7ff baaf 	b.w	8005d54 <_dtoa_r+0xe4>
 80067f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f47f aa86 	bne.w	8005d0a <_dtoa_r+0x9a>
 80067fe:	4b11      	ldr	r3, [pc, #68]	; (8006844 <_dtoa_r+0xbd4>)
 8006800:	f7ff baa8 	b.w	8005d54 <_dtoa_r+0xe4>
 8006804:	f1b9 0f00 	cmp.w	r9, #0
 8006808:	dc03      	bgt.n	8006812 <_dtoa_r+0xba2>
 800680a:	9b05      	ldr	r3, [sp, #20]
 800680c:	2b02      	cmp	r3, #2
 800680e:	f73f aec9 	bgt.w	80065a4 <_dtoa_r+0x934>
 8006812:	9d00      	ldr	r5, [sp, #0]
 8006814:	4631      	mov	r1, r6
 8006816:	4658      	mov	r0, fp
 8006818:	f7ff f99c 	bl	8005b54 <quorem>
 800681c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006820:	f805 3b01 	strb.w	r3, [r5], #1
 8006824:	9a00      	ldr	r2, [sp, #0]
 8006826:	1aaa      	subs	r2, r5, r2
 8006828:	4591      	cmp	r9, r2
 800682a:	ddba      	ble.n	80067a2 <_dtoa_r+0xb32>
 800682c:	4659      	mov	r1, fp
 800682e:	2300      	movs	r3, #0
 8006830:	220a      	movs	r2, #10
 8006832:	4620      	mov	r0, r4
 8006834:	f000 fc06 	bl	8007044 <__multadd>
 8006838:	4683      	mov	fp, r0
 800683a:	e7eb      	b.n	8006814 <_dtoa_r+0xba4>
 800683c:	08009b24 	.word	0x08009b24
 8006840:	08009924 	.word	0x08009924
 8006844:	08009aa1 	.word	0x08009aa1

08006848 <rshift>:
 8006848:	6903      	ldr	r3, [r0, #16]
 800684a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800684e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006852:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006856:	f100 0414 	add.w	r4, r0, #20
 800685a:	dd45      	ble.n	80068e8 <rshift+0xa0>
 800685c:	f011 011f 	ands.w	r1, r1, #31
 8006860:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006864:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006868:	d10c      	bne.n	8006884 <rshift+0x3c>
 800686a:	f100 0710 	add.w	r7, r0, #16
 800686e:	4629      	mov	r1, r5
 8006870:	42b1      	cmp	r1, r6
 8006872:	d334      	bcc.n	80068de <rshift+0x96>
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	1eea      	subs	r2, r5, #3
 800687a:	4296      	cmp	r6, r2
 800687c:	bf38      	it	cc
 800687e:	2300      	movcc	r3, #0
 8006880:	4423      	add	r3, r4
 8006882:	e015      	b.n	80068b0 <rshift+0x68>
 8006884:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006888:	f1c1 0820 	rsb	r8, r1, #32
 800688c:	40cf      	lsrs	r7, r1
 800688e:	f105 0e04 	add.w	lr, r5, #4
 8006892:	46a1      	mov	r9, r4
 8006894:	4576      	cmp	r6, lr
 8006896:	46f4      	mov	ip, lr
 8006898:	d815      	bhi.n	80068c6 <rshift+0x7e>
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	009a      	lsls	r2, r3, #2
 800689e:	3a04      	subs	r2, #4
 80068a0:	3501      	adds	r5, #1
 80068a2:	42ae      	cmp	r6, r5
 80068a4:	bf38      	it	cc
 80068a6:	2200      	movcc	r2, #0
 80068a8:	18a3      	adds	r3, r4, r2
 80068aa:	50a7      	str	r7, [r4, r2]
 80068ac:	b107      	cbz	r7, 80068b0 <rshift+0x68>
 80068ae:	3304      	adds	r3, #4
 80068b0:	1b1a      	subs	r2, r3, r4
 80068b2:	42a3      	cmp	r3, r4
 80068b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80068b8:	bf08      	it	eq
 80068ba:	2300      	moveq	r3, #0
 80068bc:	6102      	str	r2, [r0, #16]
 80068be:	bf08      	it	eq
 80068c0:	6143      	streq	r3, [r0, #20]
 80068c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068c6:	f8dc c000 	ldr.w	ip, [ip]
 80068ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80068ce:	ea4c 0707 	orr.w	r7, ip, r7
 80068d2:	f849 7b04 	str.w	r7, [r9], #4
 80068d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80068da:	40cf      	lsrs	r7, r1
 80068dc:	e7da      	b.n	8006894 <rshift+0x4c>
 80068de:	f851 cb04 	ldr.w	ip, [r1], #4
 80068e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80068e6:	e7c3      	b.n	8006870 <rshift+0x28>
 80068e8:	4623      	mov	r3, r4
 80068ea:	e7e1      	b.n	80068b0 <rshift+0x68>

080068ec <__hexdig_fun>:
 80068ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80068f0:	2b09      	cmp	r3, #9
 80068f2:	d802      	bhi.n	80068fa <__hexdig_fun+0xe>
 80068f4:	3820      	subs	r0, #32
 80068f6:	b2c0      	uxtb	r0, r0
 80068f8:	4770      	bx	lr
 80068fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80068fe:	2b05      	cmp	r3, #5
 8006900:	d801      	bhi.n	8006906 <__hexdig_fun+0x1a>
 8006902:	3847      	subs	r0, #71	; 0x47
 8006904:	e7f7      	b.n	80068f6 <__hexdig_fun+0xa>
 8006906:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800690a:	2b05      	cmp	r3, #5
 800690c:	d801      	bhi.n	8006912 <__hexdig_fun+0x26>
 800690e:	3827      	subs	r0, #39	; 0x27
 8006910:	e7f1      	b.n	80068f6 <__hexdig_fun+0xa>
 8006912:	2000      	movs	r0, #0
 8006914:	4770      	bx	lr
	...

08006918 <__gethex>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	ed2d 8b02 	vpush	{d8}
 8006920:	b089      	sub	sp, #36	; 0x24
 8006922:	ee08 0a10 	vmov	s16, r0
 8006926:	9304      	str	r3, [sp, #16]
 8006928:	4bbc      	ldr	r3, [pc, #752]	; (8006c1c <__gethex+0x304>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	4618      	mov	r0, r3
 8006930:	468b      	mov	fp, r1
 8006932:	4690      	mov	r8, r2
 8006934:	f7f9 fc4c 	bl	80001d0 <strlen>
 8006938:	9b01      	ldr	r3, [sp, #4]
 800693a:	f8db 2000 	ldr.w	r2, [fp]
 800693e:	4403      	add	r3, r0
 8006940:	4682      	mov	sl, r0
 8006942:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006946:	9305      	str	r3, [sp, #20]
 8006948:	1c93      	adds	r3, r2, #2
 800694a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800694e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006952:	32fe      	adds	r2, #254	; 0xfe
 8006954:	18d1      	adds	r1, r2, r3
 8006956:	461f      	mov	r7, r3
 8006958:	f813 0b01 	ldrb.w	r0, [r3], #1
 800695c:	9100      	str	r1, [sp, #0]
 800695e:	2830      	cmp	r0, #48	; 0x30
 8006960:	d0f8      	beq.n	8006954 <__gethex+0x3c>
 8006962:	f7ff ffc3 	bl	80068ec <__hexdig_fun>
 8006966:	4604      	mov	r4, r0
 8006968:	2800      	cmp	r0, #0
 800696a:	d13a      	bne.n	80069e2 <__gethex+0xca>
 800696c:	9901      	ldr	r1, [sp, #4]
 800696e:	4652      	mov	r2, sl
 8006970:	4638      	mov	r0, r7
 8006972:	f001 f9ed 	bl	8007d50 <strncmp>
 8006976:	4605      	mov	r5, r0
 8006978:	2800      	cmp	r0, #0
 800697a:	d168      	bne.n	8006a4e <__gethex+0x136>
 800697c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006980:	eb07 060a 	add.w	r6, r7, sl
 8006984:	f7ff ffb2 	bl	80068ec <__hexdig_fun>
 8006988:	2800      	cmp	r0, #0
 800698a:	d062      	beq.n	8006a52 <__gethex+0x13a>
 800698c:	4633      	mov	r3, r6
 800698e:	7818      	ldrb	r0, [r3, #0]
 8006990:	2830      	cmp	r0, #48	; 0x30
 8006992:	461f      	mov	r7, r3
 8006994:	f103 0301 	add.w	r3, r3, #1
 8006998:	d0f9      	beq.n	800698e <__gethex+0x76>
 800699a:	f7ff ffa7 	bl	80068ec <__hexdig_fun>
 800699e:	2301      	movs	r3, #1
 80069a0:	fab0 f480 	clz	r4, r0
 80069a4:	0964      	lsrs	r4, r4, #5
 80069a6:	4635      	mov	r5, r6
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	463a      	mov	r2, r7
 80069ac:	4616      	mov	r6, r2
 80069ae:	3201      	adds	r2, #1
 80069b0:	7830      	ldrb	r0, [r6, #0]
 80069b2:	f7ff ff9b 	bl	80068ec <__hexdig_fun>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d1f8      	bne.n	80069ac <__gethex+0x94>
 80069ba:	9901      	ldr	r1, [sp, #4]
 80069bc:	4652      	mov	r2, sl
 80069be:	4630      	mov	r0, r6
 80069c0:	f001 f9c6 	bl	8007d50 <strncmp>
 80069c4:	b980      	cbnz	r0, 80069e8 <__gethex+0xd0>
 80069c6:	b94d      	cbnz	r5, 80069dc <__gethex+0xc4>
 80069c8:	eb06 050a 	add.w	r5, r6, sl
 80069cc:	462a      	mov	r2, r5
 80069ce:	4616      	mov	r6, r2
 80069d0:	3201      	adds	r2, #1
 80069d2:	7830      	ldrb	r0, [r6, #0]
 80069d4:	f7ff ff8a 	bl	80068ec <__hexdig_fun>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d1f8      	bne.n	80069ce <__gethex+0xb6>
 80069dc:	1bad      	subs	r5, r5, r6
 80069de:	00ad      	lsls	r5, r5, #2
 80069e0:	e004      	b.n	80069ec <__gethex+0xd4>
 80069e2:	2400      	movs	r4, #0
 80069e4:	4625      	mov	r5, r4
 80069e6:	e7e0      	b.n	80069aa <__gethex+0x92>
 80069e8:	2d00      	cmp	r5, #0
 80069ea:	d1f7      	bne.n	80069dc <__gethex+0xc4>
 80069ec:	7833      	ldrb	r3, [r6, #0]
 80069ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069f2:	2b50      	cmp	r3, #80	; 0x50
 80069f4:	d13b      	bne.n	8006a6e <__gethex+0x156>
 80069f6:	7873      	ldrb	r3, [r6, #1]
 80069f8:	2b2b      	cmp	r3, #43	; 0x2b
 80069fa:	d02c      	beq.n	8006a56 <__gethex+0x13e>
 80069fc:	2b2d      	cmp	r3, #45	; 0x2d
 80069fe:	d02e      	beq.n	8006a5e <__gethex+0x146>
 8006a00:	1c71      	adds	r1, r6, #1
 8006a02:	f04f 0900 	mov.w	r9, #0
 8006a06:	7808      	ldrb	r0, [r1, #0]
 8006a08:	f7ff ff70 	bl	80068ec <__hexdig_fun>
 8006a0c:	1e43      	subs	r3, r0, #1
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b18      	cmp	r3, #24
 8006a12:	d82c      	bhi.n	8006a6e <__gethex+0x156>
 8006a14:	f1a0 0210 	sub.w	r2, r0, #16
 8006a18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a1c:	f7ff ff66 	bl	80068ec <__hexdig_fun>
 8006a20:	1e43      	subs	r3, r0, #1
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b18      	cmp	r3, #24
 8006a26:	d91d      	bls.n	8006a64 <__gethex+0x14c>
 8006a28:	f1b9 0f00 	cmp.w	r9, #0
 8006a2c:	d000      	beq.n	8006a30 <__gethex+0x118>
 8006a2e:	4252      	negs	r2, r2
 8006a30:	4415      	add	r5, r2
 8006a32:	f8cb 1000 	str.w	r1, [fp]
 8006a36:	b1e4      	cbz	r4, 8006a72 <__gethex+0x15a>
 8006a38:	9b00      	ldr	r3, [sp, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bf14      	ite	ne
 8006a3e:	2700      	movne	r7, #0
 8006a40:	2706      	moveq	r7, #6
 8006a42:	4638      	mov	r0, r7
 8006a44:	b009      	add	sp, #36	; 0x24
 8006a46:	ecbd 8b02 	vpop	{d8}
 8006a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4e:	463e      	mov	r6, r7
 8006a50:	4625      	mov	r5, r4
 8006a52:	2401      	movs	r4, #1
 8006a54:	e7ca      	b.n	80069ec <__gethex+0xd4>
 8006a56:	f04f 0900 	mov.w	r9, #0
 8006a5a:	1cb1      	adds	r1, r6, #2
 8006a5c:	e7d3      	b.n	8006a06 <__gethex+0xee>
 8006a5e:	f04f 0901 	mov.w	r9, #1
 8006a62:	e7fa      	b.n	8006a5a <__gethex+0x142>
 8006a64:	230a      	movs	r3, #10
 8006a66:	fb03 0202 	mla	r2, r3, r2, r0
 8006a6a:	3a10      	subs	r2, #16
 8006a6c:	e7d4      	b.n	8006a18 <__gethex+0x100>
 8006a6e:	4631      	mov	r1, r6
 8006a70:	e7df      	b.n	8006a32 <__gethex+0x11a>
 8006a72:	1bf3      	subs	r3, r6, r7
 8006a74:	3b01      	subs	r3, #1
 8006a76:	4621      	mov	r1, r4
 8006a78:	2b07      	cmp	r3, #7
 8006a7a:	dc0b      	bgt.n	8006a94 <__gethex+0x17c>
 8006a7c:	ee18 0a10 	vmov	r0, s16
 8006a80:	f000 fa7e 	bl	8006f80 <_Balloc>
 8006a84:	4604      	mov	r4, r0
 8006a86:	b940      	cbnz	r0, 8006a9a <__gethex+0x182>
 8006a88:	4b65      	ldr	r3, [pc, #404]	; (8006c20 <__gethex+0x308>)
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	21de      	movs	r1, #222	; 0xde
 8006a8e:	4865      	ldr	r0, [pc, #404]	; (8006c24 <__gethex+0x30c>)
 8006a90:	f001 f97e 	bl	8007d90 <__assert_func>
 8006a94:	3101      	adds	r1, #1
 8006a96:	105b      	asrs	r3, r3, #1
 8006a98:	e7ee      	b.n	8006a78 <__gethex+0x160>
 8006a9a:	f100 0914 	add.w	r9, r0, #20
 8006a9e:	f04f 0b00 	mov.w	fp, #0
 8006aa2:	f1ca 0301 	rsb	r3, sl, #1
 8006aa6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006aaa:	f8cd b000 	str.w	fp, [sp]
 8006aae:	9306      	str	r3, [sp, #24]
 8006ab0:	42b7      	cmp	r7, r6
 8006ab2:	d340      	bcc.n	8006b36 <__gethex+0x21e>
 8006ab4:	9802      	ldr	r0, [sp, #8]
 8006ab6:	9b00      	ldr	r3, [sp, #0]
 8006ab8:	f840 3b04 	str.w	r3, [r0], #4
 8006abc:	eba0 0009 	sub.w	r0, r0, r9
 8006ac0:	1080      	asrs	r0, r0, #2
 8006ac2:	0146      	lsls	r6, r0, #5
 8006ac4:	6120      	str	r0, [r4, #16]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fb50 	bl	800716c <__hi0bits>
 8006acc:	1a30      	subs	r0, r6, r0
 8006ace:	f8d8 6000 	ldr.w	r6, [r8]
 8006ad2:	42b0      	cmp	r0, r6
 8006ad4:	dd63      	ble.n	8006b9e <__gethex+0x286>
 8006ad6:	1b87      	subs	r7, r0, r6
 8006ad8:	4639      	mov	r1, r7
 8006ada:	4620      	mov	r0, r4
 8006adc:	f000 feea 	bl	80078b4 <__any_on>
 8006ae0:	4682      	mov	sl, r0
 8006ae2:	b1a8      	cbz	r0, 8006b10 <__gethex+0x1f8>
 8006ae4:	1e7b      	subs	r3, r7, #1
 8006ae6:	1159      	asrs	r1, r3, #5
 8006ae8:	f003 021f 	and.w	r2, r3, #31
 8006aec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006af0:	f04f 0a01 	mov.w	sl, #1
 8006af4:	fa0a f202 	lsl.w	r2, sl, r2
 8006af8:	420a      	tst	r2, r1
 8006afa:	d009      	beq.n	8006b10 <__gethex+0x1f8>
 8006afc:	4553      	cmp	r3, sl
 8006afe:	dd05      	ble.n	8006b0c <__gethex+0x1f4>
 8006b00:	1eb9      	subs	r1, r7, #2
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 fed6 	bl	80078b4 <__any_on>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d145      	bne.n	8006b98 <__gethex+0x280>
 8006b0c:	f04f 0a02 	mov.w	sl, #2
 8006b10:	4639      	mov	r1, r7
 8006b12:	4620      	mov	r0, r4
 8006b14:	f7ff fe98 	bl	8006848 <rshift>
 8006b18:	443d      	add	r5, r7
 8006b1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b1e:	42ab      	cmp	r3, r5
 8006b20:	da4c      	bge.n	8006bbc <__gethex+0x2a4>
 8006b22:	ee18 0a10 	vmov	r0, s16
 8006b26:	4621      	mov	r1, r4
 8006b28:	f000 fa6a 	bl	8007000 <_Bfree>
 8006b2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	27a3      	movs	r7, #163	; 0xa3
 8006b34:	e785      	b.n	8006a42 <__gethex+0x12a>
 8006b36:	1e73      	subs	r3, r6, #1
 8006b38:	9a05      	ldr	r2, [sp, #20]
 8006b3a:	9303      	str	r3, [sp, #12]
 8006b3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d019      	beq.n	8006b78 <__gethex+0x260>
 8006b44:	f1bb 0f20 	cmp.w	fp, #32
 8006b48:	d107      	bne.n	8006b5a <__gethex+0x242>
 8006b4a:	9b02      	ldr	r3, [sp, #8]
 8006b4c:	9a00      	ldr	r2, [sp, #0]
 8006b4e:	f843 2b04 	str.w	r2, [r3], #4
 8006b52:	9302      	str	r3, [sp, #8]
 8006b54:	2300      	movs	r3, #0
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	469b      	mov	fp, r3
 8006b5a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006b5e:	f7ff fec5 	bl	80068ec <__hexdig_fun>
 8006b62:	9b00      	ldr	r3, [sp, #0]
 8006b64:	f000 000f 	and.w	r0, r0, #15
 8006b68:	fa00 f00b 	lsl.w	r0, r0, fp
 8006b6c:	4303      	orrs	r3, r0
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	f10b 0b04 	add.w	fp, fp, #4
 8006b74:	9b03      	ldr	r3, [sp, #12]
 8006b76:	e00d      	b.n	8006b94 <__gethex+0x27c>
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	9a06      	ldr	r2, [sp, #24]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	42bb      	cmp	r3, r7
 8006b80:	d3e0      	bcc.n	8006b44 <__gethex+0x22c>
 8006b82:	4618      	mov	r0, r3
 8006b84:	9901      	ldr	r1, [sp, #4]
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	4652      	mov	r2, sl
 8006b8a:	f001 f8e1 	bl	8007d50 <strncmp>
 8006b8e:	9b07      	ldr	r3, [sp, #28]
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d1d7      	bne.n	8006b44 <__gethex+0x22c>
 8006b94:	461e      	mov	r6, r3
 8006b96:	e78b      	b.n	8006ab0 <__gethex+0x198>
 8006b98:	f04f 0a03 	mov.w	sl, #3
 8006b9c:	e7b8      	b.n	8006b10 <__gethex+0x1f8>
 8006b9e:	da0a      	bge.n	8006bb6 <__gethex+0x29e>
 8006ba0:	1a37      	subs	r7, r6, r0
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	ee18 0a10 	vmov	r0, s16
 8006ba8:	463a      	mov	r2, r7
 8006baa:	f000 fc45 	bl	8007438 <__lshift>
 8006bae:	1bed      	subs	r5, r5, r7
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	f100 0914 	add.w	r9, r0, #20
 8006bb6:	f04f 0a00 	mov.w	sl, #0
 8006bba:	e7ae      	b.n	8006b1a <__gethex+0x202>
 8006bbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006bc0:	42a8      	cmp	r0, r5
 8006bc2:	dd72      	ble.n	8006caa <__gethex+0x392>
 8006bc4:	1b45      	subs	r5, r0, r5
 8006bc6:	42ae      	cmp	r6, r5
 8006bc8:	dc36      	bgt.n	8006c38 <__gethex+0x320>
 8006bca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d02a      	beq.n	8006c28 <__gethex+0x310>
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d02c      	beq.n	8006c30 <__gethex+0x318>
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d115      	bne.n	8006c06 <__gethex+0x2ee>
 8006bda:	42ae      	cmp	r6, r5
 8006bdc:	d113      	bne.n	8006c06 <__gethex+0x2ee>
 8006bde:	2e01      	cmp	r6, #1
 8006be0:	d10b      	bne.n	8006bfa <__gethex+0x2e2>
 8006be2:	9a04      	ldr	r2, [sp, #16]
 8006be4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	2301      	movs	r3, #1
 8006bec:	6123      	str	r3, [r4, #16]
 8006bee:	f8c9 3000 	str.w	r3, [r9]
 8006bf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bf4:	2762      	movs	r7, #98	; 0x62
 8006bf6:	601c      	str	r4, [r3, #0]
 8006bf8:	e723      	b.n	8006a42 <__gethex+0x12a>
 8006bfa:	1e71      	subs	r1, r6, #1
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 fe59 	bl	80078b4 <__any_on>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d1ed      	bne.n	8006be2 <__gethex+0x2ca>
 8006c06:	ee18 0a10 	vmov	r0, s16
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	f000 f9f8 	bl	8007000 <_Bfree>
 8006c10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c12:	2300      	movs	r3, #0
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	2750      	movs	r7, #80	; 0x50
 8006c18:	e713      	b.n	8006a42 <__gethex+0x12a>
 8006c1a:	bf00      	nop
 8006c1c:	08009ba0 	.word	0x08009ba0
 8006c20:	08009b24 	.word	0x08009b24
 8006c24:	08009b35 	.word	0x08009b35
 8006c28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1eb      	bne.n	8006c06 <__gethex+0x2ee>
 8006c2e:	e7d8      	b.n	8006be2 <__gethex+0x2ca>
 8006c30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1d5      	bne.n	8006be2 <__gethex+0x2ca>
 8006c36:	e7e6      	b.n	8006c06 <__gethex+0x2ee>
 8006c38:	1e6f      	subs	r7, r5, #1
 8006c3a:	f1ba 0f00 	cmp.w	sl, #0
 8006c3e:	d131      	bne.n	8006ca4 <__gethex+0x38c>
 8006c40:	b127      	cbz	r7, 8006c4c <__gethex+0x334>
 8006c42:	4639      	mov	r1, r7
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fe35 	bl	80078b4 <__any_on>
 8006c4a:	4682      	mov	sl, r0
 8006c4c:	117b      	asrs	r3, r7, #5
 8006c4e:	2101      	movs	r1, #1
 8006c50:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006c54:	f007 071f 	and.w	r7, r7, #31
 8006c58:	fa01 f707 	lsl.w	r7, r1, r7
 8006c5c:	421f      	tst	r7, r3
 8006c5e:	4629      	mov	r1, r5
 8006c60:	4620      	mov	r0, r4
 8006c62:	bf18      	it	ne
 8006c64:	f04a 0a02 	orrne.w	sl, sl, #2
 8006c68:	1b76      	subs	r6, r6, r5
 8006c6a:	f7ff fded 	bl	8006848 <rshift>
 8006c6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006c72:	2702      	movs	r7, #2
 8006c74:	f1ba 0f00 	cmp.w	sl, #0
 8006c78:	d048      	beq.n	8006d0c <__gethex+0x3f4>
 8006c7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d015      	beq.n	8006cae <__gethex+0x396>
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d017      	beq.n	8006cb6 <__gethex+0x39e>
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d109      	bne.n	8006c9e <__gethex+0x386>
 8006c8a:	f01a 0f02 	tst.w	sl, #2
 8006c8e:	d006      	beq.n	8006c9e <__gethex+0x386>
 8006c90:	f8d9 0000 	ldr.w	r0, [r9]
 8006c94:	ea4a 0a00 	orr.w	sl, sl, r0
 8006c98:	f01a 0f01 	tst.w	sl, #1
 8006c9c:	d10e      	bne.n	8006cbc <__gethex+0x3a4>
 8006c9e:	f047 0710 	orr.w	r7, r7, #16
 8006ca2:	e033      	b.n	8006d0c <__gethex+0x3f4>
 8006ca4:	f04f 0a01 	mov.w	sl, #1
 8006ca8:	e7d0      	b.n	8006c4c <__gethex+0x334>
 8006caa:	2701      	movs	r7, #1
 8006cac:	e7e2      	b.n	8006c74 <__gethex+0x35c>
 8006cae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cb0:	f1c3 0301 	rsb	r3, r3, #1
 8006cb4:	9315      	str	r3, [sp, #84]	; 0x54
 8006cb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0f0      	beq.n	8006c9e <__gethex+0x386>
 8006cbc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006cc0:	f104 0314 	add.w	r3, r4, #20
 8006cc4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006cc8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006ccc:	f04f 0c00 	mov.w	ip, #0
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006cda:	d01c      	beq.n	8006d16 <__gethex+0x3fe>
 8006cdc:	3201      	adds	r2, #1
 8006cde:	6002      	str	r2, [r0, #0]
 8006ce0:	2f02      	cmp	r7, #2
 8006ce2:	f104 0314 	add.w	r3, r4, #20
 8006ce6:	d13f      	bne.n	8006d68 <__gethex+0x450>
 8006ce8:	f8d8 2000 	ldr.w	r2, [r8]
 8006cec:	3a01      	subs	r2, #1
 8006cee:	42b2      	cmp	r2, r6
 8006cf0:	d10a      	bne.n	8006d08 <__gethex+0x3f0>
 8006cf2:	1171      	asrs	r1, r6, #5
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cfa:	f006 061f 	and.w	r6, r6, #31
 8006cfe:	fa02 f606 	lsl.w	r6, r2, r6
 8006d02:	421e      	tst	r6, r3
 8006d04:	bf18      	it	ne
 8006d06:	4617      	movne	r7, r2
 8006d08:	f047 0720 	orr.w	r7, r7, #32
 8006d0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d0e:	601c      	str	r4, [r3, #0]
 8006d10:	9b04      	ldr	r3, [sp, #16]
 8006d12:	601d      	str	r5, [r3, #0]
 8006d14:	e695      	b.n	8006a42 <__gethex+0x12a>
 8006d16:	4299      	cmp	r1, r3
 8006d18:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d1c:	d8d8      	bhi.n	8006cd0 <__gethex+0x3b8>
 8006d1e:	68a3      	ldr	r3, [r4, #8]
 8006d20:	459b      	cmp	fp, r3
 8006d22:	db19      	blt.n	8006d58 <__gethex+0x440>
 8006d24:	6861      	ldr	r1, [r4, #4]
 8006d26:	ee18 0a10 	vmov	r0, s16
 8006d2a:	3101      	adds	r1, #1
 8006d2c:	f000 f928 	bl	8006f80 <_Balloc>
 8006d30:	4681      	mov	r9, r0
 8006d32:	b918      	cbnz	r0, 8006d3c <__gethex+0x424>
 8006d34:	4b1a      	ldr	r3, [pc, #104]	; (8006da0 <__gethex+0x488>)
 8006d36:	4602      	mov	r2, r0
 8006d38:	2184      	movs	r1, #132	; 0x84
 8006d3a:	e6a8      	b.n	8006a8e <__gethex+0x176>
 8006d3c:	6922      	ldr	r2, [r4, #16]
 8006d3e:	3202      	adds	r2, #2
 8006d40:	f104 010c 	add.w	r1, r4, #12
 8006d44:	0092      	lsls	r2, r2, #2
 8006d46:	300c      	adds	r0, #12
 8006d48:	f000 f90c 	bl	8006f64 <memcpy>
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	ee18 0a10 	vmov	r0, s16
 8006d52:	f000 f955 	bl	8007000 <_Bfree>
 8006d56:	464c      	mov	r4, r9
 8006d58:	6923      	ldr	r3, [r4, #16]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d60:	6122      	str	r2, [r4, #16]
 8006d62:	2201      	movs	r2, #1
 8006d64:	615a      	str	r2, [r3, #20]
 8006d66:	e7bb      	b.n	8006ce0 <__gethex+0x3c8>
 8006d68:	6922      	ldr	r2, [r4, #16]
 8006d6a:	455a      	cmp	r2, fp
 8006d6c:	dd0b      	ble.n	8006d86 <__gethex+0x46e>
 8006d6e:	2101      	movs	r1, #1
 8006d70:	4620      	mov	r0, r4
 8006d72:	f7ff fd69 	bl	8006848 <rshift>
 8006d76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d7a:	3501      	adds	r5, #1
 8006d7c:	42ab      	cmp	r3, r5
 8006d7e:	f6ff aed0 	blt.w	8006b22 <__gethex+0x20a>
 8006d82:	2701      	movs	r7, #1
 8006d84:	e7c0      	b.n	8006d08 <__gethex+0x3f0>
 8006d86:	f016 061f 	ands.w	r6, r6, #31
 8006d8a:	d0fa      	beq.n	8006d82 <__gethex+0x46a>
 8006d8c:	449a      	add	sl, r3
 8006d8e:	f1c6 0620 	rsb	r6, r6, #32
 8006d92:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006d96:	f000 f9e9 	bl	800716c <__hi0bits>
 8006d9a:	42b0      	cmp	r0, r6
 8006d9c:	dbe7      	blt.n	8006d6e <__gethex+0x456>
 8006d9e:	e7f0      	b.n	8006d82 <__gethex+0x46a>
 8006da0:	08009b24 	.word	0x08009b24

08006da4 <L_shift>:
 8006da4:	f1c2 0208 	rsb	r2, r2, #8
 8006da8:	0092      	lsls	r2, r2, #2
 8006daa:	b570      	push	{r4, r5, r6, lr}
 8006dac:	f1c2 0620 	rsb	r6, r2, #32
 8006db0:	6843      	ldr	r3, [r0, #4]
 8006db2:	6804      	ldr	r4, [r0, #0]
 8006db4:	fa03 f506 	lsl.w	r5, r3, r6
 8006db8:	432c      	orrs	r4, r5
 8006dba:	40d3      	lsrs	r3, r2
 8006dbc:	6004      	str	r4, [r0, #0]
 8006dbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8006dc2:	4288      	cmp	r0, r1
 8006dc4:	d3f4      	bcc.n	8006db0 <L_shift+0xc>
 8006dc6:	bd70      	pop	{r4, r5, r6, pc}

08006dc8 <__match>:
 8006dc8:	b530      	push	{r4, r5, lr}
 8006dca:	6803      	ldr	r3, [r0, #0]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd2:	b914      	cbnz	r4, 8006dda <__match+0x12>
 8006dd4:	6003      	str	r3, [r0, #0]
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	bd30      	pop	{r4, r5, pc}
 8006dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dde:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006de2:	2d19      	cmp	r5, #25
 8006de4:	bf98      	it	ls
 8006de6:	3220      	addls	r2, #32
 8006de8:	42a2      	cmp	r2, r4
 8006dea:	d0f0      	beq.n	8006dce <__match+0x6>
 8006dec:	2000      	movs	r0, #0
 8006dee:	e7f3      	b.n	8006dd8 <__match+0x10>

08006df0 <__hexnan>:
 8006df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df4:	680b      	ldr	r3, [r1, #0]
 8006df6:	6801      	ldr	r1, [r0, #0]
 8006df8:	115e      	asrs	r6, r3, #5
 8006dfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006dfe:	f013 031f 	ands.w	r3, r3, #31
 8006e02:	b087      	sub	sp, #28
 8006e04:	bf18      	it	ne
 8006e06:	3604      	addne	r6, #4
 8006e08:	2500      	movs	r5, #0
 8006e0a:	1f37      	subs	r7, r6, #4
 8006e0c:	4682      	mov	sl, r0
 8006e0e:	4690      	mov	r8, r2
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	f846 5c04 	str.w	r5, [r6, #-4]
 8006e16:	46b9      	mov	r9, r7
 8006e18:	463c      	mov	r4, r7
 8006e1a:	9502      	str	r5, [sp, #8]
 8006e1c:	46ab      	mov	fp, r5
 8006e1e:	784a      	ldrb	r2, [r1, #1]
 8006e20:	1c4b      	adds	r3, r1, #1
 8006e22:	9303      	str	r3, [sp, #12]
 8006e24:	b342      	cbz	r2, 8006e78 <__hexnan+0x88>
 8006e26:	4610      	mov	r0, r2
 8006e28:	9105      	str	r1, [sp, #20]
 8006e2a:	9204      	str	r2, [sp, #16]
 8006e2c:	f7ff fd5e 	bl	80068ec <__hexdig_fun>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d14f      	bne.n	8006ed4 <__hexnan+0xe4>
 8006e34:	9a04      	ldr	r2, [sp, #16]
 8006e36:	9905      	ldr	r1, [sp, #20]
 8006e38:	2a20      	cmp	r2, #32
 8006e3a:	d818      	bhi.n	8006e6e <__hexnan+0x7e>
 8006e3c:	9b02      	ldr	r3, [sp, #8]
 8006e3e:	459b      	cmp	fp, r3
 8006e40:	dd13      	ble.n	8006e6a <__hexnan+0x7a>
 8006e42:	454c      	cmp	r4, r9
 8006e44:	d206      	bcs.n	8006e54 <__hexnan+0x64>
 8006e46:	2d07      	cmp	r5, #7
 8006e48:	dc04      	bgt.n	8006e54 <__hexnan+0x64>
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f7ff ffa8 	bl	8006da4 <L_shift>
 8006e54:	4544      	cmp	r4, r8
 8006e56:	d950      	bls.n	8006efa <__hexnan+0x10a>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f1a4 0904 	sub.w	r9, r4, #4
 8006e5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e62:	f8cd b008 	str.w	fp, [sp, #8]
 8006e66:	464c      	mov	r4, r9
 8006e68:	461d      	mov	r5, r3
 8006e6a:	9903      	ldr	r1, [sp, #12]
 8006e6c:	e7d7      	b.n	8006e1e <__hexnan+0x2e>
 8006e6e:	2a29      	cmp	r2, #41	; 0x29
 8006e70:	d156      	bne.n	8006f20 <__hexnan+0x130>
 8006e72:	3102      	adds	r1, #2
 8006e74:	f8ca 1000 	str.w	r1, [sl]
 8006e78:	f1bb 0f00 	cmp.w	fp, #0
 8006e7c:	d050      	beq.n	8006f20 <__hexnan+0x130>
 8006e7e:	454c      	cmp	r4, r9
 8006e80:	d206      	bcs.n	8006e90 <__hexnan+0xa0>
 8006e82:	2d07      	cmp	r5, #7
 8006e84:	dc04      	bgt.n	8006e90 <__hexnan+0xa0>
 8006e86:	462a      	mov	r2, r5
 8006e88:	4649      	mov	r1, r9
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f7ff ff8a 	bl	8006da4 <L_shift>
 8006e90:	4544      	cmp	r4, r8
 8006e92:	d934      	bls.n	8006efe <__hexnan+0x10e>
 8006e94:	f1a8 0204 	sub.w	r2, r8, #4
 8006e98:	4623      	mov	r3, r4
 8006e9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006e9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8006ea2:	429f      	cmp	r7, r3
 8006ea4:	d2f9      	bcs.n	8006e9a <__hexnan+0xaa>
 8006ea6:	1b3b      	subs	r3, r7, r4
 8006ea8:	f023 0303 	bic.w	r3, r3, #3
 8006eac:	3304      	adds	r3, #4
 8006eae:	3401      	adds	r4, #1
 8006eb0:	3e03      	subs	r6, #3
 8006eb2:	42b4      	cmp	r4, r6
 8006eb4:	bf88      	it	hi
 8006eb6:	2304      	movhi	r3, #4
 8006eb8:	4443      	add	r3, r8
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f843 2b04 	str.w	r2, [r3], #4
 8006ec0:	429f      	cmp	r7, r3
 8006ec2:	d2fb      	bcs.n	8006ebc <__hexnan+0xcc>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	b91b      	cbnz	r3, 8006ed0 <__hexnan+0xe0>
 8006ec8:	4547      	cmp	r7, r8
 8006eca:	d127      	bne.n	8006f1c <__hexnan+0x12c>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	2005      	movs	r0, #5
 8006ed2:	e026      	b.n	8006f22 <__hexnan+0x132>
 8006ed4:	3501      	adds	r5, #1
 8006ed6:	2d08      	cmp	r5, #8
 8006ed8:	f10b 0b01 	add.w	fp, fp, #1
 8006edc:	dd06      	ble.n	8006eec <__hexnan+0xfc>
 8006ede:	4544      	cmp	r4, r8
 8006ee0:	d9c3      	bls.n	8006e6a <__hexnan+0x7a>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ee8:	2501      	movs	r5, #1
 8006eea:	3c04      	subs	r4, #4
 8006eec:	6822      	ldr	r2, [r4, #0]
 8006eee:	f000 000f 	and.w	r0, r0, #15
 8006ef2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006ef6:	6022      	str	r2, [r4, #0]
 8006ef8:	e7b7      	b.n	8006e6a <__hexnan+0x7a>
 8006efa:	2508      	movs	r5, #8
 8006efc:	e7b5      	b.n	8006e6a <__hexnan+0x7a>
 8006efe:	9b01      	ldr	r3, [sp, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0df      	beq.n	8006ec4 <__hexnan+0xd4>
 8006f04:	f04f 32ff 	mov.w	r2, #4294967295
 8006f08:	f1c3 0320 	rsb	r3, r3, #32
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f14:	401a      	ands	r2, r3
 8006f16:	f846 2c04 	str.w	r2, [r6, #-4]
 8006f1a:	e7d3      	b.n	8006ec4 <__hexnan+0xd4>
 8006f1c:	3f04      	subs	r7, #4
 8006f1e:	e7d1      	b.n	8006ec4 <__hexnan+0xd4>
 8006f20:	2004      	movs	r0, #4
 8006f22:	b007      	add	sp, #28
 8006f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f28 <_localeconv_r>:
 8006f28:	4800      	ldr	r0, [pc, #0]	; (8006f2c <_localeconv_r+0x4>)
 8006f2a:	4770      	bx	lr
 8006f2c:	20000160 	.word	0x20000160

08006f30 <malloc>:
 8006f30:	4b02      	ldr	r3, [pc, #8]	; (8006f3c <malloc+0xc>)
 8006f32:	4601      	mov	r1, r0
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	f000 bd3d 	b.w	80079b4 <_malloc_r>
 8006f3a:	bf00      	nop
 8006f3c:	20000008 	.word	0x20000008

08006f40 <__ascii_mbtowc>:
 8006f40:	b082      	sub	sp, #8
 8006f42:	b901      	cbnz	r1, 8006f46 <__ascii_mbtowc+0x6>
 8006f44:	a901      	add	r1, sp, #4
 8006f46:	b142      	cbz	r2, 8006f5a <__ascii_mbtowc+0x1a>
 8006f48:	b14b      	cbz	r3, 8006f5e <__ascii_mbtowc+0x1e>
 8006f4a:	7813      	ldrb	r3, [r2, #0]
 8006f4c:	600b      	str	r3, [r1, #0]
 8006f4e:	7812      	ldrb	r2, [r2, #0]
 8006f50:	1e10      	subs	r0, r2, #0
 8006f52:	bf18      	it	ne
 8006f54:	2001      	movne	r0, #1
 8006f56:	b002      	add	sp, #8
 8006f58:	4770      	bx	lr
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	e7fb      	b.n	8006f56 <__ascii_mbtowc+0x16>
 8006f5e:	f06f 0001 	mvn.w	r0, #1
 8006f62:	e7f8      	b.n	8006f56 <__ascii_mbtowc+0x16>

08006f64 <memcpy>:
 8006f64:	440a      	add	r2, r1
 8006f66:	4291      	cmp	r1, r2
 8006f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f6c:	d100      	bne.n	8006f70 <memcpy+0xc>
 8006f6e:	4770      	bx	lr
 8006f70:	b510      	push	{r4, lr}
 8006f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f7a:	4291      	cmp	r1, r2
 8006f7c:	d1f9      	bne.n	8006f72 <memcpy+0xe>
 8006f7e:	bd10      	pop	{r4, pc}

08006f80 <_Balloc>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f84:	4604      	mov	r4, r0
 8006f86:	460d      	mov	r5, r1
 8006f88:	b976      	cbnz	r6, 8006fa8 <_Balloc+0x28>
 8006f8a:	2010      	movs	r0, #16
 8006f8c:	f7ff ffd0 	bl	8006f30 <malloc>
 8006f90:	4602      	mov	r2, r0
 8006f92:	6260      	str	r0, [r4, #36]	; 0x24
 8006f94:	b920      	cbnz	r0, 8006fa0 <_Balloc+0x20>
 8006f96:	4b18      	ldr	r3, [pc, #96]	; (8006ff8 <_Balloc+0x78>)
 8006f98:	4818      	ldr	r0, [pc, #96]	; (8006ffc <_Balloc+0x7c>)
 8006f9a:	2166      	movs	r1, #102	; 0x66
 8006f9c:	f000 fef8 	bl	8007d90 <__assert_func>
 8006fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fa4:	6006      	str	r6, [r0, #0]
 8006fa6:	60c6      	str	r6, [r0, #12]
 8006fa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006faa:	68f3      	ldr	r3, [r6, #12]
 8006fac:	b183      	cbz	r3, 8006fd0 <_Balloc+0x50>
 8006fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fb6:	b9b8      	cbnz	r0, 8006fe8 <_Balloc+0x68>
 8006fb8:	2101      	movs	r1, #1
 8006fba:	fa01 f605 	lsl.w	r6, r1, r5
 8006fbe:	1d72      	adds	r2, r6, #5
 8006fc0:	0092      	lsls	r2, r2, #2
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fc97 	bl	80078f6 <_calloc_r>
 8006fc8:	b160      	cbz	r0, 8006fe4 <_Balloc+0x64>
 8006fca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fce:	e00e      	b.n	8006fee <_Balloc+0x6e>
 8006fd0:	2221      	movs	r2, #33	; 0x21
 8006fd2:	2104      	movs	r1, #4
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f000 fc8e 	bl	80078f6 <_calloc_r>
 8006fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fdc:	60f0      	str	r0, [r6, #12]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e4      	bne.n	8006fae <_Balloc+0x2e>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}
 8006fe8:	6802      	ldr	r2, [r0, #0]
 8006fea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ff4:	e7f7      	b.n	8006fe6 <_Balloc+0x66>
 8006ff6:	bf00      	nop
 8006ff8:	08009aae 	.word	0x08009aae
 8006ffc:	08009bb4 	.word	0x08009bb4

08007000 <_Bfree>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007004:	4605      	mov	r5, r0
 8007006:	460c      	mov	r4, r1
 8007008:	b976      	cbnz	r6, 8007028 <_Bfree+0x28>
 800700a:	2010      	movs	r0, #16
 800700c:	f7ff ff90 	bl	8006f30 <malloc>
 8007010:	4602      	mov	r2, r0
 8007012:	6268      	str	r0, [r5, #36]	; 0x24
 8007014:	b920      	cbnz	r0, 8007020 <_Bfree+0x20>
 8007016:	4b09      	ldr	r3, [pc, #36]	; (800703c <_Bfree+0x3c>)
 8007018:	4809      	ldr	r0, [pc, #36]	; (8007040 <_Bfree+0x40>)
 800701a:	218a      	movs	r1, #138	; 0x8a
 800701c:	f000 feb8 	bl	8007d90 <__assert_func>
 8007020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007024:	6006      	str	r6, [r0, #0]
 8007026:	60c6      	str	r6, [r0, #12]
 8007028:	b13c      	cbz	r4, 800703a <_Bfree+0x3a>
 800702a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800702c:	6862      	ldr	r2, [r4, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007034:	6021      	str	r1, [r4, #0]
 8007036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	08009aae 	.word	0x08009aae
 8007040:	08009bb4 	.word	0x08009bb4

08007044 <__multadd>:
 8007044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007048:	690e      	ldr	r6, [r1, #16]
 800704a:	4607      	mov	r7, r0
 800704c:	4698      	mov	r8, r3
 800704e:	460c      	mov	r4, r1
 8007050:	f101 0014 	add.w	r0, r1, #20
 8007054:	2300      	movs	r3, #0
 8007056:	6805      	ldr	r5, [r0, #0]
 8007058:	b2a9      	uxth	r1, r5
 800705a:	fb02 8101 	mla	r1, r2, r1, r8
 800705e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007062:	0c2d      	lsrs	r5, r5, #16
 8007064:	fb02 c505 	mla	r5, r2, r5, ip
 8007068:	b289      	uxth	r1, r1
 800706a:	3301      	adds	r3, #1
 800706c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007070:	429e      	cmp	r6, r3
 8007072:	f840 1b04 	str.w	r1, [r0], #4
 8007076:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800707a:	dcec      	bgt.n	8007056 <__multadd+0x12>
 800707c:	f1b8 0f00 	cmp.w	r8, #0
 8007080:	d022      	beq.n	80070c8 <__multadd+0x84>
 8007082:	68a3      	ldr	r3, [r4, #8]
 8007084:	42b3      	cmp	r3, r6
 8007086:	dc19      	bgt.n	80070bc <__multadd+0x78>
 8007088:	6861      	ldr	r1, [r4, #4]
 800708a:	4638      	mov	r0, r7
 800708c:	3101      	adds	r1, #1
 800708e:	f7ff ff77 	bl	8006f80 <_Balloc>
 8007092:	4605      	mov	r5, r0
 8007094:	b928      	cbnz	r0, 80070a2 <__multadd+0x5e>
 8007096:	4602      	mov	r2, r0
 8007098:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <__multadd+0x8c>)
 800709a:	480e      	ldr	r0, [pc, #56]	; (80070d4 <__multadd+0x90>)
 800709c:	21b5      	movs	r1, #181	; 0xb5
 800709e:	f000 fe77 	bl	8007d90 <__assert_func>
 80070a2:	6922      	ldr	r2, [r4, #16]
 80070a4:	3202      	adds	r2, #2
 80070a6:	f104 010c 	add.w	r1, r4, #12
 80070aa:	0092      	lsls	r2, r2, #2
 80070ac:	300c      	adds	r0, #12
 80070ae:	f7ff ff59 	bl	8006f64 <memcpy>
 80070b2:	4621      	mov	r1, r4
 80070b4:	4638      	mov	r0, r7
 80070b6:	f7ff ffa3 	bl	8007000 <_Bfree>
 80070ba:	462c      	mov	r4, r5
 80070bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80070c0:	3601      	adds	r6, #1
 80070c2:	f8c3 8014 	str.w	r8, [r3, #20]
 80070c6:	6126      	str	r6, [r4, #16]
 80070c8:	4620      	mov	r0, r4
 80070ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ce:	bf00      	nop
 80070d0:	08009b24 	.word	0x08009b24
 80070d4:	08009bb4 	.word	0x08009bb4

080070d8 <__s2b>:
 80070d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070dc:	460c      	mov	r4, r1
 80070de:	4615      	mov	r5, r2
 80070e0:	461f      	mov	r7, r3
 80070e2:	2209      	movs	r2, #9
 80070e4:	3308      	adds	r3, #8
 80070e6:	4606      	mov	r6, r0
 80070e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80070ec:	2100      	movs	r1, #0
 80070ee:	2201      	movs	r2, #1
 80070f0:	429a      	cmp	r2, r3
 80070f2:	db09      	blt.n	8007108 <__s2b+0x30>
 80070f4:	4630      	mov	r0, r6
 80070f6:	f7ff ff43 	bl	8006f80 <_Balloc>
 80070fa:	b940      	cbnz	r0, 800710e <__s2b+0x36>
 80070fc:	4602      	mov	r2, r0
 80070fe:	4b19      	ldr	r3, [pc, #100]	; (8007164 <__s2b+0x8c>)
 8007100:	4819      	ldr	r0, [pc, #100]	; (8007168 <__s2b+0x90>)
 8007102:	21ce      	movs	r1, #206	; 0xce
 8007104:	f000 fe44 	bl	8007d90 <__assert_func>
 8007108:	0052      	lsls	r2, r2, #1
 800710a:	3101      	adds	r1, #1
 800710c:	e7f0      	b.n	80070f0 <__s2b+0x18>
 800710e:	9b08      	ldr	r3, [sp, #32]
 8007110:	6143      	str	r3, [r0, #20]
 8007112:	2d09      	cmp	r5, #9
 8007114:	f04f 0301 	mov.w	r3, #1
 8007118:	6103      	str	r3, [r0, #16]
 800711a:	dd16      	ble.n	800714a <__s2b+0x72>
 800711c:	f104 0909 	add.w	r9, r4, #9
 8007120:	46c8      	mov	r8, r9
 8007122:	442c      	add	r4, r5
 8007124:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007128:	4601      	mov	r1, r0
 800712a:	3b30      	subs	r3, #48	; 0x30
 800712c:	220a      	movs	r2, #10
 800712e:	4630      	mov	r0, r6
 8007130:	f7ff ff88 	bl	8007044 <__multadd>
 8007134:	45a0      	cmp	r8, r4
 8007136:	d1f5      	bne.n	8007124 <__s2b+0x4c>
 8007138:	f1a5 0408 	sub.w	r4, r5, #8
 800713c:	444c      	add	r4, r9
 800713e:	1b2d      	subs	r5, r5, r4
 8007140:	1963      	adds	r3, r4, r5
 8007142:	42bb      	cmp	r3, r7
 8007144:	db04      	blt.n	8007150 <__s2b+0x78>
 8007146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800714a:	340a      	adds	r4, #10
 800714c:	2509      	movs	r5, #9
 800714e:	e7f6      	b.n	800713e <__s2b+0x66>
 8007150:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007154:	4601      	mov	r1, r0
 8007156:	3b30      	subs	r3, #48	; 0x30
 8007158:	220a      	movs	r2, #10
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff ff72 	bl	8007044 <__multadd>
 8007160:	e7ee      	b.n	8007140 <__s2b+0x68>
 8007162:	bf00      	nop
 8007164:	08009b24 	.word	0x08009b24
 8007168:	08009bb4 	.word	0x08009bb4

0800716c <__hi0bits>:
 800716c:	0c03      	lsrs	r3, r0, #16
 800716e:	041b      	lsls	r3, r3, #16
 8007170:	b9d3      	cbnz	r3, 80071a8 <__hi0bits+0x3c>
 8007172:	0400      	lsls	r0, r0, #16
 8007174:	2310      	movs	r3, #16
 8007176:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800717a:	bf04      	itt	eq
 800717c:	0200      	lsleq	r0, r0, #8
 800717e:	3308      	addeq	r3, #8
 8007180:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007184:	bf04      	itt	eq
 8007186:	0100      	lsleq	r0, r0, #4
 8007188:	3304      	addeq	r3, #4
 800718a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800718e:	bf04      	itt	eq
 8007190:	0080      	lsleq	r0, r0, #2
 8007192:	3302      	addeq	r3, #2
 8007194:	2800      	cmp	r0, #0
 8007196:	db05      	blt.n	80071a4 <__hi0bits+0x38>
 8007198:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800719c:	f103 0301 	add.w	r3, r3, #1
 80071a0:	bf08      	it	eq
 80071a2:	2320      	moveq	r3, #32
 80071a4:	4618      	mov	r0, r3
 80071a6:	4770      	bx	lr
 80071a8:	2300      	movs	r3, #0
 80071aa:	e7e4      	b.n	8007176 <__hi0bits+0xa>

080071ac <__lo0bits>:
 80071ac:	6803      	ldr	r3, [r0, #0]
 80071ae:	f013 0207 	ands.w	r2, r3, #7
 80071b2:	4601      	mov	r1, r0
 80071b4:	d00b      	beq.n	80071ce <__lo0bits+0x22>
 80071b6:	07da      	lsls	r2, r3, #31
 80071b8:	d424      	bmi.n	8007204 <__lo0bits+0x58>
 80071ba:	0798      	lsls	r0, r3, #30
 80071bc:	bf49      	itett	mi
 80071be:	085b      	lsrmi	r3, r3, #1
 80071c0:	089b      	lsrpl	r3, r3, #2
 80071c2:	2001      	movmi	r0, #1
 80071c4:	600b      	strmi	r3, [r1, #0]
 80071c6:	bf5c      	itt	pl
 80071c8:	600b      	strpl	r3, [r1, #0]
 80071ca:	2002      	movpl	r0, #2
 80071cc:	4770      	bx	lr
 80071ce:	b298      	uxth	r0, r3
 80071d0:	b9b0      	cbnz	r0, 8007200 <__lo0bits+0x54>
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	2010      	movs	r0, #16
 80071d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80071da:	bf04      	itt	eq
 80071dc:	0a1b      	lsreq	r3, r3, #8
 80071de:	3008      	addeq	r0, #8
 80071e0:	071a      	lsls	r2, r3, #28
 80071e2:	bf04      	itt	eq
 80071e4:	091b      	lsreq	r3, r3, #4
 80071e6:	3004      	addeq	r0, #4
 80071e8:	079a      	lsls	r2, r3, #30
 80071ea:	bf04      	itt	eq
 80071ec:	089b      	lsreq	r3, r3, #2
 80071ee:	3002      	addeq	r0, #2
 80071f0:	07da      	lsls	r2, r3, #31
 80071f2:	d403      	bmi.n	80071fc <__lo0bits+0x50>
 80071f4:	085b      	lsrs	r3, r3, #1
 80071f6:	f100 0001 	add.w	r0, r0, #1
 80071fa:	d005      	beq.n	8007208 <__lo0bits+0x5c>
 80071fc:	600b      	str	r3, [r1, #0]
 80071fe:	4770      	bx	lr
 8007200:	4610      	mov	r0, r2
 8007202:	e7e8      	b.n	80071d6 <__lo0bits+0x2a>
 8007204:	2000      	movs	r0, #0
 8007206:	4770      	bx	lr
 8007208:	2020      	movs	r0, #32
 800720a:	4770      	bx	lr

0800720c <__i2b>:
 800720c:	b510      	push	{r4, lr}
 800720e:	460c      	mov	r4, r1
 8007210:	2101      	movs	r1, #1
 8007212:	f7ff feb5 	bl	8006f80 <_Balloc>
 8007216:	4602      	mov	r2, r0
 8007218:	b928      	cbnz	r0, 8007226 <__i2b+0x1a>
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <__i2b+0x24>)
 800721c:	4805      	ldr	r0, [pc, #20]	; (8007234 <__i2b+0x28>)
 800721e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007222:	f000 fdb5 	bl	8007d90 <__assert_func>
 8007226:	2301      	movs	r3, #1
 8007228:	6144      	str	r4, [r0, #20]
 800722a:	6103      	str	r3, [r0, #16]
 800722c:	bd10      	pop	{r4, pc}
 800722e:	bf00      	nop
 8007230:	08009b24 	.word	0x08009b24
 8007234:	08009bb4 	.word	0x08009bb4

08007238 <__multiply>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	4614      	mov	r4, r2
 800723e:	690a      	ldr	r2, [r1, #16]
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	429a      	cmp	r2, r3
 8007244:	bfb8      	it	lt
 8007246:	460b      	movlt	r3, r1
 8007248:	460d      	mov	r5, r1
 800724a:	bfbc      	itt	lt
 800724c:	4625      	movlt	r5, r4
 800724e:	461c      	movlt	r4, r3
 8007250:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007254:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007258:	68ab      	ldr	r3, [r5, #8]
 800725a:	6869      	ldr	r1, [r5, #4]
 800725c:	eb0a 0709 	add.w	r7, sl, r9
 8007260:	42bb      	cmp	r3, r7
 8007262:	b085      	sub	sp, #20
 8007264:	bfb8      	it	lt
 8007266:	3101      	addlt	r1, #1
 8007268:	f7ff fe8a 	bl	8006f80 <_Balloc>
 800726c:	b930      	cbnz	r0, 800727c <__multiply+0x44>
 800726e:	4602      	mov	r2, r0
 8007270:	4b42      	ldr	r3, [pc, #264]	; (800737c <__multiply+0x144>)
 8007272:	4843      	ldr	r0, [pc, #268]	; (8007380 <__multiply+0x148>)
 8007274:	f240 115d 	movw	r1, #349	; 0x15d
 8007278:	f000 fd8a 	bl	8007d90 <__assert_func>
 800727c:	f100 0614 	add.w	r6, r0, #20
 8007280:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007284:	4633      	mov	r3, r6
 8007286:	2200      	movs	r2, #0
 8007288:	4543      	cmp	r3, r8
 800728a:	d31e      	bcc.n	80072ca <__multiply+0x92>
 800728c:	f105 0c14 	add.w	ip, r5, #20
 8007290:	f104 0314 	add.w	r3, r4, #20
 8007294:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007298:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800729c:	9202      	str	r2, [sp, #8]
 800729e:	ebac 0205 	sub.w	r2, ip, r5
 80072a2:	3a15      	subs	r2, #21
 80072a4:	f022 0203 	bic.w	r2, r2, #3
 80072a8:	3204      	adds	r2, #4
 80072aa:	f105 0115 	add.w	r1, r5, #21
 80072ae:	458c      	cmp	ip, r1
 80072b0:	bf38      	it	cc
 80072b2:	2204      	movcc	r2, #4
 80072b4:	9201      	str	r2, [sp, #4]
 80072b6:	9a02      	ldr	r2, [sp, #8]
 80072b8:	9303      	str	r3, [sp, #12]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d808      	bhi.n	80072d0 <__multiply+0x98>
 80072be:	2f00      	cmp	r7, #0
 80072c0:	dc55      	bgt.n	800736e <__multiply+0x136>
 80072c2:	6107      	str	r7, [r0, #16]
 80072c4:	b005      	add	sp, #20
 80072c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ca:	f843 2b04 	str.w	r2, [r3], #4
 80072ce:	e7db      	b.n	8007288 <__multiply+0x50>
 80072d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80072d4:	f1ba 0f00 	cmp.w	sl, #0
 80072d8:	d020      	beq.n	800731c <__multiply+0xe4>
 80072da:	f105 0e14 	add.w	lr, r5, #20
 80072de:	46b1      	mov	r9, r6
 80072e0:	2200      	movs	r2, #0
 80072e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80072e6:	f8d9 b000 	ldr.w	fp, [r9]
 80072ea:	b2a1      	uxth	r1, r4
 80072ec:	fa1f fb8b 	uxth.w	fp, fp
 80072f0:	fb0a b101 	mla	r1, sl, r1, fp
 80072f4:	4411      	add	r1, r2
 80072f6:	f8d9 2000 	ldr.w	r2, [r9]
 80072fa:	0c24      	lsrs	r4, r4, #16
 80072fc:	0c12      	lsrs	r2, r2, #16
 80072fe:	fb0a 2404 	mla	r4, sl, r4, r2
 8007302:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007306:	b289      	uxth	r1, r1
 8007308:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800730c:	45f4      	cmp	ip, lr
 800730e:	f849 1b04 	str.w	r1, [r9], #4
 8007312:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007316:	d8e4      	bhi.n	80072e2 <__multiply+0xaa>
 8007318:	9901      	ldr	r1, [sp, #4]
 800731a:	5072      	str	r2, [r6, r1]
 800731c:	9a03      	ldr	r2, [sp, #12]
 800731e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007322:	3304      	adds	r3, #4
 8007324:	f1b9 0f00 	cmp.w	r9, #0
 8007328:	d01f      	beq.n	800736a <__multiply+0x132>
 800732a:	6834      	ldr	r4, [r6, #0]
 800732c:	f105 0114 	add.w	r1, r5, #20
 8007330:	46b6      	mov	lr, r6
 8007332:	f04f 0a00 	mov.w	sl, #0
 8007336:	880a      	ldrh	r2, [r1, #0]
 8007338:	f8be b002 	ldrh.w	fp, [lr, #2]
 800733c:	fb09 b202 	mla	r2, r9, r2, fp
 8007340:	4492      	add	sl, r2
 8007342:	b2a4      	uxth	r4, r4
 8007344:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007348:	f84e 4b04 	str.w	r4, [lr], #4
 800734c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007350:	f8be 2000 	ldrh.w	r2, [lr]
 8007354:	0c24      	lsrs	r4, r4, #16
 8007356:	fb09 2404 	mla	r4, r9, r4, r2
 800735a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800735e:	458c      	cmp	ip, r1
 8007360:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007364:	d8e7      	bhi.n	8007336 <__multiply+0xfe>
 8007366:	9a01      	ldr	r2, [sp, #4]
 8007368:	50b4      	str	r4, [r6, r2]
 800736a:	3604      	adds	r6, #4
 800736c:	e7a3      	b.n	80072b6 <__multiply+0x7e>
 800736e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1a5      	bne.n	80072c2 <__multiply+0x8a>
 8007376:	3f01      	subs	r7, #1
 8007378:	e7a1      	b.n	80072be <__multiply+0x86>
 800737a:	bf00      	nop
 800737c:	08009b24 	.word	0x08009b24
 8007380:	08009bb4 	.word	0x08009bb4

08007384 <__pow5mult>:
 8007384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007388:	4615      	mov	r5, r2
 800738a:	f012 0203 	ands.w	r2, r2, #3
 800738e:	4606      	mov	r6, r0
 8007390:	460f      	mov	r7, r1
 8007392:	d007      	beq.n	80073a4 <__pow5mult+0x20>
 8007394:	4c25      	ldr	r4, [pc, #148]	; (800742c <__pow5mult+0xa8>)
 8007396:	3a01      	subs	r2, #1
 8007398:	2300      	movs	r3, #0
 800739a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800739e:	f7ff fe51 	bl	8007044 <__multadd>
 80073a2:	4607      	mov	r7, r0
 80073a4:	10ad      	asrs	r5, r5, #2
 80073a6:	d03d      	beq.n	8007424 <__pow5mult+0xa0>
 80073a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073aa:	b97c      	cbnz	r4, 80073cc <__pow5mult+0x48>
 80073ac:	2010      	movs	r0, #16
 80073ae:	f7ff fdbf 	bl	8006f30 <malloc>
 80073b2:	4602      	mov	r2, r0
 80073b4:	6270      	str	r0, [r6, #36]	; 0x24
 80073b6:	b928      	cbnz	r0, 80073c4 <__pow5mult+0x40>
 80073b8:	4b1d      	ldr	r3, [pc, #116]	; (8007430 <__pow5mult+0xac>)
 80073ba:	481e      	ldr	r0, [pc, #120]	; (8007434 <__pow5mult+0xb0>)
 80073bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073c0:	f000 fce6 	bl	8007d90 <__assert_func>
 80073c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073c8:	6004      	str	r4, [r0, #0]
 80073ca:	60c4      	str	r4, [r0, #12]
 80073cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073d4:	b94c      	cbnz	r4, 80073ea <__pow5mult+0x66>
 80073d6:	f240 2171 	movw	r1, #625	; 0x271
 80073da:	4630      	mov	r0, r6
 80073dc:	f7ff ff16 	bl	800720c <__i2b>
 80073e0:	2300      	movs	r3, #0
 80073e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80073e6:	4604      	mov	r4, r0
 80073e8:	6003      	str	r3, [r0, #0]
 80073ea:	f04f 0900 	mov.w	r9, #0
 80073ee:	07eb      	lsls	r3, r5, #31
 80073f0:	d50a      	bpl.n	8007408 <__pow5mult+0x84>
 80073f2:	4639      	mov	r1, r7
 80073f4:	4622      	mov	r2, r4
 80073f6:	4630      	mov	r0, r6
 80073f8:	f7ff ff1e 	bl	8007238 <__multiply>
 80073fc:	4639      	mov	r1, r7
 80073fe:	4680      	mov	r8, r0
 8007400:	4630      	mov	r0, r6
 8007402:	f7ff fdfd 	bl	8007000 <_Bfree>
 8007406:	4647      	mov	r7, r8
 8007408:	106d      	asrs	r5, r5, #1
 800740a:	d00b      	beq.n	8007424 <__pow5mult+0xa0>
 800740c:	6820      	ldr	r0, [r4, #0]
 800740e:	b938      	cbnz	r0, 8007420 <__pow5mult+0x9c>
 8007410:	4622      	mov	r2, r4
 8007412:	4621      	mov	r1, r4
 8007414:	4630      	mov	r0, r6
 8007416:	f7ff ff0f 	bl	8007238 <__multiply>
 800741a:	6020      	str	r0, [r4, #0]
 800741c:	f8c0 9000 	str.w	r9, [r0]
 8007420:	4604      	mov	r4, r0
 8007422:	e7e4      	b.n	80073ee <__pow5mult+0x6a>
 8007424:	4638      	mov	r0, r7
 8007426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800742a:	bf00      	nop
 800742c:	08009d08 	.word	0x08009d08
 8007430:	08009aae 	.word	0x08009aae
 8007434:	08009bb4 	.word	0x08009bb4

08007438 <__lshift>:
 8007438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800743c:	460c      	mov	r4, r1
 800743e:	6849      	ldr	r1, [r1, #4]
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007446:	68a3      	ldr	r3, [r4, #8]
 8007448:	4607      	mov	r7, r0
 800744a:	4691      	mov	r9, r2
 800744c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007450:	f108 0601 	add.w	r6, r8, #1
 8007454:	42b3      	cmp	r3, r6
 8007456:	db0b      	blt.n	8007470 <__lshift+0x38>
 8007458:	4638      	mov	r0, r7
 800745a:	f7ff fd91 	bl	8006f80 <_Balloc>
 800745e:	4605      	mov	r5, r0
 8007460:	b948      	cbnz	r0, 8007476 <__lshift+0x3e>
 8007462:	4602      	mov	r2, r0
 8007464:	4b28      	ldr	r3, [pc, #160]	; (8007508 <__lshift+0xd0>)
 8007466:	4829      	ldr	r0, [pc, #164]	; (800750c <__lshift+0xd4>)
 8007468:	f240 11d9 	movw	r1, #473	; 0x1d9
 800746c:	f000 fc90 	bl	8007d90 <__assert_func>
 8007470:	3101      	adds	r1, #1
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	e7ee      	b.n	8007454 <__lshift+0x1c>
 8007476:	2300      	movs	r3, #0
 8007478:	f100 0114 	add.w	r1, r0, #20
 800747c:	f100 0210 	add.w	r2, r0, #16
 8007480:	4618      	mov	r0, r3
 8007482:	4553      	cmp	r3, sl
 8007484:	db33      	blt.n	80074ee <__lshift+0xb6>
 8007486:	6920      	ldr	r0, [r4, #16]
 8007488:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800748c:	f104 0314 	add.w	r3, r4, #20
 8007490:	f019 091f 	ands.w	r9, r9, #31
 8007494:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007498:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800749c:	d02b      	beq.n	80074f6 <__lshift+0xbe>
 800749e:	f1c9 0e20 	rsb	lr, r9, #32
 80074a2:	468a      	mov	sl, r1
 80074a4:	2200      	movs	r2, #0
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	fa00 f009 	lsl.w	r0, r0, r9
 80074ac:	4302      	orrs	r2, r0
 80074ae:	f84a 2b04 	str.w	r2, [sl], #4
 80074b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b6:	459c      	cmp	ip, r3
 80074b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80074bc:	d8f3      	bhi.n	80074a6 <__lshift+0x6e>
 80074be:	ebac 0304 	sub.w	r3, ip, r4
 80074c2:	3b15      	subs	r3, #21
 80074c4:	f023 0303 	bic.w	r3, r3, #3
 80074c8:	3304      	adds	r3, #4
 80074ca:	f104 0015 	add.w	r0, r4, #21
 80074ce:	4584      	cmp	ip, r0
 80074d0:	bf38      	it	cc
 80074d2:	2304      	movcc	r3, #4
 80074d4:	50ca      	str	r2, [r1, r3]
 80074d6:	b10a      	cbz	r2, 80074dc <__lshift+0xa4>
 80074d8:	f108 0602 	add.w	r6, r8, #2
 80074dc:	3e01      	subs	r6, #1
 80074de:	4638      	mov	r0, r7
 80074e0:	612e      	str	r6, [r5, #16]
 80074e2:	4621      	mov	r1, r4
 80074e4:	f7ff fd8c 	bl	8007000 <_Bfree>
 80074e8:	4628      	mov	r0, r5
 80074ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80074f2:	3301      	adds	r3, #1
 80074f4:	e7c5      	b.n	8007482 <__lshift+0x4a>
 80074f6:	3904      	subs	r1, #4
 80074f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007500:	459c      	cmp	ip, r3
 8007502:	d8f9      	bhi.n	80074f8 <__lshift+0xc0>
 8007504:	e7ea      	b.n	80074dc <__lshift+0xa4>
 8007506:	bf00      	nop
 8007508:	08009b24 	.word	0x08009b24
 800750c:	08009bb4 	.word	0x08009bb4

08007510 <__mcmp>:
 8007510:	b530      	push	{r4, r5, lr}
 8007512:	6902      	ldr	r2, [r0, #16]
 8007514:	690c      	ldr	r4, [r1, #16]
 8007516:	1b12      	subs	r2, r2, r4
 8007518:	d10e      	bne.n	8007538 <__mcmp+0x28>
 800751a:	f100 0314 	add.w	r3, r0, #20
 800751e:	3114      	adds	r1, #20
 8007520:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007524:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007528:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800752c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007530:	42a5      	cmp	r5, r4
 8007532:	d003      	beq.n	800753c <__mcmp+0x2c>
 8007534:	d305      	bcc.n	8007542 <__mcmp+0x32>
 8007536:	2201      	movs	r2, #1
 8007538:	4610      	mov	r0, r2
 800753a:	bd30      	pop	{r4, r5, pc}
 800753c:	4283      	cmp	r3, r0
 800753e:	d3f3      	bcc.n	8007528 <__mcmp+0x18>
 8007540:	e7fa      	b.n	8007538 <__mcmp+0x28>
 8007542:	f04f 32ff 	mov.w	r2, #4294967295
 8007546:	e7f7      	b.n	8007538 <__mcmp+0x28>

08007548 <__mdiff>:
 8007548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754c:	460c      	mov	r4, r1
 800754e:	4606      	mov	r6, r0
 8007550:	4611      	mov	r1, r2
 8007552:	4620      	mov	r0, r4
 8007554:	4617      	mov	r7, r2
 8007556:	f7ff ffdb 	bl	8007510 <__mcmp>
 800755a:	1e05      	subs	r5, r0, #0
 800755c:	d110      	bne.n	8007580 <__mdiff+0x38>
 800755e:	4629      	mov	r1, r5
 8007560:	4630      	mov	r0, r6
 8007562:	f7ff fd0d 	bl	8006f80 <_Balloc>
 8007566:	b930      	cbnz	r0, 8007576 <__mdiff+0x2e>
 8007568:	4b39      	ldr	r3, [pc, #228]	; (8007650 <__mdiff+0x108>)
 800756a:	4602      	mov	r2, r0
 800756c:	f240 2132 	movw	r1, #562	; 0x232
 8007570:	4838      	ldr	r0, [pc, #224]	; (8007654 <__mdiff+0x10c>)
 8007572:	f000 fc0d 	bl	8007d90 <__assert_func>
 8007576:	2301      	movs	r3, #1
 8007578:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800757c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007580:	bfa4      	itt	ge
 8007582:	463b      	movge	r3, r7
 8007584:	4627      	movge	r7, r4
 8007586:	4630      	mov	r0, r6
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	bfa6      	itte	ge
 800758c:	461c      	movge	r4, r3
 800758e:	2500      	movge	r5, #0
 8007590:	2501      	movlt	r5, #1
 8007592:	f7ff fcf5 	bl	8006f80 <_Balloc>
 8007596:	b920      	cbnz	r0, 80075a2 <__mdiff+0x5a>
 8007598:	4b2d      	ldr	r3, [pc, #180]	; (8007650 <__mdiff+0x108>)
 800759a:	4602      	mov	r2, r0
 800759c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075a0:	e7e6      	b.n	8007570 <__mdiff+0x28>
 80075a2:	693e      	ldr	r6, [r7, #16]
 80075a4:	60c5      	str	r5, [r0, #12]
 80075a6:	6925      	ldr	r5, [r4, #16]
 80075a8:	f107 0114 	add.w	r1, r7, #20
 80075ac:	f104 0914 	add.w	r9, r4, #20
 80075b0:	f100 0e14 	add.w	lr, r0, #20
 80075b4:	f107 0210 	add.w	r2, r7, #16
 80075b8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80075bc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80075c0:	46f2      	mov	sl, lr
 80075c2:	2700      	movs	r7, #0
 80075c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80075c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075cc:	fa1f f883 	uxth.w	r8, r3
 80075d0:	fa17 f78b 	uxtah	r7, r7, fp
 80075d4:	0c1b      	lsrs	r3, r3, #16
 80075d6:	eba7 0808 	sub.w	r8, r7, r8
 80075da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075e2:	fa1f f888 	uxth.w	r8, r8
 80075e6:	141f      	asrs	r7, r3, #16
 80075e8:	454d      	cmp	r5, r9
 80075ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075ee:	f84a 3b04 	str.w	r3, [sl], #4
 80075f2:	d8e7      	bhi.n	80075c4 <__mdiff+0x7c>
 80075f4:	1b2b      	subs	r3, r5, r4
 80075f6:	3b15      	subs	r3, #21
 80075f8:	f023 0303 	bic.w	r3, r3, #3
 80075fc:	3304      	adds	r3, #4
 80075fe:	3415      	adds	r4, #21
 8007600:	42a5      	cmp	r5, r4
 8007602:	bf38      	it	cc
 8007604:	2304      	movcc	r3, #4
 8007606:	4419      	add	r1, r3
 8007608:	4473      	add	r3, lr
 800760a:	469e      	mov	lr, r3
 800760c:	460d      	mov	r5, r1
 800760e:	4565      	cmp	r5, ip
 8007610:	d30e      	bcc.n	8007630 <__mdiff+0xe8>
 8007612:	f10c 0203 	add.w	r2, ip, #3
 8007616:	1a52      	subs	r2, r2, r1
 8007618:	f022 0203 	bic.w	r2, r2, #3
 800761c:	3903      	subs	r1, #3
 800761e:	458c      	cmp	ip, r1
 8007620:	bf38      	it	cc
 8007622:	2200      	movcc	r2, #0
 8007624:	441a      	add	r2, r3
 8007626:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800762a:	b17b      	cbz	r3, 800764c <__mdiff+0x104>
 800762c:	6106      	str	r6, [r0, #16]
 800762e:	e7a5      	b.n	800757c <__mdiff+0x34>
 8007630:	f855 8b04 	ldr.w	r8, [r5], #4
 8007634:	fa17 f488 	uxtah	r4, r7, r8
 8007638:	1422      	asrs	r2, r4, #16
 800763a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800763e:	b2a4      	uxth	r4, r4
 8007640:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007644:	f84e 4b04 	str.w	r4, [lr], #4
 8007648:	1417      	asrs	r7, r2, #16
 800764a:	e7e0      	b.n	800760e <__mdiff+0xc6>
 800764c:	3e01      	subs	r6, #1
 800764e:	e7ea      	b.n	8007626 <__mdiff+0xde>
 8007650:	08009b24 	.word	0x08009b24
 8007654:	08009bb4 	.word	0x08009bb4

08007658 <__ulp>:
 8007658:	b082      	sub	sp, #8
 800765a:	ed8d 0b00 	vstr	d0, [sp]
 800765e:	9b01      	ldr	r3, [sp, #4]
 8007660:	4912      	ldr	r1, [pc, #72]	; (80076ac <__ulp+0x54>)
 8007662:	4019      	ands	r1, r3
 8007664:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007668:	2900      	cmp	r1, #0
 800766a:	dd05      	ble.n	8007678 <__ulp+0x20>
 800766c:	2200      	movs	r2, #0
 800766e:	460b      	mov	r3, r1
 8007670:	ec43 2b10 	vmov	d0, r2, r3
 8007674:	b002      	add	sp, #8
 8007676:	4770      	bx	lr
 8007678:	4249      	negs	r1, r1
 800767a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800767e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	da04      	bge.n	8007696 <__ulp+0x3e>
 800768c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007690:	fa41 f300 	asr.w	r3, r1, r0
 8007694:	e7ec      	b.n	8007670 <__ulp+0x18>
 8007696:	f1a0 0114 	sub.w	r1, r0, #20
 800769a:	291e      	cmp	r1, #30
 800769c:	bfda      	itte	le
 800769e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80076a2:	fa20 f101 	lsrle.w	r1, r0, r1
 80076a6:	2101      	movgt	r1, #1
 80076a8:	460a      	mov	r2, r1
 80076aa:	e7e1      	b.n	8007670 <__ulp+0x18>
 80076ac:	7ff00000 	.word	0x7ff00000

080076b0 <__b2d>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	6905      	ldr	r5, [r0, #16]
 80076b4:	f100 0714 	add.w	r7, r0, #20
 80076b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80076bc:	1f2e      	subs	r6, r5, #4
 80076be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80076c2:	4620      	mov	r0, r4
 80076c4:	f7ff fd52 	bl	800716c <__hi0bits>
 80076c8:	f1c0 0320 	rsb	r3, r0, #32
 80076cc:	280a      	cmp	r0, #10
 80076ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800774c <__b2d+0x9c>
 80076d2:	600b      	str	r3, [r1, #0]
 80076d4:	dc14      	bgt.n	8007700 <__b2d+0x50>
 80076d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80076da:	fa24 f10e 	lsr.w	r1, r4, lr
 80076de:	42b7      	cmp	r7, r6
 80076e0:	ea41 030c 	orr.w	r3, r1, ip
 80076e4:	bf34      	ite	cc
 80076e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80076ea:	2100      	movcs	r1, #0
 80076ec:	3015      	adds	r0, #21
 80076ee:	fa04 f000 	lsl.w	r0, r4, r0
 80076f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80076f6:	ea40 0201 	orr.w	r2, r0, r1
 80076fa:	ec43 2b10 	vmov	d0, r2, r3
 80076fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007700:	42b7      	cmp	r7, r6
 8007702:	bf3a      	itte	cc
 8007704:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007708:	f1a5 0608 	subcc.w	r6, r5, #8
 800770c:	2100      	movcs	r1, #0
 800770e:	380b      	subs	r0, #11
 8007710:	d017      	beq.n	8007742 <__b2d+0x92>
 8007712:	f1c0 0c20 	rsb	ip, r0, #32
 8007716:	fa04 f500 	lsl.w	r5, r4, r0
 800771a:	42be      	cmp	r6, r7
 800771c:	fa21 f40c 	lsr.w	r4, r1, ip
 8007720:	ea45 0504 	orr.w	r5, r5, r4
 8007724:	bf8c      	ite	hi
 8007726:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800772a:	2400      	movls	r4, #0
 800772c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007730:	fa01 f000 	lsl.w	r0, r1, r0
 8007734:	fa24 f40c 	lsr.w	r4, r4, ip
 8007738:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800773c:	ea40 0204 	orr.w	r2, r0, r4
 8007740:	e7db      	b.n	80076fa <__b2d+0x4a>
 8007742:	ea44 030c 	orr.w	r3, r4, ip
 8007746:	460a      	mov	r2, r1
 8007748:	e7d7      	b.n	80076fa <__b2d+0x4a>
 800774a:	bf00      	nop
 800774c:	3ff00000 	.word	0x3ff00000

08007750 <__d2b>:
 8007750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007754:	4689      	mov	r9, r1
 8007756:	2101      	movs	r1, #1
 8007758:	ec57 6b10 	vmov	r6, r7, d0
 800775c:	4690      	mov	r8, r2
 800775e:	f7ff fc0f 	bl	8006f80 <_Balloc>
 8007762:	4604      	mov	r4, r0
 8007764:	b930      	cbnz	r0, 8007774 <__d2b+0x24>
 8007766:	4602      	mov	r2, r0
 8007768:	4b25      	ldr	r3, [pc, #148]	; (8007800 <__d2b+0xb0>)
 800776a:	4826      	ldr	r0, [pc, #152]	; (8007804 <__d2b+0xb4>)
 800776c:	f240 310a 	movw	r1, #778	; 0x30a
 8007770:	f000 fb0e 	bl	8007d90 <__assert_func>
 8007774:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800777c:	bb35      	cbnz	r5, 80077cc <__d2b+0x7c>
 800777e:	2e00      	cmp	r6, #0
 8007780:	9301      	str	r3, [sp, #4]
 8007782:	d028      	beq.n	80077d6 <__d2b+0x86>
 8007784:	4668      	mov	r0, sp
 8007786:	9600      	str	r6, [sp, #0]
 8007788:	f7ff fd10 	bl	80071ac <__lo0bits>
 800778c:	9900      	ldr	r1, [sp, #0]
 800778e:	b300      	cbz	r0, 80077d2 <__d2b+0x82>
 8007790:	9a01      	ldr	r2, [sp, #4]
 8007792:	f1c0 0320 	rsb	r3, r0, #32
 8007796:	fa02 f303 	lsl.w	r3, r2, r3
 800779a:	430b      	orrs	r3, r1
 800779c:	40c2      	lsrs	r2, r0
 800779e:	6163      	str	r3, [r4, #20]
 80077a0:	9201      	str	r2, [sp, #4]
 80077a2:	9b01      	ldr	r3, [sp, #4]
 80077a4:	61a3      	str	r3, [r4, #24]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bf14      	ite	ne
 80077aa:	2202      	movne	r2, #2
 80077ac:	2201      	moveq	r2, #1
 80077ae:	6122      	str	r2, [r4, #16]
 80077b0:	b1d5      	cbz	r5, 80077e8 <__d2b+0x98>
 80077b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077b6:	4405      	add	r5, r0
 80077b8:	f8c9 5000 	str.w	r5, [r9]
 80077bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077c0:	f8c8 0000 	str.w	r0, [r8]
 80077c4:	4620      	mov	r0, r4
 80077c6:	b003      	add	sp, #12
 80077c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077d0:	e7d5      	b.n	800777e <__d2b+0x2e>
 80077d2:	6161      	str	r1, [r4, #20]
 80077d4:	e7e5      	b.n	80077a2 <__d2b+0x52>
 80077d6:	a801      	add	r0, sp, #4
 80077d8:	f7ff fce8 	bl	80071ac <__lo0bits>
 80077dc:	9b01      	ldr	r3, [sp, #4]
 80077de:	6163      	str	r3, [r4, #20]
 80077e0:	2201      	movs	r2, #1
 80077e2:	6122      	str	r2, [r4, #16]
 80077e4:	3020      	adds	r0, #32
 80077e6:	e7e3      	b.n	80077b0 <__d2b+0x60>
 80077e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077f0:	f8c9 0000 	str.w	r0, [r9]
 80077f4:	6918      	ldr	r0, [r3, #16]
 80077f6:	f7ff fcb9 	bl	800716c <__hi0bits>
 80077fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077fe:	e7df      	b.n	80077c0 <__d2b+0x70>
 8007800:	08009b24 	.word	0x08009b24
 8007804:	08009bb4 	.word	0x08009bb4

08007808 <__ratio>:
 8007808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	4688      	mov	r8, r1
 800780e:	4669      	mov	r1, sp
 8007810:	4681      	mov	r9, r0
 8007812:	f7ff ff4d 	bl	80076b0 <__b2d>
 8007816:	a901      	add	r1, sp, #4
 8007818:	4640      	mov	r0, r8
 800781a:	ec55 4b10 	vmov	r4, r5, d0
 800781e:	f7ff ff47 	bl	80076b0 <__b2d>
 8007822:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007826:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800782a:	eba3 0c02 	sub.w	ip, r3, r2
 800782e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007832:	1a9b      	subs	r3, r3, r2
 8007834:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007838:	ec51 0b10 	vmov	r0, r1, d0
 800783c:	2b00      	cmp	r3, #0
 800783e:	bfd6      	itet	le
 8007840:	460a      	movle	r2, r1
 8007842:	462a      	movgt	r2, r5
 8007844:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007848:	468b      	mov	fp, r1
 800784a:	462f      	mov	r7, r5
 800784c:	bfd4      	ite	le
 800784e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007852:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007856:	4620      	mov	r0, r4
 8007858:	ee10 2a10 	vmov	r2, s0
 800785c:	465b      	mov	r3, fp
 800785e:	4639      	mov	r1, r7
 8007860:	f7f8 fff4 	bl	800084c <__aeabi_ddiv>
 8007864:	ec41 0b10 	vmov	d0, r0, r1
 8007868:	b003      	add	sp, #12
 800786a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800786e <__copybits>:
 800786e:	3901      	subs	r1, #1
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	1149      	asrs	r1, r1, #5
 8007874:	6914      	ldr	r4, [r2, #16]
 8007876:	3101      	adds	r1, #1
 8007878:	f102 0314 	add.w	r3, r2, #20
 800787c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007880:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007884:	1f05      	subs	r5, r0, #4
 8007886:	42a3      	cmp	r3, r4
 8007888:	d30c      	bcc.n	80078a4 <__copybits+0x36>
 800788a:	1aa3      	subs	r3, r4, r2
 800788c:	3b11      	subs	r3, #17
 800788e:	f023 0303 	bic.w	r3, r3, #3
 8007892:	3211      	adds	r2, #17
 8007894:	42a2      	cmp	r2, r4
 8007896:	bf88      	it	hi
 8007898:	2300      	movhi	r3, #0
 800789a:	4418      	add	r0, r3
 800789c:	2300      	movs	r3, #0
 800789e:	4288      	cmp	r0, r1
 80078a0:	d305      	bcc.n	80078ae <__copybits+0x40>
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80078a8:	f845 6f04 	str.w	r6, [r5, #4]!
 80078ac:	e7eb      	b.n	8007886 <__copybits+0x18>
 80078ae:	f840 3b04 	str.w	r3, [r0], #4
 80078b2:	e7f4      	b.n	800789e <__copybits+0x30>

080078b4 <__any_on>:
 80078b4:	f100 0214 	add.w	r2, r0, #20
 80078b8:	6900      	ldr	r0, [r0, #16]
 80078ba:	114b      	asrs	r3, r1, #5
 80078bc:	4298      	cmp	r0, r3
 80078be:	b510      	push	{r4, lr}
 80078c0:	db11      	blt.n	80078e6 <__any_on+0x32>
 80078c2:	dd0a      	ble.n	80078da <__any_on+0x26>
 80078c4:	f011 011f 	ands.w	r1, r1, #31
 80078c8:	d007      	beq.n	80078da <__any_on+0x26>
 80078ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80078ce:	fa24 f001 	lsr.w	r0, r4, r1
 80078d2:	fa00 f101 	lsl.w	r1, r0, r1
 80078d6:	428c      	cmp	r4, r1
 80078d8:	d10b      	bne.n	80078f2 <__any_on+0x3e>
 80078da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078de:	4293      	cmp	r3, r2
 80078e0:	d803      	bhi.n	80078ea <__any_on+0x36>
 80078e2:	2000      	movs	r0, #0
 80078e4:	bd10      	pop	{r4, pc}
 80078e6:	4603      	mov	r3, r0
 80078e8:	e7f7      	b.n	80078da <__any_on+0x26>
 80078ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078ee:	2900      	cmp	r1, #0
 80078f0:	d0f5      	beq.n	80078de <__any_on+0x2a>
 80078f2:	2001      	movs	r0, #1
 80078f4:	e7f6      	b.n	80078e4 <__any_on+0x30>

080078f6 <_calloc_r>:
 80078f6:	b513      	push	{r0, r1, r4, lr}
 80078f8:	434a      	muls	r2, r1
 80078fa:	4611      	mov	r1, r2
 80078fc:	9201      	str	r2, [sp, #4]
 80078fe:	f000 f859 	bl	80079b4 <_malloc_r>
 8007902:	4604      	mov	r4, r0
 8007904:	b118      	cbz	r0, 800790e <_calloc_r+0x18>
 8007906:	9a01      	ldr	r2, [sp, #4]
 8007908:	2100      	movs	r1, #0
 800790a:	f7fc fbc9 	bl	80040a0 <memset>
 800790e:	4620      	mov	r0, r4
 8007910:	b002      	add	sp, #8
 8007912:	bd10      	pop	{r4, pc}

08007914 <_free_r>:
 8007914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007916:	2900      	cmp	r1, #0
 8007918:	d048      	beq.n	80079ac <_free_r+0x98>
 800791a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791e:	9001      	str	r0, [sp, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f1a1 0404 	sub.w	r4, r1, #4
 8007926:	bfb8      	it	lt
 8007928:	18e4      	addlt	r4, r4, r3
 800792a:	f000 fa7b 	bl	8007e24 <__malloc_lock>
 800792e:	4a20      	ldr	r2, [pc, #128]	; (80079b0 <_free_r+0x9c>)
 8007930:	9801      	ldr	r0, [sp, #4]
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	4615      	mov	r5, r2
 8007936:	b933      	cbnz	r3, 8007946 <_free_r+0x32>
 8007938:	6063      	str	r3, [r4, #4]
 800793a:	6014      	str	r4, [r2, #0]
 800793c:	b003      	add	sp, #12
 800793e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007942:	f000 ba75 	b.w	8007e30 <__malloc_unlock>
 8007946:	42a3      	cmp	r3, r4
 8007948:	d90b      	bls.n	8007962 <_free_r+0x4e>
 800794a:	6821      	ldr	r1, [r4, #0]
 800794c:	1862      	adds	r2, r4, r1
 800794e:	4293      	cmp	r3, r2
 8007950:	bf04      	itt	eq
 8007952:	681a      	ldreq	r2, [r3, #0]
 8007954:	685b      	ldreq	r3, [r3, #4]
 8007956:	6063      	str	r3, [r4, #4]
 8007958:	bf04      	itt	eq
 800795a:	1852      	addeq	r2, r2, r1
 800795c:	6022      	streq	r2, [r4, #0]
 800795e:	602c      	str	r4, [r5, #0]
 8007960:	e7ec      	b.n	800793c <_free_r+0x28>
 8007962:	461a      	mov	r2, r3
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b10b      	cbz	r3, 800796c <_free_r+0x58>
 8007968:	42a3      	cmp	r3, r4
 800796a:	d9fa      	bls.n	8007962 <_free_r+0x4e>
 800796c:	6811      	ldr	r1, [r2, #0]
 800796e:	1855      	adds	r5, r2, r1
 8007970:	42a5      	cmp	r5, r4
 8007972:	d10b      	bne.n	800798c <_free_r+0x78>
 8007974:	6824      	ldr	r4, [r4, #0]
 8007976:	4421      	add	r1, r4
 8007978:	1854      	adds	r4, r2, r1
 800797a:	42a3      	cmp	r3, r4
 800797c:	6011      	str	r1, [r2, #0]
 800797e:	d1dd      	bne.n	800793c <_free_r+0x28>
 8007980:	681c      	ldr	r4, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	6053      	str	r3, [r2, #4]
 8007986:	4421      	add	r1, r4
 8007988:	6011      	str	r1, [r2, #0]
 800798a:	e7d7      	b.n	800793c <_free_r+0x28>
 800798c:	d902      	bls.n	8007994 <_free_r+0x80>
 800798e:	230c      	movs	r3, #12
 8007990:	6003      	str	r3, [r0, #0]
 8007992:	e7d3      	b.n	800793c <_free_r+0x28>
 8007994:	6825      	ldr	r5, [r4, #0]
 8007996:	1961      	adds	r1, r4, r5
 8007998:	428b      	cmp	r3, r1
 800799a:	bf04      	itt	eq
 800799c:	6819      	ldreq	r1, [r3, #0]
 800799e:	685b      	ldreq	r3, [r3, #4]
 80079a0:	6063      	str	r3, [r4, #4]
 80079a2:	bf04      	itt	eq
 80079a4:	1949      	addeq	r1, r1, r5
 80079a6:	6021      	streq	r1, [r4, #0]
 80079a8:	6054      	str	r4, [r2, #4]
 80079aa:	e7c7      	b.n	800793c <_free_r+0x28>
 80079ac:	b003      	add	sp, #12
 80079ae:	bd30      	pop	{r4, r5, pc}
 80079b0:	20000220 	.word	0x20000220

080079b4 <_malloc_r>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	1ccd      	adds	r5, r1, #3
 80079b8:	f025 0503 	bic.w	r5, r5, #3
 80079bc:	3508      	adds	r5, #8
 80079be:	2d0c      	cmp	r5, #12
 80079c0:	bf38      	it	cc
 80079c2:	250c      	movcc	r5, #12
 80079c4:	2d00      	cmp	r5, #0
 80079c6:	4606      	mov	r6, r0
 80079c8:	db01      	blt.n	80079ce <_malloc_r+0x1a>
 80079ca:	42a9      	cmp	r1, r5
 80079cc:	d903      	bls.n	80079d6 <_malloc_r+0x22>
 80079ce:	230c      	movs	r3, #12
 80079d0:	6033      	str	r3, [r6, #0]
 80079d2:	2000      	movs	r0, #0
 80079d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d6:	f000 fa25 	bl	8007e24 <__malloc_lock>
 80079da:	4921      	ldr	r1, [pc, #132]	; (8007a60 <_malloc_r+0xac>)
 80079dc:	680a      	ldr	r2, [r1, #0]
 80079de:	4614      	mov	r4, r2
 80079e0:	b99c      	cbnz	r4, 8007a0a <_malloc_r+0x56>
 80079e2:	4f20      	ldr	r7, [pc, #128]	; (8007a64 <_malloc_r+0xb0>)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	b923      	cbnz	r3, 80079f2 <_malloc_r+0x3e>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4630      	mov	r0, r6
 80079ec:	f000 f9a0 	bl	8007d30 <_sbrk_r>
 80079f0:	6038      	str	r0, [r7, #0]
 80079f2:	4629      	mov	r1, r5
 80079f4:	4630      	mov	r0, r6
 80079f6:	f000 f99b 	bl	8007d30 <_sbrk_r>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	d123      	bne.n	8007a46 <_malloc_r+0x92>
 80079fe:	230c      	movs	r3, #12
 8007a00:	6033      	str	r3, [r6, #0]
 8007a02:	4630      	mov	r0, r6
 8007a04:	f000 fa14 	bl	8007e30 <__malloc_unlock>
 8007a08:	e7e3      	b.n	80079d2 <_malloc_r+0x1e>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	1b5b      	subs	r3, r3, r5
 8007a0e:	d417      	bmi.n	8007a40 <_malloc_r+0x8c>
 8007a10:	2b0b      	cmp	r3, #11
 8007a12:	d903      	bls.n	8007a1c <_malloc_r+0x68>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	441c      	add	r4, r3
 8007a18:	6025      	str	r5, [r4, #0]
 8007a1a:	e004      	b.n	8007a26 <_malloc_r+0x72>
 8007a1c:	6863      	ldr	r3, [r4, #4]
 8007a1e:	42a2      	cmp	r2, r4
 8007a20:	bf0c      	ite	eq
 8007a22:	600b      	streq	r3, [r1, #0]
 8007a24:	6053      	strne	r3, [r2, #4]
 8007a26:	4630      	mov	r0, r6
 8007a28:	f000 fa02 	bl	8007e30 <__malloc_unlock>
 8007a2c:	f104 000b 	add.w	r0, r4, #11
 8007a30:	1d23      	adds	r3, r4, #4
 8007a32:	f020 0007 	bic.w	r0, r0, #7
 8007a36:	1ac2      	subs	r2, r0, r3
 8007a38:	d0cc      	beq.n	80079d4 <_malloc_r+0x20>
 8007a3a:	1a1b      	subs	r3, r3, r0
 8007a3c:	50a3      	str	r3, [r4, r2]
 8007a3e:	e7c9      	b.n	80079d4 <_malloc_r+0x20>
 8007a40:	4622      	mov	r2, r4
 8007a42:	6864      	ldr	r4, [r4, #4]
 8007a44:	e7cc      	b.n	80079e0 <_malloc_r+0x2c>
 8007a46:	1cc4      	adds	r4, r0, #3
 8007a48:	f024 0403 	bic.w	r4, r4, #3
 8007a4c:	42a0      	cmp	r0, r4
 8007a4e:	d0e3      	beq.n	8007a18 <_malloc_r+0x64>
 8007a50:	1a21      	subs	r1, r4, r0
 8007a52:	4630      	mov	r0, r6
 8007a54:	f000 f96c 	bl	8007d30 <_sbrk_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d1dd      	bne.n	8007a18 <_malloc_r+0x64>
 8007a5c:	e7cf      	b.n	80079fe <_malloc_r+0x4a>
 8007a5e:	bf00      	nop
 8007a60:	20000220 	.word	0x20000220
 8007a64:	20000224 	.word	0x20000224

08007a68 <__ssputs_r>:
 8007a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a6c:	688e      	ldr	r6, [r1, #8]
 8007a6e:	429e      	cmp	r6, r3
 8007a70:	4682      	mov	sl, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	4690      	mov	r8, r2
 8007a76:	461f      	mov	r7, r3
 8007a78:	d838      	bhi.n	8007aec <__ssputs_r+0x84>
 8007a7a:	898a      	ldrh	r2, [r1, #12]
 8007a7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a80:	d032      	beq.n	8007ae8 <__ssputs_r+0x80>
 8007a82:	6825      	ldr	r5, [r4, #0]
 8007a84:	6909      	ldr	r1, [r1, #16]
 8007a86:	eba5 0901 	sub.w	r9, r5, r1
 8007a8a:	6965      	ldr	r5, [r4, #20]
 8007a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a94:	3301      	adds	r3, #1
 8007a96:	444b      	add	r3, r9
 8007a98:	106d      	asrs	r5, r5, #1
 8007a9a:	429d      	cmp	r5, r3
 8007a9c:	bf38      	it	cc
 8007a9e:	461d      	movcc	r5, r3
 8007aa0:	0553      	lsls	r3, r2, #21
 8007aa2:	d531      	bpl.n	8007b08 <__ssputs_r+0xa0>
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7ff ff85 	bl	80079b4 <_malloc_r>
 8007aaa:	4606      	mov	r6, r0
 8007aac:	b950      	cbnz	r0, 8007ac4 <__ssputs_r+0x5c>
 8007aae:	230c      	movs	r3, #12
 8007ab0:	f8ca 3000 	str.w	r3, [sl]
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac4:	6921      	ldr	r1, [r4, #16]
 8007ac6:	464a      	mov	r2, r9
 8007ac8:	f7ff fa4c 	bl	8006f64 <memcpy>
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad6:	81a3      	strh	r3, [r4, #12]
 8007ad8:	6126      	str	r6, [r4, #16]
 8007ada:	6165      	str	r5, [r4, #20]
 8007adc:	444e      	add	r6, r9
 8007ade:	eba5 0509 	sub.w	r5, r5, r9
 8007ae2:	6026      	str	r6, [r4, #0]
 8007ae4:	60a5      	str	r5, [r4, #8]
 8007ae6:	463e      	mov	r6, r7
 8007ae8:	42be      	cmp	r6, r7
 8007aea:	d900      	bls.n	8007aee <__ssputs_r+0x86>
 8007aec:	463e      	mov	r6, r7
 8007aee:	4632      	mov	r2, r6
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	4641      	mov	r1, r8
 8007af4:	f000 f97c 	bl	8007df0 <memmove>
 8007af8:	68a3      	ldr	r3, [r4, #8]
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	1b9b      	subs	r3, r3, r6
 8007afe:	4432      	add	r2, r6
 8007b00:	60a3      	str	r3, [r4, #8]
 8007b02:	6022      	str	r2, [r4, #0]
 8007b04:	2000      	movs	r0, #0
 8007b06:	e7db      	b.n	8007ac0 <__ssputs_r+0x58>
 8007b08:	462a      	mov	r2, r5
 8007b0a:	f000 f997 	bl	8007e3c <_realloc_r>
 8007b0e:	4606      	mov	r6, r0
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d1e1      	bne.n	8007ad8 <__ssputs_r+0x70>
 8007b14:	6921      	ldr	r1, [r4, #16]
 8007b16:	4650      	mov	r0, sl
 8007b18:	f7ff fefc 	bl	8007914 <_free_r>
 8007b1c:	e7c7      	b.n	8007aae <__ssputs_r+0x46>
	...

08007b20 <_svfiprintf_r>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	4698      	mov	r8, r3
 8007b26:	898b      	ldrh	r3, [r1, #12]
 8007b28:	061b      	lsls	r3, r3, #24
 8007b2a:	b09d      	sub	sp, #116	; 0x74
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	460d      	mov	r5, r1
 8007b30:	4614      	mov	r4, r2
 8007b32:	d50e      	bpl.n	8007b52 <_svfiprintf_r+0x32>
 8007b34:	690b      	ldr	r3, [r1, #16]
 8007b36:	b963      	cbnz	r3, 8007b52 <_svfiprintf_r+0x32>
 8007b38:	2140      	movs	r1, #64	; 0x40
 8007b3a:	f7ff ff3b 	bl	80079b4 <_malloc_r>
 8007b3e:	6028      	str	r0, [r5, #0]
 8007b40:	6128      	str	r0, [r5, #16]
 8007b42:	b920      	cbnz	r0, 8007b4e <_svfiprintf_r+0x2e>
 8007b44:	230c      	movs	r3, #12
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4c:	e0d1      	b.n	8007cf2 <_svfiprintf_r+0x1d2>
 8007b4e:	2340      	movs	r3, #64	; 0x40
 8007b50:	616b      	str	r3, [r5, #20]
 8007b52:	2300      	movs	r3, #0
 8007b54:	9309      	str	r3, [sp, #36]	; 0x24
 8007b56:	2320      	movs	r3, #32
 8007b58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b60:	2330      	movs	r3, #48	; 0x30
 8007b62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d0c <_svfiprintf_r+0x1ec>
 8007b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b6a:	f04f 0901 	mov.w	r9, #1
 8007b6e:	4623      	mov	r3, r4
 8007b70:	469a      	mov	sl, r3
 8007b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b76:	b10a      	cbz	r2, 8007b7c <_svfiprintf_r+0x5c>
 8007b78:	2a25      	cmp	r2, #37	; 0x25
 8007b7a:	d1f9      	bne.n	8007b70 <_svfiprintf_r+0x50>
 8007b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b80:	d00b      	beq.n	8007b9a <_svfiprintf_r+0x7a>
 8007b82:	465b      	mov	r3, fp
 8007b84:	4622      	mov	r2, r4
 8007b86:	4629      	mov	r1, r5
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7ff ff6d 	bl	8007a68 <__ssputs_r>
 8007b8e:	3001      	adds	r0, #1
 8007b90:	f000 80aa 	beq.w	8007ce8 <_svfiprintf_r+0x1c8>
 8007b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b96:	445a      	add	r2, fp
 8007b98:	9209      	str	r2, [sp, #36]	; 0x24
 8007b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80a2 	beq.w	8007ce8 <_svfiprintf_r+0x1c8>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8007baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bae:	f10a 0a01 	add.w	sl, sl, #1
 8007bb2:	9304      	str	r3, [sp, #16]
 8007bb4:	9307      	str	r3, [sp, #28]
 8007bb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bba:	931a      	str	r3, [sp, #104]	; 0x68
 8007bbc:	4654      	mov	r4, sl
 8007bbe:	2205      	movs	r2, #5
 8007bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc4:	4851      	ldr	r0, [pc, #324]	; (8007d0c <_svfiprintf_r+0x1ec>)
 8007bc6:	f7f8 fb0b 	bl	80001e0 <memchr>
 8007bca:	9a04      	ldr	r2, [sp, #16]
 8007bcc:	b9d8      	cbnz	r0, 8007c06 <_svfiprintf_r+0xe6>
 8007bce:	06d0      	lsls	r0, r2, #27
 8007bd0:	bf44      	itt	mi
 8007bd2:	2320      	movmi	r3, #32
 8007bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd8:	0711      	lsls	r1, r2, #28
 8007bda:	bf44      	itt	mi
 8007bdc:	232b      	movmi	r3, #43	; 0x2b
 8007bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be2:	f89a 3000 	ldrb.w	r3, [sl]
 8007be6:	2b2a      	cmp	r3, #42	; 0x2a
 8007be8:	d015      	beq.n	8007c16 <_svfiprintf_r+0xf6>
 8007bea:	9a07      	ldr	r2, [sp, #28]
 8007bec:	4654      	mov	r4, sl
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f04f 0c0a 	mov.w	ip, #10
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bfa:	3b30      	subs	r3, #48	; 0x30
 8007bfc:	2b09      	cmp	r3, #9
 8007bfe:	d94e      	bls.n	8007c9e <_svfiprintf_r+0x17e>
 8007c00:	b1b0      	cbz	r0, 8007c30 <_svfiprintf_r+0x110>
 8007c02:	9207      	str	r2, [sp, #28]
 8007c04:	e014      	b.n	8007c30 <_svfiprintf_r+0x110>
 8007c06:	eba0 0308 	sub.w	r3, r0, r8
 8007c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	9304      	str	r3, [sp, #16]
 8007c12:	46a2      	mov	sl, r4
 8007c14:	e7d2      	b.n	8007bbc <_svfiprintf_r+0x9c>
 8007c16:	9b03      	ldr	r3, [sp, #12]
 8007c18:	1d19      	adds	r1, r3, #4
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	9103      	str	r1, [sp, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bfbb      	ittet	lt
 8007c22:	425b      	neglt	r3, r3
 8007c24:	f042 0202 	orrlt.w	r2, r2, #2
 8007c28:	9307      	strge	r3, [sp, #28]
 8007c2a:	9307      	strlt	r3, [sp, #28]
 8007c2c:	bfb8      	it	lt
 8007c2e:	9204      	strlt	r2, [sp, #16]
 8007c30:	7823      	ldrb	r3, [r4, #0]
 8007c32:	2b2e      	cmp	r3, #46	; 0x2e
 8007c34:	d10c      	bne.n	8007c50 <_svfiprintf_r+0x130>
 8007c36:	7863      	ldrb	r3, [r4, #1]
 8007c38:	2b2a      	cmp	r3, #42	; 0x2a
 8007c3a:	d135      	bne.n	8007ca8 <_svfiprintf_r+0x188>
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	1d1a      	adds	r2, r3, #4
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	9203      	str	r2, [sp, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bfb8      	it	lt
 8007c48:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c4c:	3402      	adds	r4, #2
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d1c <_svfiprintf_r+0x1fc>
 8007c54:	7821      	ldrb	r1, [r4, #0]
 8007c56:	2203      	movs	r2, #3
 8007c58:	4650      	mov	r0, sl
 8007c5a:	f7f8 fac1 	bl	80001e0 <memchr>
 8007c5e:	b140      	cbz	r0, 8007c72 <_svfiprintf_r+0x152>
 8007c60:	2340      	movs	r3, #64	; 0x40
 8007c62:	eba0 000a 	sub.w	r0, r0, sl
 8007c66:	fa03 f000 	lsl.w	r0, r3, r0
 8007c6a:	9b04      	ldr	r3, [sp, #16]
 8007c6c:	4303      	orrs	r3, r0
 8007c6e:	3401      	adds	r4, #1
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c76:	4826      	ldr	r0, [pc, #152]	; (8007d10 <_svfiprintf_r+0x1f0>)
 8007c78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c7c:	2206      	movs	r2, #6
 8007c7e:	f7f8 faaf 	bl	80001e0 <memchr>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d038      	beq.n	8007cf8 <_svfiprintf_r+0x1d8>
 8007c86:	4b23      	ldr	r3, [pc, #140]	; (8007d14 <_svfiprintf_r+0x1f4>)
 8007c88:	bb1b      	cbnz	r3, 8007cd2 <_svfiprintf_r+0x1b2>
 8007c8a:	9b03      	ldr	r3, [sp, #12]
 8007c8c:	3307      	adds	r3, #7
 8007c8e:	f023 0307 	bic.w	r3, r3, #7
 8007c92:	3308      	adds	r3, #8
 8007c94:	9303      	str	r3, [sp, #12]
 8007c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c98:	4433      	add	r3, r6
 8007c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9c:	e767      	b.n	8007b6e <_svfiprintf_r+0x4e>
 8007c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	e7a5      	b.n	8007bf4 <_svfiprintf_r+0xd4>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	3401      	adds	r4, #1
 8007cac:	9305      	str	r3, [sp, #20]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f04f 0c0a 	mov.w	ip, #10
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cba:	3a30      	subs	r2, #48	; 0x30
 8007cbc:	2a09      	cmp	r2, #9
 8007cbe:	d903      	bls.n	8007cc8 <_svfiprintf_r+0x1a8>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0c5      	beq.n	8007c50 <_svfiprintf_r+0x130>
 8007cc4:	9105      	str	r1, [sp, #20]
 8007cc6:	e7c3      	b.n	8007c50 <_svfiprintf_r+0x130>
 8007cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ccc:	4604      	mov	r4, r0
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e7f0      	b.n	8007cb4 <_svfiprintf_r+0x194>
 8007cd2:	ab03      	add	r3, sp, #12
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	462a      	mov	r2, r5
 8007cd8:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <_svfiprintf_r+0x1f8>)
 8007cda:	a904      	add	r1, sp, #16
 8007cdc:	4638      	mov	r0, r7
 8007cde:	f7fc fa87 	bl	80041f0 <_printf_float>
 8007ce2:	1c42      	adds	r2, r0, #1
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	d1d6      	bne.n	8007c96 <_svfiprintf_r+0x176>
 8007ce8:	89ab      	ldrh	r3, [r5, #12]
 8007cea:	065b      	lsls	r3, r3, #25
 8007cec:	f53f af2c 	bmi.w	8007b48 <_svfiprintf_r+0x28>
 8007cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cf2:	b01d      	add	sp, #116	; 0x74
 8007cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf8:	ab03      	add	r3, sp, #12
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	462a      	mov	r2, r5
 8007cfe:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <_svfiprintf_r+0x1f8>)
 8007d00:	a904      	add	r1, sp, #16
 8007d02:	4638      	mov	r0, r7
 8007d04:	f7fc fd18 	bl	8004738 <_printf_i>
 8007d08:	e7eb      	b.n	8007ce2 <_svfiprintf_r+0x1c2>
 8007d0a:	bf00      	nop
 8007d0c:	08009d14 	.word	0x08009d14
 8007d10:	08009d1e 	.word	0x08009d1e
 8007d14:	080041f1 	.word	0x080041f1
 8007d18:	08007a69 	.word	0x08007a69
 8007d1c:	08009d1a 	.word	0x08009d1a

08007d20 <nan>:
 8007d20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007d28 <nan+0x8>
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	00000000 	.word	0x00000000
 8007d2c:	7ff80000 	.word	0x7ff80000

08007d30 <_sbrk_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4d06      	ldr	r5, [pc, #24]	; (8007d4c <_sbrk_r+0x1c>)
 8007d34:	2300      	movs	r3, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	602b      	str	r3, [r5, #0]
 8007d3c:	f7fa fe64 	bl	8002a08 <_sbrk>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_sbrk_r+0x1a>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_sbrk_r+0x1a>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	200002bc 	.word	0x200002bc

08007d50 <strncmp>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	b16a      	cbz	r2, 8007d70 <strncmp+0x20>
 8007d54:	3901      	subs	r1, #1
 8007d56:	1884      	adds	r4, r0, r2
 8007d58:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007d5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d103      	bne.n	8007d6c <strncmp+0x1c>
 8007d64:	42a0      	cmp	r0, r4
 8007d66:	d001      	beq.n	8007d6c <strncmp+0x1c>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1f5      	bne.n	8007d58 <strncmp+0x8>
 8007d6c:	1a98      	subs	r0, r3, r2
 8007d6e:	bd10      	pop	{r4, pc}
 8007d70:	4610      	mov	r0, r2
 8007d72:	e7fc      	b.n	8007d6e <strncmp+0x1e>

08007d74 <__ascii_wctomb>:
 8007d74:	b149      	cbz	r1, 8007d8a <__ascii_wctomb+0x16>
 8007d76:	2aff      	cmp	r2, #255	; 0xff
 8007d78:	bf85      	ittet	hi
 8007d7a:	238a      	movhi	r3, #138	; 0x8a
 8007d7c:	6003      	strhi	r3, [r0, #0]
 8007d7e:	700a      	strbls	r2, [r1, #0]
 8007d80:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d84:	bf98      	it	ls
 8007d86:	2001      	movls	r0, #1
 8007d88:	4770      	bx	lr
 8007d8a:	4608      	mov	r0, r1
 8007d8c:	4770      	bx	lr
	...

08007d90 <__assert_func>:
 8007d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d92:	4614      	mov	r4, r2
 8007d94:	461a      	mov	r2, r3
 8007d96:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <__assert_func+0x2c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	68d8      	ldr	r0, [r3, #12]
 8007d9e:	b14c      	cbz	r4, 8007db4 <__assert_func+0x24>
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <__assert_func+0x30>)
 8007da2:	9100      	str	r1, [sp, #0]
 8007da4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007da8:	4906      	ldr	r1, [pc, #24]	; (8007dc4 <__assert_func+0x34>)
 8007daa:	462b      	mov	r3, r5
 8007dac:	f000 f80e 	bl	8007dcc <fiprintf>
 8007db0:	f000 fa84 	bl	80082bc <abort>
 8007db4:	4b04      	ldr	r3, [pc, #16]	; (8007dc8 <__assert_func+0x38>)
 8007db6:	461c      	mov	r4, r3
 8007db8:	e7f3      	b.n	8007da2 <__assert_func+0x12>
 8007dba:	bf00      	nop
 8007dbc:	20000008 	.word	0x20000008
 8007dc0:	08009d25 	.word	0x08009d25
 8007dc4:	08009d32 	.word	0x08009d32
 8007dc8:	08009d60 	.word	0x08009d60

08007dcc <fiprintf>:
 8007dcc:	b40e      	push	{r1, r2, r3}
 8007dce:	b503      	push	{r0, r1, lr}
 8007dd0:	4601      	mov	r1, r0
 8007dd2:	ab03      	add	r3, sp, #12
 8007dd4:	4805      	ldr	r0, [pc, #20]	; (8007dec <fiprintf+0x20>)
 8007dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dda:	6800      	ldr	r0, [r0, #0]
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	f000 f87d 	bl	8007edc <_vfiprintf_r>
 8007de2:	b002      	add	sp, #8
 8007de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007de8:	b003      	add	sp, #12
 8007dea:	4770      	bx	lr
 8007dec:	20000008 	.word	0x20000008

08007df0 <memmove>:
 8007df0:	4288      	cmp	r0, r1
 8007df2:	b510      	push	{r4, lr}
 8007df4:	eb01 0402 	add.w	r4, r1, r2
 8007df8:	d902      	bls.n	8007e00 <memmove+0x10>
 8007dfa:	4284      	cmp	r4, r0
 8007dfc:	4623      	mov	r3, r4
 8007dfe:	d807      	bhi.n	8007e10 <memmove+0x20>
 8007e00:	1e43      	subs	r3, r0, #1
 8007e02:	42a1      	cmp	r1, r4
 8007e04:	d008      	beq.n	8007e18 <memmove+0x28>
 8007e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e0e:	e7f8      	b.n	8007e02 <memmove+0x12>
 8007e10:	4402      	add	r2, r0
 8007e12:	4601      	mov	r1, r0
 8007e14:	428a      	cmp	r2, r1
 8007e16:	d100      	bne.n	8007e1a <memmove+0x2a>
 8007e18:	bd10      	pop	{r4, pc}
 8007e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e22:	e7f7      	b.n	8007e14 <memmove+0x24>

08007e24 <__malloc_lock>:
 8007e24:	4801      	ldr	r0, [pc, #4]	; (8007e2c <__malloc_lock+0x8>)
 8007e26:	f000 bc09 	b.w	800863c <__retarget_lock_acquire_recursive>
 8007e2a:	bf00      	nop
 8007e2c:	200002c4 	.word	0x200002c4

08007e30 <__malloc_unlock>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__malloc_unlock+0x8>)
 8007e32:	f000 bc04 	b.w	800863e <__retarget_lock_release_recursive>
 8007e36:	bf00      	nop
 8007e38:	200002c4 	.word	0x200002c4

08007e3c <_realloc_r>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	4607      	mov	r7, r0
 8007e40:	4614      	mov	r4, r2
 8007e42:	460e      	mov	r6, r1
 8007e44:	b921      	cbnz	r1, 8007e50 <_realloc_r+0x14>
 8007e46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	f7ff bdb2 	b.w	80079b4 <_malloc_r>
 8007e50:	b922      	cbnz	r2, 8007e5c <_realloc_r+0x20>
 8007e52:	f7ff fd5f 	bl	8007914 <_free_r>
 8007e56:	4625      	mov	r5, r4
 8007e58:	4628      	mov	r0, r5
 8007e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e5c:	f000 fc54 	bl	8008708 <_malloc_usable_size_r>
 8007e60:	42a0      	cmp	r0, r4
 8007e62:	d20f      	bcs.n	8007e84 <_realloc_r+0x48>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4638      	mov	r0, r7
 8007e68:	f7ff fda4 	bl	80079b4 <_malloc_r>
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d0f2      	beq.n	8007e58 <_realloc_r+0x1c>
 8007e72:	4631      	mov	r1, r6
 8007e74:	4622      	mov	r2, r4
 8007e76:	f7ff f875 	bl	8006f64 <memcpy>
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	f7ff fd49 	bl	8007914 <_free_r>
 8007e82:	e7e9      	b.n	8007e58 <_realloc_r+0x1c>
 8007e84:	4635      	mov	r5, r6
 8007e86:	e7e7      	b.n	8007e58 <_realloc_r+0x1c>

08007e88 <__sfputc_r>:
 8007e88:	6893      	ldr	r3, [r2, #8]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	b410      	push	{r4}
 8007e90:	6093      	str	r3, [r2, #8]
 8007e92:	da08      	bge.n	8007ea6 <__sfputc_r+0x1e>
 8007e94:	6994      	ldr	r4, [r2, #24]
 8007e96:	42a3      	cmp	r3, r4
 8007e98:	db01      	blt.n	8007e9e <__sfputc_r+0x16>
 8007e9a:	290a      	cmp	r1, #10
 8007e9c:	d103      	bne.n	8007ea6 <__sfputc_r+0x1e>
 8007e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ea2:	f000 b94b 	b.w	800813c <__swbuf_r>
 8007ea6:	6813      	ldr	r3, [r2, #0]
 8007ea8:	1c58      	adds	r0, r3, #1
 8007eaa:	6010      	str	r0, [r2, #0]
 8007eac:	7019      	strb	r1, [r3, #0]
 8007eae:	4608      	mov	r0, r1
 8007eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <__sfputs_r>:
 8007eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb8:	4606      	mov	r6, r0
 8007eba:	460f      	mov	r7, r1
 8007ebc:	4614      	mov	r4, r2
 8007ebe:	18d5      	adds	r5, r2, r3
 8007ec0:	42ac      	cmp	r4, r5
 8007ec2:	d101      	bne.n	8007ec8 <__sfputs_r+0x12>
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	e007      	b.n	8007ed8 <__sfputs_r+0x22>
 8007ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ecc:	463a      	mov	r2, r7
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f7ff ffda 	bl	8007e88 <__sfputc_r>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d1f3      	bne.n	8007ec0 <__sfputs_r+0xa>
 8007ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007edc <_vfiprintf_r>:
 8007edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee0:	460d      	mov	r5, r1
 8007ee2:	b09d      	sub	sp, #116	; 0x74
 8007ee4:	4614      	mov	r4, r2
 8007ee6:	4698      	mov	r8, r3
 8007ee8:	4606      	mov	r6, r0
 8007eea:	b118      	cbz	r0, 8007ef4 <_vfiprintf_r+0x18>
 8007eec:	6983      	ldr	r3, [r0, #24]
 8007eee:	b90b      	cbnz	r3, 8007ef4 <_vfiprintf_r+0x18>
 8007ef0:	f000 fb06 	bl	8008500 <__sinit>
 8007ef4:	4b89      	ldr	r3, [pc, #548]	; (800811c <_vfiprintf_r+0x240>)
 8007ef6:	429d      	cmp	r5, r3
 8007ef8:	d11b      	bne.n	8007f32 <_vfiprintf_r+0x56>
 8007efa:	6875      	ldr	r5, [r6, #4]
 8007efc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007efe:	07d9      	lsls	r1, r3, #31
 8007f00:	d405      	bmi.n	8007f0e <_vfiprintf_r+0x32>
 8007f02:	89ab      	ldrh	r3, [r5, #12]
 8007f04:	059a      	lsls	r2, r3, #22
 8007f06:	d402      	bmi.n	8007f0e <_vfiprintf_r+0x32>
 8007f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f0a:	f000 fb97 	bl	800863c <__retarget_lock_acquire_recursive>
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	071b      	lsls	r3, r3, #28
 8007f12:	d501      	bpl.n	8007f18 <_vfiprintf_r+0x3c>
 8007f14:	692b      	ldr	r3, [r5, #16]
 8007f16:	b9eb      	cbnz	r3, 8007f54 <_vfiprintf_r+0x78>
 8007f18:	4629      	mov	r1, r5
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f000 f960 	bl	80081e0 <__swsetup_r>
 8007f20:	b1c0      	cbz	r0, 8007f54 <_vfiprintf_r+0x78>
 8007f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f24:	07dc      	lsls	r4, r3, #31
 8007f26:	d50e      	bpl.n	8007f46 <_vfiprintf_r+0x6a>
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2c:	b01d      	add	sp, #116	; 0x74
 8007f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f32:	4b7b      	ldr	r3, [pc, #492]	; (8008120 <_vfiprintf_r+0x244>)
 8007f34:	429d      	cmp	r5, r3
 8007f36:	d101      	bne.n	8007f3c <_vfiprintf_r+0x60>
 8007f38:	68b5      	ldr	r5, [r6, #8]
 8007f3a:	e7df      	b.n	8007efc <_vfiprintf_r+0x20>
 8007f3c:	4b79      	ldr	r3, [pc, #484]	; (8008124 <_vfiprintf_r+0x248>)
 8007f3e:	429d      	cmp	r5, r3
 8007f40:	bf08      	it	eq
 8007f42:	68f5      	ldreq	r5, [r6, #12]
 8007f44:	e7da      	b.n	8007efc <_vfiprintf_r+0x20>
 8007f46:	89ab      	ldrh	r3, [r5, #12]
 8007f48:	0598      	lsls	r0, r3, #22
 8007f4a:	d4ed      	bmi.n	8007f28 <_vfiprintf_r+0x4c>
 8007f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f4e:	f000 fb76 	bl	800863e <__retarget_lock_release_recursive>
 8007f52:	e7e9      	b.n	8007f28 <_vfiprintf_r+0x4c>
 8007f54:	2300      	movs	r3, #0
 8007f56:	9309      	str	r3, [sp, #36]	; 0x24
 8007f58:	2320      	movs	r3, #32
 8007f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f62:	2330      	movs	r3, #48	; 0x30
 8007f64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008128 <_vfiprintf_r+0x24c>
 8007f68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f6c:	f04f 0901 	mov.w	r9, #1
 8007f70:	4623      	mov	r3, r4
 8007f72:	469a      	mov	sl, r3
 8007f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f78:	b10a      	cbz	r2, 8007f7e <_vfiprintf_r+0xa2>
 8007f7a:	2a25      	cmp	r2, #37	; 0x25
 8007f7c:	d1f9      	bne.n	8007f72 <_vfiprintf_r+0x96>
 8007f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f82:	d00b      	beq.n	8007f9c <_vfiprintf_r+0xc0>
 8007f84:	465b      	mov	r3, fp
 8007f86:	4622      	mov	r2, r4
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7ff ff93 	bl	8007eb6 <__sfputs_r>
 8007f90:	3001      	adds	r0, #1
 8007f92:	f000 80aa 	beq.w	80080ea <_vfiprintf_r+0x20e>
 8007f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f98:	445a      	add	r2, fp
 8007f9a:	9209      	str	r2, [sp, #36]	; 0x24
 8007f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 80a2 	beq.w	80080ea <_vfiprintf_r+0x20e>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fb0:	f10a 0a01 	add.w	sl, sl, #1
 8007fb4:	9304      	str	r3, [sp, #16]
 8007fb6:	9307      	str	r3, [sp, #28]
 8007fb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fbc:	931a      	str	r3, [sp, #104]	; 0x68
 8007fbe:	4654      	mov	r4, sl
 8007fc0:	2205      	movs	r2, #5
 8007fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc6:	4858      	ldr	r0, [pc, #352]	; (8008128 <_vfiprintf_r+0x24c>)
 8007fc8:	f7f8 f90a 	bl	80001e0 <memchr>
 8007fcc:	9a04      	ldr	r2, [sp, #16]
 8007fce:	b9d8      	cbnz	r0, 8008008 <_vfiprintf_r+0x12c>
 8007fd0:	06d1      	lsls	r1, r2, #27
 8007fd2:	bf44      	itt	mi
 8007fd4:	2320      	movmi	r3, #32
 8007fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fda:	0713      	lsls	r3, r2, #28
 8007fdc:	bf44      	itt	mi
 8007fde:	232b      	movmi	r3, #43	; 0x2b
 8007fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8007fea:	d015      	beq.n	8008018 <_vfiprintf_r+0x13c>
 8007fec:	9a07      	ldr	r2, [sp, #28]
 8007fee:	4654      	mov	r4, sl
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	f04f 0c0a 	mov.w	ip, #10
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ffc:	3b30      	subs	r3, #48	; 0x30
 8007ffe:	2b09      	cmp	r3, #9
 8008000:	d94e      	bls.n	80080a0 <_vfiprintf_r+0x1c4>
 8008002:	b1b0      	cbz	r0, 8008032 <_vfiprintf_r+0x156>
 8008004:	9207      	str	r2, [sp, #28]
 8008006:	e014      	b.n	8008032 <_vfiprintf_r+0x156>
 8008008:	eba0 0308 	sub.w	r3, r0, r8
 800800c:	fa09 f303 	lsl.w	r3, r9, r3
 8008010:	4313      	orrs	r3, r2
 8008012:	9304      	str	r3, [sp, #16]
 8008014:	46a2      	mov	sl, r4
 8008016:	e7d2      	b.n	8007fbe <_vfiprintf_r+0xe2>
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	1d19      	adds	r1, r3, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	9103      	str	r1, [sp, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	bfbb      	ittet	lt
 8008024:	425b      	neglt	r3, r3
 8008026:	f042 0202 	orrlt.w	r2, r2, #2
 800802a:	9307      	strge	r3, [sp, #28]
 800802c:	9307      	strlt	r3, [sp, #28]
 800802e:	bfb8      	it	lt
 8008030:	9204      	strlt	r2, [sp, #16]
 8008032:	7823      	ldrb	r3, [r4, #0]
 8008034:	2b2e      	cmp	r3, #46	; 0x2e
 8008036:	d10c      	bne.n	8008052 <_vfiprintf_r+0x176>
 8008038:	7863      	ldrb	r3, [r4, #1]
 800803a:	2b2a      	cmp	r3, #42	; 0x2a
 800803c:	d135      	bne.n	80080aa <_vfiprintf_r+0x1ce>
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	1d1a      	adds	r2, r3, #4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	9203      	str	r2, [sp, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	bfb8      	it	lt
 800804a:	f04f 33ff 	movlt.w	r3, #4294967295
 800804e:	3402      	adds	r4, #2
 8008050:	9305      	str	r3, [sp, #20]
 8008052:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008138 <_vfiprintf_r+0x25c>
 8008056:	7821      	ldrb	r1, [r4, #0]
 8008058:	2203      	movs	r2, #3
 800805a:	4650      	mov	r0, sl
 800805c:	f7f8 f8c0 	bl	80001e0 <memchr>
 8008060:	b140      	cbz	r0, 8008074 <_vfiprintf_r+0x198>
 8008062:	2340      	movs	r3, #64	; 0x40
 8008064:	eba0 000a 	sub.w	r0, r0, sl
 8008068:	fa03 f000 	lsl.w	r0, r3, r0
 800806c:	9b04      	ldr	r3, [sp, #16]
 800806e:	4303      	orrs	r3, r0
 8008070:	3401      	adds	r4, #1
 8008072:	9304      	str	r3, [sp, #16]
 8008074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008078:	482c      	ldr	r0, [pc, #176]	; (800812c <_vfiprintf_r+0x250>)
 800807a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800807e:	2206      	movs	r2, #6
 8008080:	f7f8 f8ae 	bl	80001e0 <memchr>
 8008084:	2800      	cmp	r0, #0
 8008086:	d03f      	beq.n	8008108 <_vfiprintf_r+0x22c>
 8008088:	4b29      	ldr	r3, [pc, #164]	; (8008130 <_vfiprintf_r+0x254>)
 800808a:	bb1b      	cbnz	r3, 80080d4 <_vfiprintf_r+0x1f8>
 800808c:	9b03      	ldr	r3, [sp, #12]
 800808e:	3307      	adds	r3, #7
 8008090:	f023 0307 	bic.w	r3, r3, #7
 8008094:	3308      	adds	r3, #8
 8008096:	9303      	str	r3, [sp, #12]
 8008098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809a:	443b      	add	r3, r7
 800809c:	9309      	str	r3, [sp, #36]	; 0x24
 800809e:	e767      	b.n	8007f70 <_vfiprintf_r+0x94>
 80080a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80080a4:	460c      	mov	r4, r1
 80080a6:	2001      	movs	r0, #1
 80080a8:	e7a5      	b.n	8007ff6 <_vfiprintf_r+0x11a>
 80080aa:	2300      	movs	r3, #0
 80080ac:	3401      	adds	r4, #1
 80080ae:	9305      	str	r3, [sp, #20]
 80080b0:	4619      	mov	r1, r3
 80080b2:	f04f 0c0a 	mov.w	ip, #10
 80080b6:	4620      	mov	r0, r4
 80080b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080bc:	3a30      	subs	r2, #48	; 0x30
 80080be:	2a09      	cmp	r2, #9
 80080c0:	d903      	bls.n	80080ca <_vfiprintf_r+0x1ee>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d0c5      	beq.n	8008052 <_vfiprintf_r+0x176>
 80080c6:	9105      	str	r1, [sp, #20]
 80080c8:	e7c3      	b.n	8008052 <_vfiprintf_r+0x176>
 80080ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80080ce:	4604      	mov	r4, r0
 80080d0:	2301      	movs	r3, #1
 80080d2:	e7f0      	b.n	80080b6 <_vfiprintf_r+0x1da>
 80080d4:	ab03      	add	r3, sp, #12
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	462a      	mov	r2, r5
 80080da:	4b16      	ldr	r3, [pc, #88]	; (8008134 <_vfiprintf_r+0x258>)
 80080dc:	a904      	add	r1, sp, #16
 80080de:	4630      	mov	r0, r6
 80080e0:	f7fc f886 	bl	80041f0 <_printf_float>
 80080e4:	4607      	mov	r7, r0
 80080e6:	1c78      	adds	r0, r7, #1
 80080e8:	d1d6      	bne.n	8008098 <_vfiprintf_r+0x1bc>
 80080ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ec:	07d9      	lsls	r1, r3, #31
 80080ee:	d405      	bmi.n	80080fc <_vfiprintf_r+0x220>
 80080f0:	89ab      	ldrh	r3, [r5, #12]
 80080f2:	059a      	lsls	r2, r3, #22
 80080f4:	d402      	bmi.n	80080fc <_vfiprintf_r+0x220>
 80080f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080f8:	f000 faa1 	bl	800863e <__retarget_lock_release_recursive>
 80080fc:	89ab      	ldrh	r3, [r5, #12]
 80080fe:	065b      	lsls	r3, r3, #25
 8008100:	f53f af12 	bmi.w	8007f28 <_vfiprintf_r+0x4c>
 8008104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008106:	e711      	b.n	8007f2c <_vfiprintf_r+0x50>
 8008108:	ab03      	add	r3, sp, #12
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	462a      	mov	r2, r5
 800810e:	4b09      	ldr	r3, [pc, #36]	; (8008134 <_vfiprintf_r+0x258>)
 8008110:	a904      	add	r1, sp, #16
 8008112:	4630      	mov	r0, r6
 8008114:	f7fc fb10 	bl	8004738 <_printf_i>
 8008118:	e7e4      	b.n	80080e4 <_vfiprintf_r+0x208>
 800811a:	bf00      	nop
 800811c:	08009d84 	.word	0x08009d84
 8008120:	08009da4 	.word	0x08009da4
 8008124:	08009d64 	.word	0x08009d64
 8008128:	08009d14 	.word	0x08009d14
 800812c:	08009d1e 	.word	0x08009d1e
 8008130:	080041f1 	.word	0x080041f1
 8008134:	08007eb7 	.word	0x08007eb7
 8008138:	08009d1a 	.word	0x08009d1a

0800813c <__swbuf_r>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	460e      	mov	r6, r1
 8008140:	4614      	mov	r4, r2
 8008142:	4605      	mov	r5, r0
 8008144:	b118      	cbz	r0, 800814e <__swbuf_r+0x12>
 8008146:	6983      	ldr	r3, [r0, #24]
 8008148:	b90b      	cbnz	r3, 800814e <__swbuf_r+0x12>
 800814a:	f000 f9d9 	bl	8008500 <__sinit>
 800814e:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <__swbuf_r+0x98>)
 8008150:	429c      	cmp	r4, r3
 8008152:	d12b      	bne.n	80081ac <__swbuf_r+0x70>
 8008154:	686c      	ldr	r4, [r5, #4]
 8008156:	69a3      	ldr	r3, [r4, #24]
 8008158:	60a3      	str	r3, [r4, #8]
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	071a      	lsls	r2, r3, #28
 800815e:	d52f      	bpl.n	80081c0 <__swbuf_r+0x84>
 8008160:	6923      	ldr	r3, [r4, #16]
 8008162:	b36b      	cbz	r3, 80081c0 <__swbuf_r+0x84>
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	6820      	ldr	r0, [r4, #0]
 8008168:	1ac0      	subs	r0, r0, r3
 800816a:	6963      	ldr	r3, [r4, #20]
 800816c:	b2f6      	uxtb	r6, r6
 800816e:	4283      	cmp	r3, r0
 8008170:	4637      	mov	r7, r6
 8008172:	dc04      	bgt.n	800817e <__swbuf_r+0x42>
 8008174:	4621      	mov	r1, r4
 8008176:	4628      	mov	r0, r5
 8008178:	f000 f92e 	bl	80083d8 <_fflush_r>
 800817c:	bb30      	cbnz	r0, 80081cc <__swbuf_r+0x90>
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	3b01      	subs	r3, #1
 8008182:	60a3      	str	r3, [r4, #8]
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	6022      	str	r2, [r4, #0]
 800818a:	701e      	strb	r6, [r3, #0]
 800818c:	6963      	ldr	r3, [r4, #20]
 800818e:	3001      	adds	r0, #1
 8008190:	4283      	cmp	r3, r0
 8008192:	d004      	beq.n	800819e <__swbuf_r+0x62>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	07db      	lsls	r3, r3, #31
 8008198:	d506      	bpl.n	80081a8 <__swbuf_r+0x6c>
 800819a:	2e0a      	cmp	r6, #10
 800819c:	d104      	bne.n	80081a8 <__swbuf_r+0x6c>
 800819e:	4621      	mov	r1, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	f000 f919 	bl	80083d8 <_fflush_r>
 80081a6:	b988      	cbnz	r0, 80081cc <__swbuf_r+0x90>
 80081a8:	4638      	mov	r0, r7
 80081aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ac:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <__swbuf_r+0x9c>)
 80081ae:	429c      	cmp	r4, r3
 80081b0:	d101      	bne.n	80081b6 <__swbuf_r+0x7a>
 80081b2:	68ac      	ldr	r4, [r5, #8]
 80081b4:	e7cf      	b.n	8008156 <__swbuf_r+0x1a>
 80081b6:	4b09      	ldr	r3, [pc, #36]	; (80081dc <__swbuf_r+0xa0>)
 80081b8:	429c      	cmp	r4, r3
 80081ba:	bf08      	it	eq
 80081bc:	68ec      	ldreq	r4, [r5, #12]
 80081be:	e7ca      	b.n	8008156 <__swbuf_r+0x1a>
 80081c0:	4621      	mov	r1, r4
 80081c2:	4628      	mov	r0, r5
 80081c4:	f000 f80c 	bl	80081e0 <__swsetup_r>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	d0cb      	beq.n	8008164 <__swbuf_r+0x28>
 80081cc:	f04f 37ff 	mov.w	r7, #4294967295
 80081d0:	e7ea      	b.n	80081a8 <__swbuf_r+0x6c>
 80081d2:	bf00      	nop
 80081d4:	08009d84 	.word	0x08009d84
 80081d8:	08009da4 	.word	0x08009da4
 80081dc:	08009d64 	.word	0x08009d64

080081e0 <__swsetup_r>:
 80081e0:	4b32      	ldr	r3, [pc, #200]	; (80082ac <__swsetup_r+0xcc>)
 80081e2:	b570      	push	{r4, r5, r6, lr}
 80081e4:	681d      	ldr	r5, [r3, #0]
 80081e6:	4606      	mov	r6, r0
 80081e8:	460c      	mov	r4, r1
 80081ea:	b125      	cbz	r5, 80081f6 <__swsetup_r+0x16>
 80081ec:	69ab      	ldr	r3, [r5, #24]
 80081ee:	b913      	cbnz	r3, 80081f6 <__swsetup_r+0x16>
 80081f0:	4628      	mov	r0, r5
 80081f2:	f000 f985 	bl	8008500 <__sinit>
 80081f6:	4b2e      	ldr	r3, [pc, #184]	; (80082b0 <__swsetup_r+0xd0>)
 80081f8:	429c      	cmp	r4, r3
 80081fa:	d10f      	bne.n	800821c <__swsetup_r+0x3c>
 80081fc:	686c      	ldr	r4, [r5, #4]
 80081fe:	89a3      	ldrh	r3, [r4, #12]
 8008200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008204:	0719      	lsls	r1, r3, #28
 8008206:	d42c      	bmi.n	8008262 <__swsetup_r+0x82>
 8008208:	06dd      	lsls	r5, r3, #27
 800820a:	d411      	bmi.n	8008230 <__swsetup_r+0x50>
 800820c:	2309      	movs	r3, #9
 800820e:	6033      	str	r3, [r6, #0]
 8008210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008214:	81a3      	strh	r3, [r4, #12]
 8008216:	f04f 30ff 	mov.w	r0, #4294967295
 800821a:	e03e      	b.n	800829a <__swsetup_r+0xba>
 800821c:	4b25      	ldr	r3, [pc, #148]	; (80082b4 <__swsetup_r+0xd4>)
 800821e:	429c      	cmp	r4, r3
 8008220:	d101      	bne.n	8008226 <__swsetup_r+0x46>
 8008222:	68ac      	ldr	r4, [r5, #8]
 8008224:	e7eb      	b.n	80081fe <__swsetup_r+0x1e>
 8008226:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <__swsetup_r+0xd8>)
 8008228:	429c      	cmp	r4, r3
 800822a:	bf08      	it	eq
 800822c:	68ec      	ldreq	r4, [r5, #12]
 800822e:	e7e6      	b.n	80081fe <__swsetup_r+0x1e>
 8008230:	0758      	lsls	r0, r3, #29
 8008232:	d512      	bpl.n	800825a <__swsetup_r+0x7a>
 8008234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008236:	b141      	cbz	r1, 800824a <__swsetup_r+0x6a>
 8008238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800823c:	4299      	cmp	r1, r3
 800823e:	d002      	beq.n	8008246 <__swsetup_r+0x66>
 8008240:	4630      	mov	r0, r6
 8008242:	f7ff fb67 	bl	8007914 <_free_r>
 8008246:	2300      	movs	r3, #0
 8008248:	6363      	str	r3, [r4, #52]	; 0x34
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	2300      	movs	r3, #0
 8008254:	6063      	str	r3, [r4, #4]
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	f043 0308 	orr.w	r3, r3, #8
 8008260:	81a3      	strh	r3, [r4, #12]
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	b94b      	cbnz	r3, 800827a <__swsetup_r+0x9a>
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800826c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008270:	d003      	beq.n	800827a <__swsetup_r+0x9a>
 8008272:	4621      	mov	r1, r4
 8008274:	4630      	mov	r0, r6
 8008276:	f000 fa07 	bl	8008688 <__smakebuf_r>
 800827a:	89a0      	ldrh	r0, [r4, #12]
 800827c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008280:	f010 0301 	ands.w	r3, r0, #1
 8008284:	d00a      	beq.n	800829c <__swsetup_r+0xbc>
 8008286:	2300      	movs	r3, #0
 8008288:	60a3      	str	r3, [r4, #8]
 800828a:	6963      	ldr	r3, [r4, #20]
 800828c:	425b      	negs	r3, r3
 800828e:	61a3      	str	r3, [r4, #24]
 8008290:	6923      	ldr	r3, [r4, #16]
 8008292:	b943      	cbnz	r3, 80082a6 <__swsetup_r+0xc6>
 8008294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008298:	d1ba      	bne.n	8008210 <__swsetup_r+0x30>
 800829a:	bd70      	pop	{r4, r5, r6, pc}
 800829c:	0781      	lsls	r1, r0, #30
 800829e:	bf58      	it	pl
 80082a0:	6963      	ldrpl	r3, [r4, #20]
 80082a2:	60a3      	str	r3, [r4, #8]
 80082a4:	e7f4      	b.n	8008290 <__swsetup_r+0xb0>
 80082a6:	2000      	movs	r0, #0
 80082a8:	e7f7      	b.n	800829a <__swsetup_r+0xba>
 80082aa:	bf00      	nop
 80082ac:	20000008 	.word	0x20000008
 80082b0:	08009d84 	.word	0x08009d84
 80082b4:	08009da4 	.word	0x08009da4
 80082b8:	08009d64 	.word	0x08009d64

080082bc <abort>:
 80082bc:	b508      	push	{r3, lr}
 80082be:	2006      	movs	r0, #6
 80082c0:	f000 fa52 	bl	8008768 <raise>
 80082c4:	2001      	movs	r0, #1
 80082c6:	f7fa fb27 	bl	8002918 <_exit>
	...

080082cc <__sflush_r>:
 80082cc:	898a      	ldrh	r2, [r1, #12]
 80082ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d2:	4605      	mov	r5, r0
 80082d4:	0710      	lsls	r0, r2, #28
 80082d6:	460c      	mov	r4, r1
 80082d8:	d458      	bmi.n	800838c <__sflush_r+0xc0>
 80082da:	684b      	ldr	r3, [r1, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dc05      	bgt.n	80082ec <__sflush_r+0x20>
 80082e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dc02      	bgt.n	80082ec <__sflush_r+0x20>
 80082e6:	2000      	movs	r0, #0
 80082e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082ee:	2e00      	cmp	r6, #0
 80082f0:	d0f9      	beq.n	80082e6 <__sflush_r+0x1a>
 80082f2:	2300      	movs	r3, #0
 80082f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082f8:	682f      	ldr	r7, [r5, #0]
 80082fa:	602b      	str	r3, [r5, #0]
 80082fc:	d032      	beq.n	8008364 <__sflush_r+0x98>
 80082fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	075a      	lsls	r2, r3, #29
 8008304:	d505      	bpl.n	8008312 <__sflush_r+0x46>
 8008306:	6863      	ldr	r3, [r4, #4]
 8008308:	1ac0      	subs	r0, r0, r3
 800830a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800830c:	b10b      	cbz	r3, 8008312 <__sflush_r+0x46>
 800830e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008310:	1ac0      	subs	r0, r0, r3
 8008312:	2300      	movs	r3, #0
 8008314:	4602      	mov	r2, r0
 8008316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008318:	6a21      	ldr	r1, [r4, #32]
 800831a:	4628      	mov	r0, r5
 800831c:	47b0      	blx	r6
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	d106      	bne.n	8008332 <__sflush_r+0x66>
 8008324:	6829      	ldr	r1, [r5, #0]
 8008326:	291d      	cmp	r1, #29
 8008328:	d82c      	bhi.n	8008384 <__sflush_r+0xb8>
 800832a:	4a2a      	ldr	r2, [pc, #168]	; (80083d4 <__sflush_r+0x108>)
 800832c:	40ca      	lsrs	r2, r1
 800832e:	07d6      	lsls	r6, r2, #31
 8008330:	d528      	bpl.n	8008384 <__sflush_r+0xb8>
 8008332:	2200      	movs	r2, #0
 8008334:	6062      	str	r2, [r4, #4]
 8008336:	04d9      	lsls	r1, r3, #19
 8008338:	6922      	ldr	r2, [r4, #16]
 800833a:	6022      	str	r2, [r4, #0]
 800833c:	d504      	bpl.n	8008348 <__sflush_r+0x7c>
 800833e:	1c42      	adds	r2, r0, #1
 8008340:	d101      	bne.n	8008346 <__sflush_r+0x7a>
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	b903      	cbnz	r3, 8008348 <__sflush_r+0x7c>
 8008346:	6560      	str	r0, [r4, #84]	; 0x54
 8008348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800834a:	602f      	str	r7, [r5, #0]
 800834c:	2900      	cmp	r1, #0
 800834e:	d0ca      	beq.n	80082e6 <__sflush_r+0x1a>
 8008350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008354:	4299      	cmp	r1, r3
 8008356:	d002      	beq.n	800835e <__sflush_r+0x92>
 8008358:	4628      	mov	r0, r5
 800835a:	f7ff fadb 	bl	8007914 <_free_r>
 800835e:	2000      	movs	r0, #0
 8008360:	6360      	str	r0, [r4, #52]	; 0x34
 8008362:	e7c1      	b.n	80082e8 <__sflush_r+0x1c>
 8008364:	6a21      	ldr	r1, [r4, #32]
 8008366:	2301      	movs	r3, #1
 8008368:	4628      	mov	r0, r5
 800836a:	47b0      	blx	r6
 800836c:	1c41      	adds	r1, r0, #1
 800836e:	d1c7      	bne.n	8008300 <__sflush_r+0x34>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0c4      	beq.n	8008300 <__sflush_r+0x34>
 8008376:	2b1d      	cmp	r3, #29
 8008378:	d001      	beq.n	800837e <__sflush_r+0xb2>
 800837a:	2b16      	cmp	r3, #22
 800837c:	d101      	bne.n	8008382 <__sflush_r+0xb6>
 800837e:	602f      	str	r7, [r5, #0]
 8008380:	e7b1      	b.n	80082e6 <__sflush_r+0x1a>
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008388:	81a3      	strh	r3, [r4, #12]
 800838a:	e7ad      	b.n	80082e8 <__sflush_r+0x1c>
 800838c:	690f      	ldr	r7, [r1, #16]
 800838e:	2f00      	cmp	r7, #0
 8008390:	d0a9      	beq.n	80082e6 <__sflush_r+0x1a>
 8008392:	0793      	lsls	r3, r2, #30
 8008394:	680e      	ldr	r6, [r1, #0]
 8008396:	bf08      	it	eq
 8008398:	694b      	ldreq	r3, [r1, #20]
 800839a:	600f      	str	r7, [r1, #0]
 800839c:	bf18      	it	ne
 800839e:	2300      	movne	r3, #0
 80083a0:	eba6 0807 	sub.w	r8, r6, r7
 80083a4:	608b      	str	r3, [r1, #8]
 80083a6:	f1b8 0f00 	cmp.w	r8, #0
 80083aa:	dd9c      	ble.n	80082e6 <__sflush_r+0x1a>
 80083ac:	6a21      	ldr	r1, [r4, #32]
 80083ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083b0:	4643      	mov	r3, r8
 80083b2:	463a      	mov	r2, r7
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b0      	blx	r6
 80083b8:	2800      	cmp	r0, #0
 80083ba:	dc06      	bgt.n	80083ca <__sflush_r+0xfe>
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	e78e      	b.n	80082e8 <__sflush_r+0x1c>
 80083ca:	4407      	add	r7, r0
 80083cc:	eba8 0800 	sub.w	r8, r8, r0
 80083d0:	e7e9      	b.n	80083a6 <__sflush_r+0xda>
 80083d2:	bf00      	nop
 80083d4:	20400001 	.word	0x20400001

080083d8 <_fflush_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	690b      	ldr	r3, [r1, #16]
 80083dc:	4605      	mov	r5, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	b913      	cbnz	r3, 80083e8 <_fflush_r+0x10>
 80083e2:	2500      	movs	r5, #0
 80083e4:	4628      	mov	r0, r5
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	b118      	cbz	r0, 80083f2 <_fflush_r+0x1a>
 80083ea:	6983      	ldr	r3, [r0, #24]
 80083ec:	b90b      	cbnz	r3, 80083f2 <_fflush_r+0x1a>
 80083ee:	f000 f887 	bl	8008500 <__sinit>
 80083f2:	4b14      	ldr	r3, [pc, #80]	; (8008444 <_fflush_r+0x6c>)
 80083f4:	429c      	cmp	r4, r3
 80083f6:	d11b      	bne.n	8008430 <_fflush_r+0x58>
 80083f8:	686c      	ldr	r4, [r5, #4]
 80083fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0ef      	beq.n	80083e2 <_fflush_r+0xa>
 8008402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008404:	07d0      	lsls	r0, r2, #31
 8008406:	d404      	bmi.n	8008412 <_fflush_r+0x3a>
 8008408:	0599      	lsls	r1, r3, #22
 800840a:	d402      	bmi.n	8008412 <_fflush_r+0x3a>
 800840c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800840e:	f000 f915 	bl	800863c <__retarget_lock_acquire_recursive>
 8008412:	4628      	mov	r0, r5
 8008414:	4621      	mov	r1, r4
 8008416:	f7ff ff59 	bl	80082cc <__sflush_r>
 800841a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800841c:	07da      	lsls	r2, r3, #31
 800841e:	4605      	mov	r5, r0
 8008420:	d4e0      	bmi.n	80083e4 <_fflush_r+0xc>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	059b      	lsls	r3, r3, #22
 8008426:	d4dd      	bmi.n	80083e4 <_fflush_r+0xc>
 8008428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800842a:	f000 f908 	bl	800863e <__retarget_lock_release_recursive>
 800842e:	e7d9      	b.n	80083e4 <_fflush_r+0xc>
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <_fflush_r+0x70>)
 8008432:	429c      	cmp	r4, r3
 8008434:	d101      	bne.n	800843a <_fflush_r+0x62>
 8008436:	68ac      	ldr	r4, [r5, #8]
 8008438:	e7df      	b.n	80083fa <_fflush_r+0x22>
 800843a:	4b04      	ldr	r3, [pc, #16]	; (800844c <_fflush_r+0x74>)
 800843c:	429c      	cmp	r4, r3
 800843e:	bf08      	it	eq
 8008440:	68ec      	ldreq	r4, [r5, #12]
 8008442:	e7da      	b.n	80083fa <_fflush_r+0x22>
 8008444:	08009d84 	.word	0x08009d84
 8008448:	08009da4 	.word	0x08009da4
 800844c:	08009d64 	.word	0x08009d64

08008450 <std>:
 8008450:	2300      	movs	r3, #0
 8008452:	b510      	push	{r4, lr}
 8008454:	4604      	mov	r4, r0
 8008456:	e9c0 3300 	strd	r3, r3, [r0]
 800845a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800845e:	6083      	str	r3, [r0, #8]
 8008460:	8181      	strh	r1, [r0, #12]
 8008462:	6643      	str	r3, [r0, #100]	; 0x64
 8008464:	81c2      	strh	r2, [r0, #14]
 8008466:	6183      	str	r3, [r0, #24]
 8008468:	4619      	mov	r1, r3
 800846a:	2208      	movs	r2, #8
 800846c:	305c      	adds	r0, #92	; 0x5c
 800846e:	f7fb fe17 	bl	80040a0 <memset>
 8008472:	4b05      	ldr	r3, [pc, #20]	; (8008488 <std+0x38>)
 8008474:	6263      	str	r3, [r4, #36]	; 0x24
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <std+0x3c>)
 8008478:	62a3      	str	r3, [r4, #40]	; 0x28
 800847a:	4b05      	ldr	r3, [pc, #20]	; (8008490 <std+0x40>)
 800847c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800847e:	4b05      	ldr	r3, [pc, #20]	; (8008494 <std+0x44>)
 8008480:	6224      	str	r4, [r4, #32]
 8008482:	6323      	str	r3, [r4, #48]	; 0x30
 8008484:	bd10      	pop	{r4, pc}
 8008486:	bf00      	nop
 8008488:	080087a1 	.word	0x080087a1
 800848c:	080087c3 	.word	0x080087c3
 8008490:	080087fb 	.word	0x080087fb
 8008494:	0800881f 	.word	0x0800881f

08008498 <_cleanup_r>:
 8008498:	4901      	ldr	r1, [pc, #4]	; (80084a0 <_cleanup_r+0x8>)
 800849a:	f000 b8af 	b.w	80085fc <_fwalk_reent>
 800849e:	bf00      	nop
 80084a0:	080083d9 	.word	0x080083d9

080084a4 <__sfmoreglue>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	1e4a      	subs	r2, r1, #1
 80084a8:	2568      	movs	r5, #104	; 0x68
 80084aa:	4355      	muls	r5, r2
 80084ac:	460e      	mov	r6, r1
 80084ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084b2:	f7ff fa7f 	bl	80079b4 <_malloc_r>
 80084b6:	4604      	mov	r4, r0
 80084b8:	b140      	cbz	r0, 80084cc <__sfmoreglue+0x28>
 80084ba:	2100      	movs	r1, #0
 80084bc:	e9c0 1600 	strd	r1, r6, [r0]
 80084c0:	300c      	adds	r0, #12
 80084c2:	60a0      	str	r0, [r4, #8]
 80084c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084c8:	f7fb fdea 	bl	80040a0 <memset>
 80084cc:	4620      	mov	r0, r4
 80084ce:	bd70      	pop	{r4, r5, r6, pc}

080084d0 <__sfp_lock_acquire>:
 80084d0:	4801      	ldr	r0, [pc, #4]	; (80084d8 <__sfp_lock_acquire+0x8>)
 80084d2:	f000 b8b3 	b.w	800863c <__retarget_lock_acquire_recursive>
 80084d6:	bf00      	nop
 80084d8:	200002c8 	.word	0x200002c8

080084dc <__sfp_lock_release>:
 80084dc:	4801      	ldr	r0, [pc, #4]	; (80084e4 <__sfp_lock_release+0x8>)
 80084de:	f000 b8ae 	b.w	800863e <__retarget_lock_release_recursive>
 80084e2:	bf00      	nop
 80084e4:	200002c8 	.word	0x200002c8

080084e8 <__sinit_lock_acquire>:
 80084e8:	4801      	ldr	r0, [pc, #4]	; (80084f0 <__sinit_lock_acquire+0x8>)
 80084ea:	f000 b8a7 	b.w	800863c <__retarget_lock_acquire_recursive>
 80084ee:	bf00      	nop
 80084f0:	200002c3 	.word	0x200002c3

080084f4 <__sinit_lock_release>:
 80084f4:	4801      	ldr	r0, [pc, #4]	; (80084fc <__sinit_lock_release+0x8>)
 80084f6:	f000 b8a2 	b.w	800863e <__retarget_lock_release_recursive>
 80084fa:	bf00      	nop
 80084fc:	200002c3 	.word	0x200002c3

08008500 <__sinit>:
 8008500:	b510      	push	{r4, lr}
 8008502:	4604      	mov	r4, r0
 8008504:	f7ff fff0 	bl	80084e8 <__sinit_lock_acquire>
 8008508:	69a3      	ldr	r3, [r4, #24]
 800850a:	b11b      	cbz	r3, 8008514 <__sinit+0x14>
 800850c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008510:	f7ff bff0 	b.w	80084f4 <__sinit_lock_release>
 8008514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008518:	6523      	str	r3, [r4, #80]	; 0x50
 800851a:	4b13      	ldr	r3, [pc, #76]	; (8008568 <__sinit+0x68>)
 800851c:	4a13      	ldr	r2, [pc, #76]	; (800856c <__sinit+0x6c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	62a2      	str	r2, [r4, #40]	; 0x28
 8008522:	42a3      	cmp	r3, r4
 8008524:	bf04      	itt	eq
 8008526:	2301      	moveq	r3, #1
 8008528:	61a3      	streq	r3, [r4, #24]
 800852a:	4620      	mov	r0, r4
 800852c:	f000 f820 	bl	8008570 <__sfp>
 8008530:	6060      	str	r0, [r4, #4]
 8008532:	4620      	mov	r0, r4
 8008534:	f000 f81c 	bl	8008570 <__sfp>
 8008538:	60a0      	str	r0, [r4, #8]
 800853a:	4620      	mov	r0, r4
 800853c:	f000 f818 	bl	8008570 <__sfp>
 8008540:	2200      	movs	r2, #0
 8008542:	60e0      	str	r0, [r4, #12]
 8008544:	2104      	movs	r1, #4
 8008546:	6860      	ldr	r0, [r4, #4]
 8008548:	f7ff ff82 	bl	8008450 <std>
 800854c:	68a0      	ldr	r0, [r4, #8]
 800854e:	2201      	movs	r2, #1
 8008550:	2109      	movs	r1, #9
 8008552:	f7ff ff7d 	bl	8008450 <std>
 8008556:	68e0      	ldr	r0, [r4, #12]
 8008558:	2202      	movs	r2, #2
 800855a:	2112      	movs	r1, #18
 800855c:	f7ff ff78 	bl	8008450 <std>
 8008560:	2301      	movs	r3, #1
 8008562:	61a3      	str	r3, [r4, #24]
 8008564:	e7d2      	b.n	800850c <__sinit+0xc>
 8008566:	bf00      	nop
 8008568:	08009910 	.word	0x08009910
 800856c:	08008499 	.word	0x08008499

08008570 <__sfp>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	4607      	mov	r7, r0
 8008574:	f7ff ffac 	bl	80084d0 <__sfp_lock_acquire>
 8008578:	4b1e      	ldr	r3, [pc, #120]	; (80085f4 <__sfp+0x84>)
 800857a:	681e      	ldr	r6, [r3, #0]
 800857c:	69b3      	ldr	r3, [r6, #24]
 800857e:	b913      	cbnz	r3, 8008586 <__sfp+0x16>
 8008580:	4630      	mov	r0, r6
 8008582:	f7ff ffbd 	bl	8008500 <__sinit>
 8008586:	3648      	adds	r6, #72	; 0x48
 8008588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800858c:	3b01      	subs	r3, #1
 800858e:	d503      	bpl.n	8008598 <__sfp+0x28>
 8008590:	6833      	ldr	r3, [r6, #0]
 8008592:	b30b      	cbz	r3, 80085d8 <__sfp+0x68>
 8008594:	6836      	ldr	r6, [r6, #0]
 8008596:	e7f7      	b.n	8008588 <__sfp+0x18>
 8008598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800859c:	b9d5      	cbnz	r5, 80085d4 <__sfp+0x64>
 800859e:	4b16      	ldr	r3, [pc, #88]	; (80085f8 <__sfp+0x88>)
 80085a0:	60e3      	str	r3, [r4, #12]
 80085a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085a6:	6665      	str	r5, [r4, #100]	; 0x64
 80085a8:	f000 f847 	bl	800863a <__retarget_lock_init_recursive>
 80085ac:	f7ff ff96 	bl	80084dc <__sfp_lock_release>
 80085b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085b8:	6025      	str	r5, [r4, #0]
 80085ba:	61a5      	str	r5, [r4, #24]
 80085bc:	2208      	movs	r2, #8
 80085be:	4629      	mov	r1, r5
 80085c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085c4:	f7fb fd6c 	bl	80040a0 <memset>
 80085c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085d0:	4620      	mov	r0, r4
 80085d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085d4:	3468      	adds	r4, #104	; 0x68
 80085d6:	e7d9      	b.n	800858c <__sfp+0x1c>
 80085d8:	2104      	movs	r1, #4
 80085da:	4638      	mov	r0, r7
 80085dc:	f7ff ff62 	bl	80084a4 <__sfmoreglue>
 80085e0:	4604      	mov	r4, r0
 80085e2:	6030      	str	r0, [r6, #0]
 80085e4:	2800      	cmp	r0, #0
 80085e6:	d1d5      	bne.n	8008594 <__sfp+0x24>
 80085e8:	f7ff ff78 	bl	80084dc <__sfp_lock_release>
 80085ec:	230c      	movs	r3, #12
 80085ee:	603b      	str	r3, [r7, #0]
 80085f0:	e7ee      	b.n	80085d0 <__sfp+0x60>
 80085f2:	bf00      	nop
 80085f4:	08009910 	.word	0x08009910
 80085f8:	ffff0001 	.word	0xffff0001

080085fc <_fwalk_reent>:
 80085fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008600:	4606      	mov	r6, r0
 8008602:	4688      	mov	r8, r1
 8008604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008608:	2700      	movs	r7, #0
 800860a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800860e:	f1b9 0901 	subs.w	r9, r9, #1
 8008612:	d505      	bpl.n	8008620 <_fwalk_reent+0x24>
 8008614:	6824      	ldr	r4, [r4, #0]
 8008616:	2c00      	cmp	r4, #0
 8008618:	d1f7      	bne.n	800860a <_fwalk_reent+0xe>
 800861a:	4638      	mov	r0, r7
 800861c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008620:	89ab      	ldrh	r3, [r5, #12]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d907      	bls.n	8008636 <_fwalk_reent+0x3a>
 8008626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800862a:	3301      	adds	r3, #1
 800862c:	d003      	beq.n	8008636 <_fwalk_reent+0x3a>
 800862e:	4629      	mov	r1, r5
 8008630:	4630      	mov	r0, r6
 8008632:	47c0      	blx	r8
 8008634:	4307      	orrs	r7, r0
 8008636:	3568      	adds	r5, #104	; 0x68
 8008638:	e7e9      	b.n	800860e <_fwalk_reent+0x12>

0800863a <__retarget_lock_init_recursive>:
 800863a:	4770      	bx	lr

0800863c <__retarget_lock_acquire_recursive>:
 800863c:	4770      	bx	lr

0800863e <__retarget_lock_release_recursive>:
 800863e:	4770      	bx	lr

08008640 <__swhatbuf_r>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	460e      	mov	r6, r1
 8008644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008648:	2900      	cmp	r1, #0
 800864a:	b096      	sub	sp, #88	; 0x58
 800864c:	4614      	mov	r4, r2
 800864e:	461d      	mov	r5, r3
 8008650:	da07      	bge.n	8008662 <__swhatbuf_r+0x22>
 8008652:	2300      	movs	r3, #0
 8008654:	602b      	str	r3, [r5, #0]
 8008656:	89b3      	ldrh	r3, [r6, #12]
 8008658:	061a      	lsls	r2, r3, #24
 800865a:	d410      	bmi.n	800867e <__swhatbuf_r+0x3e>
 800865c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008660:	e00e      	b.n	8008680 <__swhatbuf_r+0x40>
 8008662:	466a      	mov	r2, sp
 8008664:	f000 f902 	bl	800886c <_fstat_r>
 8008668:	2800      	cmp	r0, #0
 800866a:	dbf2      	blt.n	8008652 <__swhatbuf_r+0x12>
 800866c:	9a01      	ldr	r2, [sp, #4]
 800866e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008672:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008676:	425a      	negs	r2, r3
 8008678:	415a      	adcs	r2, r3
 800867a:	602a      	str	r2, [r5, #0]
 800867c:	e7ee      	b.n	800865c <__swhatbuf_r+0x1c>
 800867e:	2340      	movs	r3, #64	; 0x40
 8008680:	2000      	movs	r0, #0
 8008682:	6023      	str	r3, [r4, #0]
 8008684:	b016      	add	sp, #88	; 0x58
 8008686:	bd70      	pop	{r4, r5, r6, pc}

08008688 <__smakebuf_r>:
 8008688:	898b      	ldrh	r3, [r1, #12]
 800868a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800868c:	079d      	lsls	r5, r3, #30
 800868e:	4606      	mov	r6, r0
 8008690:	460c      	mov	r4, r1
 8008692:	d507      	bpl.n	80086a4 <__smakebuf_r+0x1c>
 8008694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	6123      	str	r3, [r4, #16]
 800869c:	2301      	movs	r3, #1
 800869e:	6163      	str	r3, [r4, #20]
 80086a0:	b002      	add	sp, #8
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	ab01      	add	r3, sp, #4
 80086a6:	466a      	mov	r2, sp
 80086a8:	f7ff ffca 	bl	8008640 <__swhatbuf_r>
 80086ac:	9900      	ldr	r1, [sp, #0]
 80086ae:	4605      	mov	r5, r0
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7ff f97f 	bl	80079b4 <_malloc_r>
 80086b6:	b948      	cbnz	r0, 80086cc <__smakebuf_r+0x44>
 80086b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086bc:	059a      	lsls	r2, r3, #22
 80086be:	d4ef      	bmi.n	80086a0 <__smakebuf_r+0x18>
 80086c0:	f023 0303 	bic.w	r3, r3, #3
 80086c4:	f043 0302 	orr.w	r3, r3, #2
 80086c8:	81a3      	strh	r3, [r4, #12]
 80086ca:	e7e3      	b.n	8008694 <__smakebuf_r+0xc>
 80086cc:	4b0d      	ldr	r3, [pc, #52]	; (8008704 <__smakebuf_r+0x7c>)
 80086ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	6020      	str	r0, [r4, #0]
 80086d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d8:	81a3      	strh	r3, [r4, #12]
 80086da:	9b00      	ldr	r3, [sp, #0]
 80086dc:	6163      	str	r3, [r4, #20]
 80086de:	9b01      	ldr	r3, [sp, #4]
 80086e0:	6120      	str	r0, [r4, #16]
 80086e2:	b15b      	cbz	r3, 80086fc <__smakebuf_r+0x74>
 80086e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e8:	4630      	mov	r0, r6
 80086ea:	f000 f8d1 	bl	8008890 <_isatty_r>
 80086ee:	b128      	cbz	r0, 80086fc <__smakebuf_r+0x74>
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	f023 0303 	bic.w	r3, r3, #3
 80086f6:	f043 0301 	orr.w	r3, r3, #1
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	89a0      	ldrh	r0, [r4, #12]
 80086fe:	4305      	orrs	r5, r0
 8008700:	81a5      	strh	r5, [r4, #12]
 8008702:	e7cd      	b.n	80086a0 <__smakebuf_r+0x18>
 8008704:	08008499 	.word	0x08008499

08008708 <_malloc_usable_size_r>:
 8008708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800870c:	1f18      	subs	r0, r3, #4
 800870e:	2b00      	cmp	r3, #0
 8008710:	bfbc      	itt	lt
 8008712:	580b      	ldrlt	r3, [r1, r0]
 8008714:	18c0      	addlt	r0, r0, r3
 8008716:	4770      	bx	lr

08008718 <_raise_r>:
 8008718:	291f      	cmp	r1, #31
 800871a:	b538      	push	{r3, r4, r5, lr}
 800871c:	4604      	mov	r4, r0
 800871e:	460d      	mov	r5, r1
 8008720:	d904      	bls.n	800872c <_raise_r+0x14>
 8008722:	2316      	movs	r3, #22
 8008724:	6003      	str	r3, [r0, #0]
 8008726:	f04f 30ff 	mov.w	r0, #4294967295
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800872e:	b112      	cbz	r2, 8008736 <_raise_r+0x1e>
 8008730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008734:	b94b      	cbnz	r3, 800874a <_raise_r+0x32>
 8008736:	4620      	mov	r0, r4
 8008738:	f000 f830 	bl	800879c <_getpid_r>
 800873c:	462a      	mov	r2, r5
 800873e:	4601      	mov	r1, r0
 8008740:	4620      	mov	r0, r4
 8008742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008746:	f000 b817 	b.w	8008778 <_kill_r>
 800874a:	2b01      	cmp	r3, #1
 800874c:	d00a      	beq.n	8008764 <_raise_r+0x4c>
 800874e:	1c59      	adds	r1, r3, #1
 8008750:	d103      	bne.n	800875a <_raise_r+0x42>
 8008752:	2316      	movs	r3, #22
 8008754:	6003      	str	r3, [r0, #0]
 8008756:	2001      	movs	r0, #1
 8008758:	e7e7      	b.n	800872a <_raise_r+0x12>
 800875a:	2400      	movs	r4, #0
 800875c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008760:	4628      	mov	r0, r5
 8008762:	4798      	blx	r3
 8008764:	2000      	movs	r0, #0
 8008766:	e7e0      	b.n	800872a <_raise_r+0x12>

08008768 <raise>:
 8008768:	4b02      	ldr	r3, [pc, #8]	; (8008774 <raise+0xc>)
 800876a:	4601      	mov	r1, r0
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	f7ff bfd3 	b.w	8008718 <_raise_r>
 8008772:	bf00      	nop
 8008774:	20000008 	.word	0x20000008

08008778 <_kill_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4d07      	ldr	r5, [pc, #28]	; (8008798 <_kill_r+0x20>)
 800877c:	2300      	movs	r3, #0
 800877e:	4604      	mov	r4, r0
 8008780:	4608      	mov	r0, r1
 8008782:	4611      	mov	r1, r2
 8008784:	602b      	str	r3, [r5, #0]
 8008786:	f7fa f8b7 	bl	80028f8 <_kill>
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	d102      	bne.n	8008794 <_kill_r+0x1c>
 800878e:	682b      	ldr	r3, [r5, #0]
 8008790:	b103      	cbz	r3, 8008794 <_kill_r+0x1c>
 8008792:	6023      	str	r3, [r4, #0]
 8008794:	bd38      	pop	{r3, r4, r5, pc}
 8008796:	bf00      	nop
 8008798:	200002bc 	.word	0x200002bc

0800879c <_getpid_r>:
 800879c:	f7fa b8a4 	b.w	80028e8 <_getpid>

080087a0 <__sread>:
 80087a0:	b510      	push	{r4, lr}
 80087a2:	460c      	mov	r4, r1
 80087a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a8:	f000 f894 	bl	80088d4 <_read_r>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	bfab      	itete	ge
 80087b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087b2:	89a3      	ldrhlt	r3, [r4, #12]
 80087b4:	181b      	addge	r3, r3, r0
 80087b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087ba:	bfac      	ite	ge
 80087bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80087be:	81a3      	strhlt	r3, [r4, #12]
 80087c0:	bd10      	pop	{r4, pc}

080087c2 <__swrite>:
 80087c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c6:	461f      	mov	r7, r3
 80087c8:	898b      	ldrh	r3, [r1, #12]
 80087ca:	05db      	lsls	r3, r3, #23
 80087cc:	4605      	mov	r5, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	4616      	mov	r6, r2
 80087d2:	d505      	bpl.n	80087e0 <__swrite+0x1e>
 80087d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d8:	2302      	movs	r3, #2
 80087da:	2200      	movs	r2, #0
 80087dc:	f000 f868 	bl	80088b0 <_lseek_r>
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ea:	81a3      	strh	r3, [r4, #12]
 80087ec:	4632      	mov	r2, r6
 80087ee:	463b      	mov	r3, r7
 80087f0:	4628      	mov	r0, r5
 80087f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087f6:	f000 b817 	b.w	8008828 <_write_r>

080087fa <__sseek>:
 80087fa:	b510      	push	{r4, lr}
 80087fc:	460c      	mov	r4, r1
 80087fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008802:	f000 f855 	bl	80088b0 <_lseek_r>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	bf15      	itete	ne
 800880c:	6560      	strne	r0, [r4, #84]	; 0x54
 800880e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008816:	81a3      	strheq	r3, [r4, #12]
 8008818:	bf18      	it	ne
 800881a:	81a3      	strhne	r3, [r4, #12]
 800881c:	bd10      	pop	{r4, pc}

0800881e <__sclose>:
 800881e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008822:	f000 b813 	b.w	800884c <_close_r>
	...

08008828 <_write_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d07      	ldr	r5, [pc, #28]	; (8008848 <_write_r+0x20>)
 800882c:	4604      	mov	r4, r0
 800882e:	4608      	mov	r0, r1
 8008830:	4611      	mov	r1, r2
 8008832:	2200      	movs	r2, #0
 8008834:	602a      	str	r2, [r5, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	f7fa f895 	bl	8002966 <_write>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d102      	bne.n	8008846 <_write_r+0x1e>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b103      	cbz	r3, 8008846 <_write_r+0x1e>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	200002bc 	.word	0x200002bc

0800884c <_close_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4d06      	ldr	r5, [pc, #24]	; (8008868 <_close_r+0x1c>)
 8008850:	2300      	movs	r3, #0
 8008852:	4604      	mov	r4, r0
 8008854:	4608      	mov	r0, r1
 8008856:	602b      	str	r3, [r5, #0]
 8008858:	f7fa f8a1 	bl	800299e <_close>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d102      	bne.n	8008866 <_close_r+0x1a>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	b103      	cbz	r3, 8008866 <_close_r+0x1a>
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	200002bc 	.word	0x200002bc

0800886c <_fstat_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4d07      	ldr	r5, [pc, #28]	; (800888c <_fstat_r+0x20>)
 8008870:	2300      	movs	r3, #0
 8008872:	4604      	mov	r4, r0
 8008874:	4608      	mov	r0, r1
 8008876:	4611      	mov	r1, r2
 8008878:	602b      	str	r3, [r5, #0]
 800887a:	f7fa f89c 	bl	80029b6 <_fstat>
 800887e:	1c43      	adds	r3, r0, #1
 8008880:	d102      	bne.n	8008888 <_fstat_r+0x1c>
 8008882:	682b      	ldr	r3, [r5, #0]
 8008884:	b103      	cbz	r3, 8008888 <_fstat_r+0x1c>
 8008886:	6023      	str	r3, [r4, #0]
 8008888:	bd38      	pop	{r3, r4, r5, pc}
 800888a:	bf00      	nop
 800888c:	200002bc 	.word	0x200002bc

08008890 <_isatty_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d06      	ldr	r5, [pc, #24]	; (80088ac <_isatty_r+0x1c>)
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	f7fa f89b 	bl	80029d6 <_isatty>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_isatty_r+0x1a>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_isatty_r+0x1a>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	200002bc 	.word	0x200002bc

080088b0 <_lseek_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d07      	ldr	r5, [pc, #28]	; (80088d0 <_lseek_r+0x20>)
 80088b4:	4604      	mov	r4, r0
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	602a      	str	r2, [r5, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7fa f894 	bl	80029ec <_lseek>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_lseek_r+0x1e>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_lseek_r+0x1e>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	200002bc 	.word	0x200002bc

080088d4 <_read_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d07      	ldr	r5, [pc, #28]	; (80088f4 <_read_r+0x20>)
 80088d8:	4604      	mov	r4, r0
 80088da:	4608      	mov	r0, r1
 80088dc:	4611      	mov	r1, r2
 80088de:	2200      	movs	r2, #0
 80088e0:	602a      	str	r2, [r5, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f7fa f822 	bl	800292c <_read>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d102      	bne.n	80088f2 <_read_r+0x1e>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b103      	cbz	r3, 80088f2 <_read_r+0x1e>
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	200002bc 	.word	0x200002bc

080088f8 <pow>:
 80088f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088fc:	ec59 8b10 	vmov	r8, r9, d0
 8008900:	ec57 6b11 	vmov	r6, r7, d1
 8008904:	f000 f8a8 	bl	8008a58 <__ieee754_pow>
 8008908:	4b4e      	ldr	r3, [pc, #312]	; (8008a44 <pow+0x14c>)
 800890a:	f993 3000 	ldrsb.w	r3, [r3]
 800890e:	3301      	adds	r3, #1
 8008910:	ec55 4b10 	vmov	r4, r5, d0
 8008914:	d015      	beq.n	8008942 <pow+0x4a>
 8008916:	4632      	mov	r2, r6
 8008918:	463b      	mov	r3, r7
 800891a:	4630      	mov	r0, r6
 800891c:	4639      	mov	r1, r7
 800891e:	f7f8 f905 	bl	8000b2c <__aeabi_dcmpun>
 8008922:	b970      	cbnz	r0, 8008942 <pow+0x4a>
 8008924:	4642      	mov	r2, r8
 8008926:	464b      	mov	r3, r9
 8008928:	4640      	mov	r0, r8
 800892a:	4649      	mov	r1, r9
 800892c:	f7f8 f8fe 	bl	8000b2c <__aeabi_dcmpun>
 8008930:	2200      	movs	r2, #0
 8008932:	2300      	movs	r3, #0
 8008934:	b148      	cbz	r0, 800894a <pow+0x52>
 8008936:	4630      	mov	r0, r6
 8008938:	4639      	mov	r1, r7
 800893a:	f7f8 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800893e:	2800      	cmp	r0, #0
 8008940:	d17d      	bne.n	8008a3e <pow+0x146>
 8008942:	ec45 4b10 	vmov	d0, r4, r5
 8008946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894a:	4640      	mov	r0, r8
 800894c:	4649      	mov	r1, r9
 800894e:	f7f8 f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008952:	b1e0      	cbz	r0, 800898e <pow+0x96>
 8008954:	2200      	movs	r2, #0
 8008956:	2300      	movs	r3, #0
 8008958:	4630      	mov	r0, r6
 800895a:	4639      	mov	r1, r7
 800895c:	f7f8 f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008960:	2800      	cmp	r0, #0
 8008962:	d16c      	bne.n	8008a3e <pow+0x146>
 8008964:	ec47 6b10 	vmov	d0, r6, r7
 8008968:	f000 fe55 	bl	8009616 <finite>
 800896c:	2800      	cmp	r0, #0
 800896e:	d0e8      	beq.n	8008942 <pow+0x4a>
 8008970:	2200      	movs	r2, #0
 8008972:	2300      	movs	r3, #0
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7f8 f8b0 	bl	8000adc <__aeabi_dcmplt>
 800897c:	2800      	cmp	r0, #0
 800897e:	d0e0      	beq.n	8008942 <pow+0x4a>
 8008980:	f7fb fb64 	bl	800404c <__errno>
 8008984:	2321      	movs	r3, #33	; 0x21
 8008986:	6003      	str	r3, [r0, #0]
 8008988:	2400      	movs	r4, #0
 800898a:	4d2f      	ldr	r5, [pc, #188]	; (8008a48 <pow+0x150>)
 800898c:	e7d9      	b.n	8008942 <pow+0x4a>
 800898e:	ec45 4b10 	vmov	d0, r4, r5
 8008992:	f000 fe40 	bl	8009616 <finite>
 8008996:	bbb8      	cbnz	r0, 8008a08 <pow+0x110>
 8008998:	ec49 8b10 	vmov	d0, r8, r9
 800899c:	f000 fe3b 	bl	8009616 <finite>
 80089a0:	b390      	cbz	r0, 8008a08 <pow+0x110>
 80089a2:	ec47 6b10 	vmov	d0, r6, r7
 80089a6:	f000 fe36 	bl	8009616 <finite>
 80089aa:	b368      	cbz	r0, 8008a08 <pow+0x110>
 80089ac:	4622      	mov	r2, r4
 80089ae:	462b      	mov	r3, r5
 80089b0:	4620      	mov	r0, r4
 80089b2:	4629      	mov	r1, r5
 80089b4:	f7f8 f8ba 	bl	8000b2c <__aeabi_dcmpun>
 80089b8:	b160      	cbz	r0, 80089d4 <pow+0xdc>
 80089ba:	f7fb fb47 	bl	800404c <__errno>
 80089be:	2321      	movs	r3, #33	; 0x21
 80089c0:	6003      	str	r3, [r0, #0]
 80089c2:	2200      	movs	r2, #0
 80089c4:	2300      	movs	r3, #0
 80089c6:	4610      	mov	r0, r2
 80089c8:	4619      	mov	r1, r3
 80089ca:	f7f7 ff3f 	bl	800084c <__aeabi_ddiv>
 80089ce:	4604      	mov	r4, r0
 80089d0:	460d      	mov	r5, r1
 80089d2:	e7b6      	b.n	8008942 <pow+0x4a>
 80089d4:	f7fb fb3a 	bl	800404c <__errno>
 80089d8:	2322      	movs	r3, #34	; 0x22
 80089da:	6003      	str	r3, [r0, #0]
 80089dc:	2200      	movs	r2, #0
 80089de:	2300      	movs	r3, #0
 80089e0:	4640      	mov	r0, r8
 80089e2:	4649      	mov	r1, r9
 80089e4:	f7f8 f87a 	bl	8000adc <__aeabi_dcmplt>
 80089e8:	2400      	movs	r4, #0
 80089ea:	b158      	cbz	r0, 8008a04 <pow+0x10c>
 80089ec:	ec47 6b10 	vmov	d0, r6, r7
 80089f0:	f000 fe1c 	bl	800962c <rint>
 80089f4:	4632      	mov	r2, r6
 80089f6:	ec51 0b10 	vmov	r0, r1, d0
 80089fa:	463b      	mov	r3, r7
 80089fc:	f7f8 f864 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d0c2      	beq.n	800898a <pow+0x92>
 8008a04:	4d11      	ldr	r5, [pc, #68]	; (8008a4c <pow+0x154>)
 8008a06:	e79c      	b.n	8008942 <pow+0x4a>
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f7f8 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d094      	beq.n	8008942 <pow+0x4a>
 8008a18:	ec49 8b10 	vmov	d0, r8, r9
 8008a1c:	f000 fdfb 	bl	8009616 <finite>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d08e      	beq.n	8008942 <pow+0x4a>
 8008a24:	ec47 6b10 	vmov	d0, r6, r7
 8008a28:	f000 fdf5 	bl	8009616 <finite>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d088      	beq.n	8008942 <pow+0x4a>
 8008a30:	f7fb fb0c 	bl	800404c <__errno>
 8008a34:	2322      	movs	r3, #34	; 0x22
 8008a36:	6003      	str	r3, [r0, #0]
 8008a38:	2400      	movs	r4, #0
 8008a3a:	2500      	movs	r5, #0
 8008a3c:	e781      	b.n	8008942 <pow+0x4a>
 8008a3e:	4d04      	ldr	r5, [pc, #16]	; (8008a50 <pow+0x158>)
 8008a40:	2400      	movs	r4, #0
 8008a42:	e77e      	b.n	8008942 <pow+0x4a>
 8008a44:	200001dc 	.word	0x200001dc
 8008a48:	fff00000 	.word	0xfff00000
 8008a4c:	7ff00000 	.word	0x7ff00000
 8008a50:	3ff00000 	.word	0x3ff00000
 8008a54:	00000000 	.word	0x00000000

08008a58 <__ieee754_pow>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	ed2d 8b06 	vpush	{d8-d10}
 8008a60:	b08d      	sub	sp, #52	; 0x34
 8008a62:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008a66:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8008a6a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008a6e:	ea56 0100 	orrs.w	r1, r6, r0
 8008a72:	ec53 2b10 	vmov	r2, r3, d0
 8008a76:	f000 84d1 	beq.w	800941c <__ieee754_pow+0x9c4>
 8008a7a:	497f      	ldr	r1, [pc, #508]	; (8008c78 <__ieee754_pow+0x220>)
 8008a7c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008a80:	428c      	cmp	r4, r1
 8008a82:	ee10 8a10 	vmov	r8, s0
 8008a86:	4699      	mov	r9, r3
 8008a88:	dc09      	bgt.n	8008a9e <__ieee754_pow+0x46>
 8008a8a:	d103      	bne.n	8008a94 <__ieee754_pow+0x3c>
 8008a8c:	b97a      	cbnz	r2, 8008aae <__ieee754_pow+0x56>
 8008a8e:	42a6      	cmp	r6, r4
 8008a90:	dd02      	ble.n	8008a98 <__ieee754_pow+0x40>
 8008a92:	e00c      	b.n	8008aae <__ieee754_pow+0x56>
 8008a94:	428e      	cmp	r6, r1
 8008a96:	dc02      	bgt.n	8008a9e <__ieee754_pow+0x46>
 8008a98:	428e      	cmp	r6, r1
 8008a9a:	d110      	bne.n	8008abe <__ieee754_pow+0x66>
 8008a9c:	b178      	cbz	r0, 8008abe <__ieee754_pow+0x66>
 8008a9e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008aa2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008aa6:	ea54 0308 	orrs.w	r3, r4, r8
 8008aaa:	f000 84b7 	beq.w	800941c <__ieee754_pow+0x9c4>
 8008aae:	4873      	ldr	r0, [pc, #460]	; (8008c7c <__ieee754_pow+0x224>)
 8008ab0:	b00d      	add	sp, #52	; 0x34
 8008ab2:	ecbd 8b06 	vpop	{d8-d10}
 8008ab6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	f7ff b931 	b.w	8007d20 <nan>
 8008abe:	f1b9 0f00 	cmp.w	r9, #0
 8008ac2:	da36      	bge.n	8008b32 <__ieee754_pow+0xda>
 8008ac4:	496e      	ldr	r1, [pc, #440]	; (8008c80 <__ieee754_pow+0x228>)
 8008ac6:	428e      	cmp	r6, r1
 8008ac8:	dc51      	bgt.n	8008b6e <__ieee754_pow+0x116>
 8008aca:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8008ace:	428e      	cmp	r6, r1
 8008ad0:	f340 84af 	ble.w	8009432 <__ieee754_pow+0x9da>
 8008ad4:	1531      	asrs	r1, r6, #20
 8008ad6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008ada:	2914      	cmp	r1, #20
 8008adc:	dd0f      	ble.n	8008afe <__ieee754_pow+0xa6>
 8008ade:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008ae2:	fa20 fc01 	lsr.w	ip, r0, r1
 8008ae6:	fa0c f101 	lsl.w	r1, ip, r1
 8008aea:	4281      	cmp	r1, r0
 8008aec:	f040 84a1 	bne.w	8009432 <__ieee754_pow+0x9da>
 8008af0:	f00c 0c01 	and.w	ip, ip, #1
 8008af4:	f1cc 0102 	rsb	r1, ip, #2
 8008af8:	9100      	str	r1, [sp, #0]
 8008afa:	b180      	cbz	r0, 8008b1e <__ieee754_pow+0xc6>
 8008afc:	e059      	b.n	8008bb2 <__ieee754_pow+0x15a>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d155      	bne.n	8008bae <__ieee754_pow+0x156>
 8008b02:	f1c1 0114 	rsb	r1, r1, #20
 8008b06:	fa46 fc01 	asr.w	ip, r6, r1
 8008b0a:	fa0c f101 	lsl.w	r1, ip, r1
 8008b0e:	42b1      	cmp	r1, r6
 8008b10:	f040 848c 	bne.w	800942c <__ieee754_pow+0x9d4>
 8008b14:	f00c 0c01 	and.w	ip, ip, #1
 8008b18:	f1cc 0102 	rsb	r1, ip, #2
 8008b1c:	9100      	str	r1, [sp, #0]
 8008b1e:	4959      	ldr	r1, [pc, #356]	; (8008c84 <__ieee754_pow+0x22c>)
 8008b20:	428e      	cmp	r6, r1
 8008b22:	d12d      	bne.n	8008b80 <__ieee754_pow+0x128>
 8008b24:	2f00      	cmp	r7, #0
 8008b26:	da79      	bge.n	8008c1c <__ieee754_pow+0x1c4>
 8008b28:	4956      	ldr	r1, [pc, #344]	; (8008c84 <__ieee754_pow+0x22c>)
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	f7f7 fe8e 	bl	800084c <__aeabi_ddiv>
 8008b30:	e016      	b.n	8008b60 <__ieee754_pow+0x108>
 8008b32:	2100      	movs	r1, #0
 8008b34:	9100      	str	r1, [sp, #0]
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d13b      	bne.n	8008bb2 <__ieee754_pow+0x15a>
 8008b3a:	494f      	ldr	r1, [pc, #316]	; (8008c78 <__ieee754_pow+0x220>)
 8008b3c:	428e      	cmp	r6, r1
 8008b3e:	d1ee      	bne.n	8008b1e <__ieee754_pow+0xc6>
 8008b40:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008b44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008b48:	ea53 0308 	orrs.w	r3, r3, r8
 8008b4c:	f000 8466 	beq.w	800941c <__ieee754_pow+0x9c4>
 8008b50:	4b4d      	ldr	r3, [pc, #308]	; (8008c88 <__ieee754_pow+0x230>)
 8008b52:	429c      	cmp	r4, r3
 8008b54:	dd0d      	ble.n	8008b72 <__ieee754_pow+0x11a>
 8008b56:	2f00      	cmp	r7, #0
 8008b58:	f280 8464 	bge.w	8009424 <__ieee754_pow+0x9cc>
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	2100      	movs	r1, #0
 8008b60:	ec41 0b10 	vmov	d0, r0, r1
 8008b64:	b00d      	add	sp, #52	; 0x34
 8008b66:	ecbd 8b06 	vpop	{d8-d10}
 8008b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6e:	2102      	movs	r1, #2
 8008b70:	e7e0      	b.n	8008b34 <__ieee754_pow+0xdc>
 8008b72:	2f00      	cmp	r7, #0
 8008b74:	daf2      	bge.n	8008b5c <__ieee754_pow+0x104>
 8008b76:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8008b7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008b7e:	e7ef      	b.n	8008b60 <__ieee754_pow+0x108>
 8008b80:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008b84:	d104      	bne.n	8008b90 <__ieee754_pow+0x138>
 8008b86:	4610      	mov	r0, r2
 8008b88:	4619      	mov	r1, r3
 8008b8a:	f7f7 fd35 	bl	80005f8 <__aeabi_dmul>
 8008b8e:	e7e7      	b.n	8008b60 <__ieee754_pow+0x108>
 8008b90:	493e      	ldr	r1, [pc, #248]	; (8008c8c <__ieee754_pow+0x234>)
 8008b92:	428f      	cmp	r7, r1
 8008b94:	d10d      	bne.n	8008bb2 <__ieee754_pow+0x15a>
 8008b96:	f1b9 0f00 	cmp.w	r9, #0
 8008b9a:	db0a      	blt.n	8008bb2 <__ieee754_pow+0x15a>
 8008b9c:	ec43 2b10 	vmov	d0, r2, r3
 8008ba0:	b00d      	add	sp, #52	; 0x34
 8008ba2:	ecbd 8b06 	vpop	{d8-d10}
 8008ba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008baa:	f000 bc77 	b.w	800949c <__ieee754_sqrt>
 8008bae:	2100      	movs	r1, #0
 8008bb0:	9100      	str	r1, [sp, #0]
 8008bb2:	ec43 2b10 	vmov	d0, r2, r3
 8008bb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bba:	f000 fd23 	bl	8009604 <fabs>
 8008bbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bc2:	ec51 0b10 	vmov	r0, r1, d0
 8008bc6:	f1b8 0f00 	cmp.w	r8, #0
 8008bca:	d12a      	bne.n	8008c22 <__ieee754_pow+0x1ca>
 8008bcc:	b12c      	cbz	r4, 8008bda <__ieee754_pow+0x182>
 8008bce:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008c84 <__ieee754_pow+0x22c>
 8008bd2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008bd6:	45e6      	cmp	lr, ip
 8008bd8:	d123      	bne.n	8008c22 <__ieee754_pow+0x1ca>
 8008bda:	2f00      	cmp	r7, #0
 8008bdc:	da05      	bge.n	8008bea <__ieee754_pow+0x192>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	2000      	movs	r0, #0
 8008be4:	4927      	ldr	r1, [pc, #156]	; (8008c84 <__ieee754_pow+0x22c>)
 8008be6:	f7f7 fe31 	bl	800084c <__aeabi_ddiv>
 8008bea:	f1b9 0f00 	cmp.w	r9, #0
 8008bee:	dab7      	bge.n	8008b60 <__ieee754_pow+0x108>
 8008bf0:	9b00      	ldr	r3, [sp, #0]
 8008bf2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008bf6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008bfa:	4323      	orrs	r3, r4
 8008bfc:	d108      	bne.n	8008c10 <__ieee754_pow+0x1b8>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	4610      	mov	r0, r2
 8008c04:	4619      	mov	r1, r3
 8008c06:	f7f7 fb3f 	bl	8000288 <__aeabi_dsub>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	e78d      	b.n	8008b2c <__ieee754_pow+0xd4>
 8008c10:	9b00      	ldr	r3, [sp, #0]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d1a4      	bne.n	8008b60 <__ieee754_pow+0x108>
 8008c16:	4602      	mov	r2, r0
 8008c18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4619      	mov	r1, r3
 8008c20:	e79e      	b.n	8008b60 <__ieee754_pow+0x108>
 8008c22:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008c26:	f10c 35ff 	add.w	r5, ip, #4294967295
 8008c2a:	950a      	str	r5, [sp, #40]	; 0x28
 8008c2c:	9d00      	ldr	r5, [sp, #0]
 8008c2e:	46ac      	mov	ip, r5
 8008c30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008c32:	ea5c 0505 	orrs.w	r5, ip, r5
 8008c36:	d0e4      	beq.n	8008c02 <__ieee754_pow+0x1aa>
 8008c38:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <__ieee754_pow+0x238>)
 8008c3a:	429e      	cmp	r6, r3
 8008c3c:	f340 80fc 	ble.w	8008e38 <__ieee754_pow+0x3e0>
 8008c40:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008c44:	429e      	cmp	r6, r3
 8008c46:	4b10      	ldr	r3, [pc, #64]	; (8008c88 <__ieee754_pow+0x230>)
 8008c48:	dd07      	ble.n	8008c5a <__ieee754_pow+0x202>
 8008c4a:	429c      	cmp	r4, r3
 8008c4c:	dc0a      	bgt.n	8008c64 <__ieee754_pow+0x20c>
 8008c4e:	2f00      	cmp	r7, #0
 8008c50:	da84      	bge.n	8008b5c <__ieee754_pow+0x104>
 8008c52:	a307      	add	r3, pc, #28	; (adr r3, 8008c70 <__ieee754_pow+0x218>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	e795      	b.n	8008b86 <__ieee754_pow+0x12e>
 8008c5a:	429c      	cmp	r4, r3
 8008c5c:	dbf7      	blt.n	8008c4e <__ieee754_pow+0x1f6>
 8008c5e:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <__ieee754_pow+0x22c>)
 8008c60:	429c      	cmp	r4, r3
 8008c62:	dd17      	ble.n	8008c94 <__ieee754_pow+0x23c>
 8008c64:	2f00      	cmp	r7, #0
 8008c66:	dcf4      	bgt.n	8008c52 <__ieee754_pow+0x1fa>
 8008c68:	e778      	b.n	8008b5c <__ieee754_pow+0x104>
 8008c6a:	bf00      	nop
 8008c6c:	f3af 8000 	nop.w
 8008c70:	8800759c 	.word	0x8800759c
 8008c74:	7e37e43c 	.word	0x7e37e43c
 8008c78:	7ff00000 	.word	0x7ff00000
 8008c7c:	08009d60 	.word	0x08009d60
 8008c80:	433fffff 	.word	0x433fffff
 8008c84:	3ff00000 	.word	0x3ff00000
 8008c88:	3fefffff 	.word	0x3fefffff
 8008c8c:	3fe00000 	.word	0x3fe00000
 8008c90:	41e00000 	.word	0x41e00000
 8008c94:	4b64      	ldr	r3, [pc, #400]	; (8008e28 <__ieee754_pow+0x3d0>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	f7f7 faf6 	bl	8000288 <__aeabi_dsub>
 8008c9c:	a356      	add	r3, pc, #344	; (adr r3, 8008df8 <__ieee754_pow+0x3a0>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	460d      	mov	r5, r1
 8008ca6:	f7f7 fca7 	bl	80005f8 <__aeabi_dmul>
 8008caa:	a355      	add	r3, pc, #340	; (adr r3, 8008e00 <__ieee754_pow+0x3a8>)
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	460f      	mov	r7, r1
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	f7f7 fc9e 	bl	80005f8 <__aeabi_dmul>
 8008cbc:	4b5b      	ldr	r3, [pc, #364]	; (8008e2c <__ieee754_pow+0x3d4>)
 8008cbe:	4682      	mov	sl, r0
 8008cc0:	468b      	mov	fp, r1
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f7f7 fc96 	bl	80005f8 <__aeabi_dmul>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	a14d      	add	r1, pc, #308	; (adr r1, 8008e08 <__ieee754_pow+0x3b0>)
 8008cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cd6:	f7f7 fad7 	bl	8000288 <__aeabi_dsub>
 8008cda:	4622      	mov	r2, r4
 8008cdc:	462b      	mov	r3, r5
 8008cde:	f7f7 fc8b 	bl	80005f8 <__aeabi_dmul>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	4951      	ldr	r1, [pc, #324]	; (8008e30 <__ieee754_pow+0x3d8>)
 8008cea:	f7f7 facd 	bl	8000288 <__aeabi_dsub>
 8008cee:	4622      	mov	r2, r4
 8008cf0:	4680      	mov	r8, r0
 8008cf2:	4689      	mov	r9, r1
 8008cf4:	462b      	mov	r3, r5
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	f7f7 fc7d 	bl	80005f8 <__aeabi_dmul>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4640      	mov	r0, r8
 8008d04:	4649      	mov	r1, r9
 8008d06:	f7f7 fc77 	bl	80005f8 <__aeabi_dmul>
 8008d0a:	a341      	add	r3, pc, #260	; (adr r3, 8008e10 <__ieee754_pow+0x3b8>)
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f7f7 fc72 	bl	80005f8 <__aeabi_dmul>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4650      	mov	r0, sl
 8008d1a:	4659      	mov	r1, fp
 8008d1c:	f7f7 fab4 	bl	8000288 <__aeabi_dsub>
 8008d20:	4602      	mov	r2, r0
 8008d22:	460b      	mov	r3, r1
 8008d24:	4680      	mov	r8, r0
 8008d26:	4689      	mov	r9, r1
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	f7f7 faae 	bl	800028c <__adddf3>
 8008d30:	2400      	movs	r4, #0
 8008d32:	4632      	mov	r2, r6
 8008d34:	463b      	mov	r3, r7
 8008d36:	4620      	mov	r0, r4
 8008d38:	460d      	mov	r5, r1
 8008d3a:	f7f7 faa5 	bl	8000288 <__aeabi_dsub>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4640      	mov	r0, r8
 8008d44:	4649      	mov	r1, r9
 8008d46:	f7f7 fa9f 	bl	8000288 <__aeabi_dsub>
 8008d4a:	9b00      	ldr	r3, [sp, #0]
 8008d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	4313      	orrs	r3, r2
 8008d52:	4682      	mov	sl, r0
 8008d54:	468b      	mov	fp, r1
 8008d56:	f040 81f1 	bne.w	800913c <__ieee754_pow+0x6e4>
 8008d5a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008e18 <__ieee754_pow+0x3c0>
 8008d5e:	eeb0 8a47 	vmov.f32	s16, s14
 8008d62:	eef0 8a67 	vmov.f32	s17, s15
 8008d66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d6a:	2600      	movs	r6, #0
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	463b      	mov	r3, r7
 8008d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d74:	f7f7 fa88 	bl	8000288 <__aeabi_dsub>
 8008d78:	4622      	mov	r2, r4
 8008d7a:	462b      	mov	r3, r5
 8008d7c:	f7f7 fc3c 	bl	80005f8 <__aeabi_dmul>
 8008d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d84:	4680      	mov	r8, r0
 8008d86:	4689      	mov	r9, r1
 8008d88:	4650      	mov	r0, sl
 8008d8a:	4659      	mov	r1, fp
 8008d8c:	f7f7 fc34 	bl	80005f8 <__aeabi_dmul>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4640      	mov	r0, r8
 8008d96:	4649      	mov	r1, r9
 8008d98:	f7f7 fa78 	bl	800028c <__adddf3>
 8008d9c:	4632      	mov	r2, r6
 8008d9e:	463b      	mov	r3, r7
 8008da0:	4680      	mov	r8, r0
 8008da2:	4689      	mov	r9, r1
 8008da4:	4620      	mov	r0, r4
 8008da6:	4629      	mov	r1, r5
 8008da8:	f7f7 fc26 	bl	80005f8 <__aeabi_dmul>
 8008dac:	460b      	mov	r3, r1
 8008dae:	4604      	mov	r4, r0
 8008db0:	460d      	mov	r5, r1
 8008db2:	4602      	mov	r2, r0
 8008db4:	4649      	mov	r1, r9
 8008db6:	4640      	mov	r0, r8
 8008db8:	f7f7 fa68 	bl	800028c <__adddf3>
 8008dbc:	4b1d      	ldr	r3, [pc, #116]	; (8008e34 <__ieee754_pow+0x3dc>)
 8008dbe:	4299      	cmp	r1, r3
 8008dc0:	ec45 4b19 	vmov	d9, r4, r5
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	460f      	mov	r7, r1
 8008dc8:	468b      	mov	fp, r1
 8008dca:	f340 82fe 	ble.w	80093ca <__ieee754_pow+0x972>
 8008dce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008dd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008dd6:	4303      	orrs	r3, r0
 8008dd8:	f000 81f0 	beq.w	80091bc <__ieee754_pow+0x764>
 8008ddc:	a310      	add	r3, pc, #64	; (adr r3, 8008e20 <__ieee754_pow+0x3c8>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	ec51 0b18 	vmov	r0, r1, d8
 8008de6:	f7f7 fc07 	bl	80005f8 <__aeabi_dmul>
 8008dea:	a30d      	add	r3, pc, #52	; (adr r3, 8008e20 <__ieee754_pow+0x3c8>)
 8008dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df0:	e6cb      	b.n	8008b8a <__ieee754_pow+0x132>
 8008df2:	bf00      	nop
 8008df4:	f3af 8000 	nop.w
 8008df8:	60000000 	.word	0x60000000
 8008dfc:	3ff71547 	.word	0x3ff71547
 8008e00:	f85ddf44 	.word	0xf85ddf44
 8008e04:	3e54ae0b 	.word	0x3e54ae0b
 8008e08:	55555555 	.word	0x55555555
 8008e0c:	3fd55555 	.word	0x3fd55555
 8008e10:	652b82fe 	.word	0x652b82fe
 8008e14:	3ff71547 	.word	0x3ff71547
 8008e18:	00000000 	.word	0x00000000
 8008e1c:	bff00000 	.word	0xbff00000
 8008e20:	8800759c 	.word	0x8800759c
 8008e24:	7e37e43c 	.word	0x7e37e43c
 8008e28:	3ff00000 	.word	0x3ff00000
 8008e2c:	3fd00000 	.word	0x3fd00000
 8008e30:	3fe00000 	.word	0x3fe00000
 8008e34:	408fffff 	.word	0x408fffff
 8008e38:	4bd7      	ldr	r3, [pc, #860]	; (8009198 <__ieee754_pow+0x740>)
 8008e3a:	ea03 0309 	and.w	r3, r3, r9
 8008e3e:	2200      	movs	r2, #0
 8008e40:	b92b      	cbnz	r3, 8008e4e <__ieee754_pow+0x3f6>
 8008e42:	4bd6      	ldr	r3, [pc, #856]	; (800919c <__ieee754_pow+0x744>)
 8008e44:	f7f7 fbd8 	bl	80005f8 <__aeabi_dmul>
 8008e48:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	1523      	asrs	r3, r4, #20
 8008e50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008e54:	4413      	add	r3, r2
 8008e56:	9309      	str	r3, [sp, #36]	; 0x24
 8008e58:	4bd1      	ldr	r3, [pc, #836]	; (80091a0 <__ieee754_pow+0x748>)
 8008e5a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008e5e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008e62:	429c      	cmp	r4, r3
 8008e64:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008e68:	dd08      	ble.n	8008e7c <__ieee754_pow+0x424>
 8008e6a:	4bce      	ldr	r3, [pc, #824]	; (80091a4 <__ieee754_pow+0x74c>)
 8008e6c:	429c      	cmp	r4, r3
 8008e6e:	f340 8163 	ble.w	8009138 <__ieee754_pow+0x6e0>
 8008e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e74:	3301      	adds	r3, #1
 8008e76:	9309      	str	r3, [sp, #36]	; 0x24
 8008e78:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008e7c:	2400      	movs	r4, #0
 8008e7e:	00e3      	lsls	r3, r4, #3
 8008e80:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e82:	4bc9      	ldr	r3, [pc, #804]	; (80091a8 <__ieee754_pow+0x750>)
 8008e84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e88:	ed93 7b00 	vldr	d7, [r3]
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	ec53 2b17 	vmov	r2, r3, d7
 8008e92:	eeb0 8a47 	vmov.f32	s16, s14
 8008e96:	eef0 8a67 	vmov.f32	s17, s15
 8008e9a:	4682      	mov	sl, r0
 8008e9c:	f7f7 f9f4 	bl	8000288 <__aeabi_dsub>
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	460f      	mov	r7, r1
 8008ea6:	462b      	mov	r3, r5
 8008ea8:	ec51 0b18 	vmov	r0, r1, d8
 8008eac:	f7f7 f9ee 	bl	800028c <__adddf3>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	49bd      	ldr	r1, [pc, #756]	; (80091ac <__ieee754_pow+0x754>)
 8008eb8:	f7f7 fcc8 	bl	800084c <__aeabi_ddiv>
 8008ebc:	ec41 0b19 	vmov	d9, r0, r1
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	f7f7 fb96 	bl	80005f8 <__aeabi_dmul>
 8008ecc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ed0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ed4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9304      	str	r3, [sp, #16]
 8008edc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008ee0:	46ab      	mov	fp, r5
 8008ee2:	106d      	asrs	r5, r5, #1
 8008ee4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008ee8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008eec:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	4614      	mov	r4, r2
 8008ef8:	461d      	mov	r5, r3
 8008efa:	f7f7 fb7d 	bl	80005f8 <__aeabi_dmul>
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	4630      	mov	r0, r6
 8008f04:	4639      	mov	r1, r7
 8008f06:	f7f7 f9bf 	bl	8000288 <__aeabi_dsub>
 8008f0a:	ec53 2b18 	vmov	r2, r3, d8
 8008f0e:	4606      	mov	r6, r0
 8008f10:	460f      	mov	r7, r1
 8008f12:	4620      	mov	r0, r4
 8008f14:	4629      	mov	r1, r5
 8008f16:	f7f7 f9b7 	bl	8000288 <__aeabi_dsub>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4650      	mov	r0, sl
 8008f20:	4659      	mov	r1, fp
 8008f22:	f7f7 f9b1 	bl	8000288 <__aeabi_dsub>
 8008f26:	4642      	mov	r2, r8
 8008f28:	464b      	mov	r3, r9
 8008f2a:	f7f7 fb65 	bl	80005f8 <__aeabi_dmul>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4630      	mov	r0, r6
 8008f34:	4639      	mov	r1, r7
 8008f36:	f7f7 f9a7 	bl	8000288 <__aeabi_dsub>
 8008f3a:	ec53 2b19 	vmov	r2, r3, d9
 8008f3e:	f7f7 fb5b 	bl	80005f8 <__aeabi_dmul>
 8008f42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f46:	ec41 0b18 	vmov	d8, r0, r1
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	f7f7 fb53 	bl	80005f8 <__aeabi_dmul>
 8008f52:	a37d      	add	r3, pc, #500	; (adr r3, 8009148 <__ieee754_pow+0x6f0>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	4604      	mov	r4, r0
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	f7f7 fb4c 	bl	80005f8 <__aeabi_dmul>
 8008f60:	a37b      	add	r3, pc, #492	; (adr r3, 8009150 <__ieee754_pow+0x6f8>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f7f7 f991 	bl	800028c <__adddf3>
 8008f6a:	4622      	mov	r2, r4
 8008f6c:	462b      	mov	r3, r5
 8008f6e:	f7f7 fb43 	bl	80005f8 <__aeabi_dmul>
 8008f72:	a379      	add	r3, pc, #484	; (adr r3, 8009158 <__ieee754_pow+0x700>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 f988 	bl	800028c <__adddf3>
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	462b      	mov	r3, r5
 8008f80:	f7f7 fb3a 	bl	80005f8 <__aeabi_dmul>
 8008f84:	a376      	add	r3, pc, #472	; (adr r3, 8009160 <__ieee754_pow+0x708>)
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 f97f 	bl	800028c <__adddf3>
 8008f8e:	4622      	mov	r2, r4
 8008f90:	462b      	mov	r3, r5
 8008f92:	f7f7 fb31 	bl	80005f8 <__aeabi_dmul>
 8008f96:	a374      	add	r3, pc, #464	; (adr r3, 8009168 <__ieee754_pow+0x710>)
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	f7f7 f976 	bl	800028c <__adddf3>
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	462b      	mov	r3, r5
 8008fa4:	f7f7 fb28 	bl	80005f8 <__aeabi_dmul>
 8008fa8:	a371      	add	r3, pc, #452	; (adr r3, 8009170 <__ieee754_pow+0x718>)
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	f7f7 f96d 	bl	800028c <__adddf3>
 8008fb2:	4622      	mov	r2, r4
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	460f      	mov	r7, r1
 8008fb8:	462b      	mov	r3, r5
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	f7f7 fb1b 	bl	80005f8 <__aeabi_dmul>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	4639      	mov	r1, r7
 8008fca:	f7f7 fb15 	bl	80005f8 <__aeabi_dmul>
 8008fce:	4642      	mov	r2, r8
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	460d      	mov	r5, r1
 8008fd4:	464b      	mov	r3, r9
 8008fd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fda:	f7f7 f957 	bl	800028c <__adddf3>
 8008fde:	ec53 2b18 	vmov	r2, r3, d8
 8008fe2:	f7f7 fb09 	bl	80005f8 <__aeabi_dmul>
 8008fe6:	4622      	mov	r2, r4
 8008fe8:	462b      	mov	r3, r5
 8008fea:	f7f7 f94f 	bl	800028c <__adddf3>
 8008fee:	4642      	mov	r2, r8
 8008ff0:	4682      	mov	sl, r0
 8008ff2:	468b      	mov	fp, r1
 8008ff4:	464b      	mov	r3, r9
 8008ff6:	4640      	mov	r0, r8
 8008ff8:	4649      	mov	r1, r9
 8008ffa:	f7f7 fafd 	bl	80005f8 <__aeabi_dmul>
 8008ffe:	4b6c      	ldr	r3, [pc, #432]	; (80091b0 <__ieee754_pow+0x758>)
 8009000:	2200      	movs	r2, #0
 8009002:	4606      	mov	r6, r0
 8009004:	460f      	mov	r7, r1
 8009006:	f7f7 f941 	bl	800028c <__adddf3>
 800900a:	4652      	mov	r2, sl
 800900c:	465b      	mov	r3, fp
 800900e:	f7f7 f93d 	bl	800028c <__adddf3>
 8009012:	9c04      	ldr	r4, [sp, #16]
 8009014:	460d      	mov	r5, r1
 8009016:	4622      	mov	r2, r4
 8009018:	460b      	mov	r3, r1
 800901a:	4640      	mov	r0, r8
 800901c:	4649      	mov	r1, r9
 800901e:	f7f7 faeb 	bl	80005f8 <__aeabi_dmul>
 8009022:	4b63      	ldr	r3, [pc, #396]	; (80091b0 <__ieee754_pow+0x758>)
 8009024:	4680      	mov	r8, r0
 8009026:	4689      	mov	r9, r1
 8009028:	2200      	movs	r2, #0
 800902a:	4620      	mov	r0, r4
 800902c:	4629      	mov	r1, r5
 800902e:	f7f7 f92b 	bl	8000288 <__aeabi_dsub>
 8009032:	4632      	mov	r2, r6
 8009034:	463b      	mov	r3, r7
 8009036:	f7f7 f927 	bl	8000288 <__aeabi_dsub>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4650      	mov	r0, sl
 8009040:	4659      	mov	r1, fp
 8009042:	f7f7 f921 	bl	8000288 <__aeabi_dsub>
 8009046:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800904a:	f7f7 fad5 	bl	80005f8 <__aeabi_dmul>
 800904e:	4622      	mov	r2, r4
 8009050:	4606      	mov	r6, r0
 8009052:	460f      	mov	r7, r1
 8009054:	462b      	mov	r3, r5
 8009056:	ec51 0b18 	vmov	r0, r1, d8
 800905a:	f7f7 facd 	bl	80005f8 <__aeabi_dmul>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	4630      	mov	r0, r6
 8009064:	4639      	mov	r1, r7
 8009066:	f7f7 f911 	bl	800028c <__adddf3>
 800906a:	4606      	mov	r6, r0
 800906c:	460f      	mov	r7, r1
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4640      	mov	r0, r8
 8009074:	4649      	mov	r1, r9
 8009076:	f7f7 f909 	bl	800028c <__adddf3>
 800907a:	9c04      	ldr	r4, [sp, #16]
 800907c:	a33e      	add	r3, pc, #248	; (adr r3, 8009178 <__ieee754_pow+0x720>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	4620      	mov	r0, r4
 8009084:	460d      	mov	r5, r1
 8009086:	f7f7 fab7 	bl	80005f8 <__aeabi_dmul>
 800908a:	4642      	mov	r2, r8
 800908c:	ec41 0b18 	vmov	d8, r0, r1
 8009090:	464b      	mov	r3, r9
 8009092:	4620      	mov	r0, r4
 8009094:	4629      	mov	r1, r5
 8009096:	f7f7 f8f7 	bl	8000288 <__aeabi_dsub>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4630      	mov	r0, r6
 80090a0:	4639      	mov	r1, r7
 80090a2:	f7f7 f8f1 	bl	8000288 <__aeabi_dsub>
 80090a6:	a336      	add	r3, pc, #216	; (adr r3, 8009180 <__ieee754_pow+0x728>)
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	f7f7 faa4 	bl	80005f8 <__aeabi_dmul>
 80090b0:	a335      	add	r3, pc, #212	; (adr r3, 8009188 <__ieee754_pow+0x730>)
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	4606      	mov	r6, r0
 80090b8:	460f      	mov	r7, r1
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 fa9b 	bl	80005f8 <__aeabi_dmul>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4630      	mov	r0, r6
 80090c8:	4639      	mov	r1, r7
 80090ca:	f7f7 f8df 	bl	800028c <__adddf3>
 80090ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090d0:	4b38      	ldr	r3, [pc, #224]	; (80091b4 <__ieee754_pow+0x75c>)
 80090d2:	4413      	add	r3, r2
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f7f7 f8d8 	bl	800028c <__adddf3>
 80090dc:	4682      	mov	sl, r0
 80090de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090e0:	468b      	mov	fp, r1
 80090e2:	f7f7 fa1f 	bl	8000524 <__aeabi_i2d>
 80090e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090e8:	4b33      	ldr	r3, [pc, #204]	; (80091b8 <__ieee754_pow+0x760>)
 80090ea:	4413      	add	r3, r2
 80090ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090f0:	4606      	mov	r6, r0
 80090f2:	460f      	mov	r7, r1
 80090f4:	4652      	mov	r2, sl
 80090f6:	465b      	mov	r3, fp
 80090f8:	ec51 0b18 	vmov	r0, r1, d8
 80090fc:	f7f7 f8c6 	bl	800028c <__adddf3>
 8009100:	4642      	mov	r2, r8
 8009102:	464b      	mov	r3, r9
 8009104:	f7f7 f8c2 	bl	800028c <__adddf3>
 8009108:	4632      	mov	r2, r6
 800910a:	463b      	mov	r3, r7
 800910c:	f7f7 f8be 	bl	800028c <__adddf3>
 8009110:	9c04      	ldr	r4, [sp, #16]
 8009112:	4632      	mov	r2, r6
 8009114:	463b      	mov	r3, r7
 8009116:	4620      	mov	r0, r4
 8009118:	460d      	mov	r5, r1
 800911a:	f7f7 f8b5 	bl	8000288 <__aeabi_dsub>
 800911e:	4642      	mov	r2, r8
 8009120:	464b      	mov	r3, r9
 8009122:	f7f7 f8b1 	bl	8000288 <__aeabi_dsub>
 8009126:	ec53 2b18 	vmov	r2, r3, d8
 800912a:	f7f7 f8ad 	bl	8000288 <__aeabi_dsub>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4650      	mov	r0, sl
 8009134:	4659      	mov	r1, fp
 8009136:	e606      	b.n	8008d46 <__ieee754_pow+0x2ee>
 8009138:	2401      	movs	r4, #1
 800913a:	e6a0      	b.n	8008e7e <__ieee754_pow+0x426>
 800913c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009190 <__ieee754_pow+0x738>
 8009140:	e60d      	b.n	8008d5e <__ieee754_pow+0x306>
 8009142:	bf00      	nop
 8009144:	f3af 8000 	nop.w
 8009148:	4a454eef 	.word	0x4a454eef
 800914c:	3fca7e28 	.word	0x3fca7e28
 8009150:	93c9db65 	.word	0x93c9db65
 8009154:	3fcd864a 	.word	0x3fcd864a
 8009158:	a91d4101 	.word	0xa91d4101
 800915c:	3fd17460 	.word	0x3fd17460
 8009160:	518f264d 	.word	0x518f264d
 8009164:	3fd55555 	.word	0x3fd55555
 8009168:	db6fabff 	.word	0xdb6fabff
 800916c:	3fdb6db6 	.word	0x3fdb6db6
 8009170:	33333303 	.word	0x33333303
 8009174:	3fe33333 	.word	0x3fe33333
 8009178:	e0000000 	.word	0xe0000000
 800917c:	3feec709 	.word	0x3feec709
 8009180:	dc3a03fd 	.word	0xdc3a03fd
 8009184:	3feec709 	.word	0x3feec709
 8009188:	145b01f5 	.word	0x145b01f5
 800918c:	be3e2fe0 	.word	0xbe3e2fe0
 8009190:	00000000 	.word	0x00000000
 8009194:	3ff00000 	.word	0x3ff00000
 8009198:	7ff00000 	.word	0x7ff00000
 800919c:	43400000 	.word	0x43400000
 80091a0:	0003988e 	.word	0x0003988e
 80091a4:	000bb679 	.word	0x000bb679
 80091a8:	08009dc8 	.word	0x08009dc8
 80091ac:	3ff00000 	.word	0x3ff00000
 80091b0:	40080000 	.word	0x40080000
 80091b4:	08009de8 	.word	0x08009de8
 80091b8:	08009dd8 	.word	0x08009dd8
 80091bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8009494 <__ieee754_pow+0xa3c>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	4640      	mov	r0, r8
 80091c4:	4649      	mov	r1, r9
 80091c6:	f7f7 f861 	bl	800028c <__adddf3>
 80091ca:	4622      	mov	r2, r4
 80091cc:	ec41 0b1a 	vmov	d10, r0, r1
 80091d0:	462b      	mov	r3, r5
 80091d2:	4630      	mov	r0, r6
 80091d4:	4639      	mov	r1, r7
 80091d6:	f7f7 f857 	bl	8000288 <__aeabi_dsub>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	ec51 0b1a 	vmov	r0, r1, d10
 80091e2:	f7f7 fc99 	bl	8000b18 <__aeabi_dcmpgt>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f47f adf8 	bne.w	8008ddc <__ieee754_pow+0x384>
 80091ec:	4aa4      	ldr	r2, [pc, #656]	; (8009480 <__ieee754_pow+0xa28>)
 80091ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091f2:	4293      	cmp	r3, r2
 80091f4:	f340 810b 	ble.w	800940e <__ieee754_pow+0x9b6>
 80091f8:	151b      	asrs	r3, r3, #20
 80091fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80091fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009202:	fa4a f303 	asr.w	r3, sl, r3
 8009206:	445b      	add	r3, fp
 8009208:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800920c:	4e9d      	ldr	r6, [pc, #628]	; (8009484 <__ieee754_pow+0xa2c>)
 800920e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009212:	4116      	asrs	r6, r2
 8009214:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009218:	2000      	movs	r0, #0
 800921a:	ea23 0106 	bic.w	r1, r3, r6
 800921e:	f1c2 0214 	rsb	r2, r2, #20
 8009222:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009226:	fa4a fa02 	asr.w	sl, sl, r2
 800922a:	f1bb 0f00 	cmp.w	fp, #0
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	4620      	mov	r0, r4
 8009234:	4629      	mov	r1, r5
 8009236:	bfb8      	it	lt
 8009238:	f1ca 0a00 	rsblt	sl, sl, #0
 800923c:	f7f7 f824 	bl	8000288 <__aeabi_dsub>
 8009240:	ec41 0b19 	vmov	d9, r0, r1
 8009244:	4642      	mov	r2, r8
 8009246:	464b      	mov	r3, r9
 8009248:	ec51 0b19 	vmov	r0, r1, d9
 800924c:	f7f7 f81e 	bl	800028c <__adddf3>
 8009250:	2400      	movs	r4, #0
 8009252:	a379      	add	r3, pc, #484	; (adr r3, 8009438 <__ieee754_pow+0x9e0>)
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	4620      	mov	r0, r4
 800925a:	460d      	mov	r5, r1
 800925c:	f7f7 f9cc 	bl	80005f8 <__aeabi_dmul>
 8009260:	ec53 2b19 	vmov	r2, r3, d9
 8009264:	4606      	mov	r6, r0
 8009266:	460f      	mov	r7, r1
 8009268:	4620      	mov	r0, r4
 800926a:	4629      	mov	r1, r5
 800926c:	f7f7 f80c 	bl	8000288 <__aeabi_dsub>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4640      	mov	r0, r8
 8009276:	4649      	mov	r1, r9
 8009278:	f7f7 f806 	bl	8000288 <__aeabi_dsub>
 800927c:	a370      	add	r3, pc, #448	; (adr r3, 8009440 <__ieee754_pow+0x9e8>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f7 f9b9 	bl	80005f8 <__aeabi_dmul>
 8009286:	a370      	add	r3, pc, #448	; (adr r3, 8009448 <__ieee754_pow+0x9f0>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	4680      	mov	r8, r0
 800928e:	4689      	mov	r9, r1
 8009290:	4620      	mov	r0, r4
 8009292:	4629      	mov	r1, r5
 8009294:	f7f7 f9b0 	bl	80005f8 <__aeabi_dmul>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4640      	mov	r0, r8
 800929e:	4649      	mov	r1, r9
 80092a0:	f7f6 fff4 	bl	800028c <__adddf3>
 80092a4:	4604      	mov	r4, r0
 80092a6:	460d      	mov	r5, r1
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	4630      	mov	r0, r6
 80092ae:	4639      	mov	r1, r7
 80092b0:	f7f6 ffec 	bl	800028c <__adddf3>
 80092b4:	4632      	mov	r2, r6
 80092b6:	463b      	mov	r3, r7
 80092b8:	4680      	mov	r8, r0
 80092ba:	4689      	mov	r9, r1
 80092bc:	f7f6 ffe4 	bl	8000288 <__aeabi_dsub>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4620      	mov	r0, r4
 80092c6:	4629      	mov	r1, r5
 80092c8:	f7f6 ffde 	bl	8000288 <__aeabi_dsub>
 80092cc:	4642      	mov	r2, r8
 80092ce:	4606      	mov	r6, r0
 80092d0:	460f      	mov	r7, r1
 80092d2:	464b      	mov	r3, r9
 80092d4:	4640      	mov	r0, r8
 80092d6:	4649      	mov	r1, r9
 80092d8:	f7f7 f98e 	bl	80005f8 <__aeabi_dmul>
 80092dc:	a35c      	add	r3, pc, #368	; (adr r3, 8009450 <__ieee754_pow+0x9f8>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	4604      	mov	r4, r0
 80092e4:	460d      	mov	r5, r1
 80092e6:	f7f7 f987 	bl	80005f8 <__aeabi_dmul>
 80092ea:	a35b      	add	r3, pc, #364	; (adr r3, 8009458 <__ieee754_pow+0xa00>)
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	f7f6 ffca 	bl	8000288 <__aeabi_dsub>
 80092f4:	4622      	mov	r2, r4
 80092f6:	462b      	mov	r3, r5
 80092f8:	f7f7 f97e 	bl	80005f8 <__aeabi_dmul>
 80092fc:	a358      	add	r3, pc, #352	; (adr r3, 8009460 <__ieee754_pow+0xa08>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	f7f6 ffc3 	bl	800028c <__adddf3>
 8009306:	4622      	mov	r2, r4
 8009308:	462b      	mov	r3, r5
 800930a:	f7f7 f975 	bl	80005f8 <__aeabi_dmul>
 800930e:	a356      	add	r3, pc, #344	; (adr r3, 8009468 <__ieee754_pow+0xa10>)
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	f7f6 ffb8 	bl	8000288 <__aeabi_dsub>
 8009318:	4622      	mov	r2, r4
 800931a:	462b      	mov	r3, r5
 800931c:	f7f7 f96c 	bl	80005f8 <__aeabi_dmul>
 8009320:	a353      	add	r3, pc, #332	; (adr r3, 8009470 <__ieee754_pow+0xa18>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f7f6 ffb1 	bl	800028c <__adddf3>
 800932a:	4622      	mov	r2, r4
 800932c:	462b      	mov	r3, r5
 800932e:	f7f7 f963 	bl	80005f8 <__aeabi_dmul>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4640      	mov	r0, r8
 8009338:	4649      	mov	r1, r9
 800933a:	f7f6 ffa5 	bl	8000288 <__aeabi_dsub>
 800933e:	4604      	mov	r4, r0
 8009340:	460d      	mov	r5, r1
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4640      	mov	r0, r8
 8009348:	4649      	mov	r1, r9
 800934a:	f7f7 f955 	bl	80005f8 <__aeabi_dmul>
 800934e:	2200      	movs	r2, #0
 8009350:	ec41 0b19 	vmov	d9, r0, r1
 8009354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009358:	4620      	mov	r0, r4
 800935a:	4629      	mov	r1, r5
 800935c:	f7f6 ff94 	bl	8000288 <__aeabi_dsub>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	ec51 0b19 	vmov	r0, r1, d9
 8009368:	f7f7 fa70 	bl	800084c <__aeabi_ddiv>
 800936c:	4632      	mov	r2, r6
 800936e:	4604      	mov	r4, r0
 8009370:	460d      	mov	r5, r1
 8009372:	463b      	mov	r3, r7
 8009374:	4640      	mov	r0, r8
 8009376:	4649      	mov	r1, r9
 8009378:	f7f7 f93e 	bl	80005f8 <__aeabi_dmul>
 800937c:	4632      	mov	r2, r6
 800937e:	463b      	mov	r3, r7
 8009380:	f7f6 ff84 	bl	800028c <__adddf3>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4620      	mov	r0, r4
 800938a:	4629      	mov	r1, r5
 800938c:	f7f6 ff7c 	bl	8000288 <__aeabi_dsub>
 8009390:	4642      	mov	r2, r8
 8009392:	464b      	mov	r3, r9
 8009394:	f7f6 ff78 	bl	8000288 <__aeabi_dsub>
 8009398:	460b      	mov	r3, r1
 800939a:	4602      	mov	r2, r0
 800939c:	493a      	ldr	r1, [pc, #232]	; (8009488 <__ieee754_pow+0xa30>)
 800939e:	2000      	movs	r0, #0
 80093a0:	f7f6 ff72 	bl	8000288 <__aeabi_dsub>
 80093a4:	e9cd 0100 	strd	r0, r1, [sp]
 80093a8:	9b01      	ldr	r3, [sp, #4]
 80093aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80093ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093b2:	da2f      	bge.n	8009414 <__ieee754_pow+0x9bc>
 80093b4:	4650      	mov	r0, sl
 80093b6:	ed9d 0b00 	vldr	d0, [sp]
 80093ba:	f000 f9c1 	bl	8009740 <scalbn>
 80093be:	ec51 0b10 	vmov	r0, r1, d0
 80093c2:	ec53 2b18 	vmov	r2, r3, d8
 80093c6:	f7ff bbe0 	b.w	8008b8a <__ieee754_pow+0x132>
 80093ca:	4b30      	ldr	r3, [pc, #192]	; (800948c <__ieee754_pow+0xa34>)
 80093cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80093d0:	429e      	cmp	r6, r3
 80093d2:	f77f af0b 	ble.w	80091ec <__ieee754_pow+0x794>
 80093d6:	4b2e      	ldr	r3, [pc, #184]	; (8009490 <__ieee754_pow+0xa38>)
 80093d8:	440b      	add	r3, r1
 80093da:	4303      	orrs	r3, r0
 80093dc:	d00b      	beq.n	80093f6 <__ieee754_pow+0x99e>
 80093de:	a326      	add	r3, pc, #152	; (adr r3, 8009478 <__ieee754_pow+0xa20>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	ec51 0b18 	vmov	r0, r1, d8
 80093e8:	f7f7 f906 	bl	80005f8 <__aeabi_dmul>
 80093ec:	a322      	add	r3, pc, #136	; (adr r3, 8009478 <__ieee754_pow+0xa20>)
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	f7ff bbca 	b.w	8008b8a <__ieee754_pow+0x132>
 80093f6:	4622      	mov	r2, r4
 80093f8:	462b      	mov	r3, r5
 80093fa:	f7f6 ff45 	bl	8000288 <__aeabi_dsub>
 80093fe:	4642      	mov	r2, r8
 8009400:	464b      	mov	r3, r9
 8009402:	f7f7 fb7f 	bl	8000b04 <__aeabi_dcmpge>
 8009406:	2800      	cmp	r0, #0
 8009408:	f43f aef0 	beq.w	80091ec <__ieee754_pow+0x794>
 800940c:	e7e7      	b.n	80093de <__ieee754_pow+0x986>
 800940e:	f04f 0a00 	mov.w	sl, #0
 8009412:	e717      	b.n	8009244 <__ieee754_pow+0x7ec>
 8009414:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009418:	4619      	mov	r1, r3
 800941a:	e7d2      	b.n	80093c2 <__ieee754_pow+0x96a>
 800941c:	491a      	ldr	r1, [pc, #104]	; (8009488 <__ieee754_pow+0xa30>)
 800941e:	2000      	movs	r0, #0
 8009420:	f7ff bb9e 	b.w	8008b60 <__ieee754_pow+0x108>
 8009424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009428:	f7ff bb9a 	b.w	8008b60 <__ieee754_pow+0x108>
 800942c:	9000      	str	r0, [sp, #0]
 800942e:	f7ff bb76 	b.w	8008b1e <__ieee754_pow+0xc6>
 8009432:	2100      	movs	r1, #0
 8009434:	f7ff bb60 	b.w	8008af8 <__ieee754_pow+0xa0>
 8009438:	00000000 	.word	0x00000000
 800943c:	3fe62e43 	.word	0x3fe62e43
 8009440:	fefa39ef 	.word	0xfefa39ef
 8009444:	3fe62e42 	.word	0x3fe62e42
 8009448:	0ca86c39 	.word	0x0ca86c39
 800944c:	be205c61 	.word	0xbe205c61
 8009450:	72bea4d0 	.word	0x72bea4d0
 8009454:	3e663769 	.word	0x3e663769
 8009458:	c5d26bf1 	.word	0xc5d26bf1
 800945c:	3ebbbd41 	.word	0x3ebbbd41
 8009460:	af25de2c 	.word	0xaf25de2c
 8009464:	3f11566a 	.word	0x3f11566a
 8009468:	16bebd93 	.word	0x16bebd93
 800946c:	3f66c16c 	.word	0x3f66c16c
 8009470:	5555553e 	.word	0x5555553e
 8009474:	3fc55555 	.word	0x3fc55555
 8009478:	c2f8f359 	.word	0xc2f8f359
 800947c:	01a56e1f 	.word	0x01a56e1f
 8009480:	3fe00000 	.word	0x3fe00000
 8009484:	000fffff 	.word	0x000fffff
 8009488:	3ff00000 	.word	0x3ff00000
 800948c:	4090cbff 	.word	0x4090cbff
 8009490:	3f6f3400 	.word	0x3f6f3400
 8009494:	652b82fe 	.word	0x652b82fe
 8009498:	3c971547 	.word	0x3c971547

0800949c <__ieee754_sqrt>:
 800949c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a0:	ec55 4b10 	vmov	r4, r5, d0
 80094a4:	4e56      	ldr	r6, [pc, #344]	; (8009600 <__ieee754_sqrt+0x164>)
 80094a6:	43ae      	bics	r6, r5
 80094a8:	ee10 0a10 	vmov	r0, s0
 80094ac:	ee10 3a10 	vmov	r3, s0
 80094b0:	4629      	mov	r1, r5
 80094b2:	462a      	mov	r2, r5
 80094b4:	d110      	bne.n	80094d8 <__ieee754_sqrt+0x3c>
 80094b6:	ee10 2a10 	vmov	r2, s0
 80094ba:	462b      	mov	r3, r5
 80094bc:	f7f7 f89c 	bl	80005f8 <__aeabi_dmul>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	4620      	mov	r0, r4
 80094c6:	4629      	mov	r1, r5
 80094c8:	f7f6 fee0 	bl	800028c <__adddf3>
 80094cc:	4604      	mov	r4, r0
 80094ce:	460d      	mov	r5, r1
 80094d0:	ec45 4b10 	vmov	d0, r4, r5
 80094d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d8:	2d00      	cmp	r5, #0
 80094da:	dc10      	bgt.n	80094fe <__ieee754_sqrt+0x62>
 80094dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80094e0:	4330      	orrs	r0, r6
 80094e2:	d0f5      	beq.n	80094d0 <__ieee754_sqrt+0x34>
 80094e4:	b15d      	cbz	r5, 80094fe <__ieee754_sqrt+0x62>
 80094e6:	ee10 2a10 	vmov	r2, s0
 80094ea:	462b      	mov	r3, r5
 80094ec:	ee10 0a10 	vmov	r0, s0
 80094f0:	f7f6 feca 	bl	8000288 <__aeabi_dsub>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	f7f7 f9a8 	bl	800084c <__aeabi_ddiv>
 80094fc:	e7e6      	b.n	80094cc <__ieee754_sqrt+0x30>
 80094fe:	1509      	asrs	r1, r1, #20
 8009500:	d076      	beq.n	80095f0 <__ieee754_sqrt+0x154>
 8009502:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009506:	07ce      	lsls	r6, r1, #31
 8009508:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800950c:	bf5e      	ittt	pl
 800950e:	0fda      	lsrpl	r2, r3, #31
 8009510:	005b      	lslpl	r3, r3, #1
 8009512:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009516:	0fda      	lsrs	r2, r3, #31
 8009518:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800951c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009520:	2000      	movs	r0, #0
 8009522:	106d      	asrs	r5, r5, #1
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	f04f 0e16 	mov.w	lr, #22
 800952a:	4684      	mov	ip, r0
 800952c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009530:	eb0c 0401 	add.w	r4, ip, r1
 8009534:	4294      	cmp	r4, r2
 8009536:	bfde      	ittt	le
 8009538:	1b12      	suble	r2, r2, r4
 800953a:	eb04 0c01 	addle.w	ip, r4, r1
 800953e:	1840      	addle	r0, r0, r1
 8009540:	0052      	lsls	r2, r2, #1
 8009542:	f1be 0e01 	subs.w	lr, lr, #1
 8009546:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800954a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800954e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009552:	d1ed      	bne.n	8009530 <__ieee754_sqrt+0x94>
 8009554:	4671      	mov	r1, lr
 8009556:	2720      	movs	r7, #32
 8009558:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800955c:	4562      	cmp	r2, ip
 800955e:	eb04 060e 	add.w	r6, r4, lr
 8009562:	dc02      	bgt.n	800956a <__ieee754_sqrt+0xce>
 8009564:	d113      	bne.n	800958e <__ieee754_sqrt+0xf2>
 8009566:	429e      	cmp	r6, r3
 8009568:	d811      	bhi.n	800958e <__ieee754_sqrt+0xf2>
 800956a:	2e00      	cmp	r6, #0
 800956c:	eb06 0e04 	add.w	lr, r6, r4
 8009570:	da43      	bge.n	80095fa <__ieee754_sqrt+0x15e>
 8009572:	f1be 0f00 	cmp.w	lr, #0
 8009576:	db40      	blt.n	80095fa <__ieee754_sqrt+0x15e>
 8009578:	f10c 0801 	add.w	r8, ip, #1
 800957c:	eba2 020c 	sub.w	r2, r2, ip
 8009580:	429e      	cmp	r6, r3
 8009582:	bf88      	it	hi
 8009584:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009588:	1b9b      	subs	r3, r3, r6
 800958a:	4421      	add	r1, r4
 800958c:	46c4      	mov	ip, r8
 800958e:	0052      	lsls	r2, r2, #1
 8009590:	3f01      	subs	r7, #1
 8009592:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009596:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800959a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800959e:	d1dd      	bne.n	800955c <__ieee754_sqrt+0xc0>
 80095a0:	4313      	orrs	r3, r2
 80095a2:	d006      	beq.n	80095b2 <__ieee754_sqrt+0x116>
 80095a4:	1c4c      	adds	r4, r1, #1
 80095a6:	bf13      	iteet	ne
 80095a8:	3101      	addne	r1, #1
 80095aa:	3001      	addeq	r0, #1
 80095ac:	4639      	moveq	r1, r7
 80095ae:	f021 0101 	bicne.w	r1, r1, #1
 80095b2:	1043      	asrs	r3, r0, #1
 80095b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80095b8:	0849      	lsrs	r1, r1, #1
 80095ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80095be:	07c2      	lsls	r2, r0, #31
 80095c0:	bf48      	it	mi
 80095c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80095c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80095ca:	460c      	mov	r4, r1
 80095cc:	463d      	mov	r5, r7
 80095ce:	e77f      	b.n	80094d0 <__ieee754_sqrt+0x34>
 80095d0:	0ada      	lsrs	r2, r3, #11
 80095d2:	3815      	subs	r0, #21
 80095d4:	055b      	lsls	r3, r3, #21
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	d0fa      	beq.n	80095d0 <__ieee754_sqrt+0x134>
 80095da:	02d7      	lsls	r7, r2, #11
 80095dc:	d50a      	bpl.n	80095f4 <__ieee754_sqrt+0x158>
 80095de:	f1c1 0420 	rsb	r4, r1, #32
 80095e2:	fa23 f404 	lsr.w	r4, r3, r4
 80095e6:	1e4d      	subs	r5, r1, #1
 80095e8:	408b      	lsls	r3, r1
 80095ea:	4322      	orrs	r2, r4
 80095ec:	1b41      	subs	r1, r0, r5
 80095ee:	e788      	b.n	8009502 <__ieee754_sqrt+0x66>
 80095f0:	4608      	mov	r0, r1
 80095f2:	e7f0      	b.n	80095d6 <__ieee754_sqrt+0x13a>
 80095f4:	0052      	lsls	r2, r2, #1
 80095f6:	3101      	adds	r1, #1
 80095f8:	e7ef      	b.n	80095da <__ieee754_sqrt+0x13e>
 80095fa:	46e0      	mov	r8, ip
 80095fc:	e7be      	b.n	800957c <__ieee754_sqrt+0xe0>
 80095fe:	bf00      	nop
 8009600:	7ff00000 	.word	0x7ff00000

08009604 <fabs>:
 8009604:	ec51 0b10 	vmov	r0, r1, d0
 8009608:	ee10 2a10 	vmov	r2, s0
 800960c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009610:	ec43 2b10 	vmov	d0, r2, r3
 8009614:	4770      	bx	lr

08009616 <finite>:
 8009616:	b082      	sub	sp, #8
 8009618:	ed8d 0b00 	vstr	d0, [sp]
 800961c:	9801      	ldr	r0, [sp, #4]
 800961e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009622:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009626:	0fc0      	lsrs	r0, r0, #31
 8009628:	b002      	add	sp, #8
 800962a:	4770      	bx	lr

0800962c <rint>:
 800962c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800962e:	ec51 0b10 	vmov	r0, r1, d0
 8009632:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009636:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800963a:	2e13      	cmp	r6, #19
 800963c:	ee10 4a10 	vmov	r4, s0
 8009640:	460b      	mov	r3, r1
 8009642:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009646:	dc58      	bgt.n	80096fa <rint+0xce>
 8009648:	2e00      	cmp	r6, #0
 800964a:	da2b      	bge.n	80096a4 <rint+0x78>
 800964c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009650:	4302      	orrs	r2, r0
 8009652:	d023      	beq.n	800969c <rint+0x70>
 8009654:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009658:	4302      	orrs	r2, r0
 800965a:	4254      	negs	r4, r2
 800965c:	4314      	orrs	r4, r2
 800965e:	0c4b      	lsrs	r3, r1, #17
 8009660:	0b24      	lsrs	r4, r4, #12
 8009662:	045b      	lsls	r3, r3, #17
 8009664:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009668:	ea44 0103 	orr.w	r1, r4, r3
 800966c:	4b32      	ldr	r3, [pc, #200]	; (8009738 <rint+0x10c>)
 800966e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009672:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	4630      	mov	r0, r6
 800967c:	4639      	mov	r1, r7
 800967e:	f7f6 fe05 	bl	800028c <__adddf3>
 8009682:	e9cd 0100 	strd	r0, r1, [sp]
 8009686:	463b      	mov	r3, r7
 8009688:	e9dd 0100 	ldrd	r0, r1, [sp]
 800968c:	4632      	mov	r2, r6
 800968e:	f7f6 fdfb 	bl	8000288 <__aeabi_dsub>
 8009692:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009696:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800969a:	4639      	mov	r1, r7
 800969c:	ec41 0b10 	vmov	d0, r0, r1
 80096a0:	b003      	add	sp, #12
 80096a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a4:	4a25      	ldr	r2, [pc, #148]	; (800973c <rint+0x110>)
 80096a6:	4132      	asrs	r2, r6
 80096a8:	ea01 0702 	and.w	r7, r1, r2
 80096ac:	4307      	orrs	r7, r0
 80096ae:	d0f5      	beq.n	800969c <rint+0x70>
 80096b0:	0851      	lsrs	r1, r2, #1
 80096b2:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80096b6:	4314      	orrs	r4, r2
 80096b8:	d00c      	beq.n	80096d4 <rint+0xa8>
 80096ba:	ea23 0201 	bic.w	r2, r3, r1
 80096be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80096c2:	2e13      	cmp	r6, #19
 80096c4:	fa43 f606 	asr.w	r6, r3, r6
 80096c8:	bf0c      	ite	eq
 80096ca:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80096ce:	2400      	movne	r4, #0
 80096d0:	ea42 0306 	orr.w	r3, r2, r6
 80096d4:	4918      	ldr	r1, [pc, #96]	; (8009738 <rint+0x10c>)
 80096d6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80096da:	4622      	mov	r2, r4
 80096dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096e0:	4620      	mov	r0, r4
 80096e2:	4629      	mov	r1, r5
 80096e4:	f7f6 fdd2 	bl	800028c <__adddf3>
 80096e8:	e9cd 0100 	strd	r0, r1, [sp]
 80096ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096f0:	4622      	mov	r2, r4
 80096f2:	462b      	mov	r3, r5
 80096f4:	f7f6 fdc8 	bl	8000288 <__aeabi_dsub>
 80096f8:	e7d0      	b.n	800969c <rint+0x70>
 80096fa:	2e33      	cmp	r6, #51	; 0x33
 80096fc:	dd07      	ble.n	800970e <rint+0xe2>
 80096fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009702:	d1cb      	bne.n	800969c <rint+0x70>
 8009704:	ee10 2a10 	vmov	r2, s0
 8009708:	f7f6 fdc0 	bl	800028c <__adddf3>
 800970c:	e7c6      	b.n	800969c <rint+0x70>
 800970e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009712:	f04f 36ff 	mov.w	r6, #4294967295
 8009716:	40d6      	lsrs	r6, r2
 8009718:	4230      	tst	r0, r6
 800971a:	d0bf      	beq.n	800969c <rint+0x70>
 800971c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009720:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009724:	bf1f      	itttt	ne
 8009726:	ea24 0101 	bicne.w	r1, r4, r1
 800972a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800972e:	fa44 f202 	asrne.w	r2, r4, r2
 8009732:	ea41 0402 	orrne.w	r4, r1, r2
 8009736:	e7cd      	b.n	80096d4 <rint+0xa8>
 8009738:	08009df8 	.word	0x08009df8
 800973c:	000fffff 	.word	0x000fffff

08009740 <scalbn>:
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	ec55 4b10 	vmov	r4, r5, d0
 8009746:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800974a:	4606      	mov	r6, r0
 800974c:	462b      	mov	r3, r5
 800974e:	b99a      	cbnz	r2, 8009778 <scalbn+0x38>
 8009750:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009754:	4323      	orrs	r3, r4
 8009756:	d036      	beq.n	80097c6 <scalbn+0x86>
 8009758:	4b39      	ldr	r3, [pc, #228]	; (8009840 <scalbn+0x100>)
 800975a:	4629      	mov	r1, r5
 800975c:	ee10 0a10 	vmov	r0, s0
 8009760:	2200      	movs	r2, #0
 8009762:	f7f6 ff49 	bl	80005f8 <__aeabi_dmul>
 8009766:	4b37      	ldr	r3, [pc, #220]	; (8009844 <scalbn+0x104>)
 8009768:	429e      	cmp	r6, r3
 800976a:	4604      	mov	r4, r0
 800976c:	460d      	mov	r5, r1
 800976e:	da10      	bge.n	8009792 <scalbn+0x52>
 8009770:	a32b      	add	r3, pc, #172	; (adr r3, 8009820 <scalbn+0xe0>)
 8009772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009776:	e03a      	b.n	80097ee <scalbn+0xae>
 8009778:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800977c:	428a      	cmp	r2, r1
 800977e:	d10c      	bne.n	800979a <scalbn+0x5a>
 8009780:	ee10 2a10 	vmov	r2, s0
 8009784:	4620      	mov	r0, r4
 8009786:	4629      	mov	r1, r5
 8009788:	f7f6 fd80 	bl	800028c <__adddf3>
 800978c:	4604      	mov	r4, r0
 800978e:	460d      	mov	r5, r1
 8009790:	e019      	b.n	80097c6 <scalbn+0x86>
 8009792:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009796:	460b      	mov	r3, r1
 8009798:	3a36      	subs	r2, #54	; 0x36
 800979a:	4432      	add	r2, r6
 800979c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80097a0:	428a      	cmp	r2, r1
 80097a2:	dd08      	ble.n	80097b6 <scalbn+0x76>
 80097a4:	2d00      	cmp	r5, #0
 80097a6:	a120      	add	r1, pc, #128	; (adr r1, 8009828 <scalbn+0xe8>)
 80097a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ac:	da1c      	bge.n	80097e8 <scalbn+0xa8>
 80097ae:	a120      	add	r1, pc, #128	; (adr r1, 8009830 <scalbn+0xf0>)
 80097b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097b4:	e018      	b.n	80097e8 <scalbn+0xa8>
 80097b6:	2a00      	cmp	r2, #0
 80097b8:	dd08      	ble.n	80097cc <scalbn+0x8c>
 80097ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80097be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80097c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80097c6:	ec45 4b10 	vmov	d0, r4, r5
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
 80097cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80097d0:	da19      	bge.n	8009806 <scalbn+0xc6>
 80097d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80097d6:	429e      	cmp	r6, r3
 80097d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80097dc:	dd0a      	ble.n	80097f4 <scalbn+0xb4>
 80097de:	a112      	add	r1, pc, #72	; (adr r1, 8009828 <scalbn+0xe8>)
 80097e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e2      	bne.n	80097ae <scalbn+0x6e>
 80097e8:	a30f      	add	r3, pc, #60	; (adr r3, 8009828 <scalbn+0xe8>)
 80097ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ee:	f7f6 ff03 	bl	80005f8 <__aeabi_dmul>
 80097f2:	e7cb      	b.n	800978c <scalbn+0x4c>
 80097f4:	a10a      	add	r1, pc, #40	; (adr r1, 8009820 <scalbn+0xe0>)
 80097f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0b8      	beq.n	8009770 <scalbn+0x30>
 80097fe:	a10e      	add	r1, pc, #56	; (adr r1, 8009838 <scalbn+0xf8>)
 8009800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009804:	e7b4      	b.n	8009770 <scalbn+0x30>
 8009806:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800980a:	3236      	adds	r2, #54	; 0x36
 800980c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009810:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009814:	4620      	mov	r0, r4
 8009816:	4b0c      	ldr	r3, [pc, #48]	; (8009848 <scalbn+0x108>)
 8009818:	2200      	movs	r2, #0
 800981a:	e7e8      	b.n	80097ee <scalbn+0xae>
 800981c:	f3af 8000 	nop.w
 8009820:	c2f8f359 	.word	0xc2f8f359
 8009824:	01a56e1f 	.word	0x01a56e1f
 8009828:	8800759c 	.word	0x8800759c
 800982c:	7e37e43c 	.word	0x7e37e43c
 8009830:	8800759c 	.word	0x8800759c
 8009834:	fe37e43c 	.word	0xfe37e43c
 8009838:	c2f8f359 	.word	0xc2f8f359
 800983c:	81a56e1f 	.word	0x81a56e1f
 8009840:	43500000 	.word	0x43500000
 8009844:	ffff3cb0 	.word	0xffff3cb0
 8009848:	3c900000 	.word	0x3c900000

0800984c <_init>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	bf00      	nop
 8009850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009852:	bc08      	pop	{r3}
 8009854:	469e      	mov	lr, r3
 8009856:	4770      	bx	lr

08009858 <_fini>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	bf00      	nop
 800985c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985e:	bc08      	pop	{r3}
 8009860:	469e      	mov	lr, r3
 8009862:	4770      	bx	lr
