
VRS-zadanie-cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08009848  08009848  00019848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de8  08009de8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009de8  08009de8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009de8  08009de8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dec  08009dec  00019dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000000ec  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200002cc  200002cc  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a8b7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002011  00000000  00000000  0002aac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000820  00000000  00000000  0002d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018278  00000000  00000000  0002dc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007cb8  00000000  00000000  00045e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b648  00000000  00000000  0004db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c9188  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bac  00000000  00000000  000c91dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800982c 	.word	0x0800982c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800982c 	.word	0x0800982c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	619a      	str	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <resetSegments>:
void setDigit(uint8_t pos);


/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f7ff ffdc 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f7ff ffd6 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000d48:	2102      	movs	r1, #2
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <resetSegments+0x58>)
 8000d4c:	f7ff ffd2 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000d50:	2120      	movs	r1, #32
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <resetSegments+0x58>)
 8000d54:	f7ff ffce 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000d58:	2110      	movs	r1, #16
 8000d5a:	480a      	ldr	r0, [pc, #40]	; (8000d84 <resetSegments+0x58>)
 8000d5c:	f7ff ffca 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000d60:	2101      	movs	r1, #1
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f7ff ffc5 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f7ff ffc0 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000d74:	2108      	movs	r1, #8
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f7ff ffbb 	bl	8000cf4 <LL_GPIO_SetOutputPin>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	48000400 	.word	0x48000400

08000d88 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f7ff ffbc 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f7ff ffb6 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000da4:	2102      	movs	r1, #2
 8000da6:	480e      	ldr	r0, [pc, #56]	; (8000de0 <setSegments+0x58>)
 8000da8:	f7ff ffb2 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000dac:	2120      	movs	r1, #32
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <setSegments+0x58>)
 8000db0:	f7ff ffae 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000db4:	2110      	movs	r1, #16
 8000db6:	480a      	ldr	r0, [pc, #40]	; (8000de0 <setSegments+0x58>)
 8000db8:	f7ff ffaa 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f7ff ffa5 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f7ff ffa0 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000dd0:	2108      	movs	r1, #8
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd6:	f7ff ff9b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	48000400 	.word	0x48000400

08000de4 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000de8:	2104      	movs	r1, #4
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f7ff ff8f 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000df2:	2101      	movs	r1, #1
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <resetDigits+0x3c>)
 8000df6:	f7ff ff8b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f7ff ff86 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8000e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f7ff ff80 	bl	8000d10 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f7ff ff7b 	bl	8000d10 <LL_GPIO_ResetOutputPin>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	48000400 	.word	0x48000400

08000e24 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8000e28:	2101      	movs	r1, #1
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <setDigits+0x3c>)
 8000e2c:	f7ff ff62 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000e30:	2110      	movs	r1, #16
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f7ff ff5d 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8000e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f7ff ff57 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8000e46:	2104      	movs	r1, #4
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f7ff ff52 	bl	8000cf4 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e56:	f7ff ff4d 	bl	8000cf4 <LL_GPIO_SetOutputPin>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	48000400 	.word	0x48000400

08000e64 <setDecimalPoint>:

void setDecimalPoint(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4802      	ldr	r0, [pc, #8]	; (8000e74 <setDecimalPoint+0x10>)
 8000e6c:	f7ff ff50 	bl	8000d10 <LL_GPIO_ResetOutputPin>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	48000400 	.word	0x48000400

08000e78 <set_sign>:

void set_sign(char sign){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<6))
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	3b30      	subs	r3, #48	; 0x30
 8000e86:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <set_sign+0xc8>)
 8000e88:	5cd3      	ldrb	r3, [r2, r3]
 8000e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d004      	beq.n	8000e9c <set_sign+0x24>
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000e92:	2102      	movs	r1, #2
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f7ff ff3a 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<5))
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	3b30      	subs	r3, #48	; 0x30
 8000ea0:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <set_sign+0xc8>)
 8000ea2:	5cd3      	ldrb	r3, [r2, r3]
 8000ea4:	f003 0320 	and.w	r3, r3, #32
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d004      	beq.n	8000eb6 <set_sign+0x3e>
		LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000eac:	2101      	movs	r1, #1
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f7ff ff2d 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<4))
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	3b30      	subs	r3, #48	; 0x30
 8000eba:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <set_sign+0xc8>)
 8000ebc:	5cd3      	ldrb	r3, [r2, r3]
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <set_sign+0x5a>
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f7ff ff1f 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<3))
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	3b30      	subs	r3, #48	; 0x30
 8000ed6:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <set_sign+0xc8>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <set_sign+0x72>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4817      	ldr	r0, [pc, #92]	; (8000f44 <set_sign+0xcc>)
 8000ee6:	f7ff ff13 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<2))
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	3b30      	subs	r3, #48	; 0x30
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <set_sign+0xc8>)
 8000ef0:	5cd3      	ldrb	r3, [r2, r3]
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <set_sign+0x8e>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f7ff ff05 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<1))
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	3b30      	subs	r3, #48	; 0x30
 8000f0a:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <set_sign+0xc8>)
 8000f0c:	5cd3      	ldrb	r3, [r2, r3]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d004      	beq.n	8000f20 <set_sign+0xa8>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000f16:	2108      	movs	r1, #8
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f7ff fef8 	bl	8000d10 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<0))
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	3b30      	subs	r3, #48	; 0x30
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <set_sign+0xc8>)
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <set_sign+0xc0>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000f30:	2110      	movs	r1, #16
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <set_sign+0xcc>)
 8000f34:	f7ff feec 	bl	8000d10 <LL_GPIO_ResetOutputPin>

}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	0800988c 	.word	0x0800988c
 8000f44:	48000400 	.word	0x48000400

08000f48 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d823      	bhi.n	8000fa0 <setDigit+0x58>
 8000f58:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <setDigit+0x18>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000f71 	.word	0x08000f71
 8000f64:	08000f7d 	.word	0x08000f7d
 8000f68:	08000f8b 	.word	0x08000f8b
 8000f6c:	08000f97 	.word	0x08000f97
	{
	case 0:
		DIGIT_4_ON;
 8000f70:	2104      	movs	r1, #4
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f7ff febd 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f7a:	e011      	b.n	8000fa0 <setDigit+0x58>
	case 1:
		DIGIT_3_ON;
 8000f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f84:	f7ff feb6 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f88:	e00a      	b.n	8000fa0 <setDigit+0x58>
	case 2:
		DIGIT_2_ON;
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f7ff feb0 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f94:	e004      	b.n	8000fa0 <setDigit+0x58>
	case 3:
		DIGIT_1_ON;
 8000f96:	2101      	movs	r1, #1
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <setDigit+0x60>)
 8000f9a:	f7ff feab 	bl	8000cf4 <LL_GPIO_SetOutputPin>
		break;
 8000f9e:	bf00      	nop
	}
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	48000400 	.word	0x48000400

08000fac <display_sign>:
void display_sign(char sign_1,char sign_2, char sign_3,char sign_4,int index_dot,int act_index)
{
 8000fac:	b490      	push	{r4, r7}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4623      	mov	r3, r4
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71bb      	strb	r3, [r7, #6]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	717b      	strb	r3, [r7, #5]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	713b      	strb	r3, [r7, #4]
	Display_sign[0] = sign_1;
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <display_sign+0x48>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	7013      	strb	r3, [r2, #0]
	Display_sign[1] = sign_2;
 8000fd0:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <display_sign+0x48>)
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	7053      	strb	r3, [r2, #1]
	Display_sign[2] = sign_3;
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <display_sign+0x48>)
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	7093      	strb	r3, [r2, #2]
	Display_sign[3] = sign_4;
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <display_sign+0x48>)
 8000fde:	793b      	ldrb	r3, [r7, #4]
 8000fe0:	70d3      	strb	r3, [r2, #3]
	//index_for_dot = index_dot;
	actual_index = act_index;
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <display_sign+0x4c>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc90      	pop	{r4, r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2000022c 	.word	0x2000022c
 8000ff8:	20000228 	.word	0x20000228

08000ffc <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e034      	b.n	8001072 <updateDisplay+0x76>
	{

		setDigit(i);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff9c 	bl	8000f48 <setDigit>
		set_sign(Display_sign[3-i]);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f1c3 0303 	rsb	r3, r3, #3
 8001016:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <updateDisplay+0x88>)
 8001018:	5cd3      	ldrb	r3, [r2, r3]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff2c 	bl	8000e78 <set_sign>

		//set dot
		if((int8_t)actual_index - (int8_t)index_for_dot + 4 - i == 0){
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <updateDisplay+0x8c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <updateDisplay+0x90>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b25b      	sxtb	r3, r3
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	1d1a      	adds	r2, r3, #4
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	429a      	cmp	r2, r3
 8001036:	d101      	bne.n	800103c <updateDisplay+0x40>
			setDecimalPoint();
 8001038:	f7ff ff14 	bl	8000e64 <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <updateDisplay+0x94>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	4914      	ldr	r1, [pc, #80]	; (8001094 <updateDisplay+0x98>)
 8001044:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 8001048:	bf00      	nop
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <updateDisplay+0x98>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	1c94      	adds	r4, r2, #2
 8001052:	f143 0500 	adc.w	r5, r3, #0
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <updateDisplay+0x94>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	42ab      	cmp	r3, r5
 800105e:	bf08      	it	eq
 8001060:	42a2      	cmpeq	r2, r4
 8001062:	d3f2      	bcc.n	800104a <updateDisplay+0x4e>

		resetDigits();
 8001064:	f7ff febe 	bl	8000de4 <resetDigits>
		resetSegments();
 8001068:	f7ff fe60 	bl	8000d2c <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	3301      	adds	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d9c7      	bls.n	8001008 <updateDisplay+0xc>
	}
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bdb0      	pop	{r4, r5, r7, pc}
 8001082:	bf00      	nop
 8001084:	2000022c 	.word	0x2000022c
 8001088:	20000228 	.word	0x20000228
 800108c:	20000218 	.word	0x20000218
 8001090:	20000200 	.word	0x20000200
 8001094:	20000208 	.word	0x20000208

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011b6:	695a      	ldr	r2, [r3, #20]
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4313      	orrs	r3, r2
 80011be:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c2:	695a      	ldr	r2, [r3, #20]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4013      	ands	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000

080011dc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <LL_SYSCFG_SetEXTISource+0x58>)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	0c1b      	lsrs	r3, r3, #16
 80011f6:	43db      	mvns	r3, r3
 80011f8:	ea02 0103 	and.w	r1, r2, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	0c1b      	lsrs	r3, r3, #16
 8001200:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	fa03 f202 	lsl.w	r2, r3, r2
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <LL_SYSCFG_SetEXTISource+0x58>)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	430a      	orrs	r2, r1
 8001222:	3302      	adds	r3, #2
 8001224:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40010000 	.word	0x40010000

08001238 <LL_GPIO_SetPinMode>:
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	613b      	str	r3, [r7, #16]
  return result;
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	fab3 f383 	clz	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2103      	movs	r1, #3
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	61bb      	str	r3, [r7, #24]
  return result;
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fab3 f383 	clz	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	431a      	orrs	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	601a      	str	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_GPIO_SetPinPull>:
{
 8001296:	b480      	push	{r7}
 8001298:	b089      	sub	sp, #36	; 0x24
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa93 f3a3 	rbit	r3, r3
 80012b0:	613b      	str	r3, [r7, #16]
  return result;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	fab3 f383 	clz	r3, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2103      	movs	r1, #3
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	401a      	ands	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	61bb      	str	r3, [r7, #24]
  return result;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	431a      	orrs	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	60da      	str	r2, [r3, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3724      	adds	r7, #36	; 0x24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_GPIO_ResetOutputPin>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001332:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001336:	f7ff ff39 	bl	80011ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800133a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800133e:	f7ff ff35 	bl	80011ac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001342:	f641 119f 	movw	r1, #6559	; 0x199f
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f7ff ffd3 	bl	80012f4 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 800134e:	2133      	movs	r1, #51	; 0x33
 8001350:	482b      	ldr	r0, [pc, #172]	; (8001400 <MX_GPIO_Init+0xf0>)
 8001352:	f7ff ffcf 	bl	80012f4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001356:	f641 139f 	movw	r3, #6559	; 0x199f
 800135a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800135c:	2301      	movs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f002 f8b0 	bl	80034d8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001378:	2333      	movs	r3, #51	; 0x33
 800137a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800137c:	2301      	movs	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	481b      	ldr	r0, [pc, #108]	; (8001400 <MX_GPIO_Init+0xf0>)
 8001392:	f002 f8a1 	bl	80034d8 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001396:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff ff1e 	bl	80011dc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2108      	movs	r1, #8
 80013a4:	4816      	ldr	r0, [pc, #88]	; (8001400 <MX_GPIO_Init+0xf0>)
 80013a6:	f7ff ff76 	bl	8001296 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2108      	movs	r1, #8
 80013ae:	4814      	ldr	r0, [pc, #80]	; (8001400 <MX_GPIO_Init+0xf0>)
 80013b0:	f7ff ff42 	bl	8001238 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80013b4:	2308      	movs	r3, #8
 80013b6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013bc:	2301      	movs	r3, #1
 80013be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80013c8:	2302      	movs	r3, #2
 80013ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fe88 	bl	80030e8 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80013d8:	f7ff fe5e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 80013dc:	4603      	mov	r3, r0
 80013de:	2200      	movs	r2, #0
 80013e0:	2101      	movs	r1, #1
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff feae 	bl	8001144 <NVIC_EncodePriority>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4619      	mov	r1, r3
 80013ec:	2009      	movs	r0, #9
 80013ee:	f7ff fe7f 	bl	80010f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80013f2:	2009      	movs	r0, #9
 80013f4:	f7ff fe5e 	bl	80010b4 <__NVIC_EnableIRQ>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	48000400 	.word	0x48000400

08001404 <__NVIC_GetPriorityGrouping>:
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f043 0201 	orr.w	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800158a:	f023 0306 	bic.w	r3, r3, #6
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	430a      	orrs	r2, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	60da      	str	r2, [r3, #12]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	60da      	str	r2, [r3, #12]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f043 0204 	orr.w	r2, r3, #4
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 0204 	bic.w	r2, r3, #4
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b02      	cmp	r3, #2
 8001618:	d101      	bne.n	800161e <LL_I2C_IsActiveFlag_TXIS+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b04      	cmp	r3, #4
 800163e:	d101      	bne.n	8001644 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f003 0320 	and.w	r3, r3, #32
 8001662:	2b20      	cmp	r3, #32
 8001664:	d101      	bne.n	800166a <LL_I2C_IsActiveFlag_STOP+0x18>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <LL_I2C_IsActiveFlag_STOP+0x1a>
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	f043 0220 	orr.w	r2, r3, #32
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	61da      	str	r2, [r3, #28]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	605a      	str	r2, [r3, #4]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	0d5b      	lsrs	r3, r3, #21
 80016ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <LL_I2C_HandleTransfer+0x48>)
 80016d4:	430b      	orrs	r3, r1
 80016d6:	43db      	mvns	r3, r3
 80016d8:	401a      	ands	r2, r3
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4319      	orrs	r1, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	041b      	lsls	r3, r3, #16
 80016e4:	4319      	orrs	r1, r3
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4319      	orrs	r1, r3
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	431a      	orrs	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	03ff7bff 	.word	0x03ff7bff

08001704 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	b2db      	uxtb	r3, r3
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_AHB1_GRP1_EnableClock>:
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4013      	ands	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40021000 	.word	0x40021000

0800176c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <LL_APB1_GRP1_EnableClock+0x2c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001782:	69da      	ldr	r2, [r3, #28]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4013      	ands	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000

0800179c <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08e      	sub	sp, #56	; 0x38
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
 80017c4:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80017c6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80017ca:	f7ff ffb7 	bl	800173c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80017ce:	23c0      	movs	r3, #192	; 0xc0
 80017d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017d2:	2302      	movs	r3, #2
 80017d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80017da:	2301      	movs	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017de:	2301      	movs	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80017e2:	2304      	movs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	4821      	ldr	r0, [pc, #132]	; (8001870 <MX_I2C1_Init+0xd4>)
 80017ec:	f001 fe74 	bl	80034d8 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80017f0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80017f4:	f7ff ffba 	bl	800176c <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017f8:	f7ff fe04 	bl	8001404 <__NVIC_GetPriorityGrouping>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fe54 	bl	80014b0 <NVIC_EncodePriority>
 8001808:	4603      	mov	r3, r0
 800180a:	4619      	mov	r1, r3
 800180c:	201f      	movs	r0, #31
 800180e:	f7ff fe25 	bl	800145c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001812:	201f      	movs	r0, #31
 8001814:	f7ff fe04 	bl	8001420 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001818:	4816      	ldr	r0, [pc, #88]	; (8001874 <MX_I2C1_Init+0xd8>)
 800181a:	f7ff ff3d 	bl	8001698 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800181e:	4815      	ldr	r0, [pc, #84]	; (8001874 <MX_I2C1_Init+0xd8>)
 8001820:	f7ff fec1 	bl	80015a6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001824:	4813      	ldr	r0, [pc, #76]	; (8001874 <MX_I2C1_Init+0xd8>)
 8001826:	f7ff fe96 	bl	8001556 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800182a:	4812      	ldr	r0, [pc, #72]	; (8001874 <MX_I2C1_Init+0xd8>)
 800182c:	f7ff fe83 	bl	8001536 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <MX_I2C1_Init+0xdc>)
 8001836:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001840:	2302      	movs	r3, #2
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	4808      	ldr	r0, [pc, #32]	; (8001874 <MX_I2C1_Init+0xd8>)
 8001854:	f001 ff53 	bl	80036fe <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_I2C1_Init+0xd8>)
 800185e:	f7ff fe8a 	bl	8001576 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <MX_I2C1_Init+0xd8>)
 8001864:	f7ff fe57 	bl	8001516 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	48000400 	.word	0x48000400
 8001874:	40005400 	.word	0x40005400
 8001878:	2000090e 	.word	0x2000090e

0800187c <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af02      	add	r7, sp, #8
 8001882:	4604      	mov	r4, r0
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4623      	mov	r3, r4
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	4603      	mov	r3, r0
 8001890:	71bb      	strb	r3, [r7, #6]
 8001892:	460b      	mov	r3, r1
 8001894:	717b      	strb	r3, [r7, #5]
 8001896:	4613      	mov	r3, r2
 8001898:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 800189a:	793b      	ldrb	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a6:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80018a8:	7979      	ldrb	r1, [r7, #5]
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <i2c_master_write+0x80>)
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2302      	movs	r3, #2
 80018b6:	2200      	movs	r2, #0
 80018b8:	4811      	ldr	r0, [pc, #68]	; (8001900 <i2c_master_write+0x84>)
 80018ba:	f7ff fefd 	bl	80016b8 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 80018be:	79bb      	ldrb	r3, [r7, #6]
 80018c0:	4619      	mov	r1, r3
 80018c2:	480f      	ldr	r0, [pc, #60]	; (8001900 <i2c_master_write+0x84>)
 80018c4:	f7ff ff2b 	bl	800171e <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80018c8:	e00a      	b.n	80018e0 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <i2c_master_write+0x84>)
 80018cc:	f7ff fe9b 	bl	8001606 <LL_I2C_IsActiveFlag_TXIS>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4619      	mov	r1, r3
 80018da:	4809      	ldr	r0, [pc, #36]	; (8001900 <i2c_master_write+0x84>)
 80018dc:	f7ff ff1f 	bl	800171e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <i2c_master_write+0x84>)
 80018e2:	f7ff feb6 	bl	8001652 <LL_I2C_IsActiveFlag_STOP>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0ee      	beq.n	80018ca <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <i2c_master_write+0x84>)
 80018ee:	f7ff fec3 	bl	8001678 <LL_I2C_ClearFlag_STOP>
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	80002000 	.word	0x80002000
 8001900:	40005400 	.word	0x40005400

08001904 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af02      	add	r7, sp, #8
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4603      	mov	r3, r0
 8001914:	70fb      	strb	r3, [r7, #3]
 8001916:	460b      	mov	r3, r1
 8001918:	70bb      	strb	r3, [r7, #2]
 800191a:	4613      	mov	r3, r2
 800191c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800191e:	4a30      	ldr	r2, [pc, #192]	; (80019e0 <i2c_master_read+0xdc>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001924:	7c3b      	ldrb	r3, [r7, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 800192a:	78bb      	ldrb	r3, [r7, #2]
 800192c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001930:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <i2c_master_read+0xe0>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001938:	482b      	ldr	r0, [pc, #172]	; (80019e8 <i2c_master_read+0xe4>)
 800193a:	f7ff fe44 	bl	80015c6 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800193e:	7879      	ldrb	r1, [r7, #1]
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <i2c_master_read+0xe8>)
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2301      	movs	r3, #1
 800194c:	2200      	movs	r2, #0
 800194e:	4826      	ldr	r0, [pc, #152]	; (80019e8 <i2c_master_read+0xe4>)
 8001950:	f7ff feb2 	bl	80016b8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001954:	e00a      	b.n	800196c <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001956:	4824      	ldr	r0, [pc, #144]	; (80019e8 <i2c_master_read+0xe4>)
 8001958:	f7ff fe55 	bl	8001606 <LL_I2C_IsActiveFlag_TXIS>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr); //adresa, ktoru chceme citat - posielame do slave zariadenia
 8001962:	78bb      	ldrb	r3, [r7, #2]
 8001964:	4619      	mov	r1, r3
 8001966:	4820      	ldr	r0, [pc, #128]	; (80019e8 <i2c_master_read+0xe4>)
 8001968:	f7ff fed9 	bl	800171e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800196c:	481e      	ldr	r0, [pc, #120]	; (80019e8 <i2c_master_read+0xe4>)
 800196e:	f7ff fe70 	bl	8001652 <LL_I2C_IsActiveFlag_STOP>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0ee      	beq.n	8001956 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001978:	481b      	ldr	r0, [pc, #108]	; (80019e8 <i2c_master_read+0xe4>)
 800197a:	f7ff fe7d 	bl	8001678 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 800197e:	bf00      	nop
 8001980:	4819      	ldr	r0, [pc, #100]	; (80019e8 <i2c_master_read+0xe4>)
 8001982:	f7ff fe66 	bl	8001652 <LL_I2C_IsActiveFlag_STOP>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f9      	bne.n	8001980 <i2c_master_read+0x7c>

	//citam register od slejva, LL_I2C_HandleTransfer- dolezita funkcia
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 800198c:	7879      	ldrb	r1, [r7, #1]
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <i2c_master_read+0xec>)
 8001992:	9201      	str	r2, [sp, #4]
 8001994:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001998:	9200      	str	r2, [sp, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	4812      	ldr	r0, [pc, #72]	; (80019e8 <i2c_master_read+0xe4>)
 800199e:	f7ff fe8b 	bl	80016b8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80019a2:	bf00      	nop
 80019a4:	4810      	ldr	r0, [pc, #64]	; (80019e8 <i2c_master_read+0xe4>)
 80019a6:	f7ff fe54 	bl	8001652 <LL_I2C_IsActiveFlag_STOP>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f9      	beq.n	80019a4 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <i2c_master_read+0xe4>)
 80019b2:	f7ff fe61 	bl	8001678 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 80019b6:	480c      	ldr	r0, [pc, #48]	; (80019e8 <i2c_master_read+0xe4>)
 80019b8:	f7ff fe15 	bl	80015e6 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <i2c_master_read+0xe4>)
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <i2c_master_read+0xe4>)
 80019c2:	f043 0310 	orr.w	r3, r3, #16
 80019c6:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <i2c_master_read+0xf0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <i2c_master_read+0xe0>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <i2c_master_read+0xdc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000230 	.word	0x20000230
 80019e4:	20000210 	.word	0x20000210
 80019e8:	40005400 	.word	0x40005400
 80019ec:	80002000 	.word	0x80002000
 80019f0:	80002400 	.word	0x80002400
 80019f4:	20000211 	.word	0x20000211

080019f8 <I2C1_EV_IRQHandler_fun>:


void I2C1_EV_IRQHandler_fun(void)
{
 80019f8:	b598      	push	{r3, r4, r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80019fc:	4812      	ldr	r0, [pc, #72]	; (8001a48 <I2C1_EV_IRQHandler_fun+0x50>)
 80019fe:	f7ff fe15 	bl	800162c <LL_I2C_IsActiveFlag_RXNE>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01c      	beq.n	8001a42 <I2C1_EV_IRQHandler_fun+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <I2C1_EV_IRQHandler_fun+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <I2C1_EV_IRQHandler_fun+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	1c59      	adds	r1, r3, #1
 8001a14:	b2c8      	uxtb	r0, r1
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <I2C1_EV_IRQHandler_fun+0x58>)
 8001a18:	7008      	strb	r0, [r1, #0]
 8001a1a:	18d4      	adds	r4, r2, r3
 8001a1c:	480a      	ldr	r0, [pc, #40]	; (8001a48 <I2C1_EV_IRQHandler_fun+0x50>)
 8001a1e:	f7ff fe71 	bl	8001704 <LL_I2C_ReceiveData8>
 8001a22:	4603      	mov	r3, r0
 8001a24:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <I2C1_EV_IRQHandler_fun+0x58>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b13      	cmp	r3, #19
 8001a2e:	d903      	bls.n	8001a38 <I2C1_EV_IRQHandler_fun+0x40>
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <I2C1_EV_IRQHandler_fun+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	e001      	b.n	8001a3c <I2C1_EV_IRQHandler_fun+0x44>
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <I2C1_EV_IRQHandler_fun+0x58>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <I2C1_EV_IRQHandler_fun+0x5c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
	}
}
 8001a42:	bf00      	nop
 8001a44:	bd98      	pop	{r3, r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40005400 	.word	0x40005400
 8001a4c:	20000230 	.word	0x20000230
 8001a50:	20000211 	.word	0x20000211
 8001a54:	20000210 	.word	0x20000210

08001a58 <iks01a1_init>:
#include "iks01a1.h"

uint8_t data = 0;

uint8_t iks01a1_init(void){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
	uint8_t ctrl;
	LL_mDelay(500);
 8001a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a62:	f002 faab 	bl	8003fbc <LL_mDelay>
	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 fa2e 	bl	8001ec8 <lps25hb_read_byte>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
	//val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);

	if(!(val == LPS25HB_WHO_AM_I_VALUE))
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2bbd      	cmp	r3, #189	; 0xbd
 8001a74:	d001      	beq.n	8001a7a <iks01a1_init+0x22>
	{
		return 0; //bad who am I value
 8001a76:	2300      	movs	r3, #0
 8001a78:	e02a      	b.n	8001ad0 <iks01a1_init+0x78>
	}

	ctrl = hts221_read_byte(LPS25HB_CTRL_REG1);
 8001a7a:	2020      	movs	r0, #32
 8001a7c:	f000 fa3c 	bl	8001ef8 <hts221_read_byte>
 8001a80:	4603      	mov	r3, r0
 8001a82:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 7;
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a8a:	71bb      	strb	r3, [r7, #6]
	lps25hb_write_byte(LPS25HB_CTRL_REG1, ctrl); //active mode
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	2020      	movs	r0, #32
 8001a92:	f000 fa83 	bl	8001f9c <lps25hb_write_byte>


	LL_mDelay(500);
 8001a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a9a:	f002 fa8f 	bl	8003fbc <LL_mDelay>
	val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f000 fa2a 	bl	8001ef8 <hts221_read_byte>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]

	if(!(val == HTS221_WHO_AM_I_VALUE))
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2bbc      	cmp	r3, #188	; 0xbc
 8001aac:	d001      	beq.n	8001ab2 <iks01a1_init+0x5a>
	{
		return 0; //bad who am I value
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e00e      	b.n	8001ad0 <iks01a1_init+0x78>
	}

	ctrl = hts221_read_byte(HTS221_CTRL_REG1);
 8001ab2:	2020      	movs	r0, #32
 8001ab4:	f000 fa20 	bl	8001ef8 <hts221_read_byte>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71bb      	strb	r3, [r7, #6]
	ctrl |= 1 << 7;
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ac2:	71bb      	strb	r3, [r7, #6]
	hts221_write_byte(HTS221_CTRL_REG1, ctrl); //active mode
 8001ac4:	79bb      	ldrb	r3, [r7, #6]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	2020      	movs	r0, #32
 8001aca:	f000 fa55 	bl	8001f78 <hts221_write_byte>
	//uint8_t ctrltest = hts221_read_byte(HTS221_CTRL_REG1);

	//ctrl = ctrltest;

	return 1;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <hts221_start_measurement>:

void hts221_start_measurement(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	uint8_t ctrl = hts221_read_byte(LPS25HB_CTRL_REG2);
 8001ade:	2021      	movs	r0, #33	; 0x21
 8001ae0:	f000 fa0a 	bl	8001ef8 <hts221_read_byte>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
	ctrl |= 0x1;
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	71fb      	strb	r3, [r7, #7]
	lps25hb_write_byte(LPS25HB_CTRL_REG2, ctrl); //activate measurement
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4619      	mov	r1, r3
 8001af4:	2021      	movs	r0, #33	; 0x21
 8001af6:	f000 fa51 	bl	8001f9c <lps25hb_write_byte>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <lps25hb_start_measurement>:

void lps25hb_start_measurement(void) {
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
	uint8_t ctrl = hts221_read_byte(HTS221_CTRL_REG2);
 8001b08:	2021      	movs	r0, #33	; 0x21
 8001b0a:	f000 f9f5 	bl	8001ef8 <hts221_read_byte>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
	ctrl |= 0x1;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	71fb      	strb	r3, [r7, #7]
	hts221_write_byte(HTS221_CTRL_REG2, ctrl); //activate measurement
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	2021      	movs	r0, #33	; 0x21
 8001b20:	f000 fa2a 	bl	8001f78 <hts221_write_byte>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <hts221_get_humidity>:

void hts221_get_humidity(float* out) { //humidity measurement (%)
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	uint8_t data[2], h0_rh, h1_rh;
	int16_t h_out, h0_t0_out, h1_t0_out;



	uint8_t availability = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 8001b38:	2027      	movs	r0, #39	; 0x27
 8001b3a:	f000 f9dd 	bl	8001ef8 <hts221_read_byte>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1) >> 1;
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <hts221_get_humidity+0x3a>
		hts221_start_measurement();
 8001b50:	f7ff ffc2 	bl	8001ad8 <hts221_start_measurement>
		availability = hts221_read_byte(HTS221_STATUS_REG);
 8001b54:	2027      	movs	r0, #39	; 0x27
 8001b56:	f000 f9cf 	bl	8001ef8 <hts221_read_byte>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(0x1<<1);
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	75fb      	strb	r3, [r7, #23]
	}

	h0_rh = hts221_read_byte(HTS221_H0_RH)/2;
 8001b66:	2030      	movs	r0, #48	; 0x30
 8001b68:	f000 f9c6 	bl	8001ef8 <hts221_read_byte>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	75bb      	strb	r3, [r7, #22]
	h1_rh = hts221_read_byte(HTS221_H1_RH)/2;
 8001b72:	2031      	movs	r0, #49	; 0x31
 8001b74:	f000 f9c0 	bl	8001ef8 <hts221_read_byte>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	757b      	strb	r3, [r7, #21]

	hts221_readArray(data, HTS221_H0_T0_OUT, 2);
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	2202      	movs	r2, #2
 8001b84:	2136      	movs	r1, #54	; 0x36
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f9ce 	bl	8001f28 <hts221_readArray>
	h0_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 8001b8c:	7b7b      	ldrb	r3, [r7, #13]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	7b3b      	ldrb	r3, [r7, #12]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_H1_T0_OUT, 2);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	213a      	movs	r1, #58	; 0x3a
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f9c0 	bl	8001f28 <hts221_readArray>
	h1_t0_out = ((uint16_t)data[1]) << 8 | data[0];
 8001ba8:	7b7b      	ldrb	r3, [r7, #13]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	7b3b      	ldrb	r3, [r7, #12]
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	823b      	strh	r3, [r7, #16]

	hts221_readArray(data, HTS221_HUMIDITY_ADDR, 2);
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	2202      	movs	r2, #2
 8001bbc:	2128      	movs	r1, #40	; 0x28
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f9b2 	bl	8001f28 <hts221_readArray>

	h_out = ((uint16_t)data[1]) << 8 | data[0];
 8001bc4:	7b7b      	ldrb	r3, [r7, #13]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	7b3b      	ldrb	r3, [r7, #12]
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	81fb      	strh	r3, [r7, #14]
	*out = (float)((h1_rh-h0_rh)*(h_out-h0_t0_out)/(float)(h1_t0_out-h0_t0_out)+h0_rh);
 8001bd2:	7d7a      	ldrb	r2, [r7, #21]
 8001bd4:	7dbb      	ldrb	r3, [r7, #22]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001bdc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001be0:	1a8a      	subs	r2, r1, r2
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	ee07 3a90 	vmov	s15, r3
 8001bea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001bf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c04:	7dbb      	ldrb	r3, [r7, #22]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	edc3 7a00 	vstr	s15, [r3]
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <hts221_get_temperature>:

void hts221_get_temperature(float* out) { //temperature measurement (°C)
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	int16_t t_out, t0_out, t1_out, t0_degc, t1_degc;

	uint8_t availability = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	75fb      	strb	r3, [r7, #23]
	availability = hts221_read_byte(HTS221_STATUS_REG);
 8001c2c:	2027      	movs	r0, #39	; 0x27
 8001c2e:	f000 f963 	bl	8001ef8 <hts221_read_byte>
 8001c32:	4603      	mov	r3, r0
 8001c34:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1);
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <hts221_get_temperature+0x3a>
		hts221_start_measurement();
 8001c44:	f7ff ff48 	bl	8001ad8 <hts221_start_measurement>
		availability = hts221_read_byte(HTS221_STATUS_REG);
 8001c48:	2027      	movs	r0, #39	; 0x27
 8001c4a:	f000 f955 	bl	8001ef8 <hts221_read_byte>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1);
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
	}

	uint8_t tmp = hts221_read_byte(HTS221_T0_T1_DEGC_MSB);
 8001c5a:	2035      	movs	r0, #53	; 0x35
 8001c5c:	f000 f94c 	bl	8001ef8 <hts221_read_byte>
 8001c60:	4603      	mov	r3, r0
 8001c62:	75bb      	strb	r3, [r7, #22]
	uint16_t tmp2;

	t0_degc = hts221_read_byte(HTS221_T0_DEGC);
 8001c64:	2032      	movs	r0, #50	; 0x32
 8001c66:	f000 f947 	bl	8001ef8 <hts221_read_byte>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	82bb      	strh	r3, [r7, #20]
	t1_degc = hts221_read_byte(HTS221_T1_DEGC);
 8001c6e:	2033      	movs	r0, #51	; 0x33
 8001c70:	f000 f942 	bl	8001ef8 <hts221_read_byte>
 8001c74:	4603      	mov	r3, r0
 8001c76:	827b      	strh	r3, [r7, #18]

	t0_degc += ((tmp & 0x3)<<8);
 8001c78:	7dbb      	ldrb	r3, [r7, #22]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	8abb      	ldrh	r3, [r7, #20]
 8001c86:	4413      	add	r3, r2
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	82bb      	strh	r3, [r7, #20]
	t0_degc /= 8;
 8001c8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da00      	bge.n	8001c96 <hts221_get_temperature+0x76>
 8001c94:	3307      	adds	r3, #7
 8001c96:	10db      	asrs	r3, r3, #3
 8001c98:	82bb      	strh	r3, [r7, #20]

	tmp2 = ((tmp & (0x3)<<2))<<6;
 8001c9a:	7dbb      	ldrb	r3, [r7, #22]
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca4:	823b      	strh	r3, [r7, #16]
	t1_degc += ((tmp & ((0x3)<<2))<<6);
 8001ca6:	7dbb      	ldrb	r3, [r7, #22]
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	8a7b      	ldrh	r3, [r7, #18]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	827b      	strh	r3, [r7, #18]
	t1_degc /= 8;
 8001cba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	da00      	bge.n	8001cc4 <hts221_get_temperature+0xa4>
 8001cc2:	3307      	adds	r3, #7
 8001cc4:	10db      	asrs	r3, r3, #3
 8001cc6:	827b      	strh	r3, [r7, #18]

	hts221_readArray(data, HTS221_T0_OUT, 2);
 8001cc8:	f107 0308 	add.w	r3, r7, #8
 8001ccc:	2202      	movs	r2, #2
 8001cce:	213c      	movs	r1, #60	; 0x3c
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 f929 	bl	8001f28 <hts221_readArray>
	t0_out = (((uint16_t)data[1]) << 8) | data[0];
 8001cd6:	7a7b      	ldrb	r3, [r7, #9]
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	7a3b      	ldrb	r3, [r7, #8]
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	81fb      	strh	r3, [r7, #14]
	hts221_readArray(data, HTS221_T1_OUT, 2);
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	2202      	movs	r2, #2
 8001cea:	213e      	movs	r1, #62	; 0x3e
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f91b 	bl	8001f28 <hts221_readArray>
	t1_out = (((uint16_t)data[1]) << 8) | data[0];
 8001cf2:	7a7b      	ldrb	r3, [r7, #9]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	7a3b      	ldrb	r3, [r7, #8]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	81bb      	strh	r3, [r7, #12]

	hts221_readArray(data, HTS221_TEMPERATURE_ADDR, 2);
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	2202      	movs	r2, #2
 8001d06:	212a      	movs	r1, #42	; 0x2a
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f90d 	bl	8001f28 <hts221_readArray>

	t_out = ((uint16_t)data[1]) << 8 | data[0];
 8001d0e:	7a7b      	ldrb	r3, [r7, #9]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	7a3b      	ldrb	r3, [r7, #8]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	817b      	strh	r3, [r7, #10]
	*out = (float)((t1_degc - t0_degc)*(t_out-t0_out)/(float)(t1_out-t0_out)+t0_degc);
 8001d1c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001d2a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d2e:	1a8a      	subs	r2, r1, r2
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d3c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	edc3 7a00 	vstr	s15, [r3]
}
 8001d68:	bf00      	nop
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <lps25hb_get_pressure>:

void lps25hb_get_pressure(float* out) { //pressure measurement (hPa = mBAR)
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pressure;// ref_pressure;

	uint8_t availability = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	75fb      	strb	r3, [r7, #23]
	availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001d7c:	2027      	movs	r0, #39	; 0x27
 8001d7e:	f000 f8a3 	bl	8001ec8 <lps25hb_read_byte>
 8001d82:	4603      	mov	r3, r0
 8001d84:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1)>>1;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10a      	bne.n	8001daa <lps25hb_get_pressure+0x3a>
		lps25hb_start_measurement();
 8001d94:	f7ff feb5 	bl	8001b02 <lps25hb_start_measurement>
		availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001d98:	2027      	movs	r0, #39	; 0x27
 8001d9a:	f000 f895 	bl	8001ec8 <lps25hb_read_byte>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1<<1);
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	75fb      	strb	r3, [r7, #23]
	}

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDR, 3);
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	2203      	movs	r2, #3
 8001db0:	2128      	movs	r1, #40	; 0x28
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f8cc 	bl	8001f50 <lps25hb_readArray>
	pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8001db8:	7bbb      	ldrb	r3, [r7, #14]
 8001dba:	041b      	lsls	r3, r3, #16
 8001dbc:	7b7a      	ldrb	r2, [r7, #13]
 8001dbe:	0212      	lsls	r2, r2, #8
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	7b3a      	ldrb	r2, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]

	/*lps25hb_readArray(data, LPS25HB_REF_PRESSURE_ADDR, 3);
	ref_pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];*/

	*out =  (float)(pressure)/(float)(4096);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dd2:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001de8 <lps25hb_get_pressure+0x78>
 8001dd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	45800000 	.word	0x45800000
 8001dec:	00000000 	.word	0x00000000

08001df0 <lps25hb_get_altitude>:

void lps25hb_get_altitude(float* out) { //altitude measurement (m.n.m./AMSL)
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	uint32_t pressure;

	uint8_t availability = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	75fb      	strb	r3, [r7, #23]
	availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001dfc:	2027      	movs	r0, #39	; 0x27
 8001dfe:	f000 f863 	bl	8001ec8 <lps25hb_read_byte>
 8001e02:	4603      	mov	r3, r0
 8001e04:	75fb      	strb	r3, [r7, #23]
	availability &= (uint8_t)(1<<1)>>1;
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	75fb      	strb	r3, [r7, #23]

	if (availability==0) { //waiting for reading availability
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10a      	bne.n	8001e2a <lps25hb_get_altitude+0x3a>
		lps25hb_start_measurement();
 8001e14:	f7ff fe75 	bl	8001b02 <lps25hb_start_measurement>
		availability = lps25hb_read_byte(LPS25HB_STATUS_REG);
 8001e18:	2027      	movs	r0, #39	; 0x27
 8001e1a:	f000 f855 	bl	8001ec8 <lps25hb_read_byte>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	75fb      	strb	r3, [r7, #23]
		availability &= (uint8_t)(1<<1);
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	75fb      	strb	r3, [r7, #23]
	}

	lps25hb_readArray(data, LPS25HB_PRESSURE_ADDR, 3);
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	2203      	movs	r2, #3
 8001e30:	2128      	movs	r1, #40	; 0x28
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f88c 	bl	8001f50 <lps25hb_readArray>
	pressure = ((uint32_t)data[2]) << 16 | ((uint16_t)data[1]) << 8 | data[0];
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	7b7a      	ldrb	r2, [r7, #13]
 8001e3e:	0212      	lsls	r2, r2, #8
 8001e40:	4313      	orrs	r3, r2
 8001e42:	7b3a      	ldrb	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

	*out = 44330*(1-pow((float)(pressure)/(float)(4096*1013.25f),(1/5.255f)));
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e52:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001ec0 <lps25hb_get_altitude+0xd0>
 8001e56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e5a:	ee16 0a90 	vmov	r0, s13
 8001e5e:	f7fe fb73 	bl	8000548 <__aeabi_f2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001eb0 <lps25hb_get_altitude+0xc0>
 8001e6a:	ec43 2b10 	vmov	d0, r2, r3
 8001e6e:	f006 fd33 	bl	80088d8 <pow>
 8001e72:	ec53 2b10 	vmov	r2, r3, d0
 8001e76:	f04f 0000 	mov.w	r0, #0
 8001e7a:	4912      	ldr	r1, [pc, #72]	; (8001ec4 <lps25hb_get_altitude+0xd4>)
 8001e7c:	f7fe fa04 	bl	8000288 <__aeabi_dsub>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	a30b      	add	r3, pc, #44	; (adr r3, 8001eb8 <lps25hb_get_altitude+0xc8>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe fbb3 	bl	80005f8 <__aeabi_dmul>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fea5 	bl	8000be8 <__aeabi_d2f>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	f3af 8000 	nop.w
 8001eb0:	c0000000 	.word	0xc0000000
 8001eb4:	3fc85b95 	.word	0x3fc85b95
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40e5a540 	.word	0x40e5a540
 8001ec0:	4a7d5000 	.word	0x4a7d5000
 8001ec4:	3ff00000 	.word	0x3ff00000

08001ec8 <lps25hb_read_byte>:

uint8_t lps25hb_read_byte(uint8_t reg_addr) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <lps25hb_read_byte+0x2c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, LPS25HB_DEVICE_ADDRESS, 0));
 8001ed8:	79fa      	ldrb	r2, [r7, #7]
 8001eda:	2300      	movs	r3, #0
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	23bb      	movs	r3, #187	; 0xbb
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <lps25hb_read_byte+0x2c>)
 8001ee4:	f7ff fd0e 	bl	8001904 <i2c_master_read>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	781b      	ldrb	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000212 	.word	0x20000212

08001ef8 <hts221_read_byte>:

uint8_t hts221_read_byte(uint8_t reg_addr) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <hts221_read_byte+0x2c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
	return *(i2c_master_read(&data, 1, reg_addr, HTS221_DEVICE_ADDRESS, 0));
 8001f08:	79fa      	ldrb	r2, [r7, #7]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	23be      	movs	r3, #190	; 0xbe
 8001f10:	2101      	movs	r1, #1
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <hts221_read_byte+0x2c>)
 8001f14:	f7ff fcf6 	bl	8001904 <i2c_master_read>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	781b      	ldrb	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000212 	.word	0x20000212

08001f28 <hts221_readArray>:
{
	i2c_master_read(data, length, reg, LSM6DS0_DEVICE_ADDRESS, 1);
}

void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	70fb      	strb	r3, [r7, #3]
 8001f34:	4613      	mov	r3, r2
 8001f36:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, HTS221_DEVICE_ADDRESS, 1);
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	78b9      	ldrb	r1, [r7, #2]
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	23be      	movs	r3, #190	; 0xbe
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fcde 	bl	8001904 <i2c_master_read>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <lps25hb_readArray>:

void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, LPS25HB_DEVICE_ADDRESS, 1);
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	78b9      	ldrb	r1, [r7, #2]
 8001f64:	2301      	movs	r3, #1
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	23bb      	movs	r3, #187	; 0xbb
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fcca 	bl	8001904 <i2c_master_read>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <hts221_write_byte>:
{
	i2c_master_write(value, reg_addr, LSM6DS0_DEVICE_ADDRESS, 0);
}

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460a      	mov	r2, r1
 8001f82:	71fb      	strb	r3, [r7, #7]
 8001f84:	4613      	mov	r3, r2
 8001f86:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, HTS221_DEVICE_ADDRESS, 0);
 8001f88:	79f9      	ldrb	r1, [r7, #7]
 8001f8a:	79b8      	ldrb	r0, [r7, #6]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	22be      	movs	r2, #190	; 0xbe
 8001f90:	f7ff fc74 	bl	800187c <i2c_master_write>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS25HB_DEVICE_ADDRESS, 0);
 8001fac:	79f9      	ldrb	r1, [r7, #7]
 8001fae:	79b8      	ldrb	r0, [r7, #6]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	22bb      	movs	r2, #187	; 0xbb
 8001fb4:	f7ff fc62 	bl	800187c <i2c_master_write>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <__NVIC_SetPriorityGrouping>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <LL_RCC_HSI_Enable+0x1c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <LL_RCC_HSI_Enable+0x1c>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000

08002028 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <LL_RCC_HSI_IsReady+0x20>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b02      	cmp	r3, #2
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40021000 	.word	0x40021000

0800204c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4904      	ldr	r1, [pc, #16]	; (8002074 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000

08002078 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <LL_RCC_SetSysClkSource+0x24>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 0203 	bic.w	r2, r3, #3
 8002088:	4904      	ldr	r1, [pc, #16]	; (800209c <LL_RCC_SetSysClkSource+0x24>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000

080020a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <LL_RCC_GetSysClkSource+0x18>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 030c 	and.w	r3, r3, #12
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000

080020bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020cc:	4904      	ldr	r1, [pc, #16]	; (80020e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40021000 	.word	0x40021000

080020e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f4:	4904      	ldr	r1, [pc, #16]	; (8002108 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40021000 	.word	0x40021000

0800210c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211c:	4904      	ldr	r1, [pc, #16]	; (8002130 <LL_RCC_SetAPB2Prescaler+0x24>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40021000 	.word	0x40021000

08002134 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <LL_RCC_SetI2CClockSource+0x2c>)
 800213e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0e1b      	lsrs	r3, r3, #24
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800214e:	4904      	ldr	r1, [pc, #16]	; (8002160 <LL_RCC_SetI2CClockSource+0x2c>)
 8002150:	4313      	orrs	r3, r2
 8002152:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40021000 	.word	0x40021000

08002164 <LL_APB1_GRP1_EnableClock>:
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <LL_APB1_GRP1_EnableClock+0x2c>)
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	4907      	ldr	r1, [pc, #28]	; (8002190 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <LL_APB1_GRP1_EnableClock+0x2c>)
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4013      	ands	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40021000 	.word	0x40021000

08002194 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40021000 	.word	0x40021000

080021c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <LL_FLASH_SetLatency+0x24>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 0207 	bic.w	r2, r3, #7
 80021d4:	4904      	ldr	r1, [pc, #16]	; (80021e8 <LL_FLASH_SetLatency+0x24>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40022000 	.word	0x40022000

080021ec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <LL_FLASH_GetLatency+0x18>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000

08002208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002210:	2001      	movs	r0, #1
 8002212:	f7ff ffbf 	bl	8002194 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002216:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800221a:	f7ff ffa3 	bl	8002164 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221e:	2003      	movs	r0, #3
 8002220:	f7ff fece 	bl	8001fc0 <__NVIC_SetPriorityGrouping>
  EXTI->RTSR &= ~(EXTI_IMR_MR4);
  EXTI->FTSR |= EXTI_IMR_MR4;*/
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002224:	f000 fa00 	bl	8002628 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Systick_Init();
 8002228:	f000 fd90 	bl	8002d4c <Systick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222c:	f7ff f870 	bl	8001310 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002230:	f7ff fab4 	bl	800179c <MX_I2C1_Init>
  MX_TIM3_Init();
 8002234:	f000 fd9c 	bl	8002d70 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  error = 0;
 8002238:	4ba0      	ldr	r3, [pc, #640]	; (80024bc <main+0x2b4>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
  if(!iks01a1_init()) error = 1;
 800223e:	f7ff fc0b 	bl	8001a58 <iks01a1_init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <main+0x46>
 8002248:	4b9c      	ldr	r3, [pc, #624]	; (80024bc <main+0x2b4>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]


  setSegments();
 800224e:	f7fe fd9b 	bl	8000d88 <setSegments>
  setDigits();
 8002252:	f7fe fde7 	bl	8000e24 <setDigits>
  LL_mDelay(2000);
 8002256:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800225a:	f001 feaf 	bl	8003fbc <LL_mDelay>
  resetDigits();
 800225e:	f7fe fdc1 	bl	8000de4 <resetDigits>
  resetSegments();
 8002262:	f7fe fd63 	bl	8000d2c <resetSegments>

  mode = 0;
 8002266:	4b96      	ldr	r3, [pc, #600]	; (80024c0 <main+0x2b8>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(error) {
 800226c:	4b93      	ldr	r3, [pc, #588]	; (80024bc <main+0x2b4>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00e      	beq.n	8002292 <main+0x8a>
		  strcpy(display_text,"I2C_who_am_I_error\0");
 8002274:	4a93      	ldr	r2, [pc, #588]	; (80024c4 <main+0x2bc>)
 8002276:	4b94      	ldr	r3, [pc, #592]	; (80024c8 <main+0x2c0>)
 8002278:	4615      	mov	r5, r2
 800227a:	461c      	mov	r4, r3
 800227c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227e:	6028      	str	r0, [r5, #0]
 8002280:	6069      	str	r1, [r5, #4]
 8002282:	60aa      	str	r2, [r5, #8]
 8002284:	60eb      	str	r3, [r5, #12]
 8002286:	8823      	ldrh	r3, [r4, #0]
 8002288:	78a2      	ldrb	r2, [r4, #2]
 800228a:	822b      	strh	r3, [r5, #16]
 800228c:	4613      	mov	r3, r2
 800228e:	74ab      	strb	r3, [r5, #18]
 8002290:	e168      	b.n	8002564 <main+0x35c>
	  } else {
		  hts221_start_measurement();
 8002292:	f7ff fc21 	bl	8001ad8 <hts221_start_measurement>
		  lps25hb_start_measurement();
 8002296:	f7ff fc34 	bl	8001b02 <lps25hb_start_measurement>
		  hts221_get_humidity(&humidity);
 800229a:	488c      	ldr	r0, [pc, #560]	; (80024cc <main+0x2c4>)
 800229c:	f7ff fc46 	bl	8001b2c <hts221_get_humidity>
		  hts221_get_temperature(&temperature);
 80022a0:	488b      	ldr	r0, [pc, #556]	; (80024d0 <main+0x2c8>)
 80022a2:	f7ff fcbd 	bl	8001c20 <hts221_get_temperature>
		  lps25hb_get_pressure(&pressure);
 80022a6:	488b      	ldr	r0, [pc, #556]	; (80024d4 <main+0x2cc>)
 80022a8:	f7ff fd62 	bl	8001d70 <lps25hb_get_pressure>
		  lps25hb_start_measurement();
 80022ac:	f7ff fc29 	bl	8001b02 <lps25hb_start_measurement>
		  lps25hb_get_altitude(&altitude);
 80022b0:	4889      	ldr	r0, [pc, #548]	; (80024d8 <main+0x2d0>)
 80022b2:	f7ff fd9d 	bl	8001df0 <lps25hb_get_altitude>

		  if (mode == 0) {
 80022b6:	4b82      	ldr	r3, [pc, #520]	; (80024c0 <main+0x2b8>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d14d      	bne.n	800235a <main+0x152>
			  if(temperature>=100){
 80022be:	4b84      	ldr	r3, [pc, #528]	; (80024d0 <main+0x2c8>)
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80024dc <main+0x2d4>
 80022c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	db02      	blt.n	80022d8 <main+0xd0>
				temperature=99.9;
 80022d2:	4b7f      	ldr	r3, [pc, #508]	; (80024d0 <main+0x2c8>)
 80022d4:	4a82      	ldr	r2, [pc, #520]	; (80024e0 <main+0x2d8>)
 80022d6:	601a      	str	r2, [r3, #0]
			  }
			  if(temperature<=-100){
 80022d8:	4b7d      	ldr	r3, [pc, #500]	; (80024d0 <main+0x2c8>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80024e4 <main+0x2dc>
 80022e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	d802      	bhi.n	80022f2 <main+0xea>
				temperature=-99.9;
 80022ec:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <main+0x2c8>)
 80022ee:	4a7e      	ldr	r2, [pc, #504]	; (80024e8 <main+0x2e0>)
 80022f0:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "TEMP_%2.1f", temperature);
 80022f2:	4b77      	ldr	r3, [pc, #476]	; (80024d0 <main+0x2c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f926 	bl	8000548 <__aeabi_f2d>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	497a      	ldr	r1, [pc, #488]	; (80024ec <main+0x2e4>)
 8002302:	4870      	ldr	r0, [pc, #448]	; (80024c4 <main+0x2bc>)
 8002304:	f002 fd42 	bl	8004d8c <siprintf>

		      for(int i=0; i<strlen(display_text); i++){
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e016      	b.n	800233c <main+0x134>
		          if(display_text[i]=='.'){
 800230e:	4a6d      	ldr	r2, [pc, #436]	; (80024c4 <main+0x2bc>)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b2e      	cmp	r3, #46	; 0x2e
 8002318:	d10d      	bne.n	8002336 <main+0x12e>
		              display_text[i] = display_text[i+1];
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3301      	adds	r3, #1
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <main+0x2bc>)
 8002320:	5cd1      	ldrb	r1, [r2, r3]
 8002322:	4a68      	ldr	r2, [pc, #416]	; (80024c4 <main+0x2bc>)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	460a      	mov	r2, r1
 800232a:	701a      	strb	r2, [r3, #0]
		              display_text[i+1] = '\0';
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3301      	adds	r3, #1
 8002330:	4a64      	ldr	r2, [pc, #400]	; (80024c4 <main+0x2bc>)
 8002332:	2100      	movs	r1, #0
 8002334:	54d1      	strb	r1, [r2, r3]
		      for(int i=0; i<strlen(display_text); i++){
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3301      	adds	r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4861      	ldr	r0, [pc, #388]	; (80024c4 <main+0x2bc>)
 800233e:	f7fd ff47 	bl	80001d0 <strlen>
 8002342:	4602      	mov	r2, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	429a      	cmp	r2, r3
 8002348:	d8e1      	bhi.n	800230e <main+0x106>
		          }
		      }
		      index_for_dot=strlen(display_text)-1;
 800234a:	485e      	ldr	r0, [pc, #376]	; (80024c4 <main+0x2bc>)
 800234c:	f7fd ff40 	bl	80001d0 <strlen>
 8002350:	4603      	mov	r3, r0
 8002352:	3b01      	subs	r3, #1
 8002354:	461a      	mov	r2, r3
 8002356:	4b66      	ldr	r3, [pc, #408]	; (80024f0 <main+0x2e8>)
 8002358:	601a      	str	r2, [r3, #0]
		   }

		   if (mode == 1){
 800235a:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <main+0x2b8>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d126      	bne.n	80023b0 <main+0x1a8>
			  if(humidity>=100){
 8002362:	4b5a      	ldr	r3, [pc, #360]	; (80024cc <main+0x2c4>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80024dc <main+0x2d4>
 800236c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	db02      	blt.n	800237c <main+0x174>
				humidity=99;
 8002376:	4b55      	ldr	r3, [pc, #340]	; (80024cc <main+0x2c4>)
 8002378:	4a5e      	ldr	r2, [pc, #376]	; (80024f4 <main+0x2ec>)
 800237a:	601a      	str	r2, [r3, #0]
			  }
			  if(humidity<0){
 800237c:	4b53      	ldr	r3, [pc, #332]	; (80024cc <main+0x2c4>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	d503      	bpl.n	8002394 <main+0x18c>
				humidity = 0;
 800238c:	4b4f      	ldr	r3, [pc, #316]	; (80024cc <main+0x2c4>)
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "HUM_%2.0f", humidity);
 8002394:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <main+0x2c4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8d5 	bl	8000548 <__aeabi_f2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4955      	ldr	r1, [pc, #340]	; (80024f8 <main+0x2f0>)
 80023a4:	4847      	ldr	r0, [pc, #284]	; (80024c4 <main+0x2bc>)
 80023a6:	f002 fcf1 	bl	8004d8c <siprintf>
			  index_for_dot=100;
 80023aa:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <main+0x2e8>)
 80023ac:	2264      	movs	r2, #100	; 0x64
 80023ae:	601a      	str	r2, [r3, #0]
		   }


		   if (mode == 2){
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <main+0x2b8>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d154      	bne.n	8002462 <main+0x25a>
			  if(pressure>=10000){
 80023b8:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <main+0x2cc>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80024fc <main+0x2f4>
 80023c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	db02      	blt.n	80023d2 <main+0x1ca>
				pressure=9999.99;
 80023cc:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <main+0x2cc>)
 80023ce:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <main+0x2f8>)
 80023d0:	601a      	str	r2, [r3, #0]
			  }
			  if(pressure<0){
 80023d2:	4b40      	ldr	r3, [pc, #256]	; (80024d4 <main+0x2cc>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e0:	d503      	bpl.n	80023ea <main+0x1e2>
				pressure = 0;
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <main+0x2cc>)
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "BAR_%4.2f", pressure);
 80023ea:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <main+0x2cc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f8aa 	bl	8000548 <__aeabi_f2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4942      	ldr	r1, [pc, #264]	; (8002504 <main+0x2fc>)
 80023fa:	4832      	ldr	r0, [pc, #200]	; (80024c4 <main+0x2bc>)
 80023fc:	f002 fcc6 	bl	8004d8c <siprintf>

		      for(int i=0; i<strlen(display_text); i++){
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	e01e      	b.n	8002444 <main+0x23c>
		          if(display_text[i]=='.'){
 8002406:	4a2f      	ldr	r2, [pc, #188]	; (80024c4 <main+0x2bc>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b2e      	cmp	r3, #46	; 0x2e
 8002410:	d115      	bne.n	800243e <main+0x236>
		              display_text[i] = display_text[i+1];
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	3301      	adds	r3, #1
 8002416:	4a2b      	ldr	r2, [pc, #172]	; (80024c4 <main+0x2bc>)
 8002418:	5cd1      	ldrb	r1, [r2, r3]
 800241a:	4a2a      	ldr	r2, [pc, #168]	; (80024c4 <main+0x2bc>)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4413      	add	r3, r2
 8002420:	460a      	mov	r2, r1
 8002422:	701a      	strb	r2, [r3, #0]
		              display_text[i+1] = display_text[i+2];
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	1c9a      	adds	r2, r3, #2
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	3301      	adds	r3, #1
 800242c:	4925      	ldr	r1, [pc, #148]	; (80024c4 <main+0x2bc>)
 800242e:	5c89      	ldrb	r1, [r1, r2]
 8002430:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <main+0x2bc>)
 8002432:	54d1      	strb	r1, [r2, r3]
		              display_text[i+2] = '\0';
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	3302      	adds	r3, #2
 8002438:	4a22      	ldr	r2, [pc, #136]	; (80024c4 <main+0x2bc>)
 800243a:	2100      	movs	r1, #0
 800243c:	54d1      	strb	r1, [r2, r3]
		      for(int i=0; i<strlen(display_text); i++){
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	3301      	adds	r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	481f      	ldr	r0, [pc, #124]	; (80024c4 <main+0x2bc>)
 8002446:	f7fd fec3 	bl	80001d0 <strlen>
 800244a:	4602      	mov	r2, r0
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	429a      	cmp	r2, r3
 8002450:	d8d9      	bhi.n	8002406 <main+0x1fe>
		          }
		      }
		      index_for_dot=strlen(display_text)-2;
 8002452:	481c      	ldr	r0, [pc, #112]	; (80024c4 <main+0x2bc>)
 8002454:	f7fd febc 	bl	80001d0 <strlen>
 8002458:	4603      	mov	r3, r0
 800245a:	3b02      	subs	r3, #2
 800245c:	461a      	mov	r2, r3
 800245e:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <main+0x2e8>)
 8002460:	601a      	str	r2, [r3, #0]
		   }

		   if(mode == 3){
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <main+0x2b8>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d17c      	bne.n	8002564 <main+0x35c>
			  if(altitude>=10000){
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <main+0x2d0>)
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80024fc <main+0x2f4>
 8002474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247c:	db02      	blt.n	8002484 <main+0x27c>
				altitude = 9999.9;
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <main+0x2d0>)
 8002480:	4a21      	ldr	r2, [pc, #132]	; (8002508 <main+0x300>)
 8002482:	601a      	str	r2, [r3, #0]
			  }
			  if(altitude<=-10000){
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <main+0x2d0>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800250c <main+0x304>
 800248e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	d802      	bhi.n	800249e <main+0x296>
				altitude = -9999.9;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <main+0x2d0>)
 800249a:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <main+0x308>)
 800249c:	601a      	str	r2, [r3, #0]
			  }
			  sprintf(display_text, "ALT_%4.1f", altitude);
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <main+0x2d0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f850 	bl	8000548 <__aeabi_f2d>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4919      	ldr	r1, [pc, #100]	; (8002514 <main+0x30c>)
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <main+0x2bc>)
 80024b0:	f002 fc6c 	bl	8004d8c <siprintf>

		      for(int i=0; i<strlen(display_text); i++){
 80024b4:	2300      	movs	r3, #0
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	e045      	b.n	8002546 <main+0x33e>
 80024ba:	bf00      	nop
 80024bc:	2000024c 	.word	0x2000024c
 80024c0:	20000244 	.word	0x20000244
 80024c4:	20000258 	.word	0x20000258
 80024c8:	08009848 	.word	0x08009848
 80024cc:	20000240 	.word	0x20000240
 80024d0:	20000238 	.word	0x20000238
 80024d4:	2000023c 	.word	0x2000023c
 80024d8:	20000248 	.word	0x20000248
 80024dc:	42c80000 	.word	0x42c80000
 80024e0:	42c7cccd 	.word	0x42c7cccd
 80024e4:	c2c80000 	.word	0xc2c80000
 80024e8:	c2c7cccd 	.word	0xc2c7cccd
 80024ec:	0800985c 	.word	0x0800985c
 80024f0:	20000218 	.word	0x20000218
 80024f4:	42c60000 	.word	0x42c60000
 80024f8:	08009868 	.word	0x08009868
 80024fc:	461c4000 	.word	0x461c4000
 8002500:	461c3ff6 	.word	0x461c3ff6
 8002504:	08009874 	.word	0x08009874
 8002508:	461c3f9a 	.word	0x461c3f9a
 800250c:	c61c4000 	.word	0xc61c4000
 8002510:	c61c3f9a 	.word	0xc61c3f9a
 8002514:	08009880 	.word	0x08009880
		          if(display_text[i]=='.'){
 8002518:	4a3d      	ldr	r2, [pc, #244]	; (8002610 <main+0x408>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b2e      	cmp	r3, #46	; 0x2e
 8002522:	d10d      	bne.n	8002540 <main+0x338>
		              display_text[i] = display_text[i+1];
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3301      	adds	r3, #1
 8002528:	4a39      	ldr	r2, [pc, #228]	; (8002610 <main+0x408>)
 800252a:	5cd1      	ldrb	r1, [r2, r3]
 800252c:	4a38      	ldr	r2, [pc, #224]	; (8002610 <main+0x408>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	460a      	mov	r2, r1
 8002534:	701a      	strb	r2, [r3, #0]
		              display_text[i+1] = '\0';
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3301      	adds	r3, #1
 800253a:	4a35      	ldr	r2, [pc, #212]	; (8002610 <main+0x408>)
 800253c:	2100      	movs	r1, #0
 800253e:	54d1      	strb	r1, [r2, r3]
		      for(int i=0; i<strlen(display_text); i++){
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3301      	adds	r3, #1
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	4832      	ldr	r0, [pc, #200]	; (8002610 <main+0x408>)
 8002548:	f7fd fe42 	bl	80001d0 <strlen>
 800254c:	4602      	mov	r2, r0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8e1      	bhi.n	8002518 <main+0x310>
		          }
		      }
		      index_for_dot=strlen(display_text)-1;
 8002554:	482e      	ldr	r0, [pc, #184]	; (8002610 <main+0x408>)
 8002556:	f7fd fe3b 	bl	80001d0 <strlen>
 800255a:	4603      	mov	r3, r0
 800255c:	3b01      	subs	r3, #1
 800255e:	461a      	mov	r2, r3
 8002560:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <main+0x40c>)
 8002562:	601a      	str	r2, [r3, #0]
		   }
	  }

	  if(disp_time > (saved_time + 500))
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <main+0x410>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f512 78fa 	adds.w	r8, r2, #500	; 0x1f4
 800256e:	f143 0900 	adc.w	r9, r3, #0
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <main+0x414>)
 8002574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002578:	4599      	cmp	r9, r3
 800257a:	bf08      	it	eq
 800257c:	4590      	cmpeq	r8, r2
 800257e:	f4bf ae75 	bcs.w	800226c <main+0x64>
	  	  {

	  		  display_sign(display_text[act_index],display_text[act_index+1],display_text[act_index+2],display_text[act_index+3],index_for_dot,act_index);
 8002582:	4b27      	ldr	r3, [pc, #156]	; (8002620 <main+0x418>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a22      	ldr	r2, [pc, #136]	; (8002610 <main+0x408>)
 8002588:	5cd0      	ldrb	r0, [r2, r3]
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <main+0x418>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <main+0x408>)
 8002592:	5cd1      	ldrb	r1, [r2, r3]
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <main+0x418>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3302      	adds	r3, #2
 800259a:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <main+0x408>)
 800259c:	5cd4      	ldrb	r4, [r2, r3]
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <main+0x418>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3303      	adds	r3, #3
 80025a4:	4a1a      	ldr	r2, [pc, #104]	; (8002610 <main+0x408>)
 80025a6:	5cd5      	ldrb	r5, [r2, r3]
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <main+0x40c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <main+0x418>)
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	9201      	str	r2, [sp, #4]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	462b      	mov	r3, r5
 80025b6:	4622      	mov	r2, r4
 80025b8:	f7fe fcf8 	bl	8000fac <display_sign>
	  	  	  saved_time = disp_time;
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <main+0x414>)
 80025be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c2:	4915      	ldr	r1, [pc, #84]	; (8002618 <main+0x410>)
 80025c4:	e9c1 2300 	strd	r2, r3, [r1]

	  	  	  if(right){ //urcovanie smeru
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <main+0x41c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <main+0x3d4>
	  	  		  act_index++;
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <main+0x418>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <main+0x418>)
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e004      	b.n	80025e6 <main+0x3de>
	  	  	  } else {
	  	  		  act_index--;
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <main+0x418>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	4a0f      	ldr	r2, [pc, #60]	; (8002620 <main+0x418>)
 80025e4:	6013      	str	r3, [r2, #0]
	  	  	  }
	  	  	  if(act_index == strlen(display_text)-4) {
 80025e6:	480a      	ldr	r0, [pc, #40]	; (8002610 <main+0x408>)
 80025e8:	f7fd fdf2 	bl	80001d0 <strlen>
 80025ec:	4603      	mov	r3, r0
 80025ee:	3b04      	subs	r3, #4
 80025f0:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <main+0x418>)
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d102      	bne.n	80025fe <main+0x3f6>
	  	  		  right = 0;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <main+0x41c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
	  	  	  }
	  	  	  if (act_index == 0){
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <main+0x418>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f47f ae32 	bne.w	800226c <main+0x64>
	  	  		  right = 1;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <main+0x41c>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]
	  if(error) {
 800260e:	e62d      	b.n	800226c <main+0x64>
 8002610:	20000258 	.word	0x20000258
 8002614:	20000218 	.word	0x20000218
 8002618:	20000250 	.word	0x20000250
 800261c:	20000200 	.word	0x20000200
 8002620:	20000214 	.word	0x20000214
 8002624:	20000000 	.word	0x20000000

08002628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff fdc9 	bl	80021c4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002632:	bf00      	nop
 8002634:	f7ff fdda 	bl	80021ec <LL_FLASH_GetLatency>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1fa      	bne.n	8002634 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800263e:	f7ff fce3 	bl	8002008 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002642:	bf00      	nop
 8002644:	f7ff fcf0 	bl	8002028 <LL_RCC_HSI_IsReady>
 8002648:	4603      	mov	r3, r0
 800264a:	2b01      	cmp	r3, #1
 800264c:	d1fa      	bne.n	8002644 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800264e:	2010      	movs	r0, #16
 8002650:	f7ff fcfc 	bl	800204c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002654:	2000      	movs	r0, #0
 8002656:	f7ff fd31 	bl	80020bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800265a:	2000      	movs	r0, #0
 800265c:	f7ff fd42 	bl	80020e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002660:	2000      	movs	r0, #0
 8002662:	f7ff fd53 	bl	800210c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff fd06 	bl	8002078 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800266c:	bf00      	nop
 800266e:	f7ff fd17 	bl	80020a0 <LL_RCC_GetSysClkSource>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1fa      	bne.n	800266e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8002678:	4805      	ldr	r0, [pc, #20]	; (8002690 <SystemClock_Config+0x68>)
 800267a:	f001 fc91 	bl	8003fa0 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800267e:	4804      	ldr	r0, [pc, #16]	; (8002690 <SystemClock_Config+0x68>)
 8002680:	f001 fcc2 	bl	8004008 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8002684:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002688:	f7ff fd54 	bl	8002134 <LL_RCC_SetI2CClockSource>
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	007a1200 	.word	0x007a1200

08002694 <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint16_t samples_window, uint16_t samples_required)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	70fb      	strb	r3, [r7, #3]
 80026a6:	460b      	mov	r3, r1
 80026a8:	70bb      	strb	r3, [r7, #2]
 80026aa:	4613      	mov	r3, r2
 80026ac:	803b      	strh	r3, [r7, #0]
	//type your code for "checkButtonState" implementation here:
	uint16_t detection = 0, timeout = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	81fb      	strh	r3, [r7, #14]
 80026b2:	2300      	movs	r3, #0
 80026b4:	81bb      	strh	r3, [r7, #12]
	while(timeout <= samples_window){ // cyklus bezi pokial nedocita potrebny pocet vzoriek a ak nahodou nastane detekcia funkcia sa ukonci a vrati 1
 80026b6:	e020      	b.n	80026fa <checkButtonState+0x66>
		uint8_t actual_value = BUTTON_READ_VALUE;
 80026b8:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <checkButtonState+0x90>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	72fb      	strb	r3, [r7, #11]
		if((actual_value && edge) || (!(actual_value) && !(edge))) {
 80026c4:	7afb      	ldrb	r3, [r7, #11]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <checkButtonState+0x3c>
 80026ca:	78bb      	ldrb	r3, [r7, #2]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <checkButtonState+0x48>
 80026d0:	7afb      	ldrb	r3, [r7, #11]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <checkButtonState+0x50>
 80026d6:	78bb      	ldrb	r3, [r7, #2]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <checkButtonState+0x50>
			detection++;
 80026dc:	89fb      	ldrh	r3, [r7, #14]
 80026de:	3301      	adds	r3, #1
 80026e0:	81fb      	strh	r3, [r7, #14]
 80026e2:	e001      	b.n	80026e8 <checkButtonState+0x54>
		}
		else{
			detection = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	81fb      	strh	r3, [r7, #14]
		}

		timeout++;
 80026e8:	89bb      	ldrh	r3, [r7, #12]
 80026ea:	3301      	adds	r3, #1
 80026ec:	81bb      	strh	r3, [r7, #12]

		if(detection == samples_required){
 80026ee:	89fa      	ldrh	r2, [r7, #14]
 80026f0:	8b3b      	ldrh	r3, [r7, #24]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d101      	bne.n	80026fa <checkButtonState+0x66>
			return 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00e      	b.n	8002718 <checkButtonState+0x84>
	while(timeout <= samples_window){ // cyklus bezi pokial nedocita potrebny pocet vzoriek a ak nahodou nastane detekcia funkcia sa ukonci a vrati 1
 80026fa:	89ba      	ldrh	r2, [r7, #12]
 80026fc:	883b      	ldrh	r3, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d9da      	bls.n	80026b8 <checkButtonState+0x24>
		}
	}
	if (((timeout > samples_window) && (detection != samples_required))){ //ak cyklus dobehol a nenapocitali sme dostatocny pocet vzoriek iducich po sebe vrati 0
 8002702:	89ba      	ldrh	r2, [r7, #12]
 8002704:	883b      	ldrh	r3, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d905      	bls.n	8002716 <checkButtonState+0x82>
 800270a:	89fa      	ldrh	r2, [r7, #14]
 800270c:	8b3b      	ldrh	r3, [r7, #24]
 800270e:	429a      	cmp	r2, r3
 8002710:	d001      	beq.n	8002716 <checkButtonState+0x82>
		return 0;
 8002712:	2300      	movs	r3, #0
 8002714:	e000      	b.n	8002718 <checkButtonState+0x84>
	}
	return 0;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	48000400 	.word	0x48000400

08002728 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	bf0c      	ite	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	2300      	movne	r3, #0
 8002742:	b2db      	uxtb	r3, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40010400 	.word	0x40010400

08002754 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6153      	str	r3, [r2, #20]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40010400 	.word	0x40010400

08002774 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f06f 0201 	mvn.w	r2, #1
 8002782:	611a      	str	r2, [r3, #16]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <NMI_Handler+0x4>

080027bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <HardFault_Handler+0x4>

080027c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <MemManage_Handler+0x4>

080027c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <BusFault_Handler+0x4>

080027ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <UsageFault_Handler+0x4>

080027d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */
	disp_time++;
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <SysTick_Handler+0x20>)
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	1c50      	adds	r0, r2, #1
 800280c:	f143 0100 	adc.w	r1, r3, #0
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <SysTick_Handler+0x20>)
 8002812:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	20000200 	.word	0x20000200

08002824 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET) {
 800282a:	2008      	movs	r0, #8
 800282c:	f7ff ff7c 	bl	8002728 <LL_EXTI_IsActiveFlag_0_31>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d022      	beq.n	800287c <EXTI3_IRQHandler+0x58>
		  if(checkButtonState(GPIOB,
 8002836:	f44f 7361 	mov.w	r3, #900	; 0x384
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002840:	2200      	movs	r2, #0
 8002842:	2103      	movs	r1, #3
 8002844:	480f      	ldr	r0, [pc, #60]	; (8002884 <EXTI3_IRQHandler+0x60>)
 8002846:	f7ff ff25 	bl	8002694 <checkButtonState>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d012      	beq.n	8002876 <EXTI3_IRQHandler+0x52>
							3,
							0,
							1000,
							900)) {
			  mode++;
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <EXTI3_IRQHandler+0x64>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	b2da      	uxtb	r2, r3
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <EXTI3_IRQHandler+0x64>)
 800285a:	701a      	strb	r2, [r3, #0]
			  if(mode >= 4) mode = 0;
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <EXTI3_IRQHandler+0x64>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d902      	bls.n	800286a <EXTI3_IRQHandler+0x46>
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <EXTI3_IRQHandler+0x64>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
			  act_index=0, right=1;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <EXTI3_IRQHandler+0x68>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <EXTI3_IRQHandler+0x6c>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

		  }
		  LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8002876:	2008      	movs	r0, #8
 8002878:	f7ff ff6c 	bl	8002754 <LL_EXTI_ClearFlag_0_31>
	  }
  /* USER CODE END EXTI3_IRQn 0 */
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	48000400 	.word	0x48000400
 8002888:	20000244 	.word	0x20000244
 800288c:	20000214 	.word	0x20000214
 8002890:	20000000 	.word	0x20000000

08002894 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8002898:	4806      	ldr	r0, [pc, #24]	; (80028b4 <TIM3_IRQHandler+0x20>)
 800289a:	f7ff ff79 	bl	8002790 <LL_TIM_IsActiveFlag_UPDATE>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <TIM3_IRQHandler+0x14>
		{
			updateDisplay();
 80028a4:	f7fe fbaa 	bl	8000ffc <updateDisplay>
		}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <TIM3_IRQHandler+0x20>)
 80028aa:	f7ff ff63 	bl	8002774 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40000400 	.word	0x40000400

080028b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C1_EV_IRQHandler_fun();
 80028bc:	f7ff f89c 	bl	80019f8 <I2C1_EV_IRQHandler_fun>
  /* USER CODE END I2C1_EV_IRQn 0 */
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
	return 1;
 80028c8:	2301      	movs	r3, #1
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_kill>:

int _kill(int pid, int sig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028de:	f001 fba3 	bl	8004028 <__errno>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2216      	movs	r2, #22
 80028e6:	601a      	str	r2, [r3, #0]
	return -1;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_exit>:

void _exit (int status)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ffe7 	bl	80028d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002906:	e7fe      	b.n	8002906 <_exit+0x12>

08002908 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e00a      	b.n	8002930 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800291a:	f3af 8000 	nop.w
 800291e:	4601      	mov	r1, r0
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	b2ca      	uxtb	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	dbf0      	blt.n	800291a <_read+0x12>
	}

return len;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e009      	b.n	8002968 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	60ba      	str	r2, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	dbf1      	blt.n	8002954 <_write+0x12>
	}
	return len;
 8002970:	687b      	ldr	r3, [r7, #4]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_close>:

int _close(int file)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	return -1;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a2:	605a      	str	r2, [r3, #4]
	return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_isatty>:

int _isatty(int file)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	return 1;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
	return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <_sbrk+0x5c>)
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <_sbrk+0x60>)
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <_sbrk+0x64>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <_sbrk+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a14:	f001 fb08 	bl	8004028 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e009      	b.n	8002a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <_sbrk+0x64>)
 8002a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20003000 	.word	0x20003000
 8002a44:	00000400 	.word	0x00000400
 8002a48:	2000021c 	.word	0x2000021c
 8002a4c:	200002d0 	.word	0x200002d0

08002a50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <SystemInit+0x20>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <SystemInit+0x20>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_GetPriorityGrouping>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4907      	ldr	r1, [pc, #28]	; (8002ac8 <__NVIC_EnableIRQ+0x38>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	; (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	; (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <LL_APB1_GRP1_EnableClock>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	4907      	ldr	r1, [pc, #28]	; (8002bb4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <LL_SYSTICK_EnableIT+0x1c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <LL_SYSTICK_EnableIT+0x1c>)
 8002bc2:	f043 0302 	orr.w	r3, r3, #2
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000e010 	.word	0xe000e010

08002bd8 <LL_TIM_EnableCounter>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	601a      	str	r2, [r3, #0]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_TIM_EnableARRPreload>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	601a      	str	r2, [r3, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_TIM_OC_DisableFast>:
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d028      	beq.n	8002c7a <LL_TIM_OC_DisableFast+0x62>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d023      	beq.n	8002c76 <LL_TIM_OC_DisableFast+0x5e>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d01e      	beq.n	8002c72 <LL_TIM_OC_DisableFast+0x5a>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d019      	beq.n	8002c6e <LL_TIM_OC_DisableFast+0x56>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c40:	d013      	beq.n	8002c6a <LL_TIM_OC_DisableFast+0x52>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c48:	d00d      	beq.n	8002c66 <LL_TIM_OC_DisableFast+0x4e>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c50:	d007      	beq.n	8002c62 <LL_TIM_OC_DisableFast+0x4a>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d101      	bne.n	8002c5e <LL_TIM_OC_DisableFast+0x46>
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	e00e      	b.n	8002c7c <LL_TIM_OC_DisableFast+0x64>
 8002c5e:	2308      	movs	r3, #8
 8002c60:	e00c      	b.n	8002c7c <LL_TIM_OC_DisableFast+0x64>
 8002c62:	2306      	movs	r3, #6
 8002c64:	e00a      	b.n	8002c7c <LL_TIM_OC_DisableFast+0x64>
 8002c66:	2305      	movs	r3, #5
 8002c68:	e008      	b.n	8002c7c <LL_TIM_OC_DisableFast+0x64>
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	e006      	b.n	8002c7c <LL_TIM_OC_DisableFast+0x64>
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e004      	b.n	8002c7c <LL_TIM_OC_DisableFast+0x64>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e002      	b.n	8002c7c <LL_TIM_OC_DisableFast+0x64>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <LL_TIM_OC_DisableFast+0x64>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3318      	adds	r3, #24
 8002c82:	4619      	mov	r1, r3
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	4a0b      	ldr	r2, [pc, #44]	; (8002cb4 <LL_TIM_OC_DisableFast+0x9c>)
 8002c88:	5cd3      	ldrb	r3, [r2, r3]
 8002c8a:	440b      	add	r3, r1
 8002c8c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <LL_TIM_OC_DisableFast+0xa0>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	408b      	lsls	r3, r1
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	080098d8 	.word	0x080098d8
 8002cb8:	080098e4 	.word	0x080098e4

08002cbc <LL_TIM_SetClockSource>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002cce:	f023 0307 	bic.w	r3, r3, #7
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_TIM_SetTriggerOutput>:
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	605a      	str	r2, [r3, #4]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_TIM_DisableMasterSlaveMode>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	60da      	str	r2, [r3, #12]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <Systick_Init>:

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void Systick_Init(void){
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <Systick_Init+0x20>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0; /* Load the SysTick Counter Value */
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <Systick_Init+0x20>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (SysTick_CTRL_TICKINT_Msk   |  /* Enable SysTick exception */
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <Systick_Init+0x20>)
 8002d5e:	2207      	movs	r2, #7
 8002d60:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_ENABLE_Msk) |    /* Enable SysTick system timer */
					 SysTick_CTRL_CLKSOURCE_Msk;   /* Use processor clock source */
	LL_SYSTICK_EnableIT();
 8002d62:	f7ff ff29 	bl	8002bb8 <LL_SYSTICK_EnableIT>
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	e000e010 	.word	0xe000e010

08002d70 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08e      	sub	sp, #56	; 0x38
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	60da      	str	r2, [r3, #12]
 8002d84:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	2220      	movs	r2, #32
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 f975 	bl	800407c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002d92:	2002      	movs	r0, #2
 8002d94:	f7ff fef8 	bl	8002b88 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002d98:	f7ff fe6c 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2200      	movs	r2, #0
 8002da0:	210f      	movs	r1, #15
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff febc 	bl	8002b20 <NVIC_EncodePriority>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4619      	mov	r1, r3
 8002dac:	201d      	movs	r0, #29
 8002dae:	f7ff fe8d 	bl	8002acc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002db2:	201d      	movs	r0, #29
 8002db4:	f7ff fe6c 	bl	8002a90 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8002db8:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002dbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;
 8002dc2:	2313      	movs	r3, #19
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4817      	ldr	r0, [pc, #92]	; (8002e30 <MX_TIM3_Init+0xc0>)
 8002dd2:	f000 fd61 	bl	8003898 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002dd6:	4816      	ldr	r0, [pc, #88]	; (8002e30 <MX_TIM3_Init+0xc0>)
 8002dd8:	f7ff ff0e 	bl	8002bf8 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4814      	ldr	r0, [pc, #80]	; (8002e30 <MX_TIM3_Init+0xc0>)
 8002de0:	f7ff ff6c 	bl	8002cbc <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002de4:	2310      	movs	r3, #16
 8002de6:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	480c      	ldr	r0, [pc, #48]	; (8002e30 <MX_TIM3_Init+0xc0>)
 8002e00:	f000 fdbc 	bl	800397c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002e04:	2101      	movs	r1, #1
 8002e06:	480a      	ldr	r0, [pc, #40]	; (8002e30 <MX_TIM3_Init+0xc0>)
 8002e08:	f7ff ff06 	bl	8002c18 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4808      	ldr	r0, [pc, #32]	; (8002e30 <MX_TIM3_Init+0xc0>)
 8002e10:	f7ff ff69 	bl	8002ce6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002e14:	4806      	ldr	r0, [pc, #24]	; (8002e30 <MX_TIM3_Init+0xc0>)
 8002e16:	f7ff ff79 	bl	8002d0c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM3);
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <MX_TIM3_Init+0xc0>)
 8002e1c:	f7ff ff86 	bl	8002d2c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002e20:	4803      	ldr	r0, [pc, #12]	; (8002e30 <MX_TIM3_Init+0xc0>)
 8002e22:	f7ff fed9 	bl	8002bd8 <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 8002e26:	bf00      	nop
 8002e28:	3738      	adds	r7, #56	; 0x38
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40000400 	.word	0x40000400

08002e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e38:	480d      	ldr	r0, [pc, #52]	; (8002e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e3a:	490e      	ldr	r1, [pc, #56]	; (8002e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e3c:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <LoopForever+0xe>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e40:	e002      	b.n	8002e48 <LoopCopyDataInit>

08002e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e46:	3304      	adds	r3, #4

08002e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e4c:	d3f9      	bcc.n	8002e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e50:	4c0b      	ldr	r4, [pc, #44]	; (8002e80 <LoopForever+0x16>)
  movs r3, #0
 8002e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e54:	e001      	b.n	8002e5a <LoopFillZerobss>

08002e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e58:	3204      	adds	r2, #4

08002e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e5c:	d3fb      	bcc.n	8002e56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e5e:	f7ff fdf7 	bl	8002a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e62:	f001 f8e7 	bl	8004034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e66:	f7ff f9cf 	bl	8002208 <main>

08002e6a <LoopForever>:

LoopForever:
    b LoopForever
 8002e6a:	e7fe      	b.n	8002e6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e6c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e74:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002e78:	08009df0 	.word	0x08009df0
  ldr r2, =_sbss
 8002e7c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002e80:	200002cc 	.word	0x200002cc

08002e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e84:	e7fe      	b.n	8002e84 <ADC1_2_IRQHandler>
	...

08002e88 <LL_EXTI_EnableIT_0_31>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	40010400 	.word	0x40010400

08002eac <LL_EXTI_EnableIT_32_63>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <LL_EXTI_EnableIT_32_63+0x20>)
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	4904      	ldr	r1, [pc, #16]	; (8002ecc <LL_EXTI_EnableIT_32_63+0x20>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	620b      	str	r3, [r1, #32]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <LL_EXTI_DisableIT_0_31>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <LL_EXTI_DisableIT_0_31+0x24>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	4904      	ldr	r1, [pc, #16]	; (8002ef4 <LL_EXTI_DisableIT_0_31+0x24>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40010400 	.word	0x40010400

08002ef8 <LL_EXTI_DisableIT_32_63>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <LL_EXTI_DisableIT_32_63+0x24>)
 8002f02:	6a1a      	ldr	r2, [r3, #32]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	4904      	ldr	r1, [pc, #16]	; (8002f1c <LL_EXTI_DisableIT_32_63+0x24>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	620b      	str	r3, [r1, #32]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40010400 	.word	0x40010400

08002f20 <LL_EXTI_EnableEvent_0_31>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	4904      	ldr	r1, [pc, #16]	; (8002f40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40010400 	.word	0x40010400

08002f44 <LL_EXTI_EnableEvent_32_63>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f50:	4904      	ldr	r1, [pc, #16]	; (8002f64 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40010400 	.word	0x40010400

08002f68 <LL_EXTI_DisableEvent_0_31>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	4904      	ldr	r1, [pc, #16]	; (8002f8c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010400 	.word	0x40010400

08002f90 <LL_EXTI_DisableEvent_32_63>:
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	4904      	ldr	r1, [pc, #16]	; (8002fb4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40010400 	.word	0x40010400

08002fb8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	608b      	str	r3, [r1, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	40010400 	.word	0x40010400

08002fdc <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fe8:	4904      	ldr	r1, [pc, #16]	; (8002ffc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40010400 	.word	0x40010400

08003000 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	43db      	mvns	r3, r3
 8003010:	4904      	ldr	r1, [pc, #16]	; (8003024 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003012:	4013      	ands	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40010400 	.word	0x40010400

08003028 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	43db      	mvns	r3, r3
 8003038:	4904      	ldr	r1, [pc, #16]	; (800304c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800303a:	4013      	ands	r3, r2
 800303c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40010400 	.word	0x40010400

08003050 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	4904      	ldr	r1, [pc, #16]	; (8003070 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4313      	orrs	r3, r2
 8003062:	60cb      	str	r3, [r1, #12]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40010400 	.word	0x40010400

08003074 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800307e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40010400 	.word	0x40010400

08003098 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	4904      	ldr	r1, [pc, #16]	; (80030bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	60cb      	str	r3, [r1, #12]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010400 	.word	0x40010400

080030c0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80030ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	4904      	ldr	r1, [pc, #16]	; (80030e4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40010400 	.word	0x40010400

080030e8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7a1b      	ldrb	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80cd 	beq.w	8003298 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d061      	beq.n	80031ca <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	7a5b      	ldrb	r3, [r3, #9]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d01c      	beq.n	8003148 <LL_EXTI_Init+0x60>
 800310e:	2b02      	cmp	r3, #2
 8003110:	dc25      	bgt.n	800315e <LL_EXTI_Init+0x76>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <LL_EXTI_Init+0x34>
 8003116:	2b01      	cmp	r3, #1
 8003118:	d00b      	beq.n	8003132 <LL_EXTI_Init+0x4a>
 800311a:	e020      	b.n	800315e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff21 	bl	8002f68 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff feac 	bl	8002e88 <LL_EXTI_EnableIT_0_31>
          break;
 8003130:	e018      	b.n	8003164 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff feca 	bl	8002ed0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff feed 	bl	8002f20 <LL_EXTI_EnableEvent_0_31>
          break;
 8003146:	e00d      	b.n	8003164 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fe9b 	bl	8002e88 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fee2 	bl	8002f20 <LL_EXTI_EnableEvent_0_31>
          break;
 800315c:	e002      	b.n	8003164 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
          break;
 8003162:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7a9b      	ldrb	r3, [r3, #10]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d02e      	beq.n	80031ca <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7a9b      	ldrb	r3, [r3, #10]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d01c      	beq.n	80031ae <LL_EXTI_Init+0xc6>
 8003174:	2b03      	cmp	r3, #3
 8003176:	dc25      	bgt.n	80031c4 <LL_EXTI_Init+0xdc>
 8003178:	2b01      	cmp	r3, #1
 800317a:	d002      	beq.n	8003182 <LL_EXTI_Init+0x9a>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d00b      	beq.n	8003198 <LL_EXTI_Init+0xb0>
 8003180:	e020      	b.n	80031c4 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff86 	bl	8003098 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff11 	bl	8002fb8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003196:	e019      	b.n	80031cc <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff2f 	bl	8003000 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff52 	bl	8003050 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80031ac:	e00e      	b.n	80031cc <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff00 	bl	8002fb8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff47 	bl	8003050 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80031c2:	e003      	b.n	80031cc <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
            break;
 80031c8:	e000      	b.n	80031cc <LL_EXTI_Init+0xe4>
        }
      }
 80031ca:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d076      	beq.n	80032c2 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	7a5b      	ldrb	r3, [r3, #9]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d01c      	beq.n	8003216 <LL_EXTI_Init+0x12e>
 80031dc:	2b02      	cmp	r3, #2
 80031de:	dc25      	bgt.n	800322c <LL_EXTI_Init+0x144>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <LL_EXTI_Init+0x102>
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d00b      	beq.n	8003200 <LL_EXTI_Init+0x118>
 80031e8:	e020      	b.n	800322c <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fece 	bl	8002f90 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fe57 	bl	8002eac <LL_EXTI_EnableIT_32_63>
          break;
 80031fe:	e018      	b.n	8003232 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fe77 	bl	8002ef8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fe98 	bl	8002f44 <LL_EXTI_EnableEvent_32_63>
          break;
 8003214:	e00d      	b.n	8003232 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fe46 	bl	8002eac <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fe8d 	bl	8002f44 <LL_EXTI_EnableEvent_32_63>
          break;
 800322a:	e002      	b.n	8003232 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
          break;
 8003230:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7a9b      	ldrb	r3, [r3, #10]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d043      	beq.n	80032c2 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7a9b      	ldrb	r3, [r3, #10]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d01c      	beq.n	800327c <LL_EXTI_Init+0x194>
 8003242:	2b03      	cmp	r3, #3
 8003244:	dc25      	bgt.n	8003292 <LL_EXTI_Init+0x1aa>
 8003246:	2b01      	cmp	r3, #1
 8003248:	d002      	beq.n	8003250 <LL_EXTI_Init+0x168>
 800324a:	2b02      	cmp	r3, #2
 800324c:	d00b      	beq.n	8003266 <LL_EXTI_Init+0x17e>
 800324e:	e020      	b.n	8003292 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff33 	bl	80030c0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff febc 	bl	8002fdc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8003264:	e02e      	b.n	80032c4 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fedc 	bl	8003028 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fefd 	bl	8003074 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800327a:	e023      	b.n	80032c4 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff feab 	bl	8002fdc <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fef2 	bl	8003074 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003290:	e018      	b.n	80032c4 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
            break;
 8003296:	e015      	b.n	80032c4 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fe17 	bl	8002ed0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fe5e 	bl	8002f68 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fe21 	bl	8002ef8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fe68 	bl	8002f90 <LL_EXTI_DisableEvent_32_63>
 80032c0:	e000      	b.n	80032c4 <LL_EXTI_Init+0x1dc>
      }
 80032c2:	bf00      	nop
#endif
  }
  return status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <LL_GPIO_SetPinMode>:
{
 80032ce:	b480      	push	{r7}
 80032d0:	b089      	sub	sp, #36	; 0x24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	613b      	str	r3, [r7, #16]
  return result;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	2103      	movs	r1, #3
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	401a      	ands	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	61bb      	str	r3, [r7, #24]
  return result;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	431a      	orrs	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	601a      	str	r2, [r3, #0]
}
 8003320:	bf00      	nop
 8003322:	3724      	adds	r7, #36	; 0x24
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_GPIO_SetPinOutputType>:
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	43db      	mvns	r3, r3
 8003340:	401a      	ands	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	431a      	orrs	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	605a      	str	r2, [r3, #4]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_GPIO_SetPinSpeed>:
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	; 0x24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	613b      	str	r3, [r7, #16]
  return result;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2103      	movs	r1, #3
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	401a      	ands	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	61bb      	str	r3, [r7, #24]
  return result;
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	609a      	str	r2, [r3, #8]
}
 80033ae:	bf00      	nop
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <LL_GPIO_SetPinPull>:
{
 80033ba:	b480      	push	{r7}
 80033bc:	b089      	sub	sp, #36	; 0x24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	613b      	str	r3, [r7, #16]
  return result;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	2103      	movs	r1, #3
 80033e2:	fa01 f303 	lsl.w	r3, r1, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	401a      	ands	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	61bb      	str	r3, [r7, #24]
  return result;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	431a      	orrs	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	60da      	str	r2, [r3, #12]
}
 800340c:	bf00      	nop
 800340e:	3724      	adds	r7, #36	; 0x24
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_GPIO_SetAFPin_0_7>:
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1a      	ldr	r2, [r3, #32]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	613b      	str	r3, [r7, #16]
  return result;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	210f      	movs	r1, #15
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	401a      	ands	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	61bb      	str	r3, [r7, #24]
  return result;
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	3724      	adds	r7, #36	; 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <LL_GPIO_SetAFPin_8_15>:
{
 8003476:	b480      	push	{r7}
 8003478:	b089      	sub	sp, #36	; 0x24
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	613b      	str	r3, [r7, #16]
  return result;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	210f      	movs	r1, #15
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	401a      	ands	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	61bb      	str	r3, [r7, #24]
  return result;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	fab3 f383 	clz	r3, r3
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	431a      	orrs	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80034cc:	bf00      	nop
 80034ce:	3724      	adds	r7, #36	; 0x24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	613b      	str	r3, [r7, #16]
  return result;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80034fa:	e051      	b.n	80035a0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d043      	beq.n	800359a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d003      	beq.n	8003522 <LL_GPIO_Init+0x4a>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d10e      	bne.n	8003540 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	461a      	mov	r2, r3
 8003528:	69b9      	ldr	r1, [r7, #24]
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ff16 	bl	800335c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6819      	ldr	r1, [r3, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	461a      	mov	r2, r3
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff fef6 	bl	800332c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	461a      	mov	r2, r3
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff ff36 	bl	80033ba <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d11a      	bne.n	800358c <LL_GPIO_Init+0xb4>
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	60bb      	str	r3, [r7, #8]
  return result;
 8003562:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b07      	cmp	r3, #7
 800356c:	d807      	bhi.n	800357e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	461a      	mov	r2, r3
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ff4e 	bl	8003418 <LL_GPIO_SetAFPin_0_7>
 800357c:	e006      	b.n	800358c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	461a      	mov	r2, r3
 8003584:	69b9      	ldr	r1, [r7, #24]
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ff75 	bl	8003476 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	461a      	mov	r2, r3
 8003592:	69b9      	ldr	r1, [r7, #24]
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fe9a 	bl	80032ce <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3301      	adds	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	fa22 f303 	lsr.w	r3, r2, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1a6      	bne.n	80034fc <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <LL_I2C_Enable>:
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f043 0201 	orr.w	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	601a      	str	r2, [r3, #0]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_I2C_Disable>:
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 0201 	bic.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <LL_I2C_ConfigFilters>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	0219      	lsls	r1, r3, #8
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	430b      	orrs	r3, r1
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	601a      	str	r2, [r3, #0]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <LL_I2C_SetOwnAddress1>:
{
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800363a:	f023 0307 	bic.w	r3, r3, #7
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	430a      	orrs	r2, r1
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	609a      	str	r2, [r3, #8]
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_I2C_EnableOwnAddress1>:
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	609a      	str	r2, [r3, #8]
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <LL_I2C_DisableOwnAddress1>:
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	609a      	str	r2, [r3, #8]
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_I2C_SetTiming>:
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	611a      	str	r2, [r3, #16]
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <LL_I2C_SetMode>:
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	601a      	str	r2, [r3, #0]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_I2C_AcknowledgeNextData>:
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	605a      	str	r2, [r3, #4]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ff65 	bl	80035d8 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	461a      	mov	r2, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff6d 	bl	80035f8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4619      	mov	r1, r3
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ffb6 	bl	8003696 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ff44 	bl	80035b8 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ffa0 	bl	8003676 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6919      	ldr	r1, [r3, #16]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	461a      	mov	r2, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff70 	bl	8003626 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff81 	bl	8003656 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ffa9 	bl	80036b2 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ffb6 	bl	80036d8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <LL_TIM_SetPrescaler>:
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <LL_TIM_SetAutoReload>:
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_TIM_SetRepetitionCounter>:
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <LL_TIM_OC_SetCompareCH1>:
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LL_TIM_OC_SetCompareCH2>:
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <LL_TIM_OC_SetCompareCH3>:
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_TIM_OC_SetCompareCH4>:
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_TIM_OC_SetCompareCH5>:
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	659a      	str	r2, [r3, #88]	; 0x58
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_TIM_OC_SetCompareCH6>:
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f043 0201 	orr.w	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	615a      	str	r2, [r3, #20]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a2f      	ldr	r2, [pc, #188]	; (8003968 <LL_TIM_Init+0xd0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d007      	beq.n	80038c0 <LL_TIM_Init+0x28>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b6:	d003      	beq.n	80038c0 <LL_TIM_Init+0x28>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a2c      	ldr	r2, [pc, #176]	; (800396c <LL_TIM_Init+0xd4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d106      	bne.n	80038ce <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a25      	ldr	r2, [pc, #148]	; (8003968 <LL_TIM_Init+0xd0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <LL_TIM_Init+0x66>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038dc:	d00f      	beq.n	80038fe <LL_TIM_Init+0x66>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a22      	ldr	r2, [pc, #136]	; (800396c <LL_TIM_Init+0xd4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00b      	beq.n	80038fe <LL_TIM_Init+0x66>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a21      	ldr	r2, [pc, #132]	; (8003970 <LL_TIM_Init+0xd8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <LL_TIM_Init+0x66>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a20      	ldr	r2, [pc, #128]	; (8003974 <LL_TIM_Init+0xdc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <LL_TIM_Init+0x66>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a1f      	ldr	r2, [pc, #124]	; (8003978 <LL_TIM_Init+0xe0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d106      	bne.n	800390c <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ff3a 	bl	8003792 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ff26 	bl	8003776 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a0e      	ldr	r2, [pc, #56]	; (8003968 <LL_TIM_Init+0xd0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00b      	beq.n	800394a <LL_TIM_Init+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a0e      	ldr	r2, [pc, #56]	; (8003970 <LL_TIM_Init+0xd8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <LL_TIM_Init+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <LL_TIM_Init+0xdc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <LL_TIM_Init+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a0c      	ldr	r2, [pc, #48]	; (8003978 <LL_TIM_Init+0xe0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d105      	bne.n	8003956 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff2c 	bl	80037ae <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ff8d 	bl	8003876 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40000400 	.word	0x40000400
 8003970:	40014000 	.word	0x40014000
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800

0800397c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003992:	d045      	beq.n	8003a20 <LL_TIM_OC_Init+0xa4>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399a:	d848      	bhi.n	8003a2e <LL_TIM_OC_Init+0xb2>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a2:	d036      	beq.n	8003a12 <LL_TIM_OC_Init+0x96>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039aa:	d840      	bhi.n	8003a2e <LL_TIM_OC_Init+0xb2>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b2:	d027      	beq.n	8003a04 <LL_TIM_OC_Init+0x88>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ba:	d838      	bhi.n	8003a2e <LL_TIM_OC_Init+0xb2>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c2:	d018      	beq.n	80039f6 <LL_TIM_OC_Init+0x7a>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ca:	d830      	bhi.n	8003a2e <LL_TIM_OC_Init+0xb2>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d003      	beq.n	80039da <LL_TIM_OC_Init+0x5e>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d007      	beq.n	80039e8 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80039d8:	e029      	b.n	8003a2e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f82d 	bl	8003a3c <OC1Config>
 80039e2:	4603      	mov	r3, r0
 80039e4:	75fb      	strb	r3, [r7, #23]
      break;
 80039e6:	e023      	b.n	8003a30 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f8a0 	bl	8003b30 <OC2Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	75fb      	strb	r3, [r7, #23]
      break;
 80039f4:	e01c      	b.n	8003a30 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f917 	bl	8003c2c <OC3Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]
      break;
 8003a02:	e015      	b.n	8003a30 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f98e 	bl	8003d28 <OC4Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a10:	e00e      	b.n	8003a30 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f9ed 	bl	8003df4 <OC5Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1e:	e007      	b.n	8003a30 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fa44 	bl	8003eb0 <OC6Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2c:	e000      	b.n	8003a30 <LL_TIM_OC_Init+0xb4>
      break;
 8003a2e:	bf00      	nop
  }

  return result;
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f023 0201 	bic.w	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f023 0202 	bic.w	r2, r3, #2
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f023 0201 	bic.w	r2, r3, #1
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <OC1Config+0xe4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <OC1Config+0x7e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <OC1Config+0xe8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <OC1Config+0x7e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <OC1Config+0xec>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <OC1Config+0x7e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <OC1Config+0xf0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d11e      	bne.n	8003af8 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 0208 	bic.w	r2, r3, #8
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 0204 	bic.w	r2, r3, #4
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fe5d 	bl	80037ca <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40014000 	.word	0x40014000
 8003b28:	40014400 	.word	0x40014400
 8003b2c:	40014800 	.word	0x40014800

08003b30 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f023 0210 	bic.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	0212      	lsls	r2, r2, #8
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0220 	bic.w	r2, r3, #32
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f023 0210 	bic.w	r2, r3, #16
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <OC2Config+0xec>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d00b      	beq.n	8003bb4 <OC2Config+0x84>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <OC2Config+0xf0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d007      	beq.n	8003bb4 <OC2Config+0x84>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <OC2Config+0xf4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <OC2Config+0x84>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <OC2Config+0xf8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d11f      	bne.n	8003bf4 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	019b      	lsls	r3, r3, #6
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	019b      	lsls	r3, r3, #6
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4619      	mov	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff fded 	bl	80037e6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40014000 	.word	0x40014000
 8003c24:	40014400 	.word	0x40014400
 8003c28:	40014800 	.word	0x40014800

08003c2c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <OC3Config+0xec>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00b      	beq.n	8003cae <OC3Config+0x82>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <OC3Config+0xf0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <OC3Config+0x82>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <OC3Config+0xf4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <OC3Config+0x82>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a1e      	ldr	r2, [pc, #120]	; (8003d24 <OC3Config+0xf8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d11f      	bne.n	8003cee <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	029b      	lsls	r3, r3, #10
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	029b      	lsls	r3, r3, #10
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	015b      	lsls	r3, r3, #5
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff fd7e 	bl	8003802 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40012c00 	.word	0x40012c00
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	40014400 	.word	0x40014400
 8003d24:	40014800 	.word	0x40014800

08003d28 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	0212      	lsls	r2, r2, #8
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	031b      	lsls	r3, r3, #12
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	031b      	lsls	r3, r3, #12
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <OC4Config+0xbc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00b      	beq.n	8003dac <OC4Config+0x84>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <OC4Config+0xc0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <OC4Config+0x84>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a13      	ldr	r2, [pc, #76]	; (8003dec <OC4Config+0xc4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <OC4Config+0x84>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <OC4Config+0xc8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d107      	bne.n	8003dbc <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	019b      	lsls	r3, r3, #6
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fd25 	bl	800381e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40014000 	.word	0x40014000
 8003dec:	40014400 	.word	0x40014400
 8003df0:	40014800 	.word	0x40014800

08003df4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	041b      	lsls	r3, r3, #16
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a15      	ldr	r2, [pc, #84]	; (8003ea0 <OC5Config+0xac>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <OC5Config+0x74>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <OC5Config+0xb0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <OC5Config+0x74>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <OC5Config+0xb4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <OC5Config+0x74>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a12      	ldr	r2, [pc, #72]	; (8003eac <OC5Config+0xb8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d109      	bne.n	8003e7c <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	021b      	lsls	r3, r3, #8
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff fcd6 	bl	800383a <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800

08003eb0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	0212      	lsls	r2, r2, #8
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	051b      	lsls	r3, r3, #20
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	051b      	lsls	r3, r3, #20
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <OC6Config+0xac>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <OC6Config+0x76>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <OC6Config+0xb0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <OC6Config+0x76>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <OC6Config+0xb4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <OC6Config+0x76>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <OC6Config+0xb8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d109      	bne.n	8003f3a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	029b      	lsls	r3, r3, #10
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fc87 	bl	800385a <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40014000 	.word	0x40014000
 8003f64:	40014400 	.word	0x40014400
 8003f68:	40014800 	.word	0x40014800

08003f6c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7e:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <LL_InitTick+0x30>)
 8003f80:	3b01      	subs	r3, #1
 8003f82:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <LL_InitTick+0x30>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f8a:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <LL_InitTick+0x30>)
 8003f8c:	2205      	movs	r2, #5
 8003f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	e000e010 	.word	0xe000e010

08003fa0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003fa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ffdd 	bl	8003f6c <LL_InitTick>
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <LL_mDelay+0x48>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003fca:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d00c      	beq.n	8003fee <LL_mDelay+0x32>
  {
    Delay++;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003fda:	e008      	b.n	8003fee <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003fdc:	4b09      	ldr	r3, [pc, #36]	; (8004004 <LL_mDelay+0x48>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <LL_mDelay+0x32>
    {
      Delay--;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f3      	bne.n	8003fdc <LL_mDelay+0x20>
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000e010 	.word	0xe000e010

08004008 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004010:	4a04      	ldr	r2, [pc, #16]	; (8004024 <LL_SetSystemCoreClock+0x1c>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6013      	str	r3, [r2, #0]
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20000004 	.word	0x20000004

08004028 <__errno>:
 8004028:	4b01      	ldr	r3, [pc, #4]	; (8004030 <__errno+0x8>)
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20000008 	.word	0x20000008

08004034 <__libc_init_array>:
 8004034:	b570      	push	{r4, r5, r6, lr}
 8004036:	4d0d      	ldr	r5, [pc, #52]	; (800406c <__libc_init_array+0x38>)
 8004038:	4c0d      	ldr	r4, [pc, #52]	; (8004070 <__libc_init_array+0x3c>)
 800403a:	1b64      	subs	r4, r4, r5
 800403c:	10a4      	asrs	r4, r4, #2
 800403e:	2600      	movs	r6, #0
 8004040:	42a6      	cmp	r6, r4
 8004042:	d109      	bne.n	8004058 <__libc_init_array+0x24>
 8004044:	4d0b      	ldr	r5, [pc, #44]	; (8004074 <__libc_init_array+0x40>)
 8004046:	4c0c      	ldr	r4, [pc, #48]	; (8004078 <__libc_init_array+0x44>)
 8004048:	f005 fbf0 	bl	800982c <_init>
 800404c:	1b64      	subs	r4, r4, r5
 800404e:	10a4      	asrs	r4, r4, #2
 8004050:	2600      	movs	r6, #0
 8004052:	42a6      	cmp	r6, r4
 8004054:	d105      	bne.n	8004062 <__libc_init_array+0x2e>
 8004056:	bd70      	pop	{r4, r5, r6, pc}
 8004058:	f855 3b04 	ldr.w	r3, [r5], #4
 800405c:	4798      	blx	r3
 800405e:	3601      	adds	r6, #1
 8004060:	e7ee      	b.n	8004040 <__libc_init_array+0xc>
 8004062:	f855 3b04 	ldr.w	r3, [r5], #4
 8004066:	4798      	blx	r3
 8004068:	3601      	adds	r6, #1
 800406a:	e7f2      	b.n	8004052 <__libc_init_array+0x1e>
 800406c:	08009de8 	.word	0x08009de8
 8004070:	08009de8 	.word	0x08009de8
 8004074:	08009de8 	.word	0x08009de8
 8004078:	08009dec 	.word	0x08009dec

0800407c <memset>:
 800407c:	4402      	add	r2, r0
 800407e:	4603      	mov	r3, r0
 8004080:	4293      	cmp	r3, r2
 8004082:	d100      	bne.n	8004086 <memset+0xa>
 8004084:	4770      	bx	lr
 8004086:	f803 1b01 	strb.w	r1, [r3], #1
 800408a:	e7f9      	b.n	8004080 <memset+0x4>

0800408c <__cvt>:
 800408c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	ec55 4b10 	vmov	r4, r5, d0
 8004094:	2d00      	cmp	r5, #0
 8004096:	460e      	mov	r6, r1
 8004098:	4619      	mov	r1, r3
 800409a:	462b      	mov	r3, r5
 800409c:	bfbb      	ittet	lt
 800409e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040a2:	461d      	movlt	r5, r3
 80040a4:	2300      	movge	r3, #0
 80040a6:	232d      	movlt	r3, #45	; 0x2d
 80040a8:	700b      	strb	r3, [r1, #0]
 80040aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80040b0:	4691      	mov	r9, r2
 80040b2:	f023 0820 	bic.w	r8, r3, #32
 80040b6:	bfbc      	itt	lt
 80040b8:	4622      	movlt	r2, r4
 80040ba:	4614      	movlt	r4, r2
 80040bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040c0:	d005      	beq.n	80040ce <__cvt+0x42>
 80040c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040c6:	d100      	bne.n	80040ca <__cvt+0x3e>
 80040c8:	3601      	adds	r6, #1
 80040ca:	2102      	movs	r1, #2
 80040cc:	e000      	b.n	80040d0 <__cvt+0x44>
 80040ce:	2103      	movs	r1, #3
 80040d0:	ab03      	add	r3, sp, #12
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	ab02      	add	r3, sp, #8
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	ec45 4b10 	vmov	d0, r4, r5
 80040dc:	4653      	mov	r3, sl
 80040de:	4632      	mov	r2, r6
 80040e0:	f001 fdb6 	bl	8005c50 <_dtoa_r>
 80040e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040e8:	4607      	mov	r7, r0
 80040ea:	d102      	bne.n	80040f2 <__cvt+0x66>
 80040ec:	f019 0f01 	tst.w	r9, #1
 80040f0:	d022      	beq.n	8004138 <__cvt+0xac>
 80040f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040f6:	eb07 0906 	add.w	r9, r7, r6
 80040fa:	d110      	bne.n	800411e <__cvt+0x92>
 80040fc:	783b      	ldrb	r3, [r7, #0]
 80040fe:	2b30      	cmp	r3, #48	; 0x30
 8004100:	d10a      	bne.n	8004118 <__cvt+0x8c>
 8004102:	2200      	movs	r2, #0
 8004104:	2300      	movs	r3, #0
 8004106:	4620      	mov	r0, r4
 8004108:	4629      	mov	r1, r5
 800410a:	f7fc fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800410e:	b918      	cbnz	r0, 8004118 <__cvt+0x8c>
 8004110:	f1c6 0601 	rsb	r6, r6, #1
 8004114:	f8ca 6000 	str.w	r6, [sl]
 8004118:	f8da 3000 	ldr.w	r3, [sl]
 800411c:	4499      	add	r9, r3
 800411e:	2200      	movs	r2, #0
 8004120:	2300      	movs	r3, #0
 8004122:	4620      	mov	r0, r4
 8004124:	4629      	mov	r1, r5
 8004126:	f7fc fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 800412a:	b108      	cbz	r0, 8004130 <__cvt+0xa4>
 800412c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004130:	2230      	movs	r2, #48	; 0x30
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	454b      	cmp	r3, r9
 8004136:	d307      	bcc.n	8004148 <__cvt+0xbc>
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800413c:	1bdb      	subs	r3, r3, r7
 800413e:	4638      	mov	r0, r7
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	b004      	add	sp, #16
 8004144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004148:	1c59      	adds	r1, r3, #1
 800414a:	9103      	str	r1, [sp, #12]
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e7f0      	b.n	8004132 <__cvt+0xa6>

08004150 <__exponent>:
 8004150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004152:	4603      	mov	r3, r0
 8004154:	2900      	cmp	r1, #0
 8004156:	bfb8      	it	lt
 8004158:	4249      	neglt	r1, r1
 800415a:	f803 2b02 	strb.w	r2, [r3], #2
 800415e:	bfb4      	ite	lt
 8004160:	222d      	movlt	r2, #45	; 0x2d
 8004162:	222b      	movge	r2, #43	; 0x2b
 8004164:	2909      	cmp	r1, #9
 8004166:	7042      	strb	r2, [r0, #1]
 8004168:	dd2a      	ble.n	80041c0 <__exponent+0x70>
 800416a:	f10d 0407 	add.w	r4, sp, #7
 800416e:	46a4      	mov	ip, r4
 8004170:	270a      	movs	r7, #10
 8004172:	46a6      	mov	lr, r4
 8004174:	460a      	mov	r2, r1
 8004176:	fb91 f6f7 	sdiv	r6, r1, r7
 800417a:	fb07 1516 	mls	r5, r7, r6, r1
 800417e:	3530      	adds	r5, #48	; 0x30
 8004180:	2a63      	cmp	r2, #99	; 0x63
 8004182:	f104 34ff 	add.w	r4, r4, #4294967295
 8004186:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800418a:	4631      	mov	r1, r6
 800418c:	dcf1      	bgt.n	8004172 <__exponent+0x22>
 800418e:	3130      	adds	r1, #48	; 0x30
 8004190:	f1ae 0502 	sub.w	r5, lr, #2
 8004194:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004198:	1c44      	adds	r4, r0, #1
 800419a:	4629      	mov	r1, r5
 800419c:	4561      	cmp	r1, ip
 800419e:	d30a      	bcc.n	80041b6 <__exponent+0x66>
 80041a0:	f10d 0209 	add.w	r2, sp, #9
 80041a4:	eba2 020e 	sub.w	r2, r2, lr
 80041a8:	4565      	cmp	r5, ip
 80041aa:	bf88      	it	hi
 80041ac:	2200      	movhi	r2, #0
 80041ae:	4413      	add	r3, r2
 80041b0:	1a18      	subs	r0, r3, r0
 80041b2:	b003      	add	sp, #12
 80041b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041be:	e7ed      	b.n	800419c <__exponent+0x4c>
 80041c0:	2330      	movs	r3, #48	; 0x30
 80041c2:	3130      	adds	r1, #48	; 0x30
 80041c4:	7083      	strb	r3, [r0, #2]
 80041c6:	70c1      	strb	r1, [r0, #3]
 80041c8:	1d03      	adds	r3, r0, #4
 80041ca:	e7f1      	b.n	80041b0 <__exponent+0x60>

080041cc <_printf_float>:
 80041cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d0:	ed2d 8b02 	vpush	{d8}
 80041d4:	b08d      	sub	sp, #52	; 0x34
 80041d6:	460c      	mov	r4, r1
 80041d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80041dc:	4616      	mov	r6, r2
 80041de:	461f      	mov	r7, r3
 80041e0:	4605      	mov	r5, r0
 80041e2:	f002 fe91 	bl	8006f08 <_localeconv_r>
 80041e6:	f8d0 a000 	ldr.w	sl, [r0]
 80041ea:	4650      	mov	r0, sl
 80041ec:	f7fb fff0 	bl	80001d0 <strlen>
 80041f0:	2300      	movs	r3, #0
 80041f2:	930a      	str	r3, [sp, #40]	; 0x28
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	9305      	str	r3, [sp, #20]
 80041f8:	f8d8 3000 	ldr.w	r3, [r8]
 80041fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004200:	3307      	adds	r3, #7
 8004202:	f023 0307 	bic.w	r3, r3, #7
 8004206:	f103 0208 	add.w	r2, r3, #8
 800420a:	f8c8 2000 	str.w	r2, [r8]
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004216:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800421a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800421e:	9307      	str	r3, [sp, #28]
 8004220:	f8cd 8018 	str.w	r8, [sp, #24]
 8004224:	ee08 0a10 	vmov	s16, r0
 8004228:	4b9f      	ldr	r3, [pc, #636]	; (80044a8 <_printf_float+0x2dc>)
 800422a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800422e:	f04f 32ff 	mov.w	r2, #4294967295
 8004232:	f7fc fc7b 	bl	8000b2c <__aeabi_dcmpun>
 8004236:	bb88      	cbnz	r0, 800429c <_printf_float+0xd0>
 8004238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800423c:	4b9a      	ldr	r3, [pc, #616]	; (80044a8 <_printf_float+0x2dc>)
 800423e:	f04f 32ff 	mov.w	r2, #4294967295
 8004242:	f7fc fc55 	bl	8000af0 <__aeabi_dcmple>
 8004246:	bb48      	cbnz	r0, 800429c <_printf_float+0xd0>
 8004248:	2200      	movs	r2, #0
 800424a:	2300      	movs	r3, #0
 800424c:	4640      	mov	r0, r8
 800424e:	4649      	mov	r1, r9
 8004250:	f7fc fc44 	bl	8000adc <__aeabi_dcmplt>
 8004254:	b110      	cbz	r0, 800425c <_printf_float+0x90>
 8004256:	232d      	movs	r3, #45	; 0x2d
 8004258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425c:	4b93      	ldr	r3, [pc, #588]	; (80044ac <_printf_float+0x2e0>)
 800425e:	4894      	ldr	r0, [pc, #592]	; (80044b0 <_printf_float+0x2e4>)
 8004260:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004264:	bf94      	ite	ls
 8004266:	4698      	movls	r8, r3
 8004268:	4680      	movhi	r8, r0
 800426a:	2303      	movs	r3, #3
 800426c:	6123      	str	r3, [r4, #16]
 800426e:	9b05      	ldr	r3, [sp, #20]
 8004270:	f023 0204 	bic.w	r2, r3, #4
 8004274:	6022      	str	r2, [r4, #0]
 8004276:	f04f 0900 	mov.w	r9, #0
 800427a:	9700      	str	r7, [sp, #0]
 800427c:	4633      	mov	r3, r6
 800427e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004280:	4621      	mov	r1, r4
 8004282:	4628      	mov	r0, r5
 8004284:	f000 f9d8 	bl	8004638 <_printf_common>
 8004288:	3001      	adds	r0, #1
 800428a:	f040 8090 	bne.w	80043ae <_printf_float+0x1e2>
 800428e:	f04f 30ff 	mov.w	r0, #4294967295
 8004292:	b00d      	add	sp, #52	; 0x34
 8004294:	ecbd 8b02 	vpop	{d8}
 8004298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429c:	4642      	mov	r2, r8
 800429e:	464b      	mov	r3, r9
 80042a0:	4640      	mov	r0, r8
 80042a2:	4649      	mov	r1, r9
 80042a4:	f7fc fc42 	bl	8000b2c <__aeabi_dcmpun>
 80042a8:	b140      	cbz	r0, 80042bc <_printf_float+0xf0>
 80042aa:	464b      	mov	r3, r9
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bfbc      	itt	lt
 80042b0:	232d      	movlt	r3, #45	; 0x2d
 80042b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042b6:	487f      	ldr	r0, [pc, #508]	; (80044b4 <_printf_float+0x2e8>)
 80042b8:	4b7f      	ldr	r3, [pc, #508]	; (80044b8 <_printf_float+0x2ec>)
 80042ba:	e7d1      	b.n	8004260 <_printf_float+0x94>
 80042bc:	6863      	ldr	r3, [r4, #4]
 80042be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80042c2:	9206      	str	r2, [sp, #24]
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	d13f      	bne.n	8004348 <_printf_float+0x17c>
 80042c8:	2306      	movs	r3, #6
 80042ca:	6063      	str	r3, [r4, #4]
 80042cc:	9b05      	ldr	r3, [sp, #20]
 80042ce:	6861      	ldr	r1, [r4, #4]
 80042d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042d4:	2300      	movs	r3, #0
 80042d6:	9303      	str	r3, [sp, #12]
 80042d8:	ab0a      	add	r3, sp, #40	; 0x28
 80042da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80042de:	ab09      	add	r3, sp, #36	; 0x24
 80042e0:	ec49 8b10 	vmov	d0, r8, r9
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	6022      	str	r2, [r4, #0]
 80042e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042ec:	4628      	mov	r0, r5
 80042ee:	f7ff fecd 	bl	800408c <__cvt>
 80042f2:	9b06      	ldr	r3, [sp, #24]
 80042f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042f6:	2b47      	cmp	r3, #71	; 0x47
 80042f8:	4680      	mov	r8, r0
 80042fa:	d108      	bne.n	800430e <_printf_float+0x142>
 80042fc:	1cc8      	adds	r0, r1, #3
 80042fe:	db02      	blt.n	8004306 <_printf_float+0x13a>
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	4299      	cmp	r1, r3
 8004304:	dd41      	ble.n	800438a <_printf_float+0x1be>
 8004306:	f1ab 0b02 	sub.w	fp, fp, #2
 800430a:	fa5f fb8b 	uxtb.w	fp, fp
 800430e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004312:	d820      	bhi.n	8004356 <_printf_float+0x18a>
 8004314:	3901      	subs	r1, #1
 8004316:	465a      	mov	r2, fp
 8004318:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800431c:	9109      	str	r1, [sp, #36]	; 0x24
 800431e:	f7ff ff17 	bl	8004150 <__exponent>
 8004322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004324:	1813      	adds	r3, r2, r0
 8004326:	2a01      	cmp	r2, #1
 8004328:	4681      	mov	r9, r0
 800432a:	6123      	str	r3, [r4, #16]
 800432c:	dc02      	bgt.n	8004334 <_printf_float+0x168>
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	07d2      	lsls	r2, r2, #31
 8004332:	d501      	bpl.n	8004338 <_printf_float+0x16c>
 8004334:	3301      	adds	r3, #1
 8004336:	6123      	str	r3, [r4, #16]
 8004338:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800433c:	2b00      	cmp	r3, #0
 800433e:	d09c      	beq.n	800427a <_printf_float+0xae>
 8004340:	232d      	movs	r3, #45	; 0x2d
 8004342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004346:	e798      	b.n	800427a <_printf_float+0xae>
 8004348:	9a06      	ldr	r2, [sp, #24]
 800434a:	2a47      	cmp	r2, #71	; 0x47
 800434c:	d1be      	bne.n	80042cc <_printf_float+0x100>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1bc      	bne.n	80042cc <_printf_float+0x100>
 8004352:	2301      	movs	r3, #1
 8004354:	e7b9      	b.n	80042ca <_printf_float+0xfe>
 8004356:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800435a:	d118      	bne.n	800438e <_printf_float+0x1c2>
 800435c:	2900      	cmp	r1, #0
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	dd0b      	ble.n	800437a <_printf_float+0x1ae>
 8004362:	6121      	str	r1, [r4, #16]
 8004364:	b913      	cbnz	r3, 800436c <_printf_float+0x1a0>
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	07d0      	lsls	r0, r2, #31
 800436a:	d502      	bpl.n	8004372 <_printf_float+0x1a6>
 800436c:	3301      	adds	r3, #1
 800436e:	440b      	add	r3, r1
 8004370:	6123      	str	r3, [r4, #16]
 8004372:	65a1      	str	r1, [r4, #88]	; 0x58
 8004374:	f04f 0900 	mov.w	r9, #0
 8004378:	e7de      	b.n	8004338 <_printf_float+0x16c>
 800437a:	b913      	cbnz	r3, 8004382 <_printf_float+0x1b6>
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	07d2      	lsls	r2, r2, #31
 8004380:	d501      	bpl.n	8004386 <_printf_float+0x1ba>
 8004382:	3302      	adds	r3, #2
 8004384:	e7f4      	b.n	8004370 <_printf_float+0x1a4>
 8004386:	2301      	movs	r3, #1
 8004388:	e7f2      	b.n	8004370 <_printf_float+0x1a4>
 800438a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800438e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004390:	4299      	cmp	r1, r3
 8004392:	db05      	blt.n	80043a0 <_printf_float+0x1d4>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	6121      	str	r1, [r4, #16]
 8004398:	07d8      	lsls	r0, r3, #31
 800439a:	d5ea      	bpl.n	8004372 <_printf_float+0x1a6>
 800439c:	1c4b      	adds	r3, r1, #1
 800439e:	e7e7      	b.n	8004370 <_printf_float+0x1a4>
 80043a0:	2900      	cmp	r1, #0
 80043a2:	bfd4      	ite	le
 80043a4:	f1c1 0202 	rsble	r2, r1, #2
 80043a8:	2201      	movgt	r2, #1
 80043aa:	4413      	add	r3, r2
 80043ac:	e7e0      	b.n	8004370 <_printf_float+0x1a4>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	055a      	lsls	r2, r3, #21
 80043b2:	d407      	bmi.n	80043c4 <_printf_float+0x1f8>
 80043b4:	6923      	ldr	r3, [r4, #16]
 80043b6:	4642      	mov	r2, r8
 80043b8:	4631      	mov	r1, r6
 80043ba:	4628      	mov	r0, r5
 80043bc:	47b8      	blx	r7
 80043be:	3001      	adds	r0, #1
 80043c0:	d12c      	bne.n	800441c <_printf_float+0x250>
 80043c2:	e764      	b.n	800428e <_printf_float+0xc2>
 80043c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043c8:	f240 80e0 	bls.w	800458c <_printf_float+0x3c0>
 80043cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043d0:	2200      	movs	r2, #0
 80043d2:	2300      	movs	r3, #0
 80043d4:	f7fc fb78 	bl	8000ac8 <__aeabi_dcmpeq>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d034      	beq.n	8004446 <_printf_float+0x27a>
 80043dc:	4a37      	ldr	r2, [pc, #220]	; (80044bc <_printf_float+0x2f0>)
 80043de:	2301      	movs	r3, #1
 80043e0:	4631      	mov	r1, r6
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	f43f af51 	beq.w	800428e <_printf_float+0xc2>
 80043ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043f0:	429a      	cmp	r2, r3
 80043f2:	db02      	blt.n	80043fa <_printf_float+0x22e>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	07d8      	lsls	r0, r3, #31
 80043f8:	d510      	bpl.n	800441c <_printf_float+0x250>
 80043fa:	ee18 3a10 	vmov	r3, s16
 80043fe:	4652      	mov	r2, sl
 8004400:	4631      	mov	r1, r6
 8004402:	4628      	mov	r0, r5
 8004404:	47b8      	blx	r7
 8004406:	3001      	adds	r0, #1
 8004408:	f43f af41 	beq.w	800428e <_printf_float+0xc2>
 800440c:	f04f 0800 	mov.w	r8, #0
 8004410:	f104 091a 	add.w	r9, r4, #26
 8004414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004416:	3b01      	subs	r3, #1
 8004418:	4543      	cmp	r3, r8
 800441a:	dc09      	bgt.n	8004430 <_printf_float+0x264>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	079b      	lsls	r3, r3, #30
 8004420:	f100 8105 	bmi.w	800462e <_printf_float+0x462>
 8004424:	68e0      	ldr	r0, [r4, #12]
 8004426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004428:	4298      	cmp	r0, r3
 800442a:	bfb8      	it	lt
 800442c:	4618      	movlt	r0, r3
 800442e:	e730      	b.n	8004292 <_printf_float+0xc6>
 8004430:	2301      	movs	r3, #1
 8004432:	464a      	mov	r2, r9
 8004434:	4631      	mov	r1, r6
 8004436:	4628      	mov	r0, r5
 8004438:	47b8      	blx	r7
 800443a:	3001      	adds	r0, #1
 800443c:	f43f af27 	beq.w	800428e <_printf_float+0xc2>
 8004440:	f108 0801 	add.w	r8, r8, #1
 8004444:	e7e6      	b.n	8004414 <_printf_float+0x248>
 8004446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	dc39      	bgt.n	80044c0 <_printf_float+0x2f4>
 800444c:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <_printf_float+0x2f0>)
 800444e:	2301      	movs	r3, #1
 8004450:	4631      	mov	r1, r6
 8004452:	4628      	mov	r0, r5
 8004454:	47b8      	blx	r7
 8004456:	3001      	adds	r0, #1
 8004458:	f43f af19 	beq.w	800428e <_printf_float+0xc2>
 800445c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004460:	4313      	orrs	r3, r2
 8004462:	d102      	bne.n	800446a <_printf_float+0x29e>
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	07d9      	lsls	r1, r3, #31
 8004468:	d5d8      	bpl.n	800441c <_printf_float+0x250>
 800446a:	ee18 3a10 	vmov	r3, s16
 800446e:	4652      	mov	r2, sl
 8004470:	4631      	mov	r1, r6
 8004472:	4628      	mov	r0, r5
 8004474:	47b8      	blx	r7
 8004476:	3001      	adds	r0, #1
 8004478:	f43f af09 	beq.w	800428e <_printf_float+0xc2>
 800447c:	f04f 0900 	mov.w	r9, #0
 8004480:	f104 0a1a 	add.w	sl, r4, #26
 8004484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004486:	425b      	negs	r3, r3
 8004488:	454b      	cmp	r3, r9
 800448a:	dc01      	bgt.n	8004490 <_printf_float+0x2c4>
 800448c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800448e:	e792      	b.n	80043b6 <_printf_float+0x1ea>
 8004490:	2301      	movs	r3, #1
 8004492:	4652      	mov	r2, sl
 8004494:	4631      	mov	r1, r6
 8004496:	4628      	mov	r0, r5
 8004498:	47b8      	blx	r7
 800449a:	3001      	adds	r0, #1
 800449c:	f43f aef7 	beq.w	800428e <_printf_float+0xc2>
 80044a0:	f109 0901 	add.w	r9, r9, #1
 80044a4:	e7ee      	b.n	8004484 <_printf_float+0x2b8>
 80044a6:	bf00      	nop
 80044a8:	7fefffff 	.word	0x7fefffff
 80044ac:	080098f4 	.word	0x080098f4
 80044b0:	080098f8 	.word	0x080098f8
 80044b4:	08009900 	.word	0x08009900
 80044b8:	080098fc 	.word	0x080098fc
 80044bc:	08009904 	.word	0x08009904
 80044c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044c4:	429a      	cmp	r2, r3
 80044c6:	bfa8      	it	ge
 80044c8:	461a      	movge	r2, r3
 80044ca:	2a00      	cmp	r2, #0
 80044cc:	4691      	mov	r9, r2
 80044ce:	dc37      	bgt.n	8004540 <_printf_float+0x374>
 80044d0:	f04f 0b00 	mov.w	fp, #0
 80044d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044d8:	f104 021a 	add.w	r2, r4, #26
 80044dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044de:	9305      	str	r3, [sp, #20]
 80044e0:	eba3 0309 	sub.w	r3, r3, r9
 80044e4:	455b      	cmp	r3, fp
 80044e6:	dc33      	bgt.n	8004550 <_printf_float+0x384>
 80044e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044ec:	429a      	cmp	r2, r3
 80044ee:	db3b      	blt.n	8004568 <_printf_float+0x39c>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	07da      	lsls	r2, r3, #31
 80044f4:	d438      	bmi.n	8004568 <_printf_float+0x39c>
 80044f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044f8:	9b05      	ldr	r3, [sp, #20]
 80044fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	eba2 0901 	sub.w	r9, r2, r1
 8004502:	4599      	cmp	r9, r3
 8004504:	bfa8      	it	ge
 8004506:	4699      	movge	r9, r3
 8004508:	f1b9 0f00 	cmp.w	r9, #0
 800450c:	dc35      	bgt.n	800457a <_printf_float+0x3ae>
 800450e:	f04f 0800 	mov.w	r8, #0
 8004512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004516:	f104 0a1a 	add.w	sl, r4, #26
 800451a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	eba3 0309 	sub.w	r3, r3, r9
 8004524:	4543      	cmp	r3, r8
 8004526:	f77f af79 	ble.w	800441c <_printf_float+0x250>
 800452a:	2301      	movs	r3, #1
 800452c:	4652      	mov	r2, sl
 800452e:	4631      	mov	r1, r6
 8004530:	4628      	mov	r0, r5
 8004532:	47b8      	blx	r7
 8004534:	3001      	adds	r0, #1
 8004536:	f43f aeaa 	beq.w	800428e <_printf_float+0xc2>
 800453a:	f108 0801 	add.w	r8, r8, #1
 800453e:	e7ec      	b.n	800451a <_printf_float+0x34e>
 8004540:	4613      	mov	r3, r2
 8004542:	4631      	mov	r1, r6
 8004544:	4642      	mov	r2, r8
 8004546:	4628      	mov	r0, r5
 8004548:	47b8      	blx	r7
 800454a:	3001      	adds	r0, #1
 800454c:	d1c0      	bne.n	80044d0 <_printf_float+0x304>
 800454e:	e69e      	b.n	800428e <_printf_float+0xc2>
 8004550:	2301      	movs	r3, #1
 8004552:	4631      	mov	r1, r6
 8004554:	4628      	mov	r0, r5
 8004556:	9205      	str	r2, [sp, #20]
 8004558:	47b8      	blx	r7
 800455a:	3001      	adds	r0, #1
 800455c:	f43f ae97 	beq.w	800428e <_printf_float+0xc2>
 8004560:	9a05      	ldr	r2, [sp, #20]
 8004562:	f10b 0b01 	add.w	fp, fp, #1
 8004566:	e7b9      	b.n	80044dc <_printf_float+0x310>
 8004568:	ee18 3a10 	vmov	r3, s16
 800456c:	4652      	mov	r2, sl
 800456e:	4631      	mov	r1, r6
 8004570:	4628      	mov	r0, r5
 8004572:	47b8      	blx	r7
 8004574:	3001      	adds	r0, #1
 8004576:	d1be      	bne.n	80044f6 <_printf_float+0x32a>
 8004578:	e689      	b.n	800428e <_printf_float+0xc2>
 800457a:	9a05      	ldr	r2, [sp, #20]
 800457c:	464b      	mov	r3, r9
 800457e:	4442      	add	r2, r8
 8004580:	4631      	mov	r1, r6
 8004582:	4628      	mov	r0, r5
 8004584:	47b8      	blx	r7
 8004586:	3001      	adds	r0, #1
 8004588:	d1c1      	bne.n	800450e <_printf_float+0x342>
 800458a:	e680      	b.n	800428e <_printf_float+0xc2>
 800458c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800458e:	2a01      	cmp	r2, #1
 8004590:	dc01      	bgt.n	8004596 <_printf_float+0x3ca>
 8004592:	07db      	lsls	r3, r3, #31
 8004594:	d538      	bpl.n	8004608 <_printf_float+0x43c>
 8004596:	2301      	movs	r3, #1
 8004598:	4642      	mov	r2, r8
 800459a:	4631      	mov	r1, r6
 800459c:	4628      	mov	r0, r5
 800459e:	47b8      	blx	r7
 80045a0:	3001      	adds	r0, #1
 80045a2:	f43f ae74 	beq.w	800428e <_printf_float+0xc2>
 80045a6:	ee18 3a10 	vmov	r3, s16
 80045aa:	4652      	mov	r2, sl
 80045ac:	4631      	mov	r1, r6
 80045ae:	4628      	mov	r0, r5
 80045b0:	47b8      	blx	r7
 80045b2:	3001      	adds	r0, #1
 80045b4:	f43f ae6b 	beq.w	800428e <_printf_float+0xc2>
 80045b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045bc:	2200      	movs	r2, #0
 80045be:	2300      	movs	r3, #0
 80045c0:	f7fc fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80045c4:	b9d8      	cbnz	r0, 80045fe <_printf_float+0x432>
 80045c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045c8:	f108 0201 	add.w	r2, r8, #1
 80045cc:	3b01      	subs	r3, #1
 80045ce:	4631      	mov	r1, r6
 80045d0:	4628      	mov	r0, r5
 80045d2:	47b8      	blx	r7
 80045d4:	3001      	adds	r0, #1
 80045d6:	d10e      	bne.n	80045f6 <_printf_float+0x42a>
 80045d8:	e659      	b.n	800428e <_printf_float+0xc2>
 80045da:	2301      	movs	r3, #1
 80045dc:	4652      	mov	r2, sl
 80045de:	4631      	mov	r1, r6
 80045e0:	4628      	mov	r0, r5
 80045e2:	47b8      	blx	r7
 80045e4:	3001      	adds	r0, #1
 80045e6:	f43f ae52 	beq.w	800428e <_printf_float+0xc2>
 80045ea:	f108 0801 	add.w	r8, r8, #1
 80045ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045f0:	3b01      	subs	r3, #1
 80045f2:	4543      	cmp	r3, r8
 80045f4:	dcf1      	bgt.n	80045da <_printf_float+0x40e>
 80045f6:	464b      	mov	r3, r9
 80045f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045fc:	e6dc      	b.n	80043b8 <_printf_float+0x1ec>
 80045fe:	f04f 0800 	mov.w	r8, #0
 8004602:	f104 0a1a 	add.w	sl, r4, #26
 8004606:	e7f2      	b.n	80045ee <_printf_float+0x422>
 8004608:	2301      	movs	r3, #1
 800460a:	4642      	mov	r2, r8
 800460c:	e7df      	b.n	80045ce <_printf_float+0x402>
 800460e:	2301      	movs	r3, #1
 8004610:	464a      	mov	r2, r9
 8004612:	4631      	mov	r1, r6
 8004614:	4628      	mov	r0, r5
 8004616:	47b8      	blx	r7
 8004618:	3001      	adds	r0, #1
 800461a:	f43f ae38 	beq.w	800428e <_printf_float+0xc2>
 800461e:	f108 0801 	add.w	r8, r8, #1
 8004622:	68e3      	ldr	r3, [r4, #12]
 8004624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004626:	1a5b      	subs	r3, r3, r1
 8004628:	4543      	cmp	r3, r8
 800462a:	dcf0      	bgt.n	800460e <_printf_float+0x442>
 800462c:	e6fa      	b.n	8004424 <_printf_float+0x258>
 800462e:	f04f 0800 	mov.w	r8, #0
 8004632:	f104 0919 	add.w	r9, r4, #25
 8004636:	e7f4      	b.n	8004622 <_printf_float+0x456>

08004638 <_printf_common>:
 8004638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	4616      	mov	r6, r2
 800463e:	4699      	mov	r9, r3
 8004640:	688a      	ldr	r2, [r1, #8]
 8004642:	690b      	ldr	r3, [r1, #16]
 8004644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004648:	4293      	cmp	r3, r2
 800464a:	bfb8      	it	lt
 800464c:	4613      	movlt	r3, r2
 800464e:	6033      	str	r3, [r6, #0]
 8004650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004654:	4607      	mov	r7, r0
 8004656:	460c      	mov	r4, r1
 8004658:	b10a      	cbz	r2, 800465e <_printf_common+0x26>
 800465a:	3301      	adds	r3, #1
 800465c:	6033      	str	r3, [r6, #0]
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	0699      	lsls	r1, r3, #26
 8004662:	bf42      	ittt	mi
 8004664:	6833      	ldrmi	r3, [r6, #0]
 8004666:	3302      	addmi	r3, #2
 8004668:	6033      	strmi	r3, [r6, #0]
 800466a:	6825      	ldr	r5, [r4, #0]
 800466c:	f015 0506 	ands.w	r5, r5, #6
 8004670:	d106      	bne.n	8004680 <_printf_common+0x48>
 8004672:	f104 0a19 	add.w	sl, r4, #25
 8004676:	68e3      	ldr	r3, [r4, #12]
 8004678:	6832      	ldr	r2, [r6, #0]
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	42ab      	cmp	r3, r5
 800467e:	dc26      	bgt.n	80046ce <_printf_common+0x96>
 8004680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004684:	1e13      	subs	r3, r2, #0
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	bf18      	it	ne
 800468a:	2301      	movne	r3, #1
 800468c:	0692      	lsls	r2, r2, #26
 800468e:	d42b      	bmi.n	80046e8 <_printf_common+0xb0>
 8004690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004694:	4649      	mov	r1, r9
 8004696:	4638      	mov	r0, r7
 8004698:	47c0      	blx	r8
 800469a:	3001      	adds	r0, #1
 800469c:	d01e      	beq.n	80046dc <_printf_common+0xa4>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	68e5      	ldr	r5, [r4, #12]
 80046a2:	6832      	ldr	r2, [r6, #0]
 80046a4:	f003 0306 	and.w	r3, r3, #6
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	bf08      	it	eq
 80046ac:	1aad      	subeq	r5, r5, r2
 80046ae:	68a3      	ldr	r3, [r4, #8]
 80046b0:	6922      	ldr	r2, [r4, #16]
 80046b2:	bf0c      	ite	eq
 80046b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b8:	2500      	movne	r5, #0
 80046ba:	4293      	cmp	r3, r2
 80046bc:	bfc4      	itt	gt
 80046be:	1a9b      	subgt	r3, r3, r2
 80046c0:	18ed      	addgt	r5, r5, r3
 80046c2:	2600      	movs	r6, #0
 80046c4:	341a      	adds	r4, #26
 80046c6:	42b5      	cmp	r5, r6
 80046c8:	d11a      	bne.n	8004700 <_printf_common+0xc8>
 80046ca:	2000      	movs	r0, #0
 80046cc:	e008      	b.n	80046e0 <_printf_common+0xa8>
 80046ce:	2301      	movs	r3, #1
 80046d0:	4652      	mov	r2, sl
 80046d2:	4649      	mov	r1, r9
 80046d4:	4638      	mov	r0, r7
 80046d6:	47c0      	blx	r8
 80046d8:	3001      	adds	r0, #1
 80046da:	d103      	bne.n	80046e4 <_printf_common+0xac>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e4:	3501      	adds	r5, #1
 80046e6:	e7c6      	b.n	8004676 <_printf_common+0x3e>
 80046e8:	18e1      	adds	r1, r4, r3
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	2030      	movs	r0, #48	; 0x30
 80046ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046f2:	4422      	add	r2, r4
 80046f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046fc:	3302      	adds	r3, #2
 80046fe:	e7c7      	b.n	8004690 <_printf_common+0x58>
 8004700:	2301      	movs	r3, #1
 8004702:	4622      	mov	r2, r4
 8004704:	4649      	mov	r1, r9
 8004706:	4638      	mov	r0, r7
 8004708:	47c0      	blx	r8
 800470a:	3001      	adds	r0, #1
 800470c:	d0e6      	beq.n	80046dc <_printf_common+0xa4>
 800470e:	3601      	adds	r6, #1
 8004710:	e7d9      	b.n	80046c6 <_printf_common+0x8e>
	...

08004714 <_printf_i>:
 8004714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004718:	460c      	mov	r4, r1
 800471a:	4691      	mov	r9, r2
 800471c:	7e27      	ldrb	r7, [r4, #24]
 800471e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004720:	2f78      	cmp	r7, #120	; 0x78
 8004722:	4680      	mov	r8, r0
 8004724:	469a      	mov	sl, r3
 8004726:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800472a:	d807      	bhi.n	800473c <_printf_i+0x28>
 800472c:	2f62      	cmp	r7, #98	; 0x62
 800472e:	d80a      	bhi.n	8004746 <_printf_i+0x32>
 8004730:	2f00      	cmp	r7, #0
 8004732:	f000 80d8 	beq.w	80048e6 <_printf_i+0x1d2>
 8004736:	2f58      	cmp	r7, #88	; 0x58
 8004738:	f000 80a3 	beq.w	8004882 <_printf_i+0x16e>
 800473c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004744:	e03a      	b.n	80047bc <_printf_i+0xa8>
 8004746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800474a:	2b15      	cmp	r3, #21
 800474c:	d8f6      	bhi.n	800473c <_printf_i+0x28>
 800474e:	a001      	add	r0, pc, #4	; (adr r0, 8004754 <_printf_i+0x40>)
 8004750:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004754:	080047ad 	.word	0x080047ad
 8004758:	080047c1 	.word	0x080047c1
 800475c:	0800473d 	.word	0x0800473d
 8004760:	0800473d 	.word	0x0800473d
 8004764:	0800473d 	.word	0x0800473d
 8004768:	0800473d 	.word	0x0800473d
 800476c:	080047c1 	.word	0x080047c1
 8004770:	0800473d 	.word	0x0800473d
 8004774:	0800473d 	.word	0x0800473d
 8004778:	0800473d 	.word	0x0800473d
 800477c:	0800473d 	.word	0x0800473d
 8004780:	080048cd 	.word	0x080048cd
 8004784:	080047f1 	.word	0x080047f1
 8004788:	080048af 	.word	0x080048af
 800478c:	0800473d 	.word	0x0800473d
 8004790:	0800473d 	.word	0x0800473d
 8004794:	080048ef 	.word	0x080048ef
 8004798:	0800473d 	.word	0x0800473d
 800479c:	080047f1 	.word	0x080047f1
 80047a0:	0800473d 	.word	0x0800473d
 80047a4:	0800473d 	.word	0x0800473d
 80047a8:	080048b7 	.word	0x080048b7
 80047ac:	680b      	ldr	r3, [r1, #0]
 80047ae:	1d1a      	adds	r2, r3, #4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	600a      	str	r2, [r1, #0]
 80047b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047bc:	2301      	movs	r3, #1
 80047be:	e0a3      	b.n	8004908 <_printf_i+0x1f4>
 80047c0:	6825      	ldr	r5, [r4, #0]
 80047c2:	6808      	ldr	r0, [r1, #0]
 80047c4:	062e      	lsls	r6, r5, #24
 80047c6:	f100 0304 	add.w	r3, r0, #4
 80047ca:	d50a      	bpl.n	80047e2 <_printf_i+0xce>
 80047cc:	6805      	ldr	r5, [r0, #0]
 80047ce:	600b      	str	r3, [r1, #0]
 80047d0:	2d00      	cmp	r5, #0
 80047d2:	da03      	bge.n	80047dc <_printf_i+0xc8>
 80047d4:	232d      	movs	r3, #45	; 0x2d
 80047d6:	426d      	negs	r5, r5
 80047d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047dc:	485e      	ldr	r0, [pc, #376]	; (8004958 <_printf_i+0x244>)
 80047de:	230a      	movs	r3, #10
 80047e0:	e019      	b.n	8004816 <_printf_i+0x102>
 80047e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047e6:	6805      	ldr	r5, [r0, #0]
 80047e8:	600b      	str	r3, [r1, #0]
 80047ea:	bf18      	it	ne
 80047ec:	b22d      	sxthne	r5, r5
 80047ee:	e7ef      	b.n	80047d0 <_printf_i+0xbc>
 80047f0:	680b      	ldr	r3, [r1, #0]
 80047f2:	6825      	ldr	r5, [r4, #0]
 80047f4:	1d18      	adds	r0, r3, #4
 80047f6:	6008      	str	r0, [r1, #0]
 80047f8:	0628      	lsls	r0, r5, #24
 80047fa:	d501      	bpl.n	8004800 <_printf_i+0xec>
 80047fc:	681d      	ldr	r5, [r3, #0]
 80047fe:	e002      	b.n	8004806 <_printf_i+0xf2>
 8004800:	0669      	lsls	r1, r5, #25
 8004802:	d5fb      	bpl.n	80047fc <_printf_i+0xe8>
 8004804:	881d      	ldrh	r5, [r3, #0]
 8004806:	4854      	ldr	r0, [pc, #336]	; (8004958 <_printf_i+0x244>)
 8004808:	2f6f      	cmp	r7, #111	; 0x6f
 800480a:	bf0c      	ite	eq
 800480c:	2308      	moveq	r3, #8
 800480e:	230a      	movne	r3, #10
 8004810:	2100      	movs	r1, #0
 8004812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004816:	6866      	ldr	r6, [r4, #4]
 8004818:	60a6      	str	r6, [r4, #8]
 800481a:	2e00      	cmp	r6, #0
 800481c:	bfa2      	ittt	ge
 800481e:	6821      	ldrge	r1, [r4, #0]
 8004820:	f021 0104 	bicge.w	r1, r1, #4
 8004824:	6021      	strge	r1, [r4, #0]
 8004826:	b90d      	cbnz	r5, 800482c <_printf_i+0x118>
 8004828:	2e00      	cmp	r6, #0
 800482a:	d04d      	beq.n	80048c8 <_printf_i+0x1b4>
 800482c:	4616      	mov	r6, r2
 800482e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004832:	fb03 5711 	mls	r7, r3, r1, r5
 8004836:	5dc7      	ldrb	r7, [r0, r7]
 8004838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800483c:	462f      	mov	r7, r5
 800483e:	42bb      	cmp	r3, r7
 8004840:	460d      	mov	r5, r1
 8004842:	d9f4      	bls.n	800482e <_printf_i+0x11a>
 8004844:	2b08      	cmp	r3, #8
 8004846:	d10b      	bne.n	8004860 <_printf_i+0x14c>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	07df      	lsls	r7, r3, #31
 800484c:	d508      	bpl.n	8004860 <_printf_i+0x14c>
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	6861      	ldr	r1, [r4, #4]
 8004852:	4299      	cmp	r1, r3
 8004854:	bfde      	ittt	le
 8004856:	2330      	movle	r3, #48	; 0x30
 8004858:	f806 3c01 	strble.w	r3, [r6, #-1]
 800485c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004860:	1b92      	subs	r2, r2, r6
 8004862:	6122      	str	r2, [r4, #16]
 8004864:	f8cd a000 	str.w	sl, [sp]
 8004868:	464b      	mov	r3, r9
 800486a:	aa03      	add	r2, sp, #12
 800486c:	4621      	mov	r1, r4
 800486e:	4640      	mov	r0, r8
 8004870:	f7ff fee2 	bl	8004638 <_printf_common>
 8004874:	3001      	adds	r0, #1
 8004876:	d14c      	bne.n	8004912 <_printf_i+0x1fe>
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	b004      	add	sp, #16
 800487e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004882:	4835      	ldr	r0, [pc, #212]	; (8004958 <_printf_i+0x244>)
 8004884:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	680e      	ldr	r6, [r1, #0]
 800488c:	061f      	lsls	r7, r3, #24
 800488e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004892:	600e      	str	r6, [r1, #0]
 8004894:	d514      	bpl.n	80048c0 <_printf_i+0x1ac>
 8004896:	07d9      	lsls	r1, r3, #31
 8004898:	bf44      	itt	mi
 800489a:	f043 0320 	orrmi.w	r3, r3, #32
 800489e:	6023      	strmi	r3, [r4, #0]
 80048a0:	b91d      	cbnz	r5, 80048aa <_printf_i+0x196>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	f023 0320 	bic.w	r3, r3, #32
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	2310      	movs	r3, #16
 80048ac:	e7b0      	b.n	8004810 <_printf_i+0xfc>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	f043 0320 	orr.w	r3, r3, #32
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	2378      	movs	r3, #120	; 0x78
 80048b8:	4828      	ldr	r0, [pc, #160]	; (800495c <_printf_i+0x248>)
 80048ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048be:	e7e3      	b.n	8004888 <_printf_i+0x174>
 80048c0:	065e      	lsls	r6, r3, #25
 80048c2:	bf48      	it	mi
 80048c4:	b2ad      	uxthmi	r5, r5
 80048c6:	e7e6      	b.n	8004896 <_printf_i+0x182>
 80048c8:	4616      	mov	r6, r2
 80048ca:	e7bb      	b.n	8004844 <_printf_i+0x130>
 80048cc:	680b      	ldr	r3, [r1, #0]
 80048ce:	6826      	ldr	r6, [r4, #0]
 80048d0:	6960      	ldr	r0, [r4, #20]
 80048d2:	1d1d      	adds	r5, r3, #4
 80048d4:	600d      	str	r5, [r1, #0]
 80048d6:	0635      	lsls	r5, r6, #24
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	d501      	bpl.n	80048e0 <_printf_i+0x1cc>
 80048dc:	6018      	str	r0, [r3, #0]
 80048de:	e002      	b.n	80048e6 <_printf_i+0x1d2>
 80048e0:	0671      	lsls	r1, r6, #25
 80048e2:	d5fb      	bpl.n	80048dc <_printf_i+0x1c8>
 80048e4:	8018      	strh	r0, [r3, #0]
 80048e6:	2300      	movs	r3, #0
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	4616      	mov	r6, r2
 80048ec:	e7ba      	b.n	8004864 <_printf_i+0x150>
 80048ee:	680b      	ldr	r3, [r1, #0]
 80048f0:	1d1a      	adds	r2, r3, #4
 80048f2:	600a      	str	r2, [r1, #0]
 80048f4:	681e      	ldr	r6, [r3, #0]
 80048f6:	6862      	ldr	r2, [r4, #4]
 80048f8:	2100      	movs	r1, #0
 80048fa:	4630      	mov	r0, r6
 80048fc:	f7fb fc70 	bl	80001e0 <memchr>
 8004900:	b108      	cbz	r0, 8004906 <_printf_i+0x1f2>
 8004902:	1b80      	subs	r0, r0, r6
 8004904:	6060      	str	r0, [r4, #4]
 8004906:	6863      	ldr	r3, [r4, #4]
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	2300      	movs	r3, #0
 800490c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004910:	e7a8      	b.n	8004864 <_printf_i+0x150>
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	4632      	mov	r2, r6
 8004916:	4649      	mov	r1, r9
 8004918:	4640      	mov	r0, r8
 800491a:	47d0      	blx	sl
 800491c:	3001      	adds	r0, #1
 800491e:	d0ab      	beq.n	8004878 <_printf_i+0x164>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	079b      	lsls	r3, r3, #30
 8004924:	d413      	bmi.n	800494e <_printf_i+0x23a>
 8004926:	68e0      	ldr	r0, [r4, #12]
 8004928:	9b03      	ldr	r3, [sp, #12]
 800492a:	4298      	cmp	r0, r3
 800492c:	bfb8      	it	lt
 800492e:	4618      	movlt	r0, r3
 8004930:	e7a4      	b.n	800487c <_printf_i+0x168>
 8004932:	2301      	movs	r3, #1
 8004934:	4632      	mov	r2, r6
 8004936:	4649      	mov	r1, r9
 8004938:	4640      	mov	r0, r8
 800493a:	47d0      	blx	sl
 800493c:	3001      	adds	r0, #1
 800493e:	d09b      	beq.n	8004878 <_printf_i+0x164>
 8004940:	3501      	adds	r5, #1
 8004942:	68e3      	ldr	r3, [r4, #12]
 8004944:	9903      	ldr	r1, [sp, #12]
 8004946:	1a5b      	subs	r3, r3, r1
 8004948:	42ab      	cmp	r3, r5
 800494a:	dcf2      	bgt.n	8004932 <_printf_i+0x21e>
 800494c:	e7eb      	b.n	8004926 <_printf_i+0x212>
 800494e:	2500      	movs	r5, #0
 8004950:	f104 0619 	add.w	r6, r4, #25
 8004954:	e7f5      	b.n	8004942 <_printf_i+0x22e>
 8004956:	bf00      	nop
 8004958:	08009906 	.word	0x08009906
 800495c:	08009917 	.word	0x08009917

08004960 <_scanf_float>:
 8004960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004964:	b087      	sub	sp, #28
 8004966:	4617      	mov	r7, r2
 8004968:	9303      	str	r3, [sp, #12]
 800496a:	688b      	ldr	r3, [r1, #8]
 800496c:	1e5a      	subs	r2, r3, #1
 800496e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004972:	bf83      	ittte	hi
 8004974:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004978:	195b      	addhi	r3, r3, r5
 800497a:	9302      	strhi	r3, [sp, #8]
 800497c:	2300      	movls	r3, #0
 800497e:	bf86      	itte	hi
 8004980:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004984:	608b      	strhi	r3, [r1, #8]
 8004986:	9302      	strls	r3, [sp, #8]
 8004988:	680b      	ldr	r3, [r1, #0]
 800498a:	468b      	mov	fp, r1
 800498c:	2500      	movs	r5, #0
 800498e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004992:	f84b 3b1c 	str.w	r3, [fp], #28
 8004996:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800499a:	4680      	mov	r8, r0
 800499c:	460c      	mov	r4, r1
 800499e:	465e      	mov	r6, fp
 80049a0:	46aa      	mov	sl, r5
 80049a2:	46a9      	mov	r9, r5
 80049a4:	9501      	str	r5, [sp, #4]
 80049a6:	68a2      	ldr	r2, [r4, #8]
 80049a8:	b152      	cbz	r2, 80049c0 <_scanf_float+0x60>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b4e      	cmp	r3, #78	; 0x4e
 80049b0:	d864      	bhi.n	8004a7c <_scanf_float+0x11c>
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	d83c      	bhi.n	8004a30 <_scanf_float+0xd0>
 80049b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80049ba:	b2c8      	uxtb	r0, r1
 80049bc:	280e      	cmp	r0, #14
 80049be:	d93a      	bls.n	8004a36 <_scanf_float+0xd6>
 80049c0:	f1b9 0f00 	cmp.w	r9, #0
 80049c4:	d003      	beq.n	80049ce <_scanf_float+0x6e>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049d2:	f1ba 0f01 	cmp.w	sl, #1
 80049d6:	f200 8113 	bhi.w	8004c00 <_scanf_float+0x2a0>
 80049da:	455e      	cmp	r6, fp
 80049dc:	f200 8105 	bhi.w	8004bea <_scanf_float+0x28a>
 80049e0:	2501      	movs	r5, #1
 80049e2:	4628      	mov	r0, r5
 80049e4:	b007      	add	sp, #28
 80049e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049ee:	2a0d      	cmp	r2, #13
 80049f0:	d8e6      	bhi.n	80049c0 <_scanf_float+0x60>
 80049f2:	a101      	add	r1, pc, #4	; (adr r1, 80049f8 <_scanf_float+0x98>)
 80049f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80049f8:	08004b37 	.word	0x08004b37
 80049fc:	080049c1 	.word	0x080049c1
 8004a00:	080049c1 	.word	0x080049c1
 8004a04:	080049c1 	.word	0x080049c1
 8004a08:	08004b97 	.word	0x08004b97
 8004a0c:	08004b6f 	.word	0x08004b6f
 8004a10:	080049c1 	.word	0x080049c1
 8004a14:	080049c1 	.word	0x080049c1
 8004a18:	08004b45 	.word	0x08004b45
 8004a1c:	080049c1 	.word	0x080049c1
 8004a20:	080049c1 	.word	0x080049c1
 8004a24:	080049c1 	.word	0x080049c1
 8004a28:	080049c1 	.word	0x080049c1
 8004a2c:	08004afd 	.word	0x08004afd
 8004a30:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004a34:	e7db      	b.n	80049ee <_scanf_float+0x8e>
 8004a36:	290e      	cmp	r1, #14
 8004a38:	d8c2      	bhi.n	80049c0 <_scanf_float+0x60>
 8004a3a:	a001      	add	r0, pc, #4	; (adr r0, 8004a40 <_scanf_float+0xe0>)
 8004a3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a40:	08004aef 	.word	0x08004aef
 8004a44:	080049c1 	.word	0x080049c1
 8004a48:	08004aef 	.word	0x08004aef
 8004a4c:	08004b83 	.word	0x08004b83
 8004a50:	080049c1 	.word	0x080049c1
 8004a54:	08004a9d 	.word	0x08004a9d
 8004a58:	08004ad9 	.word	0x08004ad9
 8004a5c:	08004ad9 	.word	0x08004ad9
 8004a60:	08004ad9 	.word	0x08004ad9
 8004a64:	08004ad9 	.word	0x08004ad9
 8004a68:	08004ad9 	.word	0x08004ad9
 8004a6c:	08004ad9 	.word	0x08004ad9
 8004a70:	08004ad9 	.word	0x08004ad9
 8004a74:	08004ad9 	.word	0x08004ad9
 8004a78:	08004ad9 	.word	0x08004ad9
 8004a7c:	2b6e      	cmp	r3, #110	; 0x6e
 8004a7e:	d809      	bhi.n	8004a94 <_scanf_float+0x134>
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d8b2      	bhi.n	80049ea <_scanf_float+0x8a>
 8004a84:	2b54      	cmp	r3, #84	; 0x54
 8004a86:	d077      	beq.n	8004b78 <_scanf_float+0x218>
 8004a88:	2b59      	cmp	r3, #89	; 0x59
 8004a8a:	d199      	bne.n	80049c0 <_scanf_float+0x60>
 8004a8c:	2d07      	cmp	r5, #7
 8004a8e:	d197      	bne.n	80049c0 <_scanf_float+0x60>
 8004a90:	2508      	movs	r5, #8
 8004a92:	e029      	b.n	8004ae8 <_scanf_float+0x188>
 8004a94:	2b74      	cmp	r3, #116	; 0x74
 8004a96:	d06f      	beq.n	8004b78 <_scanf_float+0x218>
 8004a98:	2b79      	cmp	r3, #121	; 0x79
 8004a9a:	e7f6      	b.n	8004a8a <_scanf_float+0x12a>
 8004a9c:	6821      	ldr	r1, [r4, #0]
 8004a9e:	05c8      	lsls	r0, r1, #23
 8004aa0:	d51a      	bpl.n	8004ad8 <_scanf_float+0x178>
 8004aa2:	9b02      	ldr	r3, [sp, #8]
 8004aa4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004aa8:	6021      	str	r1, [r4, #0]
 8004aaa:	f109 0901 	add.w	r9, r9, #1
 8004aae:	b11b      	cbz	r3, 8004ab8 <_scanf_float+0x158>
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	3201      	adds	r2, #1
 8004ab4:	9302      	str	r3, [sp, #8]
 8004ab6:	60a2      	str	r2, [r4, #8]
 8004ab8:	68a3      	ldr	r3, [r4, #8]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	60a3      	str	r3, [r4, #8]
 8004abe:	6923      	ldr	r3, [r4, #16]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	f340 8084 	ble.w	8004bd8 <_scanf_float+0x278>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	e766      	b.n	80049a6 <_scanf_float+0x46>
 8004ad8:	eb1a 0f05 	cmn.w	sl, r5
 8004adc:	f47f af70 	bne.w	80049c0 <_scanf_float+0x60>
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	f806 3b01 	strb.w	r3, [r6], #1
 8004aec:	e7e4      	b.n	8004ab8 <_scanf_float+0x158>
 8004aee:	6822      	ldr	r2, [r4, #0]
 8004af0:	0610      	lsls	r0, r2, #24
 8004af2:	f57f af65 	bpl.w	80049c0 <_scanf_float+0x60>
 8004af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004afa:	e7f4      	b.n	8004ae6 <_scanf_float+0x186>
 8004afc:	f1ba 0f00 	cmp.w	sl, #0
 8004b00:	d10e      	bne.n	8004b20 <_scanf_float+0x1c0>
 8004b02:	f1b9 0f00 	cmp.w	r9, #0
 8004b06:	d10e      	bne.n	8004b26 <_scanf_float+0x1c6>
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b0e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b12:	d108      	bne.n	8004b26 <_scanf_float+0x1c6>
 8004b14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b18:	6022      	str	r2, [r4, #0]
 8004b1a:	f04f 0a01 	mov.w	sl, #1
 8004b1e:	e7e3      	b.n	8004ae8 <_scanf_float+0x188>
 8004b20:	f1ba 0f02 	cmp.w	sl, #2
 8004b24:	d055      	beq.n	8004bd2 <_scanf_float+0x272>
 8004b26:	2d01      	cmp	r5, #1
 8004b28:	d002      	beq.n	8004b30 <_scanf_float+0x1d0>
 8004b2a:	2d04      	cmp	r5, #4
 8004b2c:	f47f af48 	bne.w	80049c0 <_scanf_float+0x60>
 8004b30:	3501      	adds	r5, #1
 8004b32:	b2ed      	uxtb	r5, r5
 8004b34:	e7d8      	b.n	8004ae8 <_scanf_float+0x188>
 8004b36:	f1ba 0f01 	cmp.w	sl, #1
 8004b3a:	f47f af41 	bne.w	80049c0 <_scanf_float+0x60>
 8004b3e:	f04f 0a02 	mov.w	sl, #2
 8004b42:	e7d1      	b.n	8004ae8 <_scanf_float+0x188>
 8004b44:	b97d      	cbnz	r5, 8004b66 <_scanf_float+0x206>
 8004b46:	f1b9 0f00 	cmp.w	r9, #0
 8004b4a:	f47f af3c 	bne.w	80049c6 <_scanf_float+0x66>
 8004b4e:	6822      	ldr	r2, [r4, #0]
 8004b50:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b54:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b58:	f47f af39 	bne.w	80049ce <_scanf_float+0x6e>
 8004b5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b60:	6022      	str	r2, [r4, #0]
 8004b62:	2501      	movs	r5, #1
 8004b64:	e7c0      	b.n	8004ae8 <_scanf_float+0x188>
 8004b66:	2d03      	cmp	r5, #3
 8004b68:	d0e2      	beq.n	8004b30 <_scanf_float+0x1d0>
 8004b6a:	2d05      	cmp	r5, #5
 8004b6c:	e7de      	b.n	8004b2c <_scanf_float+0x1cc>
 8004b6e:	2d02      	cmp	r5, #2
 8004b70:	f47f af26 	bne.w	80049c0 <_scanf_float+0x60>
 8004b74:	2503      	movs	r5, #3
 8004b76:	e7b7      	b.n	8004ae8 <_scanf_float+0x188>
 8004b78:	2d06      	cmp	r5, #6
 8004b7a:	f47f af21 	bne.w	80049c0 <_scanf_float+0x60>
 8004b7e:	2507      	movs	r5, #7
 8004b80:	e7b2      	b.n	8004ae8 <_scanf_float+0x188>
 8004b82:	6822      	ldr	r2, [r4, #0]
 8004b84:	0591      	lsls	r1, r2, #22
 8004b86:	f57f af1b 	bpl.w	80049c0 <_scanf_float+0x60>
 8004b8a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004b8e:	6022      	str	r2, [r4, #0]
 8004b90:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b94:	e7a8      	b.n	8004ae8 <_scanf_float+0x188>
 8004b96:	6822      	ldr	r2, [r4, #0]
 8004b98:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004b9c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004ba0:	d006      	beq.n	8004bb0 <_scanf_float+0x250>
 8004ba2:	0550      	lsls	r0, r2, #21
 8004ba4:	f57f af0c 	bpl.w	80049c0 <_scanf_float+0x60>
 8004ba8:	f1b9 0f00 	cmp.w	r9, #0
 8004bac:	f43f af0f 	beq.w	80049ce <_scanf_float+0x6e>
 8004bb0:	0591      	lsls	r1, r2, #22
 8004bb2:	bf58      	it	pl
 8004bb4:	9901      	ldrpl	r1, [sp, #4]
 8004bb6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004bba:	bf58      	it	pl
 8004bbc:	eba9 0101 	subpl.w	r1, r9, r1
 8004bc0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004bc4:	bf58      	it	pl
 8004bc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004bca:	6022      	str	r2, [r4, #0]
 8004bcc:	f04f 0900 	mov.w	r9, #0
 8004bd0:	e78a      	b.n	8004ae8 <_scanf_float+0x188>
 8004bd2:	f04f 0a03 	mov.w	sl, #3
 8004bd6:	e787      	b.n	8004ae8 <_scanf_float+0x188>
 8004bd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004bdc:	4639      	mov	r1, r7
 8004bde:	4640      	mov	r0, r8
 8004be0:	4798      	blx	r3
 8004be2:	2800      	cmp	r0, #0
 8004be4:	f43f aedf 	beq.w	80049a6 <_scanf_float+0x46>
 8004be8:	e6ea      	b.n	80049c0 <_scanf_float+0x60>
 8004bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bf2:	463a      	mov	r2, r7
 8004bf4:	4640      	mov	r0, r8
 8004bf6:	4798      	blx	r3
 8004bf8:	6923      	ldr	r3, [r4, #16]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	6123      	str	r3, [r4, #16]
 8004bfe:	e6ec      	b.n	80049da <_scanf_float+0x7a>
 8004c00:	1e6b      	subs	r3, r5, #1
 8004c02:	2b06      	cmp	r3, #6
 8004c04:	d825      	bhi.n	8004c52 <_scanf_float+0x2f2>
 8004c06:	2d02      	cmp	r5, #2
 8004c08:	d836      	bhi.n	8004c78 <_scanf_float+0x318>
 8004c0a:	455e      	cmp	r6, fp
 8004c0c:	f67f aee8 	bls.w	80049e0 <_scanf_float+0x80>
 8004c10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c18:	463a      	mov	r2, r7
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	4798      	blx	r3
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	6123      	str	r3, [r4, #16]
 8004c24:	e7f1      	b.n	8004c0a <_scanf_float+0x2aa>
 8004c26:	9802      	ldr	r0, [sp, #8]
 8004c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c2c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004c30:	9002      	str	r0, [sp, #8]
 8004c32:	463a      	mov	r2, r7
 8004c34:	4640      	mov	r0, r8
 8004c36:	4798      	blx	r3
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c42:	fa5f fa8a 	uxtb.w	sl, sl
 8004c46:	f1ba 0f02 	cmp.w	sl, #2
 8004c4a:	d1ec      	bne.n	8004c26 <_scanf_float+0x2c6>
 8004c4c:	3d03      	subs	r5, #3
 8004c4e:	b2ed      	uxtb	r5, r5
 8004c50:	1b76      	subs	r6, r6, r5
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	05da      	lsls	r2, r3, #23
 8004c56:	d52f      	bpl.n	8004cb8 <_scanf_float+0x358>
 8004c58:	055b      	lsls	r3, r3, #21
 8004c5a:	d510      	bpl.n	8004c7e <_scanf_float+0x31e>
 8004c5c:	455e      	cmp	r6, fp
 8004c5e:	f67f aebf 	bls.w	80049e0 <_scanf_float+0x80>
 8004c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c6a:	463a      	mov	r2, r7
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	4798      	blx	r3
 8004c70:	6923      	ldr	r3, [r4, #16]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	6123      	str	r3, [r4, #16]
 8004c76:	e7f1      	b.n	8004c5c <_scanf_float+0x2fc>
 8004c78:	46aa      	mov	sl, r5
 8004c7a:	9602      	str	r6, [sp, #8]
 8004c7c:	e7df      	b.n	8004c3e <_scanf_float+0x2de>
 8004c7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004c82:	6923      	ldr	r3, [r4, #16]
 8004c84:	2965      	cmp	r1, #101	; 0x65
 8004c86:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c8a:	f106 35ff 	add.w	r5, r6, #4294967295
 8004c8e:	6123      	str	r3, [r4, #16]
 8004c90:	d00c      	beq.n	8004cac <_scanf_float+0x34c>
 8004c92:	2945      	cmp	r1, #69	; 0x45
 8004c94:	d00a      	beq.n	8004cac <_scanf_float+0x34c>
 8004c96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c9a:	463a      	mov	r2, r7
 8004c9c:	4640      	mov	r0, r8
 8004c9e:	4798      	blx	r3
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	1eb5      	subs	r5, r6, #2
 8004caa:	6123      	str	r3, [r4, #16]
 8004cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cb0:	463a      	mov	r2, r7
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	4798      	blx	r3
 8004cb6:	462e      	mov	r6, r5
 8004cb8:	6825      	ldr	r5, [r4, #0]
 8004cba:	f015 0510 	ands.w	r5, r5, #16
 8004cbe:	d158      	bne.n	8004d72 <_scanf_float+0x412>
 8004cc0:	7035      	strb	r5, [r6, #0]
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ccc:	d11c      	bne.n	8004d08 <_scanf_float+0x3a8>
 8004cce:	9b01      	ldr	r3, [sp, #4]
 8004cd0:	454b      	cmp	r3, r9
 8004cd2:	eba3 0209 	sub.w	r2, r3, r9
 8004cd6:	d124      	bne.n	8004d22 <_scanf_float+0x3c2>
 8004cd8:	2200      	movs	r2, #0
 8004cda:	4659      	mov	r1, fp
 8004cdc:	4640      	mov	r0, r8
 8004cde:	f000 fe9d 	bl	8005a1c <_strtod_r>
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	6821      	ldr	r1, [r4, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f011 0f02 	tst.w	r1, #2
 8004cec:	ec57 6b10 	vmov	r6, r7, d0
 8004cf0:	f103 0204 	add.w	r2, r3, #4
 8004cf4:	d020      	beq.n	8004d38 <_scanf_float+0x3d8>
 8004cf6:	9903      	ldr	r1, [sp, #12]
 8004cf8:	600a      	str	r2, [r1, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	e9c3 6700 	strd	r6, r7, [r3]
 8004d00:	68e3      	ldr	r3, [r4, #12]
 8004d02:	3301      	adds	r3, #1
 8004d04:	60e3      	str	r3, [r4, #12]
 8004d06:	e66c      	b.n	80049e2 <_scanf_float+0x82>
 8004d08:	9b04      	ldr	r3, [sp, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0e4      	beq.n	8004cd8 <_scanf_float+0x378>
 8004d0e:	9905      	ldr	r1, [sp, #20]
 8004d10:	230a      	movs	r3, #10
 8004d12:	462a      	mov	r2, r5
 8004d14:	3101      	adds	r1, #1
 8004d16:	4640      	mov	r0, r8
 8004d18:	f000 ff0a 	bl	8005b30 <_strtol_r>
 8004d1c:	9b04      	ldr	r3, [sp, #16]
 8004d1e:	9e05      	ldr	r6, [sp, #20]
 8004d20:	1ac2      	subs	r2, r0, r3
 8004d22:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004d26:	429e      	cmp	r6, r3
 8004d28:	bf28      	it	cs
 8004d2a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004d2e:	4912      	ldr	r1, [pc, #72]	; (8004d78 <_scanf_float+0x418>)
 8004d30:	4630      	mov	r0, r6
 8004d32:	f000 f82b 	bl	8004d8c <siprintf>
 8004d36:	e7cf      	b.n	8004cd8 <_scanf_float+0x378>
 8004d38:	f011 0f04 	tst.w	r1, #4
 8004d3c:	9903      	ldr	r1, [sp, #12]
 8004d3e:	600a      	str	r2, [r1, #0]
 8004d40:	d1db      	bne.n	8004cfa <_scanf_float+0x39a>
 8004d42:	f8d3 8000 	ldr.w	r8, [r3]
 8004d46:	ee10 2a10 	vmov	r2, s0
 8004d4a:	ee10 0a10 	vmov	r0, s0
 8004d4e:	463b      	mov	r3, r7
 8004d50:	4639      	mov	r1, r7
 8004d52:	f7fb feeb 	bl	8000b2c <__aeabi_dcmpun>
 8004d56:	b128      	cbz	r0, 8004d64 <_scanf_float+0x404>
 8004d58:	4808      	ldr	r0, [pc, #32]	; (8004d7c <_scanf_float+0x41c>)
 8004d5a:	f000 f811 	bl	8004d80 <nanf>
 8004d5e:	ed88 0a00 	vstr	s0, [r8]
 8004d62:	e7cd      	b.n	8004d00 <_scanf_float+0x3a0>
 8004d64:	4630      	mov	r0, r6
 8004d66:	4639      	mov	r1, r7
 8004d68:	f7fb ff3e 	bl	8000be8 <__aeabi_d2f>
 8004d6c:	f8c8 0000 	str.w	r0, [r8]
 8004d70:	e7c6      	b.n	8004d00 <_scanf_float+0x3a0>
 8004d72:	2500      	movs	r5, #0
 8004d74:	e635      	b.n	80049e2 <_scanf_float+0x82>
 8004d76:	bf00      	nop
 8004d78:	08009928 	.word	0x08009928
 8004d7c:	08009d40 	.word	0x08009d40

08004d80 <nanf>:
 8004d80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004d88 <nanf+0x8>
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	7fc00000 	.word	0x7fc00000

08004d8c <siprintf>:
 8004d8c:	b40e      	push	{r1, r2, r3}
 8004d8e:	b500      	push	{lr}
 8004d90:	b09c      	sub	sp, #112	; 0x70
 8004d92:	ab1d      	add	r3, sp, #116	; 0x74
 8004d94:	9002      	str	r0, [sp, #8]
 8004d96:	9006      	str	r0, [sp, #24]
 8004d98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d9c:	4809      	ldr	r0, [pc, #36]	; (8004dc4 <siprintf+0x38>)
 8004d9e:	9107      	str	r1, [sp, #28]
 8004da0:	9104      	str	r1, [sp, #16]
 8004da2:	4909      	ldr	r1, [pc, #36]	; (8004dc8 <siprintf+0x3c>)
 8004da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004da8:	9105      	str	r1, [sp, #20]
 8004daa:	6800      	ldr	r0, [r0, #0]
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	a902      	add	r1, sp, #8
 8004db0:	f002 fea6 	bl	8007b00 <_svfiprintf_r>
 8004db4:	9b02      	ldr	r3, [sp, #8]
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	b01c      	add	sp, #112	; 0x70
 8004dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dc0:	b003      	add	sp, #12
 8004dc2:	4770      	bx	lr
 8004dc4:	20000008 	.word	0x20000008
 8004dc8:	ffff0208 	.word	0xffff0208

08004dcc <sulp>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	4604      	mov	r4, r0
 8004dd0:	460d      	mov	r5, r1
 8004dd2:	ec45 4b10 	vmov	d0, r4, r5
 8004dd6:	4616      	mov	r6, r2
 8004dd8:	f002 fc2e 	bl	8007638 <__ulp>
 8004ddc:	ec51 0b10 	vmov	r0, r1, d0
 8004de0:	b17e      	cbz	r6, 8004e02 <sulp+0x36>
 8004de2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004de6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	dd09      	ble.n	8004e02 <sulp+0x36>
 8004dee:	051b      	lsls	r3, r3, #20
 8004df0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004df4:	2400      	movs	r4, #0
 8004df6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	f7fb fbfb 	bl	80005f8 <__aeabi_dmul>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	0000      	movs	r0, r0
	...

08004e08 <_strtod_l>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	b0a3      	sub	sp, #140	; 0x8c
 8004e0e:	461f      	mov	r7, r3
 8004e10:	2300      	movs	r3, #0
 8004e12:	931e      	str	r3, [sp, #120]	; 0x78
 8004e14:	4ba4      	ldr	r3, [pc, #656]	; (80050a8 <_strtod_l+0x2a0>)
 8004e16:	9219      	str	r2, [sp, #100]	; 0x64
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	9307      	str	r3, [sp, #28]
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	4688      	mov	r8, r1
 8004e22:	f7fb f9d5 	bl	80001d0 <strlen>
 8004e26:	f04f 0a00 	mov.w	sl, #0
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	f04f 0b00 	mov.w	fp, #0
 8004e30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004e34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e36:	781a      	ldrb	r2, [r3, #0]
 8004e38:	2a2b      	cmp	r2, #43	; 0x2b
 8004e3a:	d04c      	beq.n	8004ed6 <_strtod_l+0xce>
 8004e3c:	d839      	bhi.n	8004eb2 <_strtod_l+0xaa>
 8004e3e:	2a0d      	cmp	r2, #13
 8004e40:	d832      	bhi.n	8004ea8 <_strtod_l+0xa0>
 8004e42:	2a08      	cmp	r2, #8
 8004e44:	d832      	bhi.n	8004eac <_strtod_l+0xa4>
 8004e46:	2a00      	cmp	r2, #0
 8004e48:	d03c      	beq.n	8004ec4 <_strtod_l+0xbc>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	930e      	str	r3, [sp, #56]	; 0x38
 8004e4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004e50:	7833      	ldrb	r3, [r6, #0]
 8004e52:	2b30      	cmp	r3, #48	; 0x30
 8004e54:	f040 80b4 	bne.w	8004fc0 <_strtod_l+0x1b8>
 8004e58:	7873      	ldrb	r3, [r6, #1]
 8004e5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004e5e:	2b58      	cmp	r3, #88	; 0x58
 8004e60:	d16c      	bne.n	8004f3c <_strtod_l+0x134>
 8004e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	ab1e      	add	r3, sp, #120	; 0x78
 8004e68:	9702      	str	r7, [sp, #8]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	4a8f      	ldr	r2, [pc, #572]	; (80050ac <_strtod_l+0x2a4>)
 8004e6e:	ab1f      	add	r3, sp, #124	; 0x7c
 8004e70:	a91d      	add	r1, sp, #116	; 0x74
 8004e72:	4620      	mov	r0, r4
 8004e74:	f001 fd40 	bl	80068f8 <__gethex>
 8004e78:	f010 0707 	ands.w	r7, r0, #7
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	d005      	beq.n	8004e8c <_strtod_l+0x84>
 8004e80:	2f06      	cmp	r7, #6
 8004e82:	d12a      	bne.n	8004eda <_strtod_l+0xd2>
 8004e84:	3601      	adds	r6, #1
 8004e86:	2300      	movs	r3, #0
 8004e88:	961d      	str	r6, [sp, #116]	; 0x74
 8004e8a:	930e      	str	r3, [sp, #56]	; 0x38
 8004e8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f040 8596 	bne.w	80059c0 <_strtod_l+0xbb8>
 8004e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e96:	b1db      	cbz	r3, 8004ed0 <_strtod_l+0xc8>
 8004e98:	4652      	mov	r2, sl
 8004e9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004e9e:	ec43 2b10 	vmov	d0, r2, r3
 8004ea2:	b023      	add	sp, #140	; 0x8c
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea8:	2a20      	cmp	r2, #32
 8004eaa:	d1ce      	bne.n	8004e4a <_strtod_l+0x42>
 8004eac:	3301      	adds	r3, #1
 8004eae:	931d      	str	r3, [sp, #116]	; 0x74
 8004eb0:	e7c0      	b.n	8004e34 <_strtod_l+0x2c>
 8004eb2:	2a2d      	cmp	r2, #45	; 0x2d
 8004eb4:	d1c9      	bne.n	8004e4a <_strtod_l+0x42>
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	920e      	str	r2, [sp, #56]	; 0x38
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	921d      	str	r2, [sp, #116]	; 0x74
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1c4      	bne.n	8004e4e <_strtod_l+0x46>
 8004ec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ec6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f040 8576 	bne.w	80059bc <_strtod_l+0xbb4>
 8004ed0:	4652      	mov	r2, sl
 8004ed2:	465b      	mov	r3, fp
 8004ed4:	e7e3      	b.n	8004e9e <_strtod_l+0x96>
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	e7ee      	b.n	8004eb8 <_strtod_l+0xb0>
 8004eda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004edc:	b13a      	cbz	r2, 8004eee <_strtod_l+0xe6>
 8004ede:	2135      	movs	r1, #53	; 0x35
 8004ee0:	a820      	add	r0, sp, #128	; 0x80
 8004ee2:	f002 fcb4 	bl	800784e <__copybits>
 8004ee6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f002 f879 	bl	8006fe0 <_Bfree>
 8004eee:	3f01      	subs	r7, #1
 8004ef0:	2f05      	cmp	r7, #5
 8004ef2:	d807      	bhi.n	8004f04 <_strtod_l+0xfc>
 8004ef4:	e8df f007 	tbb	[pc, r7]
 8004ef8:	1d180b0e 	.word	0x1d180b0e
 8004efc:	030e      	.short	0x030e
 8004efe:	f04f 0b00 	mov.w	fp, #0
 8004f02:	46da      	mov	sl, fp
 8004f04:	0728      	lsls	r0, r5, #28
 8004f06:	d5c1      	bpl.n	8004e8c <_strtod_l+0x84>
 8004f08:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004f0c:	e7be      	b.n	8004e8c <_strtod_l+0x84>
 8004f0e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8004f12:	e7f7      	b.n	8004f04 <_strtod_l+0xfc>
 8004f14:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004f18:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004f1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004f22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004f26:	e7ed      	b.n	8004f04 <_strtod_l+0xfc>
 8004f28:	f8df b184 	ldr.w	fp, [pc, #388]	; 80050b0 <_strtod_l+0x2a8>
 8004f2c:	f04f 0a00 	mov.w	sl, #0
 8004f30:	e7e8      	b.n	8004f04 <_strtod_l+0xfc>
 8004f32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004f36:	f04f 3aff 	mov.w	sl, #4294967295
 8004f3a:	e7e3      	b.n	8004f04 <_strtod_l+0xfc>
 8004f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	921d      	str	r2, [sp, #116]	; 0x74
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	2b30      	cmp	r3, #48	; 0x30
 8004f46:	d0f9      	beq.n	8004f3c <_strtod_l+0x134>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d09f      	beq.n	8004e8c <_strtod_l+0x84>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f04f 0900 	mov.w	r9, #0
 8004f52:	9304      	str	r3, [sp, #16]
 8004f54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f56:	930a      	str	r3, [sp, #40]	; 0x28
 8004f58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004f5c:	464f      	mov	r7, r9
 8004f5e:	220a      	movs	r2, #10
 8004f60:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004f62:	7806      	ldrb	r6, [r0, #0]
 8004f64:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004f68:	b2d9      	uxtb	r1, r3
 8004f6a:	2909      	cmp	r1, #9
 8004f6c:	d92a      	bls.n	8004fc4 <_strtod_l+0x1bc>
 8004f6e:	9907      	ldr	r1, [sp, #28]
 8004f70:	462a      	mov	r2, r5
 8004f72:	f002 fedd 	bl	8007d30 <strncmp>
 8004f76:	b398      	cbz	r0, 8004fe0 <_strtod_l+0x1d8>
 8004f78:	2000      	movs	r0, #0
 8004f7a:	4633      	mov	r3, r6
 8004f7c:	463d      	mov	r5, r7
 8004f7e:	9007      	str	r0, [sp, #28]
 8004f80:	4602      	mov	r2, r0
 8004f82:	2b65      	cmp	r3, #101	; 0x65
 8004f84:	d001      	beq.n	8004f8a <_strtod_l+0x182>
 8004f86:	2b45      	cmp	r3, #69	; 0x45
 8004f88:	d118      	bne.n	8004fbc <_strtod_l+0x1b4>
 8004f8a:	b91d      	cbnz	r5, 8004f94 <_strtod_l+0x18c>
 8004f8c:	9b04      	ldr	r3, [sp, #16]
 8004f8e:	4303      	orrs	r3, r0
 8004f90:	d098      	beq.n	8004ec4 <_strtod_l+0xbc>
 8004f92:	2500      	movs	r5, #0
 8004f94:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004f98:	f108 0301 	add.w	r3, r8, #1
 8004f9c:	931d      	str	r3, [sp, #116]	; 0x74
 8004f9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004fa2:	2b2b      	cmp	r3, #43	; 0x2b
 8004fa4:	d075      	beq.n	8005092 <_strtod_l+0x28a>
 8004fa6:	2b2d      	cmp	r3, #45	; 0x2d
 8004fa8:	d07b      	beq.n	80050a2 <_strtod_l+0x29a>
 8004faa:	f04f 0c00 	mov.w	ip, #0
 8004fae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004fb2:	2909      	cmp	r1, #9
 8004fb4:	f240 8082 	bls.w	80050bc <_strtod_l+0x2b4>
 8004fb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004fbc:	2600      	movs	r6, #0
 8004fbe:	e09d      	b.n	80050fc <_strtod_l+0x2f4>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e7c4      	b.n	8004f4e <_strtod_l+0x146>
 8004fc4:	2f08      	cmp	r7, #8
 8004fc6:	bfd8      	it	le
 8004fc8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004fca:	f100 0001 	add.w	r0, r0, #1
 8004fce:	bfda      	itte	le
 8004fd0:	fb02 3301 	mlale	r3, r2, r1, r3
 8004fd4:	9309      	strle	r3, [sp, #36]	; 0x24
 8004fd6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004fda:	3701      	adds	r7, #1
 8004fdc:	901d      	str	r0, [sp, #116]	; 0x74
 8004fde:	e7bf      	b.n	8004f60 <_strtod_l+0x158>
 8004fe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004fe2:	195a      	adds	r2, r3, r5
 8004fe4:	921d      	str	r2, [sp, #116]	; 0x74
 8004fe6:	5d5b      	ldrb	r3, [r3, r5]
 8004fe8:	2f00      	cmp	r7, #0
 8004fea:	d037      	beq.n	800505c <_strtod_l+0x254>
 8004fec:	9007      	str	r0, [sp, #28]
 8004fee:	463d      	mov	r5, r7
 8004ff0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004ff4:	2a09      	cmp	r2, #9
 8004ff6:	d912      	bls.n	800501e <_strtod_l+0x216>
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	e7c2      	b.n	8004f82 <_strtod_l+0x17a>
 8004ffc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	921d      	str	r2, [sp, #116]	; 0x74
 8005002:	785b      	ldrb	r3, [r3, #1]
 8005004:	3001      	adds	r0, #1
 8005006:	2b30      	cmp	r3, #48	; 0x30
 8005008:	d0f8      	beq.n	8004ffc <_strtod_l+0x1f4>
 800500a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800500e:	2a08      	cmp	r2, #8
 8005010:	f200 84db 	bhi.w	80059ca <_strtod_l+0xbc2>
 8005014:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005016:	9007      	str	r0, [sp, #28]
 8005018:	2000      	movs	r0, #0
 800501a:	920a      	str	r2, [sp, #40]	; 0x28
 800501c:	4605      	mov	r5, r0
 800501e:	3b30      	subs	r3, #48	; 0x30
 8005020:	f100 0201 	add.w	r2, r0, #1
 8005024:	d014      	beq.n	8005050 <_strtod_l+0x248>
 8005026:	9907      	ldr	r1, [sp, #28]
 8005028:	4411      	add	r1, r2
 800502a:	9107      	str	r1, [sp, #28]
 800502c:	462a      	mov	r2, r5
 800502e:	eb00 0e05 	add.w	lr, r0, r5
 8005032:	210a      	movs	r1, #10
 8005034:	4572      	cmp	r2, lr
 8005036:	d113      	bne.n	8005060 <_strtod_l+0x258>
 8005038:	182a      	adds	r2, r5, r0
 800503a:	2a08      	cmp	r2, #8
 800503c:	f105 0501 	add.w	r5, r5, #1
 8005040:	4405      	add	r5, r0
 8005042:	dc1c      	bgt.n	800507e <_strtod_l+0x276>
 8005044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005046:	220a      	movs	r2, #10
 8005048:	fb02 3301 	mla	r3, r2, r1, r3
 800504c:	9309      	str	r3, [sp, #36]	; 0x24
 800504e:	2200      	movs	r2, #0
 8005050:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005052:	1c59      	adds	r1, r3, #1
 8005054:	911d      	str	r1, [sp, #116]	; 0x74
 8005056:	785b      	ldrb	r3, [r3, #1]
 8005058:	4610      	mov	r0, r2
 800505a:	e7c9      	b.n	8004ff0 <_strtod_l+0x1e8>
 800505c:	4638      	mov	r0, r7
 800505e:	e7d2      	b.n	8005006 <_strtod_l+0x1fe>
 8005060:	2a08      	cmp	r2, #8
 8005062:	dc04      	bgt.n	800506e <_strtod_l+0x266>
 8005064:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005066:	434e      	muls	r6, r1
 8005068:	9609      	str	r6, [sp, #36]	; 0x24
 800506a:	3201      	adds	r2, #1
 800506c:	e7e2      	b.n	8005034 <_strtod_l+0x22c>
 800506e:	f102 0c01 	add.w	ip, r2, #1
 8005072:	f1bc 0f10 	cmp.w	ip, #16
 8005076:	bfd8      	it	le
 8005078:	fb01 f909 	mulle.w	r9, r1, r9
 800507c:	e7f5      	b.n	800506a <_strtod_l+0x262>
 800507e:	2d10      	cmp	r5, #16
 8005080:	bfdc      	itt	le
 8005082:	220a      	movle	r2, #10
 8005084:	fb02 3909 	mlale	r9, r2, r9, r3
 8005088:	e7e1      	b.n	800504e <_strtod_l+0x246>
 800508a:	2300      	movs	r3, #0
 800508c:	9307      	str	r3, [sp, #28]
 800508e:	2201      	movs	r2, #1
 8005090:	e77c      	b.n	8004f8c <_strtod_l+0x184>
 8005092:	f04f 0c00 	mov.w	ip, #0
 8005096:	f108 0302 	add.w	r3, r8, #2
 800509a:	931d      	str	r3, [sp, #116]	; 0x74
 800509c:	f898 3002 	ldrb.w	r3, [r8, #2]
 80050a0:	e785      	b.n	8004fae <_strtod_l+0x1a6>
 80050a2:	f04f 0c01 	mov.w	ip, #1
 80050a6:	e7f6      	b.n	8005096 <_strtod_l+0x28e>
 80050a8:	08009b80 	.word	0x08009b80
 80050ac:	08009930 	.word	0x08009930
 80050b0:	7ff00000 	.word	0x7ff00000
 80050b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80050b6:	1c59      	adds	r1, r3, #1
 80050b8:	911d      	str	r1, [sp, #116]	; 0x74
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b30      	cmp	r3, #48	; 0x30
 80050be:	d0f9      	beq.n	80050b4 <_strtod_l+0x2ac>
 80050c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80050c4:	2908      	cmp	r1, #8
 80050c6:	f63f af79 	bhi.w	8004fbc <_strtod_l+0x1b4>
 80050ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80050ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80050d0:	9308      	str	r3, [sp, #32]
 80050d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80050d4:	1c59      	adds	r1, r3, #1
 80050d6:	911d      	str	r1, [sp, #116]	; 0x74
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80050de:	2e09      	cmp	r6, #9
 80050e0:	d937      	bls.n	8005152 <_strtod_l+0x34a>
 80050e2:	9e08      	ldr	r6, [sp, #32]
 80050e4:	1b89      	subs	r1, r1, r6
 80050e6:	2908      	cmp	r1, #8
 80050e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80050ec:	dc02      	bgt.n	80050f4 <_strtod_l+0x2ec>
 80050ee:	4576      	cmp	r6, lr
 80050f0:	bfa8      	it	ge
 80050f2:	4676      	movge	r6, lr
 80050f4:	f1bc 0f00 	cmp.w	ip, #0
 80050f8:	d000      	beq.n	80050fc <_strtod_l+0x2f4>
 80050fa:	4276      	negs	r6, r6
 80050fc:	2d00      	cmp	r5, #0
 80050fe:	d14f      	bne.n	80051a0 <_strtod_l+0x398>
 8005100:	9904      	ldr	r1, [sp, #16]
 8005102:	4301      	orrs	r1, r0
 8005104:	f47f aec2 	bne.w	8004e8c <_strtod_l+0x84>
 8005108:	2a00      	cmp	r2, #0
 800510a:	f47f aedb 	bne.w	8004ec4 <_strtod_l+0xbc>
 800510e:	2b69      	cmp	r3, #105	; 0x69
 8005110:	d027      	beq.n	8005162 <_strtod_l+0x35a>
 8005112:	dc24      	bgt.n	800515e <_strtod_l+0x356>
 8005114:	2b49      	cmp	r3, #73	; 0x49
 8005116:	d024      	beq.n	8005162 <_strtod_l+0x35a>
 8005118:	2b4e      	cmp	r3, #78	; 0x4e
 800511a:	f47f aed3 	bne.w	8004ec4 <_strtod_l+0xbc>
 800511e:	499e      	ldr	r1, [pc, #632]	; (8005398 <_strtod_l+0x590>)
 8005120:	a81d      	add	r0, sp, #116	; 0x74
 8005122:	f001 fe41 	bl	8006da8 <__match>
 8005126:	2800      	cmp	r0, #0
 8005128:	f43f aecc 	beq.w	8004ec4 <_strtod_l+0xbc>
 800512c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b28      	cmp	r3, #40	; 0x28
 8005132:	d12d      	bne.n	8005190 <_strtod_l+0x388>
 8005134:	4999      	ldr	r1, [pc, #612]	; (800539c <_strtod_l+0x594>)
 8005136:	aa20      	add	r2, sp, #128	; 0x80
 8005138:	a81d      	add	r0, sp, #116	; 0x74
 800513a:	f001 fe49 	bl	8006dd0 <__hexnan>
 800513e:	2805      	cmp	r0, #5
 8005140:	d126      	bne.n	8005190 <_strtod_l+0x388>
 8005142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005144:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005148:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800514c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005150:	e69c      	b.n	8004e8c <_strtod_l+0x84>
 8005152:	210a      	movs	r1, #10
 8005154:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005158:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800515c:	e7b9      	b.n	80050d2 <_strtod_l+0x2ca>
 800515e:	2b6e      	cmp	r3, #110	; 0x6e
 8005160:	e7db      	b.n	800511a <_strtod_l+0x312>
 8005162:	498f      	ldr	r1, [pc, #572]	; (80053a0 <_strtod_l+0x598>)
 8005164:	a81d      	add	r0, sp, #116	; 0x74
 8005166:	f001 fe1f 	bl	8006da8 <__match>
 800516a:	2800      	cmp	r0, #0
 800516c:	f43f aeaa 	beq.w	8004ec4 <_strtod_l+0xbc>
 8005170:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005172:	498c      	ldr	r1, [pc, #560]	; (80053a4 <_strtod_l+0x59c>)
 8005174:	3b01      	subs	r3, #1
 8005176:	a81d      	add	r0, sp, #116	; 0x74
 8005178:	931d      	str	r3, [sp, #116]	; 0x74
 800517a:	f001 fe15 	bl	8006da8 <__match>
 800517e:	b910      	cbnz	r0, 8005186 <_strtod_l+0x37e>
 8005180:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005182:	3301      	adds	r3, #1
 8005184:	931d      	str	r3, [sp, #116]	; 0x74
 8005186:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80053b4 <_strtod_l+0x5ac>
 800518a:	f04f 0a00 	mov.w	sl, #0
 800518e:	e67d      	b.n	8004e8c <_strtod_l+0x84>
 8005190:	4885      	ldr	r0, [pc, #532]	; (80053a8 <_strtod_l+0x5a0>)
 8005192:	f002 fdb5 	bl	8007d00 <nan>
 8005196:	ed8d 0b04 	vstr	d0, [sp, #16]
 800519a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800519e:	e675      	b.n	8004e8c <_strtod_l+0x84>
 80051a0:	9b07      	ldr	r3, [sp, #28]
 80051a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051a4:	1af3      	subs	r3, r6, r3
 80051a6:	2f00      	cmp	r7, #0
 80051a8:	bf08      	it	eq
 80051aa:	462f      	moveq	r7, r5
 80051ac:	2d10      	cmp	r5, #16
 80051ae:	9308      	str	r3, [sp, #32]
 80051b0:	46a8      	mov	r8, r5
 80051b2:	bfa8      	it	ge
 80051b4:	f04f 0810 	movge.w	r8, #16
 80051b8:	f7fb f9a4 	bl	8000504 <__aeabi_ui2d>
 80051bc:	2d09      	cmp	r5, #9
 80051be:	4682      	mov	sl, r0
 80051c0:	468b      	mov	fp, r1
 80051c2:	dd13      	ble.n	80051ec <_strtod_l+0x3e4>
 80051c4:	4b79      	ldr	r3, [pc, #484]	; (80053ac <_strtod_l+0x5a4>)
 80051c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80051ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80051ce:	f7fb fa13 	bl	80005f8 <__aeabi_dmul>
 80051d2:	4682      	mov	sl, r0
 80051d4:	4648      	mov	r0, r9
 80051d6:	468b      	mov	fp, r1
 80051d8:	f7fb f994 	bl	8000504 <__aeabi_ui2d>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4650      	mov	r0, sl
 80051e2:	4659      	mov	r1, fp
 80051e4:	f7fb f852 	bl	800028c <__adddf3>
 80051e8:	4682      	mov	sl, r0
 80051ea:	468b      	mov	fp, r1
 80051ec:	2d0f      	cmp	r5, #15
 80051ee:	dc38      	bgt.n	8005262 <_strtod_l+0x45a>
 80051f0:	9b08      	ldr	r3, [sp, #32]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f43f ae4a 	beq.w	8004e8c <_strtod_l+0x84>
 80051f8:	dd24      	ble.n	8005244 <_strtod_l+0x43c>
 80051fa:	2b16      	cmp	r3, #22
 80051fc:	dc0b      	bgt.n	8005216 <_strtod_l+0x40e>
 80051fe:	4d6b      	ldr	r5, [pc, #428]	; (80053ac <_strtod_l+0x5a4>)
 8005200:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005204:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005208:	4652      	mov	r2, sl
 800520a:	465b      	mov	r3, fp
 800520c:	f7fb f9f4 	bl	80005f8 <__aeabi_dmul>
 8005210:	4682      	mov	sl, r0
 8005212:	468b      	mov	fp, r1
 8005214:	e63a      	b.n	8004e8c <_strtod_l+0x84>
 8005216:	9a08      	ldr	r2, [sp, #32]
 8005218:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800521c:	4293      	cmp	r3, r2
 800521e:	db20      	blt.n	8005262 <_strtod_l+0x45a>
 8005220:	4c62      	ldr	r4, [pc, #392]	; (80053ac <_strtod_l+0x5a4>)
 8005222:	f1c5 050f 	rsb	r5, r5, #15
 8005226:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800522a:	4652      	mov	r2, sl
 800522c:	465b      	mov	r3, fp
 800522e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005232:	f7fb f9e1 	bl	80005f8 <__aeabi_dmul>
 8005236:	9b08      	ldr	r3, [sp, #32]
 8005238:	1b5d      	subs	r5, r3, r5
 800523a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800523e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005242:	e7e3      	b.n	800520c <_strtod_l+0x404>
 8005244:	9b08      	ldr	r3, [sp, #32]
 8005246:	3316      	adds	r3, #22
 8005248:	db0b      	blt.n	8005262 <_strtod_l+0x45a>
 800524a:	9b07      	ldr	r3, [sp, #28]
 800524c:	4a57      	ldr	r2, [pc, #348]	; (80053ac <_strtod_l+0x5a4>)
 800524e:	1b9e      	subs	r6, r3, r6
 8005250:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005254:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005258:	4650      	mov	r0, sl
 800525a:	4659      	mov	r1, fp
 800525c:	f7fb faf6 	bl	800084c <__aeabi_ddiv>
 8005260:	e7d6      	b.n	8005210 <_strtod_l+0x408>
 8005262:	9b08      	ldr	r3, [sp, #32]
 8005264:	eba5 0808 	sub.w	r8, r5, r8
 8005268:	4498      	add	r8, r3
 800526a:	f1b8 0f00 	cmp.w	r8, #0
 800526e:	dd71      	ble.n	8005354 <_strtod_l+0x54c>
 8005270:	f018 030f 	ands.w	r3, r8, #15
 8005274:	d00a      	beq.n	800528c <_strtod_l+0x484>
 8005276:	494d      	ldr	r1, [pc, #308]	; (80053ac <_strtod_l+0x5a4>)
 8005278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800527c:	4652      	mov	r2, sl
 800527e:	465b      	mov	r3, fp
 8005280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005284:	f7fb f9b8 	bl	80005f8 <__aeabi_dmul>
 8005288:	4682      	mov	sl, r0
 800528a:	468b      	mov	fp, r1
 800528c:	f038 080f 	bics.w	r8, r8, #15
 8005290:	d04d      	beq.n	800532e <_strtod_l+0x526>
 8005292:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005296:	dd22      	ble.n	80052de <_strtod_l+0x4d6>
 8005298:	2500      	movs	r5, #0
 800529a:	462e      	mov	r6, r5
 800529c:	9509      	str	r5, [sp, #36]	; 0x24
 800529e:	9507      	str	r5, [sp, #28]
 80052a0:	2322      	movs	r3, #34	; 0x22
 80052a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80053b4 <_strtod_l+0x5ac>
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	f04f 0a00 	mov.w	sl, #0
 80052ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f43f adec 	beq.w	8004e8c <_strtod_l+0x84>
 80052b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80052b6:	4620      	mov	r0, r4
 80052b8:	f001 fe92 	bl	8006fe0 <_Bfree>
 80052bc:	9907      	ldr	r1, [sp, #28]
 80052be:	4620      	mov	r0, r4
 80052c0:	f001 fe8e 	bl	8006fe0 <_Bfree>
 80052c4:	4631      	mov	r1, r6
 80052c6:	4620      	mov	r0, r4
 80052c8:	f001 fe8a 	bl	8006fe0 <_Bfree>
 80052cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ce:	4620      	mov	r0, r4
 80052d0:	f001 fe86 	bl	8006fe0 <_Bfree>
 80052d4:	4629      	mov	r1, r5
 80052d6:	4620      	mov	r0, r4
 80052d8:	f001 fe82 	bl	8006fe0 <_Bfree>
 80052dc:	e5d6      	b.n	8004e8c <_strtod_l+0x84>
 80052de:	2300      	movs	r3, #0
 80052e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80052e4:	4650      	mov	r0, sl
 80052e6:	4659      	mov	r1, fp
 80052e8:	4699      	mov	r9, r3
 80052ea:	f1b8 0f01 	cmp.w	r8, #1
 80052ee:	dc21      	bgt.n	8005334 <_strtod_l+0x52c>
 80052f0:	b10b      	cbz	r3, 80052f6 <_strtod_l+0x4ee>
 80052f2:	4682      	mov	sl, r0
 80052f4:	468b      	mov	fp, r1
 80052f6:	4b2e      	ldr	r3, [pc, #184]	; (80053b0 <_strtod_l+0x5a8>)
 80052f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80052fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005300:	4652      	mov	r2, sl
 8005302:	465b      	mov	r3, fp
 8005304:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005308:	f7fb f976 	bl	80005f8 <__aeabi_dmul>
 800530c:	4b29      	ldr	r3, [pc, #164]	; (80053b4 <_strtod_l+0x5ac>)
 800530e:	460a      	mov	r2, r1
 8005310:	400b      	ands	r3, r1
 8005312:	4929      	ldr	r1, [pc, #164]	; (80053b8 <_strtod_l+0x5b0>)
 8005314:	428b      	cmp	r3, r1
 8005316:	4682      	mov	sl, r0
 8005318:	d8be      	bhi.n	8005298 <_strtod_l+0x490>
 800531a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800531e:	428b      	cmp	r3, r1
 8005320:	bf86      	itte	hi
 8005322:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80053bc <_strtod_l+0x5b4>
 8005326:	f04f 3aff 	movhi.w	sl, #4294967295
 800532a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800532e:	2300      	movs	r3, #0
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	e081      	b.n	8005438 <_strtod_l+0x630>
 8005334:	f018 0f01 	tst.w	r8, #1
 8005338:	d007      	beq.n	800534a <_strtod_l+0x542>
 800533a:	4b1d      	ldr	r3, [pc, #116]	; (80053b0 <_strtod_l+0x5a8>)
 800533c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f7fb f958 	bl	80005f8 <__aeabi_dmul>
 8005348:	2301      	movs	r3, #1
 800534a:	f109 0901 	add.w	r9, r9, #1
 800534e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005352:	e7ca      	b.n	80052ea <_strtod_l+0x4e2>
 8005354:	d0eb      	beq.n	800532e <_strtod_l+0x526>
 8005356:	f1c8 0800 	rsb	r8, r8, #0
 800535a:	f018 020f 	ands.w	r2, r8, #15
 800535e:	d00a      	beq.n	8005376 <_strtod_l+0x56e>
 8005360:	4b12      	ldr	r3, [pc, #72]	; (80053ac <_strtod_l+0x5a4>)
 8005362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005366:	4650      	mov	r0, sl
 8005368:	4659      	mov	r1, fp
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7fb fa6d 	bl	800084c <__aeabi_ddiv>
 8005372:	4682      	mov	sl, r0
 8005374:	468b      	mov	fp, r1
 8005376:	ea5f 1828 	movs.w	r8, r8, asr #4
 800537a:	d0d8      	beq.n	800532e <_strtod_l+0x526>
 800537c:	f1b8 0f1f 	cmp.w	r8, #31
 8005380:	dd1e      	ble.n	80053c0 <_strtod_l+0x5b8>
 8005382:	2500      	movs	r5, #0
 8005384:	462e      	mov	r6, r5
 8005386:	9509      	str	r5, [sp, #36]	; 0x24
 8005388:	9507      	str	r5, [sp, #28]
 800538a:	2322      	movs	r3, #34	; 0x22
 800538c:	f04f 0a00 	mov.w	sl, #0
 8005390:	f04f 0b00 	mov.w	fp, #0
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	e789      	b.n	80052ac <_strtod_l+0x4a4>
 8005398:	08009901 	.word	0x08009901
 800539c:	08009944 	.word	0x08009944
 80053a0:	080098f9 	.word	0x080098f9
 80053a4:	08009a84 	.word	0x08009a84
 80053a8:	08009d40 	.word	0x08009d40
 80053ac:	08009c20 	.word	0x08009c20
 80053b0:	08009bf8 	.word	0x08009bf8
 80053b4:	7ff00000 	.word	0x7ff00000
 80053b8:	7ca00000 	.word	0x7ca00000
 80053bc:	7fefffff 	.word	0x7fefffff
 80053c0:	f018 0310 	ands.w	r3, r8, #16
 80053c4:	bf18      	it	ne
 80053c6:	236a      	movne	r3, #106	; 0x6a
 80053c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005780 <_strtod_l+0x978>
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	4650      	mov	r0, sl
 80053d0:	4659      	mov	r1, fp
 80053d2:	2300      	movs	r3, #0
 80053d4:	f018 0f01 	tst.w	r8, #1
 80053d8:	d004      	beq.n	80053e4 <_strtod_l+0x5dc>
 80053da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80053de:	f7fb f90b 	bl	80005f8 <__aeabi_dmul>
 80053e2:	2301      	movs	r3, #1
 80053e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80053e8:	f109 0908 	add.w	r9, r9, #8
 80053ec:	d1f2      	bne.n	80053d4 <_strtod_l+0x5cc>
 80053ee:	b10b      	cbz	r3, 80053f4 <_strtod_l+0x5ec>
 80053f0:	4682      	mov	sl, r0
 80053f2:	468b      	mov	fp, r1
 80053f4:	9b04      	ldr	r3, [sp, #16]
 80053f6:	b1bb      	cbz	r3, 8005428 <_strtod_l+0x620>
 80053f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80053fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005400:	2b00      	cmp	r3, #0
 8005402:	4659      	mov	r1, fp
 8005404:	dd10      	ble.n	8005428 <_strtod_l+0x620>
 8005406:	2b1f      	cmp	r3, #31
 8005408:	f340 8128 	ble.w	800565c <_strtod_l+0x854>
 800540c:	2b34      	cmp	r3, #52	; 0x34
 800540e:	bfde      	ittt	le
 8005410:	3b20      	suble	r3, #32
 8005412:	f04f 32ff 	movle.w	r2, #4294967295
 8005416:	fa02 f303 	lslle.w	r3, r2, r3
 800541a:	f04f 0a00 	mov.w	sl, #0
 800541e:	bfcc      	ite	gt
 8005420:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005424:	ea03 0b01 	andle.w	fp, r3, r1
 8005428:	2200      	movs	r2, #0
 800542a:	2300      	movs	r3, #0
 800542c:	4650      	mov	r0, sl
 800542e:	4659      	mov	r1, fp
 8005430:	f7fb fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005434:	2800      	cmp	r0, #0
 8005436:	d1a4      	bne.n	8005382 <_strtod_l+0x57a>
 8005438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800543e:	462b      	mov	r3, r5
 8005440:	463a      	mov	r2, r7
 8005442:	4620      	mov	r0, r4
 8005444:	f001 fe38 	bl	80070b8 <__s2b>
 8005448:	9009      	str	r0, [sp, #36]	; 0x24
 800544a:	2800      	cmp	r0, #0
 800544c:	f43f af24 	beq.w	8005298 <_strtod_l+0x490>
 8005450:	9b07      	ldr	r3, [sp, #28]
 8005452:	1b9e      	subs	r6, r3, r6
 8005454:	9b08      	ldr	r3, [sp, #32]
 8005456:	2b00      	cmp	r3, #0
 8005458:	bfb4      	ite	lt
 800545a:	4633      	movlt	r3, r6
 800545c:	2300      	movge	r3, #0
 800545e:	9310      	str	r3, [sp, #64]	; 0x40
 8005460:	9b08      	ldr	r3, [sp, #32]
 8005462:	2500      	movs	r5, #0
 8005464:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005468:	9318      	str	r3, [sp, #96]	; 0x60
 800546a:	462e      	mov	r6, r5
 800546c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800546e:	4620      	mov	r0, r4
 8005470:	6859      	ldr	r1, [r3, #4]
 8005472:	f001 fd75 	bl	8006f60 <_Balloc>
 8005476:	9007      	str	r0, [sp, #28]
 8005478:	2800      	cmp	r0, #0
 800547a:	f43f af11 	beq.w	80052a0 <_strtod_l+0x498>
 800547e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	3202      	adds	r2, #2
 8005484:	f103 010c 	add.w	r1, r3, #12
 8005488:	0092      	lsls	r2, r2, #2
 800548a:	300c      	adds	r0, #12
 800548c:	f001 fd5a 	bl	8006f44 <memcpy>
 8005490:	ec4b ab10 	vmov	d0, sl, fp
 8005494:	aa20      	add	r2, sp, #128	; 0x80
 8005496:	a91f      	add	r1, sp, #124	; 0x7c
 8005498:	4620      	mov	r0, r4
 800549a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800549e:	f002 f947 	bl	8007730 <__d2b>
 80054a2:	901e      	str	r0, [sp, #120]	; 0x78
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f43f aefb 	beq.w	80052a0 <_strtod_l+0x498>
 80054aa:	2101      	movs	r1, #1
 80054ac:	4620      	mov	r0, r4
 80054ae:	f001 fe9d 	bl	80071ec <__i2b>
 80054b2:	4606      	mov	r6, r0
 80054b4:	2800      	cmp	r0, #0
 80054b6:	f43f aef3 	beq.w	80052a0 <_strtod_l+0x498>
 80054ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054bc:	9904      	ldr	r1, [sp, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bfab      	itete	ge
 80054c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80054c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80054c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80054c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80054cc:	bfac      	ite	ge
 80054ce:	eb03 0902 	addge.w	r9, r3, r2
 80054d2:	1ad7      	sublt	r7, r2, r3
 80054d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054d6:	eba3 0801 	sub.w	r8, r3, r1
 80054da:	4490      	add	r8, r2
 80054dc:	4ba3      	ldr	r3, [pc, #652]	; (800576c <_strtod_l+0x964>)
 80054de:	f108 38ff 	add.w	r8, r8, #4294967295
 80054e2:	4598      	cmp	r8, r3
 80054e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80054e8:	f280 80cc 	bge.w	8005684 <_strtod_l+0x87c>
 80054ec:	eba3 0308 	sub.w	r3, r3, r8
 80054f0:	2b1f      	cmp	r3, #31
 80054f2:	eba2 0203 	sub.w	r2, r2, r3
 80054f6:	f04f 0101 	mov.w	r1, #1
 80054fa:	f300 80b6 	bgt.w	800566a <_strtod_l+0x862>
 80054fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005502:	9311      	str	r3, [sp, #68]	; 0x44
 8005504:	2300      	movs	r3, #0
 8005506:	930c      	str	r3, [sp, #48]	; 0x30
 8005508:	eb09 0802 	add.w	r8, r9, r2
 800550c:	9b04      	ldr	r3, [sp, #16]
 800550e:	45c1      	cmp	r9, r8
 8005510:	4417      	add	r7, r2
 8005512:	441f      	add	r7, r3
 8005514:	464b      	mov	r3, r9
 8005516:	bfa8      	it	ge
 8005518:	4643      	movge	r3, r8
 800551a:	42bb      	cmp	r3, r7
 800551c:	bfa8      	it	ge
 800551e:	463b      	movge	r3, r7
 8005520:	2b00      	cmp	r3, #0
 8005522:	bfc2      	ittt	gt
 8005524:	eba8 0803 	subgt.w	r8, r8, r3
 8005528:	1aff      	subgt	r7, r7, r3
 800552a:	eba9 0903 	subgt.w	r9, r9, r3
 800552e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005530:	2b00      	cmp	r3, #0
 8005532:	dd17      	ble.n	8005564 <_strtod_l+0x75c>
 8005534:	4631      	mov	r1, r6
 8005536:	461a      	mov	r2, r3
 8005538:	4620      	mov	r0, r4
 800553a:	f001 ff13 	bl	8007364 <__pow5mult>
 800553e:	4606      	mov	r6, r0
 8005540:	2800      	cmp	r0, #0
 8005542:	f43f aead 	beq.w	80052a0 <_strtod_l+0x498>
 8005546:	4601      	mov	r1, r0
 8005548:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800554a:	4620      	mov	r0, r4
 800554c:	f001 fe64 	bl	8007218 <__multiply>
 8005550:	900f      	str	r0, [sp, #60]	; 0x3c
 8005552:	2800      	cmp	r0, #0
 8005554:	f43f aea4 	beq.w	80052a0 <_strtod_l+0x498>
 8005558:	991e      	ldr	r1, [sp, #120]	; 0x78
 800555a:	4620      	mov	r0, r4
 800555c:	f001 fd40 	bl	8006fe0 <_Bfree>
 8005560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005562:	931e      	str	r3, [sp, #120]	; 0x78
 8005564:	f1b8 0f00 	cmp.w	r8, #0
 8005568:	f300 8091 	bgt.w	800568e <_strtod_l+0x886>
 800556c:	9b08      	ldr	r3, [sp, #32]
 800556e:	2b00      	cmp	r3, #0
 8005570:	dd08      	ble.n	8005584 <_strtod_l+0x77c>
 8005572:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005574:	9907      	ldr	r1, [sp, #28]
 8005576:	4620      	mov	r0, r4
 8005578:	f001 fef4 	bl	8007364 <__pow5mult>
 800557c:	9007      	str	r0, [sp, #28]
 800557e:	2800      	cmp	r0, #0
 8005580:	f43f ae8e 	beq.w	80052a0 <_strtod_l+0x498>
 8005584:	2f00      	cmp	r7, #0
 8005586:	dd08      	ble.n	800559a <_strtod_l+0x792>
 8005588:	9907      	ldr	r1, [sp, #28]
 800558a:	463a      	mov	r2, r7
 800558c:	4620      	mov	r0, r4
 800558e:	f001 ff43 	bl	8007418 <__lshift>
 8005592:	9007      	str	r0, [sp, #28]
 8005594:	2800      	cmp	r0, #0
 8005596:	f43f ae83 	beq.w	80052a0 <_strtod_l+0x498>
 800559a:	f1b9 0f00 	cmp.w	r9, #0
 800559e:	dd08      	ble.n	80055b2 <_strtod_l+0x7aa>
 80055a0:	4631      	mov	r1, r6
 80055a2:	464a      	mov	r2, r9
 80055a4:	4620      	mov	r0, r4
 80055a6:	f001 ff37 	bl	8007418 <__lshift>
 80055aa:	4606      	mov	r6, r0
 80055ac:	2800      	cmp	r0, #0
 80055ae:	f43f ae77 	beq.w	80052a0 <_strtod_l+0x498>
 80055b2:	9a07      	ldr	r2, [sp, #28]
 80055b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80055b6:	4620      	mov	r0, r4
 80055b8:	f001 ffb6 	bl	8007528 <__mdiff>
 80055bc:	4605      	mov	r5, r0
 80055be:	2800      	cmp	r0, #0
 80055c0:	f43f ae6e 	beq.w	80052a0 <_strtod_l+0x498>
 80055c4:	68c3      	ldr	r3, [r0, #12]
 80055c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80055c8:	2300      	movs	r3, #0
 80055ca:	60c3      	str	r3, [r0, #12]
 80055cc:	4631      	mov	r1, r6
 80055ce:	f001 ff8f 	bl	80074f0 <__mcmp>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	da65      	bge.n	80056a2 <_strtod_l+0x89a>
 80055d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055d8:	ea53 030a 	orrs.w	r3, r3, sl
 80055dc:	f040 8087 	bne.w	80056ee <_strtod_l+0x8e6>
 80055e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f040 8082 	bne.w	80056ee <_strtod_l+0x8e6>
 80055ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80055ee:	0d1b      	lsrs	r3, r3, #20
 80055f0:	051b      	lsls	r3, r3, #20
 80055f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80055f6:	d97a      	bls.n	80056ee <_strtod_l+0x8e6>
 80055f8:	696b      	ldr	r3, [r5, #20]
 80055fa:	b913      	cbnz	r3, 8005602 <_strtod_l+0x7fa>
 80055fc:	692b      	ldr	r3, [r5, #16]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	dd75      	ble.n	80056ee <_strtod_l+0x8e6>
 8005602:	4629      	mov	r1, r5
 8005604:	2201      	movs	r2, #1
 8005606:	4620      	mov	r0, r4
 8005608:	f001 ff06 	bl	8007418 <__lshift>
 800560c:	4631      	mov	r1, r6
 800560e:	4605      	mov	r5, r0
 8005610:	f001 ff6e 	bl	80074f0 <__mcmp>
 8005614:	2800      	cmp	r0, #0
 8005616:	dd6a      	ble.n	80056ee <_strtod_l+0x8e6>
 8005618:	9904      	ldr	r1, [sp, #16]
 800561a:	4a55      	ldr	r2, [pc, #340]	; (8005770 <_strtod_l+0x968>)
 800561c:	465b      	mov	r3, fp
 800561e:	2900      	cmp	r1, #0
 8005620:	f000 8085 	beq.w	800572e <_strtod_l+0x926>
 8005624:	ea02 010b 	and.w	r1, r2, fp
 8005628:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800562c:	dc7f      	bgt.n	800572e <_strtod_l+0x926>
 800562e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005632:	f77f aeaa 	ble.w	800538a <_strtod_l+0x582>
 8005636:	4a4f      	ldr	r2, [pc, #316]	; (8005774 <_strtod_l+0x96c>)
 8005638:	2300      	movs	r3, #0
 800563a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800563e:	4650      	mov	r0, sl
 8005640:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005644:	4659      	mov	r1, fp
 8005646:	f7fa ffd7 	bl	80005f8 <__aeabi_dmul>
 800564a:	460b      	mov	r3, r1
 800564c:	4303      	orrs	r3, r0
 800564e:	bf08      	it	eq
 8005650:	2322      	moveq	r3, #34	; 0x22
 8005652:	4682      	mov	sl, r0
 8005654:	468b      	mov	fp, r1
 8005656:	bf08      	it	eq
 8005658:	6023      	streq	r3, [r4, #0]
 800565a:	e62b      	b.n	80052b4 <_strtod_l+0x4ac>
 800565c:	f04f 32ff 	mov.w	r2, #4294967295
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	ea03 0a0a 	and.w	sl, r3, sl
 8005668:	e6de      	b.n	8005428 <_strtod_l+0x620>
 800566a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800566e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005672:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005676:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800567a:	fa01 f308 	lsl.w	r3, r1, r8
 800567e:	930c      	str	r3, [sp, #48]	; 0x30
 8005680:	9111      	str	r1, [sp, #68]	; 0x44
 8005682:	e741      	b.n	8005508 <_strtod_l+0x700>
 8005684:	2300      	movs	r3, #0
 8005686:	930c      	str	r3, [sp, #48]	; 0x30
 8005688:	2301      	movs	r3, #1
 800568a:	9311      	str	r3, [sp, #68]	; 0x44
 800568c:	e73c      	b.n	8005508 <_strtod_l+0x700>
 800568e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005690:	4642      	mov	r2, r8
 8005692:	4620      	mov	r0, r4
 8005694:	f001 fec0 	bl	8007418 <__lshift>
 8005698:	901e      	str	r0, [sp, #120]	; 0x78
 800569a:	2800      	cmp	r0, #0
 800569c:	f47f af66 	bne.w	800556c <_strtod_l+0x764>
 80056a0:	e5fe      	b.n	80052a0 <_strtod_l+0x498>
 80056a2:	465f      	mov	r7, fp
 80056a4:	d16e      	bne.n	8005784 <_strtod_l+0x97c>
 80056a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056ac:	b342      	cbz	r2, 8005700 <_strtod_l+0x8f8>
 80056ae:	4a32      	ldr	r2, [pc, #200]	; (8005778 <_strtod_l+0x970>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d128      	bne.n	8005706 <_strtod_l+0x8fe>
 80056b4:	9b04      	ldr	r3, [sp, #16]
 80056b6:	4650      	mov	r0, sl
 80056b8:	b1eb      	cbz	r3, 80056f6 <_strtod_l+0x8ee>
 80056ba:	4a2d      	ldr	r2, [pc, #180]	; (8005770 <_strtod_l+0x968>)
 80056bc:	403a      	ands	r2, r7
 80056be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80056c2:	f04f 31ff 	mov.w	r1, #4294967295
 80056c6:	d819      	bhi.n	80056fc <_strtod_l+0x8f4>
 80056c8:	0d12      	lsrs	r2, r2, #20
 80056ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80056ce:	fa01 f303 	lsl.w	r3, r1, r3
 80056d2:	4298      	cmp	r0, r3
 80056d4:	d117      	bne.n	8005706 <_strtod_l+0x8fe>
 80056d6:	4b29      	ldr	r3, [pc, #164]	; (800577c <_strtod_l+0x974>)
 80056d8:	429f      	cmp	r7, r3
 80056da:	d102      	bne.n	80056e2 <_strtod_l+0x8da>
 80056dc:	3001      	adds	r0, #1
 80056de:	f43f addf 	beq.w	80052a0 <_strtod_l+0x498>
 80056e2:	4b23      	ldr	r3, [pc, #140]	; (8005770 <_strtod_l+0x968>)
 80056e4:	403b      	ands	r3, r7
 80056e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80056ea:	f04f 0a00 	mov.w	sl, #0
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1a0      	bne.n	8005636 <_strtod_l+0x82e>
 80056f4:	e5de      	b.n	80052b4 <_strtod_l+0x4ac>
 80056f6:	f04f 33ff 	mov.w	r3, #4294967295
 80056fa:	e7ea      	b.n	80056d2 <_strtod_l+0x8ca>
 80056fc:	460b      	mov	r3, r1
 80056fe:	e7e8      	b.n	80056d2 <_strtod_l+0x8ca>
 8005700:	ea53 030a 	orrs.w	r3, r3, sl
 8005704:	d088      	beq.n	8005618 <_strtod_l+0x810>
 8005706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005708:	b1db      	cbz	r3, 8005742 <_strtod_l+0x93a>
 800570a:	423b      	tst	r3, r7
 800570c:	d0ef      	beq.n	80056ee <_strtod_l+0x8e6>
 800570e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005710:	9a04      	ldr	r2, [sp, #16]
 8005712:	4650      	mov	r0, sl
 8005714:	4659      	mov	r1, fp
 8005716:	b1c3      	cbz	r3, 800574a <_strtod_l+0x942>
 8005718:	f7ff fb58 	bl	8004dcc <sulp>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005724:	f7fa fdb2 	bl	800028c <__adddf3>
 8005728:	4682      	mov	sl, r0
 800572a:	468b      	mov	fp, r1
 800572c:	e7df      	b.n	80056ee <_strtod_l+0x8e6>
 800572e:	4013      	ands	r3, r2
 8005730:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005734:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005738:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800573c:	f04f 3aff 	mov.w	sl, #4294967295
 8005740:	e7d5      	b.n	80056ee <_strtod_l+0x8e6>
 8005742:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005744:	ea13 0f0a 	tst.w	r3, sl
 8005748:	e7e0      	b.n	800570c <_strtod_l+0x904>
 800574a:	f7ff fb3f 	bl	8004dcc <sulp>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005756:	f7fa fd97 	bl	8000288 <__aeabi_dsub>
 800575a:	2200      	movs	r2, #0
 800575c:	2300      	movs	r3, #0
 800575e:	4682      	mov	sl, r0
 8005760:	468b      	mov	fp, r1
 8005762:	f7fb f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005766:	2800      	cmp	r0, #0
 8005768:	d0c1      	beq.n	80056ee <_strtod_l+0x8e6>
 800576a:	e60e      	b.n	800538a <_strtod_l+0x582>
 800576c:	fffffc02 	.word	0xfffffc02
 8005770:	7ff00000 	.word	0x7ff00000
 8005774:	39500000 	.word	0x39500000
 8005778:	000fffff 	.word	0x000fffff
 800577c:	7fefffff 	.word	0x7fefffff
 8005780:	08009958 	.word	0x08009958
 8005784:	4631      	mov	r1, r6
 8005786:	4628      	mov	r0, r5
 8005788:	f002 f82e 	bl	80077e8 <__ratio>
 800578c:	ec59 8b10 	vmov	r8, r9, d0
 8005790:	ee10 0a10 	vmov	r0, s0
 8005794:	2200      	movs	r2, #0
 8005796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800579a:	4649      	mov	r1, r9
 800579c:	f7fb f9a8 	bl	8000af0 <__aeabi_dcmple>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d07c      	beq.n	800589e <_strtod_l+0xa96>
 80057a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d04c      	beq.n	8005844 <_strtod_l+0xa3c>
 80057aa:	4b95      	ldr	r3, [pc, #596]	; (8005a00 <_strtod_l+0xbf8>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80057b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005a00 <_strtod_l+0xbf8>
 80057b6:	f04f 0800 	mov.w	r8, #0
 80057ba:	4b92      	ldr	r3, [pc, #584]	; (8005a04 <_strtod_l+0xbfc>)
 80057bc:	403b      	ands	r3, r7
 80057be:	9311      	str	r3, [sp, #68]	; 0x44
 80057c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80057c2:	4b91      	ldr	r3, [pc, #580]	; (8005a08 <_strtod_l+0xc00>)
 80057c4:	429a      	cmp	r2, r3
 80057c6:	f040 80b2 	bne.w	800592e <_strtod_l+0xb26>
 80057ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80057d6:	ec4b ab10 	vmov	d0, sl, fp
 80057da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80057de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80057e2:	f001 ff29 	bl	8007638 <__ulp>
 80057e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057ea:	ec53 2b10 	vmov	r2, r3, d0
 80057ee:	f7fa ff03 	bl	80005f8 <__aeabi_dmul>
 80057f2:	4652      	mov	r2, sl
 80057f4:	465b      	mov	r3, fp
 80057f6:	f7fa fd49 	bl	800028c <__adddf3>
 80057fa:	460b      	mov	r3, r1
 80057fc:	4981      	ldr	r1, [pc, #516]	; (8005a04 <_strtod_l+0xbfc>)
 80057fe:	4a83      	ldr	r2, [pc, #524]	; (8005a0c <_strtod_l+0xc04>)
 8005800:	4019      	ands	r1, r3
 8005802:	4291      	cmp	r1, r2
 8005804:	4682      	mov	sl, r0
 8005806:	d95e      	bls.n	80058c6 <_strtod_l+0xabe>
 8005808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800580a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800580e:	4293      	cmp	r3, r2
 8005810:	d103      	bne.n	800581a <_strtod_l+0xa12>
 8005812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005814:	3301      	adds	r3, #1
 8005816:	f43f ad43 	beq.w	80052a0 <_strtod_l+0x498>
 800581a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005a18 <_strtod_l+0xc10>
 800581e:	f04f 3aff 	mov.w	sl, #4294967295
 8005822:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005824:	4620      	mov	r0, r4
 8005826:	f001 fbdb 	bl	8006fe0 <_Bfree>
 800582a:	9907      	ldr	r1, [sp, #28]
 800582c:	4620      	mov	r0, r4
 800582e:	f001 fbd7 	bl	8006fe0 <_Bfree>
 8005832:	4631      	mov	r1, r6
 8005834:	4620      	mov	r0, r4
 8005836:	f001 fbd3 	bl	8006fe0 <_Bfree>
 800583a:	4629      	mov	r1, r5
 800583c:	4620      	mov	r0, r4
 800583e:	f001 fbcf 	bl	8006fe0 <_Bfree>
 8005842:	e613      	b.n	800546c <_strtod_l+0x664>
 8005844:	f1ba 0f00 	cmp.w	sl, #0
 8005848:	d11b      	bne.n	8005882 <_strtod_l+0xa7a>
 800584a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800584e:	b9f3      	cbnz	r3, 800588e <_strtod_l+0xa86>
 8005850:	4b6b      	ldr	r3, [pc, #428]	; (8005a00 <_strtod_l+0xbf8>)
 8005852:	2200      	movs	r2, #0
 8005854:	4640      	mov	r0, r8
 8005856:	4649      	mov	r1, r9
 8005858:	f7fb f940 	bl	8000adc <__aeabi_dcmplt>
 800585c:	b9d0      	cbnz	r0, 8005894 <_strtod_l+0xa8c>
 800585e:	4640      	mov	r0, r8
 8005860:	4649      	mov	r1, r9
 8005862:	4b6b      	ldr	r3, [pc, #428]	; (8005a10 <_strtod_l+0xc08>)
 8005864:	2200      	movs	r2, #0
 8005866:	f7fa fec7 	bl	80005f8 <__aeabi_dmul>
 800586a:	4680      	mov	r8, r0
 800586c:	4689      	mov	r9, r1
 800586e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005872:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005876:	931b      	str	r3, [sp, #108]	; 0x6c
 8005878:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800587c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005880:	e79b      	b.n	80057ba <_strtod_l+0x9b2>
 8005882:	f1ba 0f01 	cmp.w	sl, #1
 8005886:	d102      	bne.n	800588e <_strtod_l+0xa86>
 8005888:	2f00      	cmp	r7, #0
 800588a:	f43f ad7e 	beq.w	800538a <_strtod_l+0x582>
 800588e:	4b61      	ldr	r3, [pc, #388]	; (8005a14 <_strtod_l+0xc0c>)
 8005890:	2200      	movs	r2, #0
 8005892:	e78c      	b.n	80057ae <_strtod_l+0x9a6>
 8005894:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005a10 <_strtod_l+0xc08>
 8005898:	f04f 0800 	mov.w	r8, #0
 800589c:	e7e7      	b.n	800586e <_strtod_l+0xa66>
 800589e:	4b5c      	ldr	r3, [pc, #368]	; (8005a10 <_strtod_l+0xc08>)
 80058a0:	4640      	mov	r0, r8
 80058a2:	4649      	mov	r1, r9
 80058a4:	2200      	movs	r2, #0
 80058a6:	f7fa fea7 	bl	80005f8 <__aeabi_dmul>
 80058aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058ac:	4680      	mov	r8, r0
 80058ae:	4689      	mov	r9, r1
 80058b0:	b933      	cbnz	r3, 80058c0 <_strtod_l+0xab8>
 80058b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058b6:	9012      	str	r0, [sp, #72]	; 0x48
 80058b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80058ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80058be:	e7dd      	b.n	800587c <_strtod_l+0xa74>
 80058c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80058c4:	e7f9      	b.n	80058ba <_strtod_l+0xab2>
 80058c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80058ca:	9b04      	ldr	r3, [sp, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1a8      	bne.n	8005822 <_strtod_l+0xa1a>
 80058d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80058d6:	0d1b      	lsrs	r3, r3, #20
 80058d8:	051b      	lsls	r3, r3, #20
 80058da:	429a      	cmp	r2, r3
 80058dc:	d1a1      	bne.n	8005822 <_strtod_l+0xa1a>
 80058de:	4640      	mov	r0, r8
 80058e0:	4649      	mov	r1, r9
 80058e2:	f7fb f9d1 	bl	8000c88 <__aeabi_d2lz>
 80058e6:	f7fa fe59 	bl	800059c <__aeabi_l2d>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4640      	mov	r0, r8
 80058f0:	4649      	mov	r1, r9
 80058f2:	f7fa fcc9 	bl	8000288 <__aeabi_dsub>
 80058f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058fc:	ea43 030a 	orr.w	r3, r3, sl
 8005900:	4313      	orrs	r3, r2
 8005902:	4680      	mov	r8, r0
 8005904:	4689      	mov	r9, r1
 8005906:	d053      	beq.n	80059b0 <_strtod_l+0xba8>
 8005908:	a335      	add	r3, pc, #212	; (adr r3, 80059e0 <_strtod_l+0xbd8>)
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	f7fb f8e5 	bl	8000adc <__aeabi_dcmplt>
 8005912:	2800      	cmp	r0, #0
 8005914:	f47f acce 	bne.w	80052b4 <_strtod_l+0x4ac>
 8005918:	a333      	add	r3, pc, #204	; (adr r3, 80059e8 <_strtod_l+0xbe0>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	4640      	mov	r0, r8
 8005920:	4649      	mov	r1, r9
 8005922:	f7fb f8f9 	bl	8000b18 <__aeabi_dcmpgt>
 8005926:	2800      	cmp	r0, #0
 8005928:	f43f af7b 	beq.w	8005822 <_strtod_l+0xa1a>
 800592c:	e4c2      	b.n	80052b4 <_strtod_l+0x4ac>
 800592e:	9b04      	ldr	r3, [sp, #16]
 8005930:	b333      	cbz	r3, 8005980 <_strtod_l+0xb78>
 8005932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005934:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005938:	d822      	bhi.n	8005980 <_strtod_l+0xb78>
 800593a:	a32d      	add	r3, pc, #180	; (adr r3, 80059f0 <_strtod_l+0xbe8>)
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	4640      	mov	r0, r8
 8005942:	4649      	mov	r1, r9
 8005944:	f7fb f8d4 	bl	8000af0 <__aeabi_dcmple>
 8005948:	b1a0      	cbz	r0, 8005974 <_strtod_l+0xb6c>
 800594a:	4649      	mov	r1, r9
 800594c:	4640      	mov	r0, r8
 800594e:	f7fb f92b 	bl	8000ba8 <__aeabi_d2uiz>
 8005952:	2801      	cmp	r0, #1
 8005954:	bf38      	it	cc
 8005956:	2001      	movcc	r0, #1
 8005958:	f7fa fdd4 	bl	8000504 <__aeabi_ui2d>
 800595c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800595e:	4680      	mov	r8, r0
 8005960:	4689      	mov	r9, r1
 8005962:	bb13      	cbnz	r3, 80059aa <_strtod_l+0xba2>
 8005964:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005968:	9014      	str	r0, [sp, #80]	; 0x50
 800596a:	9315      	str	r3, [sp, #84]	; 0x54
 800596c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005970:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005976:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005978:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	930d      	str	r3, [sp, #52]	; 0x34
 8005980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005984:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005988:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800598c:	f001 fe54 	bl	8007638 <__ulp>
 8005990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005994:	ec53 2b10 	vmov	r2, r3, d0
 8005998:	f7fa fe2e 	bl	80005f8 <__aeabi_dmul>
 800599c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059a0:	f7fa fc74 	bl	800028c <__adddf3>
 80059a4:	4682      	mov	sl, r0
 80059a6:	468b      	mov	fp, r1
 80059a8:	e78f      	b.n	80058ca <_strtod_l+0xac2>
 80059aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80059ae:	e7dd      	b.n	800596c <_strtod_l+0xb64>
 80059b0:	a311      	add	r3, pc, #68	; (adr r3, 80059f8 <_strtod_l+0xbf0>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f7fb f891 	bl	8000adc <__aeabi_dcmplt>
 80059ba:	e7b4      	b.n	8005926 <_strtod_l+0xb1e>
 80059bc:	2300      	movs	r3, #0
 80059be:	930e      	str	r3, [sp, #56]	; 0x38
 80059c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80059c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	f7ff ba65 	b.w	8004e94 <_strtod_l+0x8c>
 80059ca:	2b65      	cmp	r3, #101	; 0x65
 80059cc:	f43f ab5d 	beq.w	800508a <_strtod_l+0x282>
 80059d0:	2b45      	cmp	r3, #69	; 0x45
 80059d2:	f43f ab5a 	beq.w	800508a <_strtod_l+0x282>
 80059d6:	2201      	movs	r2, #1
 80059d8:	f7ff bb92 	b.w	8005100 <_strtod_l+0x2f8>
 80059dc:	f3af 8000 	nop.w
 80059e0:	94a03595 	.word	0x94a03595
 80059e4:	3fdfffff 	.word	0x3fdfffff
 80059e8:	35afe535 	.word	0x35afe535
 80059ec:	3fe00000 	.word	0x3fe00000
 80059f0:	ffc00000 	.word	0xffc00000
 80059f4:	41dfffff 	.word	0x41dfffff
 80059f8:	94a03595 	.word	0x94a03595
 80059fc:	3fcfffff 	.word	0x3fcfffff
 8005a00:	3ff00000 	.word	0x3ff00000
 8005a04:	7ff00000 	.word	0x7ff00000
 8005a08:	7fe00000 	.word	0x7fe00000
 8005a0c:	7c9fffff 	.word	0x7c9fffff
 8005a10:	3fe00000 	.word	0x3fe00000
 8005a14:	bff00000 	.word	0xbff00000
 8005a18:	7fefffff 	.word	0x7fefffff

08005a1c <_strtod_r>:
 8005a1c:	4b01      	ldr	r3, [pc, #4]	; (8005a24 <_strtod_r+0x8>)
 8005a1e:	f7ff b9f3 	b.w	8004e08 <_strtod_l>
 8005a22:	bf00      	nop
 8005a24:	20000070 	.word	0x20000070

08005a28 <_strtol_l.isra.0>:
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a2e:	d001      	beq.n	8005a34 <_strtol_l.isra.0+0xc>
 8005a30:	2b24      	cmp	r3, #36	; 0x24
 8005a32:	d906      	bls.n	8005a42 <_strtol_l.isra.0+0x1a>
 8005a34:	f7fe faf8 	bl	8004028 <__errno>
 8005a38:	2316      	movs	r3, #22
 8005a3a:	6003      	str	r3, [r0, #0]
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a42:	4f3a      	ldr	r7, [pc, #232]	; (8005b2c <_strtol_l.isra.0+0x104>)
 8005a44:	468e      	mov	lr, r1
 8005a46:	4676      	mov	r6, lr
 8005a48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005a4c:	5de5      	ldrb	r5, [r4, r7]
 8005a4e:	f015 0508 	ands.w	r5, r5, #8
 8005a52:	d1f8      	bne.n	8005a46 <_strtol_l.isra.0+0x1e>
 8005a54:	2c2d      	cmp	r4, #45	; 0x2d
 8005a56:	d134      	bne.n	8005ac2 <_strtol_l.isra.0+0x9a>
 8005a58:	f89e 4000 	ldrb.w	r4, [lr]
 8005a5c:	f04f 0801 	mov.w	r8, #1
 8005a60:	f106 0e02 	add.w	lr, r6, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d05c      	beq.n	8005b22 <_strtol_l.isra.0+0xfa>
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d10c      	bne.n	8005a86 <_strtol_l.isra.0+0x5e>
 8005a6c:	2c30      	cmp	r4, #48	; 0x30
 8005a6e:	d10a      	bne.n	8005a86 <_strtol_l.isra.0+0x5e>
 8005a70:	f89e 4000 	ldrb.w	r4, [lr]
 8005a74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005a78:	2c58      	cmp	r4, #88	; 0x58
 8005a7a:	d14d      	bne.n	8005b18 <_strtol_l.isra.0+0xf0>
 8005a7c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005a80:	2310      	movs	r3, #16
 8005a82:	f10e 0e02 	add.w	lr, lr, #2
 8005a86:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005a8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005a8e:	2600      	movs	r6, #0
 8005a90:	fbbc f9f3 	udiv	r9, ip, r3
 8005a94:	4635      	mov	r5, r6
 8005a96:	fb03 ca19 	mls	sl, r3, r9, ip
 8005a9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005a9e:	2f09      	cmp	r7, #9
 8005aa0:	d818      	bhi.n	8005ad4 <_strtol_l.isra.0+0xac>
 8005aa2:	463c      	mov	r4, r7
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	dd24      	ble.n	8005af2 <_strtol_l.isra.0+0xca>
 8005aa8:	2e00      	cmp	r6, #0
 8005aaa:	db1f      	blt.n	8005aec <_strtol_l.isra.0+0xc4>
 8005aac:	45a9      	cmp	r9, r5
 8005aae:	d31d      	bcc.n	8005aec <_strtol_l.isra.0+0xc4>
 8005ab0:	d101      	bne.n	8005ab6 <_strtol_l.isra.0+0x8e>
 8005ab2:	45a2      	cmp	sl, r4
 8005ab4:	db1a      	blt.n	8005aec <_strtol_l.isra.0+0xc4>
 8005ab6:	fb05 4503 	mla	r5, r5, r3, r4
 8005aba:	2601      	movs	r6, #1
 8005abc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005ac0:	e7eb      	b.n	8005a9a <_strtol_l.isra.0+0x72>
 8005ac2:	2c2b      	cmp	r4, #43	; 0x2b
 8005ac4:	bf08      	it	eq
 8005ac6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005aca:	46a8      	mov	r8, r5
 8005acc:	bf08      	it	eq
 8005ace:	f106 0e02 	addeq.w	lr, r6, #2
 8005ad2:	e7c7      	b.n	8005a64 <_strtol_l.isra.0+0x3c>
 8005ad4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005ad8:	2f19      	cmp	r7, #25
 8005ada:	d801      	bhi.n	8005ae0 <_strtol_l.isra.0+0xb8>
 8005adc:	3c37      	subs	r4, #55	; 0x37
 8005ade:	e7e1      	b.n	8005aa4 <_strtol_l.isra.0+0x7c>
 8005ae0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005ae4:	2f19      	cmp	r7, #25
 8005ae6:	d804      	bhi.n	8005af2 <_strtol_l.isra.0+0xca>
 8005ae8:	3c57      	subs	r4, #87	; 0x57
 8005aea:	e7db      	b.n	8005aa4 <_strtol_l.isra.0+0x7c>
 8005aec:	f04f 36ff 	mov.w	r6, #4294967295
 8005af0:	e7e4      	b.n	8005abc <_strtol_l.isra.0+0x94>
 8005af2:	2e00      	cmp	r6, #0
 8005af4:	da05      	bge.n	8005b02 <_strtol_l.isra.0+0xda>
 8005af6:	2322      	movs	r3, #34	; 0x22
 8005af8:	6003      	str	r3, [r0, #0]
 8005afa:	4665      	mov	r5, ip
 8005afc:	b942      	cbnz	r2, 8005b10 <_strtol_l.isra.0+0xe8>
 8005afe:	4628      	mov	r0, r5
 8005b00:	e79d      	b.n	8005a3e <_strtol_l.isra.0+0x16>
 8005b02:	f1b8 0f00 	cmp.w	r8, #0
 8005b06:	d000      	beq.n	8005b0a <_strtol_l.isra.0+0xe2>
 8005b08:	426d      	negs	r5, r5
 8005b0a:	2a00      	cmp	r2, #0
 8005b0c:	d0f7      	beq.n	8005afe <_strtol_l.isra.0+0xd6>
 8005b0e:	b10e      	cbz	r6, 8005b14 <_strtol_l.isra.0+0xec>
 8005b10:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005b14:	6011      	str	r1, [r2, #0]
 8005b16:	e7f2      	b.n	8005afe <_strtol_l.isra.0+0xd6>
 8005b18:	2430      	movs	r4, #48	; 0x30
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1b3      	bne.n	8005a86 <_strtol_l.isra.0+0x5e>
 8005b1e:	2308      	movs	r3, #8
 8005b20:	e7b1      	b.n	8005a86 <_strtol_l.isra.0+0x5e>
 8005b22:	2c30      	cmp	r4, #48	; 0x30
 8005b24:	d0a4      	beq.n	8005a70 <_strtol_l.isra.0+0x48>
 8005b26:	230a      	movs	r3, #10
 8005b28:	e7ad      	b.n	8005a86 <_strtol_l.isra.0+0x5e>
 8005b2a:	bf00      	nop
 8005b2c:	08009981 	.word	0x08009981

08005b30 <_strtol_r>:
 8005b30:	f7ff bf7a 	b.w	8005a28 <_strtol_l.isra.0>

08005b34 <quorem>:
 8005b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b38:	6903      	ldr	r3, [r0, #16]
 8005b3a:	690c      	ldr	r4, [r1, #16]
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	4607      	mov	r7, r0
 8005b40:	f2c0 8081 	blt.w	8005c46 <quorem+0x112>
 8005b44:	3c01      	subs	r4, #1
 8005b46:	f101 0814 	add.w	r8, r1, #20
 8005b4a:	f100 0514 	add.w	r5, r0, #20
 8005b4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b68:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b6c:	d331      	bcc.n	8005bd2 <quorem+0x9e>
 8005b6e:	f04f 0e00 	mov.w	lr, #0
 8005b72:	4640      	mov	r0, r8
 8005b74:	46ac      	mov	ip, r5
 8005b76:	46f2      	mov	sl, lr
 8005b78:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b7c:	b293      	uxth	r3, r2
 8005b7e:	fb06 e303 	mla	r3, r6, r3, lr
 8005b82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ebaa 0303 	sub.w	r3, sl, r3
 8005b8c:	0c12      	lsrs	r2, r2, #16
 8005b8e:	f8dc a000 	ldr.w	sl, [ip]
 8005b92:	fb06 e202 	mla	r2, r6, r2, lr
 8005b96:	fa13 f38a 	uxtah	r3, r3, sl
 8005b9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b9e:	fa1f fa82 	uxth.w	sl, r2
 8005ba2:	f8dc 2000 	ldr.w	r2, [ip]
 8005ba6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005baa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bb4:	4581      	cmp	r9, r0
 8005bb6:	f84c 3b04 	str.w	r3, [ip], #4
 8005bba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bbe:	d2db      	bcs.n	8005b78 <quorem+0x44>
 8005bc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005bc4:	b92b      	cbnz	r3, 8005bd2 <quorem+0x9e>
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	3b04      	subs	r3, #4
 8005bca:	429d      	cmp	r5, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	d32e      	bcc.n	8005c2e <quorem+0xfa>
 8005bd0:	613c      	str	r4, [r7, #16]
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	f001 fc8c 	bl	80074f0 <__mcmp>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	db24      	blt.n	8005c26 <quorem+0xf2>
 8005bdc:	3601      	adds	r6, #1
 8005bde:	4628      	mov	r0, r5
 8005be0:	f04f 0c00 	mov.w	ip, #0
 8005be4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005be8:	f8d0 e000 	ldr.w	lr, [r0]
 8005bec:	b293      	uxth	r3, r2
 8005bee:	ebac 0303 	sub.w	r3, ip, r3
 8005bf2:	0c12      	lsrs	r2, r2, #16
 8005bf4:	fa13 f38e 	uxtah	r3, r3, lr
 8005bf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005bfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c06:	45c1      	cmp	r9, r8
 8005c08:	f840 3b04 	str.w	r3, [r0], #4
 8005c0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c10:	d2e8      	bcs.n	8005be4 <quorem+0xb0>
 8005c12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c1a:	b922      	cbnz	r2, 8005c26 <quorem+0xf2>
 8005c1c:	3b04      	subs	r3, #4
 8005c1e:	429d      	cmp	r5, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	d30a      	bcc.n	8005c3a <quorem+0x106>
 8005c24:	613c      	str	r4, [r7, #16]
 8005c26:	4630      	mov	r0, r6
 8005c28:	b003      	add	sp, #12
 8005c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	3b04      	subs	r3, #4
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d1cc      	bne.n	8005bd0 <quorem+0x9c>
 8005c36:	3c01      	subs	r4, #1
 8005c38:	e7c7      	b.n	8005bca <quorem+0x96>
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	3b04      	subs	r3, #4
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	d1f0      	bne.n	8005c24 <quorem+0xf0>
 8005c42:	3c01      	subs	r4, #1
 8005c44:	e7eb      	b.n	8005c1e <quorem+0xea>
 8005c46:	2000      	movs	r0, #0
 8005c48:	e7ee      	b.n	8005c28 <quorem+0xf4>
 8005c4a:	0000      	movs	r0, r0
 8005c4c:	0000      	movs	r0, r0
	...

08005c50 <_dtoa_r>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	ed2d 8b02 	vpush	{d8}
 8005c58:	ec57 6b10 	vmov	r6, r7, d0
 8005c5c:	b095      	sub	sp, #84	; 0x54
 8005c5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005c64:	9105      	str	r1, [sp, #20]
 8005c66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c70:	b975      	cbnz	r5, 8005c90 <_dtoa_r+0x40>
 8005c72:	2010      	movs	r0, #16
 8005c74:	f001 f94c 	bl	8006f10 <malloc>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6260      	str	r0, [r4, #36]	; 0x24
 8005c7c:	b920      	cbnz	r0, 8005c88 <_dtoa_r+0x38>
 8005c7e:	4bb2      	ldr	r3, [pc, #712]	; (8005f48 <_dtoa_r+0x2f8>)
 8005c80:	21ea      	movs	r1, #234	; 0xea
 8005c82:	48b2      	ldr	r0, [pc, #712]	; (8005f4c <_dtoa_r+0x2fc>)
 8005c84:	f002 f874 	bl	8007d70 <__assert_func>
 8005c88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c8c:	6005      	str	r5, [r0, #0]
 8005c8e:	60c5      	str	r5, [r0, #12]
 8005c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	b151      	cbz	r1, 8005cac <_dtoa_r+0x5c>
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	604a      	str	r2, [r1, #4]
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4093      	lsls	r3, r2
 8005c9e:	608b      	str	r3, [r1, #8]
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f001 f99d 	bl	8006fe0 <_Bfree>
 8005ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	1e3b      	subs	r3, r7, #0
 8005cae:	bfb9      	ittee	lt
 8005cb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cb4:	9303      	strlt	r3, [sp, #12]
 8005cb6:	2300      	movge	r3, #0
 8005cb8:	f8c8 3000 	strge.w	r3, [r8]
 8005cbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005cc0:	4ba3      	ldr	r3, [pc, #652]	; (8005f50 <_dtoa_r+0x300>)
 8005cc2:	bfbc      	itt	lt
 8005cc4:	2201      	movlt	r2, #1
 8005cc6:	f8c8 2000 	strlt.w	r2, [r8]
 8005cca:	ea33 0309 	bics.w	r3, r3, r9
 8005cce:	d11b      	bne.n	8005d08 <_dtoa_r+0xb8>
 8005cd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cdc:	4333      	orrs	r3, r6
 8005cde:	f000 857a 	beq.w	80067d6 <_dtoa_r+0xb86>
 8005ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ce4:	b963      	cbnz	r3, 8005d00 <_dtoa_r+0xb0>
 8005ce6:	4b9b      	ldr	r3, [pc, #620]	; (8005f54 <_dtoa_r+0x304>)
 8005ce8:	e024      	b.n	8005d34 <_dtoa_r+0xe4>
 8005cea:	4b9b      	ldr	r3, [pc, #620]	; (8005f58 <_dtoa_r+0x308>)
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	9800      	ldr	r0, [sp, #0]
 8005cf6:	b015      	add	sp, #84	; 0x54
 8005cf8:	ecbd 8b02 	vpop	{d8}
 8005cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d00:	4b94      	ldr	r3, [pc, #592]	; (8005f54 <_dtoa_r+0x304>)
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	3303      	adds	r3, #3
 8005d06:	e7f3      	b.n	8005cf0 <_dtoa_r+0xa0>
 8005d08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	ec51 0b17 	vmov	r0, r1, d7
 8005d12:	2300      	movs	r3, #0
 8005d14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005d18:	f7fa fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	b158      	cbz	r0, 8005d38 <_dtoa_r+0xe8>
 8005d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d22:	2301      	movs	r3, #1
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8551 	beq.w	80067d0 <_dtoa_r+0xb80>
 8005d2e:	488b      	ldr	r0, [pc, #556]	; (8005f5c <_dtoa_r+0x30c>)
 8005d30:	6018      	str	r0, [r3, #0]
 8005d32:	1e43      	subs	r3, r0, #1
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	e7dd      	b.n	8005cf4 <_dtoa_r+0xa4>
 8005d38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005d3c:	aa12      	add	r2, sp, #72	; 0x48
 8005d3e:	a913      	add	r1, sp, #76	; 0x4c
 8005d40:	4620      	mov	r0, r4
 8005d42:	f001 fcf5 	bl	8007730 <__d2b>
 8005d46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d4a:	4683      	mov	fp, r0
 8005d4c:	2d00      	cmp	r5, #0
 8005d4e:	d07c      	beq.n	8005e4a <_dtoa_r+0x1fa>
 8005d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005d56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005d5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005d62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d6a:	4b7d      	ldr	r3, [pc, #500]	; (8005f60 <_dtoa_r+0x310>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4630      	mov	r0, r6
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa fa89 	bl	8000288 <__aeabi_dsub>
 8005d76:	a36e      	add	r3, pc, #440	; (adr r3, 8005f30 <_dtoa_r+0x2e0>)
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	f7fa fc3c 	bl	80005f8 <__aeabi_dmul>
 8005d80:	a36d      	add	r3, pc, #436	; (adr r3, 8005f38 <_dtoa_r+0x2e8>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa fa81 	bl	800028c <__adddf3>
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	460f      	mov	r7, r1
 8005d90:	f7fa fbc8 	bl	8000524 <__aeabi_i2d>
 8005d94:	a36a      	add	r3, pc, #424	; (adr r3, 8005f40 <_dtoa_r+0x2f0>)
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	f7fa fc2d 	bl	80005f8 <__aeabi_dmul>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4630      	mov	r0, r6
 8005da4:	4639      	mov	r1, r7
 8005da6:	f7fa fa71 	bl	800028c <__adddf3>
 8005daa:	4606      	mov	r6, r0
 8005dac:	460f      	mov	r7, r1
 8005dae:	f7fa fed3 	bl	8000b58 <__aeabi_d2iz>
 8005db2:	2200      	movs	r2, #0
 8005db4:	4682      	mov	sl, r0
 8005db6:	2300      	movs	r3, #0
 8005db8:	4630      	mov	r0, r6
 8005dba:	4639      	mov	r1, r7
 8005dbc:	f7fa fe8e 	bl	8000adc <__aeabi_dcmplt>
 8005dc0:	b148      	cbz	r0, 8005dd6 <_dtoa_r+0x186>
 8005dc2:	4650      	mov	r0, sl
 8005dc4:	f7fa fbae 	bl	8000524 <__aeabi_i2d>
 8005dc8:	4632      	mov	r2, r6
 8005dca:	463b      	mov	r3, r7
 8005dcc:	f7fa fe7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dd0:	b908      	cbnz	r0, 8005dd6 <_dtoa_r+0x186>
 8005dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dd6:	f1ba 0f16 	cmp.w	sl, #22
 8005dda:	d854      	bhi.n	8005e86 <_dtoa_r+0x236>
 8005ddc:	4b61      	ldr	r3, [pc, #388]	; (8005f64 <_dtoa_r+0x314>)
 8005dde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dea:	f7fa fe77 	bl	8000adc <__aeabi_dcmplt>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d04b      	beq.n	8005e8a <_dtoa_r+0x23a>
 8005df2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005df6:	2300      	movs	r3, #0
 8005df8:	930e      	str	r3, [sp, #56]	; 0x38
 8005dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dfc:	1b5d      	subs	r5, r3, r5
 8005dfe:	1e6b      	subs	r3, r5, #1
 8005e00:	9304      	str	r3, [sp, #16]
 8005e02:	bf43      	ittte	mi
 8005e04:	2300      	movmi	r3, #0
 8005e06:	f1c5 0801 	rsbmi	r8, r5, #1
 8005e0a:	9304      	strmi	r3, [sp, #16]
 8005e0c:	f04f 0800 	movpl.w	r8, #0
 8005e10:	f1ba 0f00 	cmp.w	sl, #0
 8005e14:	db3b      	blt.n	8005e8e <_dtoa_r+0x23e>
 8005e16:	9b04      	ldr	r3, [sp, #16]
 8005e18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005e1c:	4453      	add	r3, sl
 8005e1e:	9304      	str	r3, [sp, #16]
 8005e20:	2300      	movs	r3, #0
 8005e22:	9306      	str	r3, [sp, #24]
 8005e24:	9b05      	ldr	r3, [sp, #20]
 8005e26:	2b09      	cmp	r3, #9
 8005e28:	d869      	bhi.n	8005efe <_dtoa_r+0x2ae>
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	bfc4      	itt	gt
 8005e2e:	3b04      	subgt	r3, #4
 8005e30:	9305      	strgt	r3, [sp, #20]
 8005e32:	9b05      	ldr	r3, [sp, #20]
 8005e34:	f1a3 0302 	sub.w	r3, r3, #2
 8005e38:	bfcc      	ite	gt
 8005e3a:	2500      	movgt	r5, #0
 8005e3c:	2501      	movle	r5, #1
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d869      	bhi.n	8005f16 <_dtoa_r+0x2c6>
 8005e42:	e8df f003 	tbb	[pc, r3]
 8005e46:	4e2c      	.short	0x4e2c
 8005e48:	5a4c      	.short	0x5a4c
 8005e4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005e4e:	441d      	add	r5, r3
 8005e50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	bfc1      	itttt	gt
 8005e58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005e60:	fa09 f303 	lslgt.w	r3, r9, r3
 8005e64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e68:	bfda      	itte	le
 8005e6a:	f1c3 0320 	rsble	r3, r3, #32
 8005e6e:	fa06 f003 	lslle.w	r0, r6, r3
 8005e72:	4318      	orrgt	r0, r3
 8005e74:	f7fa fb46 	bl	8000504 <__aeabi_ui2d>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005e80:	3d01      	subs	r5, #1
 8005e82:	9310      	str	r3, [sp, #64]	; 0x40
 8005e84:	e771      	b.n	8005d6a <_dtoa_r+0x11a>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e7b6      	b.n	8005df8 <_dtoa_r+0x1a8>
 8005e8a:	900e      	str	r0, [sp, #56]	; 0x38
 8005e8c:	e7b5      	b.n	8005dfa <_dtoa_r+0x1aa>
 8005e8e:	f1ca 0300 	rsb	r3, sl, #0
 8005e92:	9306      	str	r3, [sp, #24]
 8005e94:	2300      	movs	r3, #0
 8005e96:	eba8 080a 	sub.w	r8, r8, sl
 8005e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8005e9c:	e7c2      	b.n	8005e24 <_dtoa_r+0x1d4>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9308      	str	r3, [sp, #32]
 8005ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	dc39      	bgt.n	8005f1c <_dtoa_r+0x2cc>
 8005ea8:	f04f 0901 	mov.w	r9, #1
 8005eac:	f8cd 9004 	str.w	r9, [sp, #4]
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005eb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005eb8:	2200      	movs	r2, #0
 8005eba:	6042      	str	r2, [r0, #4]
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	f102 0614 	add.w	r6, r2, #20
 8005ec2:	429e      	cmp	r6, r3
 8005ec4:	6841      	ldr	r1, [r0, #4]
 8005ec6:	d92f      	bls.n	8005f28 <_dtoa_r+0x2d8>
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f001 f849 	bl	8006f60 <_Balloc>
 8005ece:	9000      	str	r0, [sp, #0]
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d14b      	bne.n	8005f6c <_dtoa_r+0x31c>
 8005ed4:	4b24      	ldr	r3, [pc, #144]	; (8005f68 <_dtoa_r+0x318>)
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005edc:	e6d1      	b.n	8005c82 <_dtoa_r+0x32>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e7de      	b.n	8005ea0 <_dtoa_r+0x250>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9308      	str	r3, [sp, #32]
 8005ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee8:	eb0a 0903 	add.w	r9, sl, r3
 8005eec:	f109 0301 	add.w	r3, r9, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	bfb8      	it	lt
 8005ef6:	2301      	movlt	r3, #1
 8005ef8:	e7dd      	b.n	8005eb6 <_dtoa_r+0x266>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e7f2      	b.n	8005ee4 <_dtoa_r+0x294>
 8005efe:	2501      	movs	r5, #1
 8005f00:	2300      	movs	r3, #0
 8005f02:	9305      	str	r3, [sp, #20]
 8005f04:	9508      	str	r5, [sp, #32]
 8005f06:	f04f 39ff 	mov.w	r9, #4294967295
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f10:	2312      	movs	r3, #18
 8005f12:	9209      	str	r2, [sp, #36]	; 0x24
 8005f14:	e7cf      	b.n	8005eb6 <_dtoa_r+0x266>
 8005f16:	2301      	movs	r3, #1
 8005f18:	9308      	str	r3, [sp, #32]
 8005f1a:	e7f4      	b.n	8005f06 <_dtoa_r+0x2b6>
 8005f1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005f20:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f24:	464b      	mov	r3, r9
 8005f26:	e7c6      	b.n	8005eb6 <_dtoa_r+0x266>
 8005f28:	3101      	adds	r1, #1
 8005f2a:	6041      	str	r1, [r0, #4]
 8005f2c:	0052      	lsls	r2, r2, #1
 8005f2e:	e7c6      	b.n	8005ebe <_dtoa_r+0x26e>
 8005f30:	636f4361 	.word	0x636f4361
 8005f34:	3fd287a7 	.word	0x3fd287a7
 8005f38:	8b60c8b3 	.word	0x8b60c8b3
 8005f3c:	3fc68a28 	.word	0x3fc68a28
 8005f40:	509f79fb 	.word	0x509f79fb
 8005f44:	3fd34413 	.word	0x3fd34413
 8005f48:	08009a8e 	.word	0x08009a8e
 8005f4c:	08009aa5 	.word	0x08009aa5
 8005f50:	7ff00000 	.word	0x7ff00000
 8005f54:	08009a8a 	.word	0x08009a8a
 8005f58:	08009a81 	.word	0x08009a81
 8005f5c:	08009905 	.word	0x08009905
 8005f60:	3ff80000 	.word	0x3ff80000
 8005f64:	08009c20 	.word	0x08009c20
 8005f68:	08009b04 	.word	0x08009b04
 8005f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f6e:	9a00      	ldr	r2, [sp, #0]
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	9b01      	ldr	r3, [sp, #4]
 8005f74:	2b0e      	cmp	r3, #14
 8005f76:	f200 80ad 	bhi.w	80060d4 <_dtoa_r+0x484>
 8005f7a:	2d00      	cmp	r5, #0
 8005f7c:	f000 80aa 	beq.w	80060d4 <_dtoa_r+0x484>
 8005f80:	f1ba 0f00 	cmp.w	sl, #0
 8005f84:	dd36      	ble.n	8005ff4 <_dtoa_r+0x3a4>
 8005f86:	4ac3      	ldr	r2, [pc, #780]	; (8006294 <_dtoa_r+0x644>)
 8005f88:	f00a 030f 	and.w	r3, sl, #15
 8005f8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f90:	ed93 7b00 	vldr	d7, [r3]
 8005f94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005f98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005f9c:	eeb0 8a47 	vmov.f32	s16, s14
 8005fa0:	eef0 8a67 	vmov.f32	s17, s15
 8005fa4:	d016      	beq.n	8005fd4 <_dtoa_r+0x384>
 8005fa6:	4bbc      	ldr	r3, [pc, #752]	; (8006298 <_dtoa_r+0x648>)
 8005fa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fb0:	f7fa fc4c 	bl	800084c <__aeabi_ddiv>
 8005fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fb8:	f007 070f 	and.w	r7, r7, #15
 8005fbc:	2503      	movs	r5, #3
 8005fbe:	4eb6      	ldr	r6, [pc, #728]	; (8006298 <_dtoa_r+0x648>)
 8005fc0:	b957      	cbnz	r7, 8005fd8 <_dtoa_r+0x388>
 8005fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fc6:	ec53 2b18 	vmov	r2, r3, d8
 8005fca:	f7fa fc3f 	bl	800084c <__aeabi_ddiv>
 8005fce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fd2:	e029      	b.n	8006028 <_dtoa_r+0x3d8>
 8005fd4:	2502      	movs	r5, #2
 8005fd6:	e7f2      	b.n	8005fbe <_dtoa_r+0x36e>
 8005fd8:	07f9      	lsls	r1, r7, #31
 8005fda:	d508      	bpl.n	8005fee <_dtoa_r+0x39e>
 8005fdc:	ec51 0b18 	vmov	r0, r1, d8
 8005fe0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fe4:	f7fa fb08 	bl	80005f8 <__aeabi_dmul>
 8005fe8:	ec41 0b18 	vmov	d8, r0, r1
 8005fec:	3501      	adds	r5, #1
 8005fee:	107f      	asrs	r7, r7, #1
 8005ff0:	3608      	adds	r6, #8
 8005ff2:	e7e5      	b.n	8005fc0 <_dtoa_r+0x370>
 8005ff4:	f000 80a6 	beq.w	8006144 <_dtoa_r+0x4f4>
 8005ff8:	f1ca 0600 	rsb	r6, sl, #0
 8005ffc:	4ba5      	ldr	r3, [pc, #660]	; (8006294 <_dtoa_r+0x644>)
 8005ffe:	4fa6      	ldr	r7, [pc, #664]	; (8006298 <_dtoa_r+0x648>)
 8006000:	f006 020f 	and.w	r2, r6, #15
 8006004:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006010:	f7fa faf2 	bl	80005f8 <__aeabi_dmul>
 8006014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006018:	1136      	asrs	r6, r6, #4
 800601a:	2300      	movs	r3, #0
 800601c:	2502      	movs	r5, #2
 800601e:	2e00      	cmp	r6, #0
 8006020:	f040 8085 	bne.w	800612e <_dtoa_r+0x4de>
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1d2      	bne.n	8005fce <_dtoa_r+0x37e>
 8006028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 808c 	beq.w	8006148 <_dtoa_r+0x4f8>
 8006030:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006034:	4b99      	ldr	r3, [pc, #612]	; (800629c <_dtoa_r+0x64c>)
 8006036:	2200      	movs	r2, #0
 8006038:	4630      	mov	r0, r6
 800603a:	4639      	mov	r1, r7
 800603c:	f7fa fd4e 	bl	8000adc <__aeabi_dcmplt>
 8006040:	2800      	cmp	r0, #0
 8006042:	f000 8081 	beq.w	8006148 <_dtoa_r+0x4f8>
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d07d      	beq.n	8006148 <_dtoa_r+0x4f8>
 800604c:	f1b9 0f00 	cmp.w	r9, #0
 8006050:	dd3c      	ble.n	80060cc <_dtoa_r+0x47c>
 8006052:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006056:	9307      	str	r3, [sp, #28]
 8006058:	2200      	movs	r2, #0
 800605a:	4b91      	ldr	r3, [pc, #580]	; (80062a0 <_dtoa_r+0x650>)
 800605c:	4630      	mov	r0, r6
 800605e:	4639      	mov	r1, r7
 8006060:	f7fa faca 	bl	80005f8 <__aeabi_dmul>
 8006064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006068:	3501      	adds	r5, #1
 800606a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800606e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006072:	4628      	mov	r0, r5
 8006074:	f7fa fa56 	bl	8000524 <__aeabi_i2d>
 8006078:	4632      	mov	r2, r6
 800607a:	463b      	mov	r3, r7
 800607c:	f7fa fabc 	bl	80005f8 <__aeabi_dmul>
 8006080:	4b88      	ldr	r3, [pc, #544]	; (80062a4 <_dtoa_r+0x654>)
 8006082:	2200      	movs	r2, #0
 8006084:	f7fa f902 	bl	800028c <__adddf3>
 8006088:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800608c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006090:	9303      	str	r3, [sp, #12]
 8006092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006094:	2b00      	cmp	r3, #0
 8006096:	d15c      	bne.n	8006152 <_dtoa_r+0x502>
 8006098:	4b83      	ldr	r3, [pc, #524]	; (80062a8 <_dtoa_r+0x658>)
 800609a:	2200      	movs	r2, #0
 800609c:	4630      	mov	r0, r6
 800609e:	4639      	mov	r1, r7
 80060a0:	f7fa f8f2 	bl	8000288 <__aeabi_dsub>
 80060a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060a8:	4606      	mov	r6, r0
 80060aa:	460f      	mov	r7, r1
 80060ac:	f7fa fd34 	bl	8000b18 <__aeabi_dcmpgt>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	f040 8296 	bne.w	80065e2 <_dtoa_r+0x992>
 80060b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80060ba:	4630      	mov	r0, r6
 80060bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060c0:	4639      	mov	r1, r7
 80060c2:	f7fa fd0b 	bl	8000adc <__aeabi_dcmplt>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f040 8288 	bne.w	80065dc <_dtoa_r+0x98c>
 80060cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f2c0 8158 	blt.w	800638c <_dtoa_r+0x73c>
 80060dc:	f1ba 0f0e 	cmp.w	sl, #14
 80060e0:	f300 8154 	bgt.w	800638c <_dtoa_r+0x73c>
 80060e4:	4b6b      	ldr	r3, [pc, #428]	; (8006294 <_dtoa_r+0x644>)
 80060e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f280 80e3 	bge.w	80062bc <_dtoa_r+0x66c>
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f300 80df 	bgt.w	80062bc <_dtoa_r+0x66c>
 80060fe:	f040 826d 	bne.w	80065dc <_dtoa_r+0x98c>
 8006102:	4b69      	ldr	r3, [pc, #420]	; (80062a8 <_dtoa_r+0x658>)
 8006104:	2200      	movs	r2, #0
 8006106:	4640      	mov	r0, r8
 8006108:	4649      	mov	r1, r9
 800610a:	f7fa fa75 	bl	80005f8 <__aeabi_dmul>
 800610e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006112:	f7fa fcf7 	bl	8000b04 <__aeabi_dcmpge>
 8006116:	9e01      	ldr	r6, [sp, #4]
 8006118:	4637      	mov	r7, r6
 800611a:	2800      	cmp	r0, #0
 800611c:	f040 8243 	bne.w	80065a6 <_dtoa_r+0x956>
 8006120:	9d00      	ldr	r5, [sp, #0]
 8006122:	2331      	movs	r3, #49	; 0x31
 8006124:	f805 3b01 	strb.w	r3, [r5], #1
 8006128:	f10a 0a01 	add.w	sl, sl, #1
 800612c:	e23f      	b.n	80065ae <_dtoa_r+0x95e>
 800612e:	07f2      	lsls	r2, r6, #31
 8006130:	d505      	bpl.n	800613e <_dtoa_r+0x4ee>
 8006132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006136:	f7fa fa5f 	bl	80005f8 <__aeabi_dmul>
 800613a:	3501      	adds	r5, #1
 800613c:	2301      	movs	r3, #1
 800613e:	1076      	asrs	r6, r6, #1
 8006140:	3708      	adds	r7, #8
 8006142:	e76c      	b.n	800601e <_dtoa_r+0x3ce>
 8006144:	2502      	movs	r5, #2
 8006146:	e76f      	b.n	8006028 <_dtoa_r+0x3d8>
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	f8cd a01c 	str.w	sl, [sp, #28]
 800614e:	930c      	str	r3, [sp, #48]	; 0x30
 8006150:	e78d      	b.n	800606e <_dtoa_r+0x41e>
 8006152:	9900      	ldr	r1, [sp, #0]
 8006154:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006158:	4b4e      	ldr	r3, [pc, #312]	; (8006294 <_dtoa_r+0x644>)
 800615a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800615e:	4401      	add	r1, r0
 8006160:	9102      	str	r1, [sp, #8]
 8006162:	9908      	ldr	r1, [sp, #32]
 8006164:	eeb0 8a47 	vmov.f32	s16, s14
 8006168:	eef0 8a67 	vmov.f32	s17, s15
 800616c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006174:	2900      	cmp	r1, #0
 8006176:	d045      	beq.n	8006204 <_dtoa_r+0x5b4>
 8006178:	494c      	ldr	r1, [pc, #304]	; (80062ac <_dtoa_r+0x65c>)
 800617a:	2000      	movs	r0, #0
 800617c:	f7fa fb66 	bl	800084c <__aeabi_ddiv>
 8006180:	ec53 2b18 	vmov	r2, r3, d8
 8006184:	f7fa f880 	bl	8000288 <__aeabi_dsub>
 8006188:	9d00      	ldr	r5, [sp, #0]
 800618a:	ec41 0b18 	vmov	d8, r0, r1
 800618e:	4639      	mov	r1, r7
 8006190:	4630      	mov	r0, r6
 8006192:	f7fa fce1 	bl	8000b58 <__aeabi_d2iz>
 8006196:	900c      	str	r0, [sp, #48]	; 0x30
 8006198:	f7fa f9c4 	bl	8000524 <__aeabi_i2d>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4630      	mov	r0, r6
 80061a2:	4639      	mov	r1, r7
 80061a4:	f7fa f870 	bl	8000288 <__aeabi_dsub>
 80061a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061aa:	3330      	adds	r3, #48	; 0x30
 80061ac:	f805 3b01 	strb.w	r3, [r5], #1
 80061b0:	ec53 2b18 	vmov	r2, r3, d8
 80061b4:	4606      	mov	r6, r0
 80061b6:	460f      	mov	r7, r1
 80061b8:	f7fa fc90 	bl	8000adc <__aeabi_dcmplt>
 80061bc:	2800      	cmp	r0, #0
 80061be:	d165      	bne.n	800628c <_dtoa_r+0x63c>
 80061c0:	4632      	mov	r2, r6
 80061c2:	463b      	mov	r3, r7
 80061c4:	4935      	ldr	r1, [pc, #212]	; (800629c <_dtoa_r+0x64c>)
 80061c6:	2000      	movs	r0, #0
 80061c8:	f7fa f85e 	bl	8000288 <__aeabi_dsub>
 80061cc:	ec53 2b18 	vmov	r2, r3, d8
 80061d0:	f7fa fc84 	bl	8000adc <__aeabi_dcmplt>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f040 80b9 	bne.w	800634c <_dtoa_r+0x6fc>
 80061da:	9b02      	ldr	r3, [sp, #8]
 80061dc:	429d      	cmp	r5, r3
 80061de:	f43f af75 	beq.w	80060cc <_dtoa_r+0x47c>
 80061e2:	4b2f      	ldr	r3, [pc, #188]	; (80062a0 <_dtoa_r+0x650>)
 80061e4:	ec51 0b18 	vmov	r0, r1, d8
 80061e8:	2200      	movs	r2, #0
 80061ea:	f7fa fa05 	bl	80005f8 <__aeabi_dmul>
 80061ee:	4b2c      	ldr	r3, [pc, #176]	; (80062a0 <_dtoa_r+0x650>)
 80061f0:	ec41 0b18 	vmov	d8, r0, r1
 80061f4:	2200      	movs	r2, #0
 80061f6:	4630      	mov	r0, r6
 80061f8:	4639      	mov	r1, r7
 80061fa:	f7fa f9fd 	bl	80005f8 <__aeabi_dmul>
 80061fe:	4606      	mov	r6, r0
 8006200:	460f      	mov	r7, r1
 8006202:	e7c4      	b.n	800618e <_dtoa_r+0x53e>
 8006204:	ec51 0b17 	vmov	r0, r1, d7
 8006208:	f7fa f9f6 	bl	80005f8 <__aeabi_dmul>
 800620c:	9b02      	ldr	r3, [sp, #8]
 800620e:	9d00      	ldr	r5, [sp, #0]
 8006210:	930c      	str	r3, [sp, #48]	; 0x30
 8006212:	ec41 0b18 	vmov	d8, r0, r1
 8006216:	4639      	mov	r1, r7
 8006218:	4630      	mov	r0, r6
 800621a:	f7fa fc9d 	bl	8000b58 <__aeabi_d2iz>
 800621e:	9011      	str	r0, [sp, #68]	; 0x44
 8006220:	f7fa f980 	bl	8000524 <__aeabi_i2d>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4630      	mov	r0, r6
 800622a:	4639      	mov	r1, r7
 800622c:	f7fa f82c 	bl	8000288 <__aeabi_dsub>
 8006230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006232:	3330      	adds	r3, #48	; 0x30
 8006234:	f805 3b01 	strb.w	r3, [r5], #1
 8006238:	9b02      	ldr	r3, [sp, #8]
 800623a:	429d      	cmp	r5, r3
 800623c:	4606      	mov	r6, r0
 800623e:	460f      	mov	r7, r1
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	d134      	bne.n	80062b0 <_dtoa_r+0x660>
 8006246:	4b19      	ldr	r3, [pc, #100]	; (80062ac <_dtoa_r+0x65c>)
 8006248:	ec51 0b18 	vmov	r0, r1, d8
 800624c:	f7fa f81e 	bl	800028c <__adddf3>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4630      	mov	r0, r6
 8006256:	4639      	mov	r1, r7
 8006258:	f7fa fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 800625c:	2800      	cmp	r0, #0
 800625e:	d175      	bne.n	800634c <_dtoa_r+0x6fc>
 8006260:	ec53 2b18 	vmov	r2, r3, d8
 8006264:	4911      	ldr	r1, [pc, #68]	; (80062ac <_dtoa_r+0x65c>)
 8006266:	2000      	movs	r0, #0
 8006268:	f7fa f80e 	bl	8000288 <__aeabi_dsub>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	f7fa fc32 	bl	8000adc <__aeabi_dcmplt>
 8006278:	2800      	cmp	r0, #0
 800627a:	f43f af27 	beq.w	80060cc <_dtoa_r+0x47c>
 800627e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006280:	1e6b      	subs	r3, r5, #1
 8006282:	930c      	str	r3, [sp, #48]	; 0x30
 8006284:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006288:	2b30      	cmp	r3, #48	; 0x30
 800628a:	d0f8      	beq.n	800627e <_dtoa_r+0x62e>
 800628c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006290:	e04a      	b.n	8006328 <_dtoa_r+0x6d8>
 8006292:	bf00      	nop
 8006294:	08009c20 	.word	0x08009c20
 8006298:	08009bf8 	.word	0x08009bf8
 800629c:	3ff00000 	.word	0x3ff00000
 80062a0:	40240000 	.word	0x40240000
 80062a4:	401c0000 	.word	0x401c0000
 80062a8:	40140000 	.word	0x40140000
 80062ac:	3fe00000 	.word	0x3fe00000
 80062b0:	4baf      	ldr	r3, [pc, #700]	; (8006570 <_dtoa_r+0x920>)
 80062b2:	f7fa f9a1 	bl	80005f8 <__aeabi_dmul>
 80062b6:	4606      	mov	r6, r0
 80062b8:	460f      	mov	r7, r1
 80062ba:	e7ac      	b.n	8006216 <_dtoa_r+0x5c6>
 80062bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062c0:	9d00      	ldr	r5, [sp, #0]
 80062c2:	4642      	mov	r2, r8
 80062c4:	464b      	mov	r3, r9
 80062c6:	4630      	mov	r0, r6
 80062c8:	4639      	mov	r1, r7
 80062ca:	f7fa fabf 	bl	800084c <__aeabi_ddiv>
 80062ce:	f7fa fc43 	bl	8000b58 <__aeabi_d2iz>
 80062d2:	9002      	str	r0, [sp, #8]
 80062d4:	f7fa f926 	bl	8000524 <__aeabi_i2d>
 80062d8:	4642      	mov	r2, r8
 80062da:	464b      	mov	r3, r9
 80062dc:	f7fa f98c 	bl	80005f8 <__aeabi_dmul>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4630      	mov	r0, r6
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7f9 ffce 	bl	8000288 <__aeabi_dsub>
 80062ec:	9e02      	ldr	r6, [sp, #8]
 80062ee:	9f01      	ldr	r7, [sp, #4]
 80062f0:	3630      	adds	r6, #48	; 0x30
 80062f2:	f805 6b01 	strb.w	r6, [r5], #1
 80062f6:	9e00      	ldr	r6, [sp, #0]
 80062f8:	1bae      	subs	r6, r5, r6
 80062fa:	42b7      	cmp	r7, r6
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	d137      	bne.n	8006372 <_dtoa_r+0x722>
 8006302:	f7f9 ffc3 	bl	800028c <__adddf3>
 8006306:	4642      	mov	r2, r8
 8006308:	464b      	mov	r3, r9
 800630a:	4606      	mov	r6, r0
 800630c:	460f      	mov	r7, r1
 800630e:	f7fa fc03 	bl	8000b18 <__aeabi_dcmpgt>
 8006312:	b9c8      	cbnz	r0, 8006348 <_dtoa_r+0x6f8>
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7fa fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006320:	b110      	cbz	r0, 8006328 <_dtoa_r+0x6d8>
 8006322:	9b02      	ldr	r3, [sp, #8]
 8006324:	07d9      	lsls	r1, r3, #31
 8006326:	d40f      	bmi.n	8006348 <_dtoa_r+0x6f8>
 8006328:	4620      	mov	r0, r4
 800632a:	4659      	mov	r1, fp
 800632c:	f000 fe58 	bl	8006fe0 <_Bfree>
 8006330:	2300      	movs	r3, #0
 8006332:	702b      	strb	r3, [r5, #0]
 8006334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006336:	f10a 0001 	add.w	r0, sl, #1
 800633a:	6018      	str	r0, [r3, #0]
 800633c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800633e:	2b00      	cmp	r3, #0
 8006340:	f43f acd8 	beq.w	8005cf4 <_dtoa_r+0xa4>
 8006344:	601d      	str	r5, [r3, #0]
 8006346:	e4d5      	b.n	8005cf4 <_dtoa_r+0xa4>
 8006348:	f8cd a01c 	str.w	sl, [sp, #28]
 800634c:	462b      	mov	r3, r5
 800634e:	461d      	mov	r5, r3
 8006350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006354:	2a39      	cmp	r2, #57	; 0x39
 8006356:	d108      	bne.n	800636a <_dtoa_r+0x71a>
 8006358:	9a00      	ldr	r2, [sp, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d1f7      	bne.n	800634e <_dtoa_r+0x6fe>
 800635e:	9a07      	ldr	r2, [sp, #28]
 8006360:	9900      	ldr	r1, [sp, #0]
 8006362:	3201      	adds	r2, #1
 8006364:	9207      	str	r2, [sp, #28]
 8006366:	2230      	movs	r2, #48	; 0x30
 8006368:	700a      	strb	r2, [r1, #0]
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	3201      	adds	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e78c      	b.n	800628c <_dtoa_r+0x63c>
 8006372:	4b7f      	ldr	r3, [pc, #508]	; (8006570 <_dtoa_r+0x920>)
 8006374:	2200      	movs	r2, #0
 8006376:	f7fa f93f 	bl	80005f8 <__aeabi_dmul>
 800637a:	2200      	movs	r2, #0
 800637c:	2300      	movs	r3, #0
 800637e:	4606      	mov	r6, r0
 8006380:	460f      	mov	r7, r1
 8006382:	f7fa fba1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006386:	2800      	cmp	r0, #0
 8006388:	d09b      	beq.n	80062c2 <_dtoa_r+0x672>
 800638a:	e7cd      	b.n	8006328 <_dtoa_r+0x6d8>
 800638c:	9a08      	ldr	r2, [sp, #32]
 800638e:	2a00      	cmp	r2, #0
 8006390:	f000 80c4 	beq.w	800651c <_dtoa_r+0x8cc>
 8006394:	9a05      	ldr	r2, [sp, #20]
 8006396:	2a01      	cmp	r2, #1
 8006398:	f300 80a8 	bgt.w	80064ec <_dtoa_r+0x89c>
 800639c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800639e:	2a00      	cmp	r2, #0
 80063a0:	f000 80a0 	beq.w	80064e4 <_dtoa_r+0x894>
 80063a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063a8:	9e06      	ldr	r6, [sp, #24]
 80063aa:	4645      	mov	r5, r8
 80063ac:	9a04      	ldr	r2, [sp, #16]
 80063ae:	2101      	movs	r1, #1
 80063b0:	441a      	add	r2, r3
 80063b2:	4620      	mov	r0, r4
 80063b4:	4498      	add	r8, r3
 80063b6:	9204      	str	r2, [sp, #16]
 80063b8:	f000 ff18 	bl	80071ec <__i2b>
 80063bc:	4607      	mov	r7, r0
 80063be:	2d00      	cmp	r5, #0
 80063c0:	dd0b      	ble.n	80063da <_dtoa_r+0x78a>
 80063c2:	9b04      	ldr	r3, [sp, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	dd08      	ble.n	80063da <_dtoa_r+0x78a>
 80063c8:	42ab      	cmp	r3, r5
 80063ca:	9a04      	ldr	r2, [sp, #16]
 80063cc:	bfa8      	it	ge
 80063ce:	462b      	movge	r3, r5
 80063d0:	eba8 0803 	sub.w	r8, r8, r3
 80063d4:	1aed      	subs	r5, r5, r3
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	9304      	str	r3, [sp, #16]
 80063da:	9b06      	ldr	r3, [sp, #24]
 80063dc:	b1fb      	cbz	r3, 800641e <_dtoa_r+0x7ce>
 80063de:	9b08      	ldr	r3, [sp, #32]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 809f 	beq.w	8006524 <_dtoa_r+0x8d4>
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	dd11      	ble.n	800640e <_dtoa_r+0x7be>
 80063ea:	4639      	mov	r1, r7
 80063ec:	4632      	mov	r2, r6
 80063ee:	4620      	mov	r0, r4
 80063f0:	f000 ffb8 	bl	8007364 <__pow5mult>
 80063f4:	465a      	mov	r2, fp
 80063f6:	4601      	mov	r1, r0
 80063f8:	4607      	mov	r7, r0
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 ff0c 	bl	8007218 <__multiply>
 8006400:	4659      	mov	r1, fp
 8006402:	9007      	str	r0, [sp, #28]
 8006404:	4620      	mov	r0, r4
 8006406:	f000 fdeb 	bl	8006fe0 <_Bfree>
 800640a:	9b07      	ldr	r3, [sp, #28]
 800640c:	469b      	mov	fp, r3
 800640e:	9b06      	ldr	r3, [sp, #24]
 8006410:	1b9a      	subs	r2, r3, r6
 8006412:	d004      	beq.n	800641e <_dtoa_r+0x7ce>
 8006414:	4659      	mov	r1, fp
 8006416:	4620      	mov	r0, r4
 8006418:	f000 ffa4 	bl	8007364 <__pow5mult>
 800641c:	4683      	mov	fp, r0
 800641e:	2101      	movs	r1, #1
 8006420:	4620      	mov	r0, r4
 8006422:	f000 fee3 	bl	80071ec <__i2b>
 8006426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006428:	2b00      	cmp	r3, #0
 800642a:	4606      	mov	r6, r0
 800642c:	dd7c      	ble.n	8006528 <_dtoa_r+0x8d8>
 800642e:	461a      	mov	r2, r3
 8006430:	4601      	mov	r1, r0
 8006432:	4620      	mov	r0, r4
 8006434:	f000 ff96 	bl	8007364 <__pow5mult>
 8006438:	9b05      	ldr	r3, [sp, #20]
 800643a:	2b01      	cmp	r3, #1
 800643c:	4606      	mov	r6, r0
 800643e:	dd76      	ble.n	800652e <_dtoa_r+0x8de>
 8006440:	2300      	movs	r3, #0
 8006442:	9306      	str	r3, [sp, #24]
 8006444:	6933      	ldr	r3, [r6, #16]
 8006446:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800644a:	6918      	ldr	r0, [r3, #16]
 800644c:	f000 fe7e 	bl	800714c <__hi0bits>
 8006450:	f1c0 0020 	rsb	r0, r0, #32
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	4418      	add	r0, r3
 8006458:	f010 001f 	ands.w	r0, r0, #31
 800645c:	f000 8086 	beq.w	800656c <_dtoa_r+0x91c>
 8006460:	f1c0 0320 	rsb	r3, r0, #32
 8006464:	2b04      	cmp	r3, #4
 8006466:	dd7f      	ble.n	8006568 <_dtoa_r+0x918>
 8006468:	f1c0 001c 	rsb	r0, r0, #28
 800646c:	9b04      	ldr	r3, [sp, #16]
 800646e:	4403      	add	r3, r0
 8006470:	4480      	add	r8, r0
 8006472:	4405      	add	r5, r0
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	f1b8 0f00 	cmp.w	r8, #0
 800647a:	dd05      	ble.n	8006488 <_dtoa_r+0x838>
 800647c:	4659      	mov	r1, fp
 800647e:	4642      	mov	r2, r8
 8006480:	4620      	mov	r0, r4
 8006482:	f000 ffc9 	bl	8007418 <__lshift>
 8006486:	4683      	mov	fp, r0
 8006488:	9b04      	ldr	r3, [sp, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	dd05      	ble.n	800649a <_dtoa_r+0x84a>
 800648e:	4631      	mov	r1, r6
 8006490:	461a      	mov	r2, r3
 8006492:	4620      	mov	r0, r4
 8006494:	f000 ffc0 	bl	8007418 <__lshift>
 8006498:	4606      	mov	r6, r0
 800649a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800649c:	2b00      	cmp	r3, #0
 800649e:	d069      	beq.n	8006574 <_dtoa_r+0x924>
 80064a0:	4631      	mov	r1, r6
 80064a2:	4658      	mov	r0, fp
 80064a4:	f001 f824 	bl	80074f0 <__mcmp>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	da63      	bge.n	8006574 <_dtoa_r+0x924>
 80064ac:	2300      	movs	r3, #0
 80064ae:	4659      	mov	r1, fp
 80064b0:	220a      	movs	r2, #10
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 fdb6 	bl	8007024 <__multadd>
 80064b8:	9b08      	ldr	r3, [sp, #32]
 80064ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064be:	4683      	mov	fp, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 818f 	beq.w	80067e4 <_dtoa_r+0xb94>
 80064c6:	4639      	mov	r1, r7
 80064c8:	2300      	movs	r3, #0
 80064ca:	220a      	movs	r2, #10
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fda9 	bl	8007024 <__multadd>
 80064d2:	f1b9 0f00 	cmp.w	r9, #0
 80064d6:	4607      	mov	r7, r0
 80064d8:	f300 808e 	bgt.w	80065f8 <_dtoa_r+0x9a8>
 80064dc:	9b05      	ldr	r3, [sp, #20]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	dc50      	bgt.n	8006584 <_dtoa_r+0x934>
 80064e2:	e089      	b.n	80065f8 <_dtoa_r+0x9a8>
 80064e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064ea:	e75d      	b.n	80063a8 <_dtoa_r+0x758>
 80064ec:	9b01      	ldr	r3, [sp, #4]
 80064ee:	1e5e      	subs	r6, r3, #1
 80064f0:	9b06      	ldr	r3, [sp, #24]
 80064f2:	42b3      	cmp	r3, r6
 80064f4:	bfbf      	itttt	lt
 80064f6:	9b06      	ldrlt	r3, [sp, #24]
 80064f8:	9606      	strlt	r6, [sp, #24]
 80064fa:	1af2      	sublt	r2, r6, r3
 80064fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80064fe:	bfb6      	itet	lt
 8006500:	189b      	addlt	r3, r3, r2
 8006502:	1b9e      	subge	r6, r3, r6
 8006504:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006506:	9b01      	ldr	r3, [sp, #4]
 8006508:	bfb8      	it	lt
 800650a:	2600      	movlt	r6, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	bfb5      	itete	lt
 8006510:	eba8 0503 	sublt.w	r5, r8, r3
 8006514:	9b01      	ldrge	r3, [sp, #4]
 8006516:	2300      	movlt	r3, #0
 8006518:	4645      	movge	r5, r8
 800651a:	e747      	b.n	80063ac <_dtoa_r+0x75c>
 800651c:	9e06      	ldr	r6, [sp, #24]
 800651e:	9f08      	ldr	r7, [sp, #32]
 8006520:	4645      	mov	r5, r8
 8006522:	e74c      	b.n	80063be <_dtoa_r+0x76e>
 8006524:	9a06      	ldr	r2, [sp, #24]
 8006526:	e775      	b.n	8006414 <_dtoa_r+0x7c4>
 8006528:	9b05      	ldr	r3, [sp, #20]
 800652a:	2b01      	cmp	r3, #1
 800652c:	dc18      	bgt.n	8006560 <_dtoa_r+0x910>
 800652e:	9b02      	ldr	r3, [sp, #8]
 8006530:	b9b3      	cbnz	r3, 8006560 <_dtoa_r+0x910>
 8006532:	9b03      	ldr	r3, [sp, #12]
 8006534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006538:	b9a3      	cbnz	r3, 8006564 <_dtoa_r+0x914>
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006540:	0d1b      	lsrs	r3, r3, #20
 8006542:	051b      	lsls	r3, r3, #20
 8006544:	b12b      	cbz	r3, 8006552 <_dtoa_r+0x902>
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	3301      	adds	r3, #1
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	f108 0801 	add.w	r8, r8, #1
 8006550:	2301      	movs	r3, #1
 8006552:	9306      	str	r3, [sp, #24]
 8006554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006556:	2b00      	cmp	r3, #0
 8006558:	f47f af74 	bne.w	8006444 <_dtoa_r+0x7f4>
 800655c:	2001      	movs	r0, #1
 800655e:	e779      	b.n	8006454 <_dtoa_r+0x804>
 8006560:	2300      	movs	r3, #0
 8006562:	e7f6      	b.n	8006552 <_dtoa_r+0x902>
 8006564:	9b02      	ldr	r3, [sp, #8]
 8006566:	e7f4      	b.n	8006552 <_dtoa_r+0x902>
 8006568:	d085      	beq.n	8006476 <_dtoa_r+0x826>
 800656a:	4618      	mov	r0, r3
 800656c:	301c      	adds	r0, #28
 800656e:	e77d      	b.n	800646c <_dtoa_r+0x81c>
 8006570:	40240000 	.word	0x40240000
 8006574:	9b01      	ldr	r3, [sp, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	dc38      	bgt.n	80065ec <_dtoa_r+0x99c>
 800657a:	9b05      	ldr	r3, [sp, #20]
 800657c:	2b02      	cmp	r3, #2
 800657e:	dd35      	ble.n	80065ec <_dtoa_r+0x99c>
 8006580:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006584:	f1b9 0f00 	cmp.w	r9, #0
 8006588:	d10d      	bne.n	80065a6 <_dtoa_r+0x956>
 800658a:	4631      	mov	r1, r6
 800658c:	464b      	mov	r3, r9
 800658e:	2205      	movs	r2, #5
 8006590:	4620      	mov	r0, r4
 8006592:	f000 fd47 	bl	8007024 <__multadd>
 8006596:	4601      	mov	r1, r0
 8006598:	4606      	mov	r6, r0
 800659a:	4658      	mov	r0, fp
 800659c:	f000 ffa8 	bl	80074f0 <__mcmp>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	f73f adbd 	bgt.w	8006120 <_dtoa_r+0x4d0>
 80065a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a8:	9d00      	ldr	r5, [sp, #0]
 80065aa:	ea6f 0a03 	mvn.w	sl, r3
 80065ae:	f04f 0800 	mov.w	r8, #0
 80065b2:	4631      	mov	r1, r6
 80065b4:	4620      	mov	r0, r4
 80065b6:	f000 fd13 	bl	8006fe0 <_Bfree>
 80065ba:	2f00      	cmp	r7, #0
 80065bc:	f43f aeb4 	beq.w	8006328 <_dtoa_r+0x6d8>
 80065c0:	f1b8 0f00 	cmp.w	r8, #0
 80065c4:	d005      	beq.n	80065d2 <_dtoa_r+0x982>
 80065c6:	45b8      	cmp	r8, r7
 80065c8:	d003      	beq.n	80065d2 <_dtoa_r+0x982>
 80065ca:	4641      	mov	r1, r8
 80065cc:	4620      	mov	r0, r4
 80065ce:	f000 fd07 	bl	8006fe0 <_Bfree>
 80065d2:	4639      	mov	r1, r7
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 fd03 	bl	8006fe0 <_Bfree>
 80065da:	e6a5      	b.n	8006328 <_dtoa_r+0x6d8>
 80065dc:	2600      	movs	r6, #0
 80065de:	4637      	mov	r7, r6
 80065e0:	e7e1      	b.n	80065a6 <_dtoa_r+0x956>
 80065e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80065e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80065e8:	4637      	mov	r7, r6
 80065ea:	e599      	b.n	8006120 <_dtoa_r+0x4d0>
 80065ec:	9b08      	ldr	r3, [sp, #32]
 80065ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 80fd 	beq.w	80067f2 <_dtoa_r+0xba2>
 80065f8:	2d00      	cmp	r5, #0
 80065fa:	dd05      	ble.n	8006608 <_dtoa_r+0x9b8>
 80065fc:	4639      	mov	r1, r7
 80065fe:	462a      	mov	r2, r5
 8006600:	4620      	mov	r0, r4
 8006602:	f000 ff09 	bl	8007418 <__lshift>
 8006606:	4607      	mov	r7, r0
 8006608:	9b06      	ldr	r3, [sp, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d05c      	beq.n	80066c8 <_dtoa_r+0xa78>
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	4620      	mov	r0, r4
 8006612:	f000 fca5 	bl	8006f60 <_Balloc>
 8006616:	4605      	mov	r5, r0
 8006618:	b928      	cbnz	r0, 8006626 <_dtoa_r+0x9d6>
 800661a:	4b80      	ldr	r3, [pc, #512]	; (800681c <_dtoa_r+0xbcc>)
 800661c:	4602      	mov	r2, r0
 800661e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006622:	f7ff bb2e 	b.w	8005c82 <_dtoa_r+0x32>
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	3202      	adds	r2, #2
 800662a:	0092      	lsls	r2, r2, #2
 800662c:	f107 010c 	add.w	r1, r7, #12
 8006630:	300c      	adds	r0, #12
 8006632:	f000 fc87 	bl	8006f44 <memcpy>
 8006636:	2201      	movs	r2, #1
 8006638:	4629      	mov	r1, r5
 800663a:	4620      	mov	r0, r4
 800663c:	f000 feec 	bl	8007418 <__lshift>
 8006640:	9b00      	ldr	r3, [sp, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	9b00      	ldr	r3, [sp, #0]
 8006648:	444b      	add	r3, r9
 800664a:	9307      	str	r3, [sp, #28]
 800664c:	9b02      	ldr	r3, [sp, #8]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	46b8      	mov	r8, r7
 8006654:	9306      	str	r3, [sp, #24]
 8006656:	4607      	mov	r7, r0
 8006658:	9b01      	ldr	r3, [sp, #4]
 800665a:	4631      	mov	r1, r6
 800665c:	3b01      	subs	r3, #1
 800665e:	4658      	mov	r0, fp
 8006660:	9302      	str	r3, [sp, #8]
 8006662:	f7ff fa67 	bl	8005b34 <quorem>
 8006666:	4603      	mov	r3, r0
 8006668:	3330      	adds	r3, #48	; 0x30
 800666a:	9004      	str	r0, [sp, #16]
 800666c:	4641      	mov	r1, r8
 800666e:	4658      	mov	r0, fp
 8006670:	9308      	str	r3, [sp, #32]
 8006672:	f000 ff3d 	bl	80074f0 <__mcmp>
 8006676:	463a      	mov	r2, r7
 8006678:	4681      	mov	r9, r0
 800667a:	4631      	mov	r1, r6
 800667c:	4620      	mov	r0, r4
 800667e:	f000 ff53 	bl	8007528 <__mdiff>
 8006682:	68c2      	ldr	r2, [r0, #12]
 8006684:	9b08      	ldr	r3, [sp, #32]
 8006686:	4605      	mov	r5, r0
 8006688:	bb02      	cbnz	r2, 80066cc <_dtoa_r+0xa7c>
 800668a:	4601      	mov	r1, r0
 800668c:	4658      	mov	r0, fp
 800668e:	f000 ff2f 	bl	80074f0 <__mcmp>
 8006692:	9b08      	ldr	r3, [sp, #32]
 8006694:	4602      	mov	r2, r0
 8006696:	4629      	mov	r1, r5
 8006698:	4620      	mov	r0, r4
 800669a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800669e:	f000 fc9f 	bl	8006fe0 <_Bfree>
 80066a2:	9b05      	ldr	r3, [sp, #20]
 80066a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066a6:	9d01      	ldr	r5, [sp, #4]
 80066a8:	ea43 0102 	orr.w	r1, r3, r2
 80066ac:	9b06      	ldr	r3, [sp, #24]
 80066ae:	430b      	orrs	r3, r1
 80066b0:	9b08      	ldr	r3, [sp, #32]
 80066b2:	d10d      	bne.n	80066d0 <_dtoa_r+0xa80>
 80066b4:	2b39      	cmp	r3, #57	; 0x39
 80066b6:	d029      	beq.n	800670c <_dtoa_r+0xabc>
 80066b8:	f1b9 0f00 	cmp.w	r9, #0
 80066bc:	dd01      	ble.n	80066c2 <_dtoa_r+0xa72>
 80066be:	9b04      	ldr	r3, [sp, #16]
 80066c0:	3331      	adds	r3, #49	; 0x31
 80066c2:	9a02      	ldr	r2, [sp, #8]
 80066c4:	7013      	strb	r3, [r2, #0]
 80066c6:	e774      	b.n	80065b2 <_dtoa_r+0x962>
 80066c8:	4638      	mov	r0, r7
 80066ca:	e7b9      	b.n	8006640 <_dtoa_r+0x9f0>
 80066cc:	2201      	movs	r2, #1
 80066ce:	e7e2      	b.n	8006696 <_dtoa_r+0xa46>
 80066d0:	f1b9 0f00 	cmp.w	r9, #0
 80066d4:	db06      	blt.n	80066e4 <_dtoa_r+0xa94>
 80066d6:	9905      	ldr	r1, [sp, #20]
 80066d8:	ea41 0909 	orr.w	r9, r1, r9
 80066dc:	9906      	ldr	r1, [sp, #24]
 80066de:	ea59 0101 	orrs.w	r1, r9, r1
 80066e2:	d120      	bne.n	8006726 <_dtoa_r+0xad6>
 80066e4:	2a00      	cmp	r2, #0
 80066e6:	ddec      	ble.n	80066c2 <_dtoa_r+0xa72>
 80066e8:	4659      	mov	r1, fp
 80066ea:	2201      	movs	r2, #1
 80066ec:	4620      	mov	r0, r4
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	f000 fe92 	bl	8007418 <__lshift>
 80066f4:	4631      	mov	r1, r6
 80066f6:	4683      	mov	fp, r0
 80066f8:	f000 fefa 	bl	80074f0 <__mcmp>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	dc02      	bgt.n	8006708 <_dtoa_r+0xab8>
 8006702:	d1de      	bne.n	80066c2 <_dtoa_r+0xa72>
 8006704:	07da      	lsls	r2, r3, #31
 8006706:	d5dc      	bpl.n	80066c2 <_dtoa_r+0xa72>
 8006708:	2b39      	cmp	r3, #57	; 0x39
 800670a:	d1d8      	bne.n	80066be <_dtoa_r+0xa6e>
 800670c:	9a02      	ldr	r2, [sp, #8]
 800670e:	2339      	movs	r3, #57	; 0x39
 8006710:	7013      	strb	r3, [r2, #0]
 8006712:	462b      	mov	r3, r5
 8006714:	461d      	mov	r5, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800671c:	2a39      	cmp	r2, #57	; 0x39
 800671e:	d050      	beq.n	80067c2 <_dtoa_r+0xb72>
 8006720:	3201      	adds	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	e745      	b.n	80065b2 <_dtoa_r+0x962>
 8006726:	2a00      	cmp	r2, #0
 8006728:	dd03      	ble.n	8006732 <_dtoa_r+0xae2>
 800672a:	2b39      	cmp	r3, #57	; 0x39
 800672c:	d0ee      	beq.n	800670c <_dtoa_r+0xabc>
 800672e:	3301      	adds	r3, #1
 8006730:	e7c7      	b.n	80066c2 <_dtoa_r+0xa72>
 8006732:	9a01      	ldr	r2, [sp, #4]
 8006734:	9907      	ldr	r1, [sp, #28]
 8006736:	f802 3c01 	strb.w	r3, [r2, #-1]
 800673a:	428a      	cmp	r2, r1
 800673c:	d02a      	beq.n	8006794 <_dtoa_r+0xb44>
 800673e:	4659      	mov	r1, fp
 8006740:	2300      	movs	r3, #0
 8006742:	220a      	movs	r2, #10
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fc6d 	bl	8007024 <__multadd>
 800674a:	45b8      	cmp	r8, r7
 800674c:	4683      	mov	fp, r0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	f04f 020a 	mov.w	r2, #10
 8006756:	4641      	mov	r1, r8
 8006758:	4620      	mov	r0, r4
 800675a:	d107      	bne.n	800676c <_dtoa_r+0xb1c>
 800675c:	f000 fc62 	bl	8007024 <__multadd>
 8006760:	4680      	mov	r8, r0
 8006762:	4607      	mov	r7, r0
 8006764:	9b01      	ldr	r3, [sp, #4]
 8006766:	3301      	adds	r3, #1
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	e775      	b.n	8006658 <_dtoa_r+0xa08>
 800676c:	f000 fc5a 	bl	8007024 <__multadd>
 8006770:	4639      	mov	r1, r7
 8006772:	4680      	mov	r8, r0
 8006774:	2300      	movs	r3, #0
 8006776:	220a      	movs	r2, #10
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fc53 	bl	8007024 <__multadd>
 800677e:	4607      	mov	r7, r0
 8006780:	e7f0      	b.n	8006764 <_dtoa_r+0xb14>
 8006782:	f1b9 0f00 	cmp.w	r9, #0
 8006786:	9a00      	ldr	r2, [sp, #0]
 8006788:	bfcc      	ite	gt
 800678a:	464d      	movgt	r5, r9
 800678c:	2501      	movle	r5, #1
 800678e:	4415      	add	r5, r2
 8006790:	f04f 0800 	mov.w	r8, #0
 8006794:	4659      	mov	r1, fp
 8006796:	2201      	movs	r2, #1
 8006798:	4620      	mov	r0, r4
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	f000 fe3c 	bl	8007418 <__lshift>
 80067a0:	4631      	mov	r1, r6
 80067a2:	4683      	mov	fp, r0
 80067a4:	f000 fea4 	bl	80074f0 <__mcmp>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	dcb2      	bgt.n	8006712 <_dtoa_r+0xac2>
 80067ac:	d102      	bne.n	80067b4 <_dtoa_r+0xb64>
 80067ae:	9b01      	ldr	r3, [sp, #4]
 80067b0:	07db      	lsls	r3, r3, #31
 80067b2:	d4ae      	bmi.n	8006712 <_dtoa_r+0xac2>
 80067b4:	462b      	mov	r3, r5
 80067b6:	461d      	mov	r5, r3
 80067b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067bc:	2a30      	cmp	r2, #48	; 0x30
 80067be:	d0fa      	beq.n	80067b6 <_dtoa_r+0xb66>
 80067c0:	e6f7      	b.n	80065b2 <_dtoa_r+0x962>
 80067c2:	9a00      	ldr	r2, [sp, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d1a5      	bne.n	8006714 <_dtoa_r+0xac4>
 80067c8:	f10a 0a01 	add.w	sl, sl, #1
 80067cc:	2331      	movs	r3, #49	; 0x31
 80067ce:	e779      	b.n	80066c4 <_dtoa_r+0xa74>
 80067d0:	4b13      	ldr	r3, [pc, #76]	; (8006820 <_dtoa_r+0xbd0>)
 80067d2:	f7ff baaf 	b.w	8005d34 <_dtoa_r+0xe4>
 80067d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f47f aa86 	bne.w	8005cea <_dtoa_r+0x9a>
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <_dtoa_r+0xbd4>)
 80067e0:	f7ff baa8 	b.w	8005d34 <_dtoa_r+0xe4>
 80067e4:	f1b9 0f00 	cmp.w	r9, #0
 80067e8:	dc03      	bgt.n	80067f2 <_dtoa_r+0xba2>
 80067ea:	9b05      	ldr	r3, [sp, #20]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	f73f aec9 	bgt.w	8006584 <_dtoa_r+0x934>
 80067f2:	9d00      	ldr	r5, [sp, #0]
 80067f4:	4631      	mov	r1, r6
 80067f6:	4658      	mov	r0, fp
 80067f8:	f7ff f99c 	bl	8005b34 <quorem>
 80067fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006800:	f805 3b01 	strb.w	r3, [r5], #1
 8006804:	9a00      	ldr	r2, [sp, #0]
 8006806:	1aaa      	subs	r2, r5, r2
 8006808:	4591      	cmp	r9, r2
 800680a:	ddba      	ble.n	8006782 <_dtoa_r+0xb32>
 800680c:	4659      	mov	r1, fp
 800680e:	2300      	movs	r3, #0
 8006810:	220a      	movs	r2, #10
 8006812:	4620      	mov	r0, r4
 8006814:	f000 fc06 	bl	8007024 <__multadd>
 8006818:	4683      	mov	fp, r0
 800681a:	e7eb      	b.n	80067f4 <_dtoa_r+0xba4>
 800681c:	08009b04 	.word	0x08009b04
 8006820:	08009904 	.word	0x08009904
 8006824:	08009a81 	.word	0x08009a81

08006828 <rshift>:
 8006828:	6903      	ldr	r3, [r0, #16]
 800682a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800682e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006832:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006836:	f100 0414 	add.w	r4, r0, #20
 800683a:	dd45      	ble.n	80068c8 <rshift+0xa0>
 800683c:	f011 011f 	ands.w	r1, r1, #31
 8006840:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006844:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006848:	d10c      	bne.n	8006864 <rshift+0x3c>
 800684a:	f100 0710 	add.w	r7, r0, #16
 800684e:	4629      	mov	r1, r5
 8006850:	42b1      	cmp	r1, r6
 8006852:	d334      	bcc.n	80068be <rshift+0x96>
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	1eea      	subs	r2, r5, #3
 800685a:	4296      	cmp	r6, r2
 800685c:	bf38      	it	cc
 800685e:	2300      	movcc	r3, #0
 8006860:	4423      	add	r3, r4
 8006862:	e015      	b.n	8006890 <rshift+0x68>
 8006864:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006868:	f1c1 0820 	rsb	r8, r1, #32
 800686c:	40cf      	lsrs	r7, r1
 800686e:	f105 0e04 	add.w	lr, r5, #4
 8006872:	46a1      	mov	r9, r4
 8006874:	4576      	cmp	r6, lr
 8006876:	46f4      	mov	ip, lr
 8006878:	d815      	bhi.n	80068a6 <rshift+0x7e>
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	009a      	lsls	r2, r3, #2
 800687e:	3a04      	subs	r2, #4
 8006880:	3501      	adds	r5, #1
 8006882:	42ae      	cmp	r6, r5
 8006884:	bf38      	it	cc
 8006886:	2200      	movcc	r2, #0
 8006888:	18a3      	adds	r3, r4, r2
 800688a:	50a7      	str	r7, [r4, r2]
 800688c:	b107      	cbz	r7, 8006890 <rshift+0x68>
 800688e:	3304      	adds	r3, #4
 8006890:	1b1a      	subs	r2, r3, r4
 8006892:	42a3      	cmp	r3, r4
 8006894:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006898:	bf08      	it	eq
 800689a:	2300      	moveq	r3, #0
 800689c:	6102      	str	r2, [r0, #16]
 800689e:	bf08      	it	eq
 80068a0:	6143      	streq	r3, [r0, #20]
 80068a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068a6:	f8dc c000 	ldr.w	ip, [ip]
 80068aa:	fa0c fc08 	lsl.w	ip, ip, r8
 80068ae:	ea4c 0707 	orr.w	r7, ip, r7
 80068b2:	f849 7b04 	str.w	r7, [r9], #4
 80068b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80068ba:	40cf      	lsrs	r7, r1
 80068bc:	e7da      	b.n	8006874 <rshift+0x4c>
 80068be:	f851 cb04 	ldr.w	ip, [r1], #4
 80068c2:	f847 cf04 	str.w	ip, [r7, #4]!
 80068c6:	e7c3      	b.n	8006850 <rshift+0x28>
 80068c8:	4623      	mov	r3, r4
 80068ca:	e7e1      	b.n	8006890 <rshift+0x68>

080068cc <__hexdig_fun>:
 80068cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80068d0:	2b09      	cmp	r3, #9
 80068d2:	d802      	bhi.n	80068da <__hexdig_fun+0xe>
 80068d4:	3820      	subs	r0, #32
 80068d6:	b2c0      	uxtb	r0, r0
 80068d8:	4770      	bx	lr
 80068da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80068de:	2b05      	cmp	r3, #5
 80068e0:	d801      	bhi.n	80068e6 <__hexdig_fun+0x1a>
 80068e2:	3847      	subs	r0, #71	; 0x47
 80068e4:	e7f7      	b.n	80068d6 <__hexdig_fun+0xa>
 80068e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d801      	bhi.n	80068f2 <__hexdig_fun+0x26>
 80068ee:	3827      	subs	r0, #39	; 0x27
 80068f0:	e7f1      	b.n	80068d6 <__hexdig_fun+0xa>
 80068f2:	2000      	movs	r0, #0
 80068f4:	4770      	bx	lr
	...

080068f8 <__gethex>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	ed2d 8b02 	vpush	{d8}
 8006900:	b089      	sub	sp, #36	; 0x24
 8006902:	ee08 0a10 	vmov	s16, r0
 8006906:	9304      	str	r3, [sp, #16]
 8006908:	4bbc      	ldr	r3, [pc, #752]	; (8006bfc <__gethex+0x304>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	9301      	str	r3, [sp, #4]
 800690e:	4618      	mov	r0, r3
 8006910:	468b      	mov	fp, r1
 8006912:	4690      	mov	r8, r2
 8006914:	f7f9 fc5c 	bl	80001d0 <strlen>
 8006918:	9b01      	ldr	r3, [sp, #4]
 800691a:	f8db 2000 	ldr.w	r2, [fp]
 800691e:	4403      	add	r3, r0
 8006920:	4682      	mov	sl, r0
 8006922:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006926:	9305      	str	r3, [sp, #20]
 8006928:	1c93      	adds	r3, r2, #2
 800692a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800692e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006932:	32fe      	adds	r2, #254	; 0xfe
 8006934:	18d1      	adds	r1, r2, r3
 8006936:	461f      	mov	r7, r3
 8006938:	f813 0b01 	ldrb.w	r0, [r3], #1
 800693c:	9100      	str	r1, [sp, #0]
 800693e:	2830      	cmp	r0, #48	; 0x30
 8006940:	d0f8      	beq.n	8006934 <__gethex+0x3c>
 8006942:	f7ff ffc3 	bl	80068cc <__hexdig_fun>
 8006946:	4604      	mov	r4, r0
 8006948:	2800      	cmp	r0, #0
 800694a:	d13a      	bne.n	80069c2 <__gethex+0xca>
 800694c:	9901      	ldr	r1, [sp, #4]
 800694e:	4652      	mov	r2, sl
 8006950:	4638      	mov	r0, r7
 8006952:	f001 f9ed 	bl	8007d30 <strncmp>
 8006956:	4605      	mov	r5, r0
 8006958:	2800      	cmp	r0, #0
 800695a:	d168      	bne.n	8006a2e <__gethex+0x136>
 800695c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006960:	eb07 060a 	add.w	r6, r7, sl
 8006964:	f7ff ffb2 	bl	80068cc <__hexdig_fun>
 8006968:	2800      	cmp	r0, #0
 800696a:	d062      	beq.n	8006a32 <__gethex+0x13a>
 800696c:	4633      	mov	r3, r6
 800696e:	7818      	ldrb	r0, [r3, #0]
 8006970:	2830      	cmp	r0, #48	; 0x30
 8006972:	461f      	mov	r7, r3
 8006974:	f103 0301 	add.w	r3, r3, #1
 8006978:	d0f9      	beq.n	800696e <__gethex+0x76>
 800697a:	f7ff ffa7 	bl	80068cc <__hexdig_fun>
 800697e:	2301      	movs	r3, #1
 8006980:	fab0 f480 	clz	r4, r0
 8006984:	0964      	lsrs	r4, r4, #5
 8006986:	4635      	mov	r5, r6
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	463a      	mov	r2, r7
 800698c:	4616      	mov	r6, r2
 800698e:	3201      	adds	r2, #1
 8006990:	7830      	ldrb	r0, [r6, #0]
 8006992:	f7ff ff9b 	bl	80068cc <__hexdig_fun>
 8006996:	2800      	cmp	r0, #0
 8006998:	d1f8      	bne.n	800698c <__gethex+0x94>
 800699a:	9901      	ldr	r1, [sp, #4]
 800699c:	4652      	mov	r2, sl
 800699e:	4630      	mov	r0, r6
 80069a0:	f001 f9c6 	bl	8007d30 <strncmp>
 80069a4:	b980      	cbnz	r0, 80069c8 <__gethex+0xd0>
 80069a6:	b94d      	cbnz	r5, 80069bc <__gethex+0xc4>
 80069a8:	eb06 050a 	add.w	r5, r6, sl
 80069ac:	462a      	mov	r2, r5
 80069ae:	4616      	mov	r6, r2
 80069b0:	3201      	adds	r2, #1
 80069b2:	7830      	ldrb	r0, [r6, #0]
 80069b4:	f7ff ff8a 	bl	80068cc <__hexdig_fun>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d1f8      	bne.n	80069ae <__gethex+0xb6>
 80069bc:	1bad      	subs	r5, r5, r6
 80069be:	00ad      	lsls	r5, r5, #2
 80069c0:	e004      	b.n	80069cc <__gethex+0xd4>
 80069c2:	2400      	movs	r4, #0
 80069c4:	4625      	mov	r5, r4
 80069c6:	e7e0      	b.n	800698a <__gethex+0x92>
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	d1f7      	bne.n	80069bc <__gethex+0xc4>
 80069cc:	7833      	ldrb	r3, [r6, #0]
 80069ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069d2:	2b50      	cmp	r3, #80	; 0x50
 80069d4:	d13b      	bne.n	8006a4e <__gethex+0x156>
 80069d6:	7873      	ldrb	r3, [r6, #1]
 80069d8:	2b2b      	cmp	r3, #43	; 0x2b
 80069da:	d02c      	beq.n	8006a36 <__gethex+0x13e>
 80069dc:	2b2d      	cmp	r3, #45	; 0x2d
 80069de:	d02e      	beq.n	8006a3e <__gethex+0x146>
 80069e0:	1c71      	adds	r1, r6, #1
 80069e2:	f04f 0900 	mov.w	r9, #0
 80069e6:	7808      	ldrb	r0, [r1, #0]
 80069e8:	f7ff ff70 	bl	80068cc <__hexdig_fun>
 80069ec:	1e43      	subs	r3, r0, #1
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b18      	cmp	r3, #24
 80069f2:	d82c      	bhi.n	8006a4e <__gethex+0x156>
 80069f4:	f1a0 0210 	sub.w	r2, r0, #16
 80069f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80069fc:	f7ff ff66 	bl	80068cc <__hexdig_fun>
 8006a00:	1e43      	subs	r3, r0, #1
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b18      	cmp	r3, #24
 8006a06:	d91d      	bls.n	8006a44 <__gethex+0x14c>
 8006a08:	f1b9 0f00 	cmp.w	r9, #0
 8006a0c:	d000      	beq.n	8006a10 <__gethex+0x118>
 8006a0e:	4252      	negs	r2, r2
 8006a10:	4415      	add	r5, r2
 8006a12:	f8cb 1000 	str.w	r1, [fp]
 8006a16:	b1e4      	cbz	r4, 8006a52 <__gethex+0x15a>
 8006a18:	9b00      	ldr	r3, [sp, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bf14      	ite	ne
 8006a1e:	2700      	movne	r7, #0
 8006a20:	2706      	moveq	r7, #6
 8006a22:	4638      	mov	r0, r7
 8006a24:	b009      	add	sp, #36	; 0x24
 8006a26:	ecbd 8b02 	vpop	{d8}
 8006a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2e:	463e      	mov	r6, r7
 8006a30:	4625      	mov	r5, r4
 8006a32:	2401      	movs	r4, #1
 8006a34:	e7ca      	b.n	80069cc <__gethex+0xd4>
 8006a36:	f04f 0900 	mov.w	r9, #0
 8006a3a:	1cb1      	adds	r1, r6, #2
 8006a3c:	e7d3      	b.n	80069e6 <__gethex+0xee>
 8006a3e:	f04f 0901 	mov.w	r9, #1
 8006a42:	e7fa      	b.n	8006a3a <__gethex+0x142>
 8006a44:	230a      	movs	r3, #10
 8006a46:	fb03 0202 	mla	r2, r3, r2, r0
 8006a4a:	3a10      	subs	r2, #16
 8006a4c:	e7d4      	b.n	80069f8 <__gethex+0x100>
 8006a4e:	4631      	mov	r1, r6
 8006a50:	e7df      	b.n	8006a12 <__gethex+0x11a>
 8006a52:	1bf3      	subs	r3, r6, r7
 8006a54:	3b01      	subs	r3, #1
 8006a56:	4621      	mov	r1, r4
 8006a58:	2b07      	cmp	r3, #7
 8006a5a:	dc0b      	bgt.n	8006a74 <__gethex+0x17c>
 8006a5c:	ee18 0a10 	vmov	r0, s16
 8006a60:	f000 fa7e 	bl	8006f60 <_Balloc>
 8006a64:	4604      	mov	r4, r0
 8006a66:	b940      	cbnz	r0, 8006a7a <__gethex+0x182>
 8006a68:	4b65      	ldr	r3, [pc, #404]	; (8006c00 <__gethex+0x308>)
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	21de      	movs	r1, #222	; 0xde
 8006a6e:	4865      	ldr	r0, [pc, #404]	; (8006c04 <__gethex+0x30c>)
 8006a70:	f001 f97e 	bl	8007d70 <__assert_func>
 8006a74:	3101      	adds	r1, #1
 8006a76:	105b      	asrs	r3, r3, #1
 8006a78:	e7ee      	b.n	8006a58 <__gethex+0x160>
 8006a7a:	f100 0914 	add.w	r9, r0, #20
 8006a7e:	f04f 0b00 	mov.w	fp, #0
 8006a82:	f1ca 0301 	rsb	r3, sl, #1
 8006a86:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a8a:	f8cd b000 	str.w	fp, [sp]
 8006a8e:	9306      	str	r3, [sp, #24]
 8006a90:	42b7      	cmp	r7, r6
 8006a92:	d340      	bcc.n	8006b16 <__gethex+0x21e>
 8006a94:	9802      	ldr	r0, [sp, #8]
 8006a96:	9b00      	ldr	r3, [sp, #0]
 8006a98:	f840 3b04 	str.w	r3, [r0], #4
 8006a9c:	eba0 0009 	sub.w	r0, r0, r9
 8006aa0:	1080      	asrs	r0, r0, #2
 8006aa2:	0146      	lsls	r6, r0, #5
 8006aa4:	6120      	str	r0, [r4, #16]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fb50 	bl	800714c <__hi0bits>
 8006aac:	1a30      	subs	r0, r6, r0
 8006aae:	f8d8 6000 	ldr.w	r6, [r8]
 8006ab2:	42b0      	cmp	r0, r6
 8006ab4:	dd63      	ble.n	8006b7e <__gethex+0x286>
 8006ab6:	1b87      	subs	r7, r0, r6
 8006ab8:	4639      	mov	r1, r7
 8006aba:	4620      	mov	r0, r4
 8006abc:	f000 feea 	bl	8007894 <__any_on>
 8006ac0:	4682      	mov	sl, r0
 8006ac2:	b1a8      	cbz	r0, 8006af0 <__gethex+0x1f8>
 8006ac4:	1e7b      	subs	r3, r7, #1
 8006ac6:	1159      	asrs	r1, r3, #5
 8006ac8:	f003 021f 	and.w	r2, r3, #31
 8006acc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006ad0:	f04f 0a01 	mov.w	sl, #1
 8006ad4:	fa0a f202 	lsl.w	r2, sl, r2
 8006ad8:	420a      	tst	r2, r1
 8006ada:	d009      	beq.n	8006af0 <__gethex+0x1f8>
 8006adc:	4553      	cmp	r3, sl
 8006ade:	dd05      	ble.n	8006aec <__gethex+0x1f4>
 8006ae0:	1eb9      	subs	r1, r7, #2
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 fed6 	bl	8007894 <__any_on>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d145      	bne.n	8006b78 <__gethex+0x280>
 8006aec:	f04f 0a02 	mov.w	sl, #2
 8006af0:	4639      	mov	r1, r7
 8006af2:	4620      	mov	r0, r4
 8006af4:	f7ff fe98 	bl	8006828 <rshift>
 8006af8:	443d      	add	r5, r7
 8006afa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006afe:	42ab      	cmp	r3, r5
 8006b00:	da4c      	bge.n	8006b9c <__gethex+0x2a4>
 8006b02:	ee18 0a10 	vmov	r0, s16
 8006b06:	4621      	mov	r1, r4
 8006b08:	f000 fa6a 	bl	8006fe0 <_Bfree>
 8006b0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b0e:	2300      	movs	r3, #0
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	27a3      	movs	r7, #163	; 0xa3
 8006b14:	e785      	b.n	8006a22 <__gethex+0x12a>
 8006b16:	1e73      	subs	r3, r6, #1
 8006b18:	9a05      	ldr	r2, [sp, #20]
 8006b1a:	9303      	str	r3, [sp, #12]
 8006b1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d019      	beq.n	8006b58 <__gethex+0x260>
 8006b24:	f1bb 0f20 	cmp.w	fp, #32
 8006b28:	d107      	bne.n	8006b3a <__gethex+0x242>
 8006b2a:	9b02      	ldr	r3, [sp, #8]
 8006b2c:	9a00      	ldr	r2, [sp, #0]
 8006b2e:	f843 2b04 	str.w	r2, [r3], #4
 8006b32:	9302      	str	r3, [sp, #8]
 8006b34:	2300      	movs	r3, #0
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	469b      	mov	fp, r3
 8006b3a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006b3e:	f7ff fec5 	bl	80068cc <__hexdig_fun>
 8006b42:	9b00      	ldr	r3, [sp, #0]
 8006b44:	f000 000f 	and.w	r0, r0, #15
 8006b48:	fa00 f00b 	lsl.w	r0, r0, fp
 8006b4c:	4303      	orrs	r3, r0
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	f10b 0b04 	add.w	fp, fp, #4
 8006b54:	9b03      	ldr	r3, [sp, #12]
 8006b56:	e00d      	b.n	8006b74 <__gethex+0x27c>
 8006b58:	9b03      	ldr	r3, [sp, #12]
 8006b5a:	9a06      	ldr	r2, [sp, #24]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	42bb      	cmp	r3, r7
 8006b60:	d3e0      	bcc.n	8006b24 <__gethex+0x22c>
 8006b62:	4618      	mov	r0, r3
 8006b64:	9901      	ldr	r1, [sp, #4]
 8006b66:	9307      	str	r3, [sp, #28]
 8006b68:	4652      	mov	r2, sl
 8006b6a:	f001 f8e1 	bl	8007d30 <strncmp>
 8006b6e:	9b07      	ldr	r3, [sp, #28]
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d1d7      	bne.n	8006b24 <__gethex+0x22c>
 8006b74:	461e      	mov	r6, r3
 8006b76:	e78b      	b.n	8006a90 <__gethex+0x198>
 8006b78:	f04f 0a03 	mov.w	sl, #3
 8006b7c:	e7b8      	b.n	8006af0 <__gethex+0x1f8>
 8006b7e:	da0a      	bge.n	8006b96 <__gethex+0x29e>
 8006b80:	1a37      	subs	r7, r6, r0
 8006b82:	4621      	mov	r1, r4
 8006b84:	ee18 0a10 	vmov	r0, s16
 8006b88:	463a      	mov	r2, r7
 8006b8a:	f000 fc45 	bl	8007418 <__lshift>
 8006b8e:	1bed      	subs	r5, r5, r7
 8006b90:	4604      	mov	r4, r0
 8006b92:	f100 0914 	add.w	r9, r0, #20
 8006b96:	f04f 0a00 	mov.w	sl, #0
 8006b9a:	e7ae      	b.n	8006afa <__gethex+0x202>
 8006b9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006ba0:	42a8      	cmp	r0, r5
 8006ba2:	dd72      	ble.n	8006c8a <__gethex+0x392>
 8006ba4:	1b45      	subs	r5, r0, r5
 8006ba6:	42ae      	cmp	r6, r5
 8006ba8:	dc36      	bgt.n	8006c18 <__gethex+0x320>
 8006baa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d02a      	beq.n	8006c08 <__gethex+0x310>
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d02c      	beq.n	8006c10 <__gethex+0x318>
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d115      	bne.n	8006be6 <__gethex+0x2ee>
 8006bba:	42ae      	cmp	r6, r5
 8006bbc:	d113      	bne.n	8006be6 <__gethex+0x2ee>
 8006bbe:	2e01      	cmp	r6, #1
 8006bc0:	d10b      	bne.n	8006bda <__gethex+0x2e2>
 8006bc2:	9a04      	ldr	r2, [sp, #16]
 8006bc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	2301      	movs	r3, #1
 8006bcc:	6123      	str	r3, [r4, #16]
 8006bce:	f8c9 3000 	str.w	r3, [r9]
 8006bd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bd4:	2762      	movs	r7, #98	; 0x62
 8006bd6:	601c      	str	r4, [r3, #0]
 8006bd8:	e723      	b.n	8006a22 <__gethex+0x12a>
 8006bda:	1e71      	subs	r1, r6, #1
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 fe59 	bl	8007894 <__any_on>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d1ed      	bne.n	8006bc2 <__gethex+0x2ca>
 8006be6:	ee18 0a10 	vmov	r0, s16
 8006bea:	4621      	mov	r1, r4
 8006bec:	f000 f9f8 	bl	8006fe0 <_Bfree>
 8006bf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	2750      	movs	r7, #80	; 0x50
 8006bf8:	e713      	b.n	8006a22 <__gethex+0x12a>
 8006bfa:	bf00      	nop
 8006bfc:	08009b80 	.word	0x08009b80
 8006c00:	08009b04 	.word	0x08009b04
 8006c04:	08009b15 	.word	0x08009b15
 8006c08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1eb      	bne.n	8006be6 <__gethex+0x2ee>
 8006c0e:	e7d8      	b.n	8006bc2 <__gethex+0x2ca>
 8006c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1d5      	bne.n	8006bc2 <__gethex+0x2ca>
 8006c16:	e7e6      	b.n	8006be6 <__gethex+0x2ee>
 8006c18:	1e6f      	subs	r7, r5, #1
 8006c1a:	f1ba 0f00 	cmp.w	sl, #0
 8006c1e:	d131      	bne.n	8006c84 <__gethex+0x38c>
 8006c20:	b127      	cbz	r7, 8006c2c <__gethex+0x334>
 8006c22:	4639      	mov	r1, r7
 8006c24:	4620      	mov	r0, r4
 8006c26:	f000 fe35 	bl	8007894 <__any_on>
 8006c2a:	4682      	mov	sl, r0
 8006c2c:	117b      	asrs	r3, r7, #5
 8006c2e:	2101      	movs	r1, #1
 8006c30:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006c34:	f007 071f 	and.w	r7, r7, #31
 8006c38:	fa01 f707 	lsl.w	r7, r1, r7
 8006c3c:	421f      	tst	r7, r3
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4620      	mov	r0, r4
 8006c42:	bf18      	it	ne
 8006c44:	f04a 0a02 	orrne.w	sl, sl, #2
 8006c48:	1b76      	subs	r6, r6, r5
 8006c4a:	f7ff fded 	bl	8006828 <rshift>
 8006c4e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006c52:	2702      	movs	r7, #2
 8006c54:	f1ba 0f00 	cmp.w	sl, #0
 8006c58:	d048      	beq.n	8006cec <__gethex+0x3f4>
 8006c5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d015      	beq.n	8006c8e <__gethex+0x396>
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d017      	beq.n	8006c96 <__gethex+0x39e>
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d109      	bne.n	8006c7e <__gethex+0x386>
 8006c6a:	f01a 0f02 	tst.w	sl, #2
 8006c6e:	d006      	beq.n	8006c7e <__gethex+0x386>
 8006c70:	f8d9 0000 	ldr.w	r0, [r9]
 8006c74:	ea4a 0a00 	orr.w	sl, sl, r0
 8006c78:	f01a 0f01 	tst.w	sl, #1
 8006c7c:	d10e      	bne.n	8006c9c <__gethex+0x3a4>
 8006c7e:	f047 0710 	orr.w	r7, r7, #16
 8006c82:	e033      	b.n	8006cec <__gethex+0x3f4>
 8006c84:	f04f 0a01 	mov.w	sl, #1
 8006c88:	e7d0      	b.n	8006c2c <__gethex+0x334>
 8006c8a:	2701      	movs	r7, #1
 8006c8c:	e7e2      	b.n	8006c54 <__gethex+0x35c>
 8006c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c90:	f1c3 0301 	rsb	r3, r3, #1
 8006c94:	9315      	str	r3, [sp, #84]	; 0x54
 8006c96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <__gethex+0x386>
 8006c9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006ca0:	f104 0314 	add.w	r3, r4, #20
 8006ca4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006ca8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006cac:	f04f 0c00 	mov.w	ip, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cb6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006cba:	d01c      	beq.n	8006cf6 <__gethex+0x3fe>
 8006cbc:	3201      	adds	r2, #1
 8006cbe:	6002      	str	r2, [r0, #0]
 8006cc0:	2f02      	cmp	r7, #2
 8006cc2:	f104 0314 	add.w	r3, r4, #20
 8006cc6:	d13f      	bne.n	8006d48 <__gethex+0x450>
 8006cc8:	f8d8 2000 	ldr.w	r2, [r8]
 8006ccc:	3a01      	subs	r2, #1
 8006cce:	42b2      	cmp	r2, r6
 8006cd0:	d10a      	bne.n	8006ce8 <__gethex+0x3f0>
 8006cd2:	1171      	asrs	r1, r6, #5
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cda:	f006 061f 	and.w	r6, r6, #31
 8006cde:	fa02 f606 	lsl.w	r6, r2, r6
 8006ce2:	421e      	tst	r6, r3
 8006ce4:	bf18      	it	ne
 8006ce6:	4617      	movne	r7, r2
 8006ce8:	f047 0720 	orr.w	r7, r7, #32
 8006cec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cee:	601c      	str	r4, [r3, #0]
 8006cf0:	9b04      	ldr	r3, [sp, #16]
 8006cf2:	601d      	str	r5, [r3, #0]
 8006cf4:	e695      	b.n	8006a22 <__gethex+0x12a>
 8006cf6:	4299      	cmp	r1, r3
 8006cf8:	f843 cc04 	str.w	ip, [r3, #-4]
 8006cfc:	d8d8      	bhi.n	8006cb0 <__gethex+0x3b8>
 8006cfe:	68a3      	ldr	r3, [r4, #8]
 8006d00:	459b      	cmp	fp, r3
 8006d02:	db19      	blt.n	8006d38 <__gethex+0x440>
 8006d04:	6861      	ldr	r1, [r4, #4]
 8006d06:	ee18 0a10 	vmov	r0, s16
 8006d0a:	3101      	adds	r1, #1
 8006d0c:	f000 f928 	bl	8006f60 <_Balloc>
 8006d10:	4681      	mov	r9, r0
 8006d12:	b918      	cbnz	r0, 8006d1c <__gethex+0x424>
 8006d14:	4b1a      	ldr	r3, [pc, #104]	; (8006d80 <__gethex+0x488>)
 8006d16:	4602      	mov	r2, r0
 8006d18:	2184      	movs	r1, #132	; 0x84
 8006d1a:	e6a8      	b.n	8006a6e <__gethex+0x176>
 8006d1c:	6922      	ldr	r2, [r4, #16]
 8006d1e:	3202      	adds	r2, #2
 8006d20:	f104 010c 	add.w	r1, r4, #12
 8006d24:	0092      	lsls	r2, r2, #2
 8006d26:	300c      	adds	r0, #12
 8006d28:	f000 f90c 	bl	8006f44 <memcpy>
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	ee18 0a10 	vmov	r0, s16
 8006d32:	f000 f955 	bl	8006fe0 <_Bfree>
 8006d36:	464c      	mov	r4, r9
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d40:	6122      	str	r2, [r4, #16]
 8006d42:	2201      	movs	r2, #1
 8006d44:	615a      	str	r2, [r3, #20]
 8006d46:	e7bb      	b.n	8006cc0 <__gethex+0x3c8>
 8006d48:	6922      	ldr	r2, [r4, #16]
 8006d4a:	455a      	cmp	r2, fp
 8006d4c:	dd0b      	ble.n	8006d66 <__gethex+0x46e>
 8006d4e:	2101      	movs	r1, #1
 8006d50:	4620      	mov	r0, r4
 8006d52:	f7ff fd69 	bl	8006828 <rshift>
 8006d56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d5a:	3501      	adds	r5, #1
 8006d5c:	42ab      	cmp	r3, r5
 8006d5e:	f6ff aed0 	blt.w	8006b02 <__gethex+0x20a>
 8006d62:	2701      	movs	r7, #1
 8006d64:	e7c0      	b.n	8006ce8 <__gethex+0x3f0>
 8006d66:	f016 061f 	ands.w	r6, r6, #31
 8006d6a:	d0fa      	beq.n	8006d62 <__gethex+0x46a>
 8006d6c:	449a      	add	sl, r3
 8006d6e:	f1c6 0620 	rsb	r6, r6, #32
 8006d72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006d76:	f000 f9e9 	bl	800714c <__hi0bits>
 8006d7a:	42b0      	cmp	r0, r6
 8006d7c:	dbe7      	blt.n	8006d4e <__gethex+0x456>
 8006d7e:	e7f0      	b.n	8006d62 <__gethex+0x46a>
 8006d80:	08009b04 	.word	0x08009b04

08006d84 <L_shift>:
 8006d84:	f1c2 0208 	rsb	r2, r2, #8
 8006d88:	0092      	lsls	r2, r2, #2
 8006d8a:	b570      	push	{r4, r5, r6, lr}
 8006d8c:	f1c2 0620 	rsb	r6, r2, #32
 8006d90:	6843      	ldr	r3, [r0, #4]
 8006d92:	6804      	ldr	r4, [r0, #0]
 8006d94:	fa03 f506 	lsl.w	r5, r3, r6
 8006d98:	432c      	orrs	r4, r5
 8006d9a:	40d3      	lsrs	r3, r2
 8006d9c:	6004      	str	r4, [r0, #0]
 8006d9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006da2:	4288      	cmp	r0, r1
 8006da4:	d3f4      	bcc.n	8006d90 <L_shift+0xc>
 8006da6:	bd70      	pop	{r4, r5, r6, pc}

08006da8 <__match>:
 8006da8:	b530      	push	{r4, r5, lr}
 8006daa:	6803      	ldr	r3, [r0, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db2:	b914      	cbnz	r4, 8006dba <__match+0x12>
 8006db4:	6003      	str	r3, [r0, #0]
 8006db6:	2001      	movs	r0, #1
 8006db8:	bd30      	pop	{r4, r5, pc}
 8006dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006dc2:	2d19      	cmp	r5, #25
 8006dc4:	bf98      	it	ls
 8006dc6:	3220      	addls	r2, #32
 8006dc8:	42a2      	cmp	r2, r4
 8006dca:	d0f0      	beq.n	8006dae <__match+0x6>
 8006dcc:	2000      	movs	r0, #0
 8006dce:	e7f3      	b.n	8006db8 <__match+0x10>

08006dd0 <__hexnan>:
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	680b      	ldr	r3, [r1, #0]
 8006dd6:	6801      	ldr	r1, [r0, #0]
 8006dd8:	115e      	asrs	r6, r3, #5
 8006dda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006dde:	f013 031f 	ands.w	r3, r3, #31
 8006de2:	b087      	sub	sp, #28
 8006de4:	bf18      	it	ne
 8006de6:	3604      	addne	r6, #4
 8006de8:	2500      	movs	r5, #0
 8006dea:	1f37      	subs	r7, r6, #4
 8006dec:	4682      	mov	sl, r0
 8006dee:	4690      	mov	r8, r2
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	f846 5c04 	str.w	r5, [r6, #-4]
 8006df6:	46b9      	mov	r9, r7
 8006df8:	463c      	mov	r4, r7
 8006dfa:	9502      	str	r5, [sp, #8]
 8006dfc:	46ab      	mov	fp, r5
 8006dfe:	784a      	ldrb	r2, [r1, #1]
 8006e00:	1c4b      	adds	r3, r1, #1
 8006e02:	9303      	str	r3, [sp, #12]
 8006e04:	b342      	cbz	r2, 8006e58 <__hexnan+0x88>
 8006e06:	4610      	mov	r0, r2
 8006e08:	9105      	str	r1, [sp, #20]
 8006e0a:	9204      	str	r2, [sp, #16]
 8006e0c:	f7ff fd5e 	bl	80068cc <__hexdig_fun>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d14f      	bne.n	8006eb4 <__hexnan+0xe4>
 8006e14:	9a04      	ldr	r2, [sp, #16]
 8006e16:	9905      	ldr	r1, [sp, #20]
 8006e18:	2a20      	cmp	r2, #32
 8006e1a:	d818      	bhi.n	8006e4e <__hexnan+0x7e>
 8006e1c:	9b02      	ldr	r3, [sp, #8]
 8006e1e:	459b      	cmp	fp, r3
 8006e20:	dd13      	ble.n	8006e4a <__hexnan+0x7a>
 8006e22:	454c      	cmp	r4, r9
 8006e24:	d206      	bcs.n	8006e34 <__hexnan+0x64>
 8006e26:	2d07      	cmp	r5, #7
 8006e28:	dc04      	bgt.n	8006e34 <__hexnan+0x64>
 8006e2a:	462a      	mov	r2, r5
 8006e2c:	4649      	mov	r1, r9
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f7ff ffa8 	bl	8006d84 <L_shift>
 8006e34:	4544      	cmp	r4, r8
 8006e36:	d950      	bls.n	8006eda <__hexnan+0x10a>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f1a4 0904 	sub.w	r9, r4, #4
 8006e3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e42:	f8cd b008 	str.w	fp, [sp, #8]
 8006e46:	464c      	mov	r4, r9
 8006e48:	461d      	mov	r5, r3
 8006e4a:	9903      	ldr	r1, [sp, #12]
 8006e4c:	e7d7      	b.n	8006dfe <__hexnan+0x2e>
 8006e4e:	2a29      	cmp	r2, #41	; 0x29
 8006e50:	d156      	bne.n	8006f00 <__hexnan+0x130>
 8006e52:	3102      	adds	r1, #2
 8006e54:	f8ca 1000 	str.w	r1, [sl]
 8006e58:	f1bb 0f00 	cmp.w	fp, #0
 8006e5c:	d050      	beq.n	8006f00 <__hexnan+0x130>
 8006e5e:	454c      	cmp	r4, r9
 8006e60:	d206      	bcs.n	8006e70 <__hexnan+0xa0>
 8006e62:	2d07      	cmp	r5, #7
 8006e64:	dc04      	bgt.n	8006e70 <__hexnan+0xa0>
 8006e66:	462a      	mov	r2, r5
 8006e68:	4649      	mov	r1, r9
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f7ff ff8a 	bl	8006d84 <L_shift>
 8006e70:	4544      	cmp	r4, r8
 8006e72:	d934      	bls.n	8006ede <__hexnan+0x10e>
 8006e74:	f1a8 0204 	sub.w	r2, r8, #4
 8006e78:	4623      	mov	r3, r4
 8006e7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006e7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8006e82:	429f      	cmp	r7, r3
 8006e84:	d2f9      	bcs.n	8006e7a <__hexnan+0xaa>
 8006e86:	1b3b      	subs	r3, r7, r4
 8006e88:	f023 0303 	bic.w	r3, r3, #3
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	3401      	adds	r4, #1
 8006e90:	3e03      	subs	r6, #3
 8006e92:	42b4      	cmp	r4, r6
 8006e94:	bf88      	it	hi
 8006e96:	2304      	movhi	r3, #4
 8006e98:	4443      	add	r3, r8
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f843 2b04 	str.w	r2, [r3], #4
 8006ea0:	429f      	cmp	r7, r3
 8006ea2:	d2fb      	bcs.n	8006e9c <__hexnan+0xcc>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	b91b      	cbnz	r3, 8006eb0 <__hexnan+0xe0>
 8006ea8:	4547      	cmp	r7, r8
 8006eaa:	d127      	bne.n	8006efc <__hexnan+0x12c>
 8006eac:	2301      	movs	r3, #1
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	2005      	movs	r0, #5
 8006eb2:	e026      	b.n	8006f02 <__hexnan+0x132>
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	2d08      	cmp	r5, #8
 8006eb8:	f10b 0b01 	add.w	fp, fp, #1
 8006ebc:	dd06      	ble.n	8006ecc <__hexnan+0xfc>
 8006ebe:	4544      	cmp	r4, r8
 8006ec0:	d9c3      	bls.n	8006e4a <__hexnan+0x7a>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ec8:	2501      	movs	r5, #1
 8006eca:	3c04      	subs	r4, #4
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	f000 000f 	and.w	r0, r0, #15
 8006ed2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006ed6:	6022      	str	r2, [r4, #0]
 8006ed8:	e7b7      	b.n	8006e4a <__hexnan+0x7a>
 8006eda:	2508      	movs	r5, #8
 8006edc:	e7b5      	b.n	8006e4a <__hexnan+0x7a>
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0df      	beq.n	8006ea4 <__hexnan+0xd4>
 8006ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee8:	f1c3 0320 	rsb	r3, r3, #32
 8006eec:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ef4:	401a      	ands	r2, r3
 8006ef6:	f846 2c04 	str.w	r2, [r6, #-4]
 8006efa:	e7d3      	b.n	8006ea4 <__hexnan+0xd4>
 8006efc:	3f04      	subs	r7, #4
 8006efe:	e7d1      	b.n	8006ea4 <__hexnan+0xd4>
 8006f00:	2004      	movs	r0, #4
 8006f02:	b007      	add	sp, #28
 8006f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f08 <_localeconv_r>:
 8006f08:	4800      	ldr	r0, [pc, #0]	; (8006f0c <_localeconv_r+0x4>)
 8006f0a:	4770      	bx	lr
 8006f0c:	20000160 	.word	0x20000160

08006f10 <malloc>:
 8006f10:	4b02      	ldr	r3, [pc, #8]	; (8006f1c <malloc+0xc>)
 8006f12:	4601      	mov	r1, r0
 8006f14:	6818      	ldr	r0, [r3, #0]
 8006f16:	f000 bd3d 	b.w	8007994 <_malloc_r>
 8006f1a:	bf00      	nop
 8006f1c:	20000008 	.word	0x20000008

08006f20 <__ascii_mbtowc>:
 8006f20:	b082      	sub	sp, #8
 8006f22:	b901      	cbnz	r1, 8006f26 <__ascii_mbtowc+0x6>
 8006f24:	a901      	add	r1, sp, #4
 8006f26:	b142      	cbz	r2, 8006f3a <__ascii_mbtowc+0x1a>
 8006f28:	b14b      	cbz	r3, 8006f3e <__ascii_mbtowc+0x1e>
 8006f2a:	7813      	ldrb	r3, [r2, #0]
 8006f2c:	600b      	str	r3, [r1, #0]
 8006f2e:	7812      	ldrb	r2, [r2, #0]
 8006f30:	1e10      	subs	r0, r2, #0
 8006f32:	bf18      	it	ne
 8006f34:	2001      	movne	r0, #1
 8006f36:	b002      	add	sp, #8
 8006f38:	4770      	bx	lr
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	e7fb      	b.n	8006f36 <__ascii_mbtowc+0x16>
 8006f3e:	f06f 0001 	mvn.w	r0, #1
 8006f42:	e7f8      	b.n	8006f36 <__ascii_mbtowc+0x16>

08006f44 <memcpy>:
 8006f44:	440a      	add	r2, r1
 8006f46:	4291      	cmp	r1, r2
 8006f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f4c:	d100      	bne.n	8006f50 <memcpy+0xc>
 8006f4e:	4770      	bx	lr
 8006f50:	b510      	push	{r4, lr}
 8006f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f5a:	4291      	cmp	r1, r2
 8006f5c:	d1f9      	bne.n	8006f52 <memcpy+0xe>
 8006f5e:	bd10      	pop	{r4, pc}

08006f60 <_Balloc>:
 8006f60:	b570      	push	{r4, r5, r6, lr}
 8006f62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f64:	4604      	mov	r4, r0
 8006f66:	460d      	mov	r5, r1
 8006f68:	b976      	cbnz	r6, 8006f88 <_Balloc+0x28>
 8006f6a:	2010      	movs	r0, #16
 8006f6c:	f7ff ffd0 	bl	8006f10 <malloc>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6260      	str	r0, [r4, #36]	; 0x24
 8006f74:	b920      	cbnz	r0, 8006f80 <_Balloc+0x20>
 8006f76:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <_Balloc+0x78>)
 8006f78:	4818      	ldr	r0, [pc, #96]	; (8006fdc <_Balloc+0x7c>)
 8006f7a:	2166      	movs	r1, #102	; 0x66
 8006f7c:	f000 fef8 	bl	8007d70 <__assert_func>
 8006f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f84:	6006      	str	r6, [r0, #0]
 8006f86:	60c6      	str	r6, [r0, #12]
 8006f88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f8a:	68f3      	ldr	r3, [r6, #12]
 8006f8c:	b183      	cbz	r3, 8006fb0 <_Balloc+0x50>
 8006f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f96:	b9b8      	cbnz	r0, 8006fc8 <_Balloc+0x68>
 8006f98:	2101      	movs	r1, #1
 8006f9a:	fa01 f605 	lsl.w	r6, r1, r5
 8006f9e:	1d72      	adds	r2, r6, #5
 8006fa0:	0092      	lsls	r2, r2, #2
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 fc97 	bl	80078d6 <_calloc_r>
 8006fa8:	b160      	cbz	r0, 8006fc4 <_Balloc+0x64>
 8006faa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fae:	e00e      	b.n	8006fce <_Balloc+0x6e>
 8006fb0:	2221      	movs	r2, #33	; 0x21
 8006fb2:	2104      	movs	r1, #4
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f000 fc8e 	bl	80078d6 <_calloc_r>
 8006fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fbc:	60f0      	str	r0, [r6, #12]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e4      	bne.n	8006f8e <_Balloc+0x2e>
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	6802      	ldr	r2, [r0, #0]
 8006fca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fd4:	e7f7      	b.n	8006fc6 <_Balloc+0x66>
 8006fd6:	bf00      	nop
 8006fd8:	08009a8e 	.word	0x08009a8e
 8006fdc:	08009b94 	.word	0x08009b94

08006fe0 <_Bfree>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	b976      	cbnz	r6, 8007008 <_Bfree+0x28>
 8006fea:	2010      	movs	r0, #16
 8006fec:	f7ff ff90 	bl	8006f10 <malloc>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6268      	str	r0, [r5, #36]	; 0x24
 8006ff4:	b920      	cbnz	r0, 8007000 <_Bfree+0x20>
 8006ff6:	4b09      	ldr	r3, [pc, #36]	; (800701c <_Bfree+0x3c>)
 8006ff8:	4809      	ldr	r0, [pc, #36]	; (8007020 <_Bfree+0x40>)
 8006ffa:	218a      	movs	r1, #138	; 0x8a
 8006ffc:	f000 feb8 	bl	8007d70 <__assert_func>
 8007000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007004:	6006      	str	r6, [r0, #0]
 8007006:	60c6      	str	r6, [r0, #12]
 8007008:	b13c      	cbz	r4, 800701a <_Bfree+0x3a>
 800700a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800700c:	6862      	ldr	r2, [r4, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007014:	6021      	str	r1, [r4, #0]
 8007016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	08009a8e 	.word	0x08009a8e
 8007020:	08009b94 	.word	0x08009b94

08007024 <__multadd>:
 8007024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007028:	690e      	ldr	r6, [r1, #16]
 800702a:	4607      	mov	r7, r0
 800702c:	4698      	mov	r8, r3
 800702e:	460c      	mov	r4, r1
 8007030:	f101 0014 	add.w	r0, r1, #20
 8007034:	2300      	movs	r3, #0
 8007036:	6805      	ldr	r5, [r0, #0]
 8007038:	b2a9      	uxth	r1, r5
 800703a:	fb02 8101 	mla	r1, r2, r1, r8
 800703e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007042:	0c2d      	lsrs	r5, r5, #16
 8007044:	fb02 c505 	mla	r5, r2, r5, ip
 8007048:	b289      	uxth	r1, r1
 800704a:	3301      	adds	r3, #1
 800704c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007050:	429e      	cmp	r6, r3
 8007052:	f840 1b04 	str.w	r1, [r0], #4
 8007056:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800705a:	dcec      	bgt.n	8007036 <__multadd+0x12>
 800705c:	f1b8 0f00 	cmp.w	r8, #0
 8007060:	d022      	beq.n	80070a8 <__multadd+0x84>
 8007062:	68a3      	ldr	r3, [r4, #8]
 8007064:	42b3      	cmp	r3, r6
 8007066:	dc19      	bgt.n	800709c <__multadd+0x78>
 8007068:	6861      	ldr	r1, [r4, #4]
 800706a:	4638      	mov	r0, r7
 800706c:	3101      	adds	r1, #1
 800706e:	f7ff ff77 	bl	8006f60 <_Balloc>
 8007072:	4605      	mov	r5, r0
 8007074:	b928      	cbnz	r0, 8007082 <__multadd+0x5e>
 8007076:	4602      	mov	r2, r0
 8007078:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <__multadd+0x8c>)
 800707a:	480e      	ldr	r0, [pc, #56]	; (80070b4 <__multadd+0x90>)
 800707c:	21b5      	movs	r1, #181	; 0xb5
 800707e:	f000 fe77 	bl	8007d70 <__assert_func>
 8007082:	6922      	ldr	r2, [r4, #16]
 8007084:	3202      	adds	r2, #2
 8007086:	f104 010c 	add.w	r1, r4, #12
 800708a:	0092      	lsls	r2, r2, #2
 800708c:	300c      	adds	r0, #12
 800708e:	f7ff ff59 	bl	8006f44 <memcpy>
 8007092:	4621      	mov	r1, r4
 8007094:	4638      	mov	r0, r7
 8007096:	f7ff ffa3 	bl	8006fe0 <_Bfree>
 800709a:	462c      	mov	r4, r5
 800709c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80070a0:	3601      	adds	r6, #1
 80070a2:	f8c3 8014 	str.w	r8, [r3, #20]
 80070a6:	6126      	str	r6, [r4, #16]
 80070a8:	4620      	mov	r0, r4
 80070aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ae:	bf00      	nop
 80070b0:	08009b04 	.word	0x08009b04
 80070b4:	08009b94 	.word	0x08009b94

080070b8 <__s2b>:
 80070b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070bc:	460c      	mov	r4, r1
 80070be:	4615      	mov	r5, r2
 80070c0:	461f      	mov	r7, r3
 80070c2:	2209      	movs	r2, #9
 80070c4:	3308      	adds	r3, #8
 80070c6:	4606      	mov	r6, r0
 80070c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80070cc:	2100      	movs	r1, #0
 80070ce:	2201      	movs	r2, #1
 80070d0:	429a      	cmp	r2, r3
 80070d2:	db09      	blt.n	80070e8 <__s2b+0x30>
 80070d4:	4630      	mov	r0, r6
 80070d6:	f7ff ff43 	bl	8006f60 <_Balloc>
 80070da:	b940      	cbnz	r0, 80070ee <__s2b+0x36>
 80070dc:	4602      	mov	r2, r0
 80070de:	4b19      	ldr	r3, [pc, #100]	; (8007144 <__s2b+0x8c>)
 80070e0:	4819      	ldr	r0, [pc, #100]	; (8007148 <__s2b+0x90>)
 80070e2:	21ce      	movs	r1, #206	; 0xce
 80070e4:	f000 fe44 	bl	8007d70 <__assert_func>
 80070e8:	0052      	lsls	r2, r2, #1
 80070ea:	3101      	adds	r1, #1
 80070ec:	e7f0      	b.n	80070d0 <__s2b+0x18>
 80070ee:	9b08      	ldr	r3, [sp, #32]
 80070f0:	6143      	str	r3, [r0, #20]
 80070f2:	2d09      	cmp	r5, #9
 80070f4:	f04f 0301 	mov.w	r3, #1
 80070f8:	6103      	str	r3, [r0, #16]
 80070fa:	dd16      	ble.n	800712a <__s2b+0x72>
 80070fc:	f104 0909 	add.w	r9, r4, #9
 8007100:	46c8      	mov	r8, r9
 8007102:	442c      	add	r4, r5
 8007104:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007108:	4601      	mov	r1, r0
 800710a:	3b30      	subs	r3, #48	; 0x30
 800710c:	220a      	movs	r2, #10
 800710e:	4630      	mov	r0, r6
 8007110:	f7ff ff88 	bl	8007024 <__multadd>
 8007114:	45a0      	cmp	r8, r4
 8007116:	d1f5      	bne.n	8007104 <__s2b+0x4c>
 8007118:	f1a5 0408 	sub.w	r4, r5, #8
 800711c:	444c      	add	r4, r9
 800711e:	1b2d      	subs	r5, r5, r4
 8007120:	1963      	adds	r3, r4, r5
 8007122:	42bb      	cmp	r3, r7
 8007124:	db04      	blt.n	8007130 <__s2b+0x78>
 8007126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800712a:	340a      	adds	r4, #10
 800712c:	2509      	movs	r5, #9
 800712e:	e7f6      	b.n	800711e <__s2b+0x66>
 8007130:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007134:	4601      	mov	r1, r0
 8007136:	3b30      	subs	r3, #48	; 0x30
 8007138:	220a      	movs	r2, #10
 800713a:	4630      	mov	r0, r6
 800713c:	f7ff ff72 	bl	8007024 <__multadd>
 8007140:	e7ee      	b.n	8007120 <__s2b+0x68>
 8007142:	bf00      	nop
 8007144:	08009b04 	.word	0x08009b04
 8007148:	08009b94 	.word	0x08009b94

0800714c <__hi0bits>:
 800714c:	0c03      	lsrs	r3, r0, #16
 800714e:	041b      	lsls	r3, r3, #16
 8007150:	b9d3      	cbnz	r3, 8007188 <__hi0bits+0x3c>
 8007152:	0400      	lsls	r0, r0, #16
 8007154:	2310      	movs	r3, #16
 8007156:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800715a:	bf04      	itt	eq
 800715c:	0200      	lsleq	r0, r0, #8
 800715e:	3308      	addeq	r3, #8
 8007160:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007164:	bf04      	itt	eq
 8007166:	0100      	lsleq	r0, r0, #4
 8007168:	3304      	addeq	r3, #4
 800716a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800716e:	bf04      	itt	eq
 8007170:	0080      	lsleq	r0, r0, #2
 8007172:	3302      	addeq	r3, #2
 8007174:	2800      	cmp	r0, #0
 8007176:	db05      	blt.n	8007184 <__hi0bits+0x38>
 8007178:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800717c:	f103 0301 	add.w	r3, r3, #1
 8007180:	bf08      	it	eq
 8007182:	2320      	moveq	r3, #32
 8007184:	4618      	mov	r0, r3
 8007186:	4770      	bx	lr
 8007188:	2300      	movs	r3, #0
 800718a:	e7e4      	b.n	8007156 <__hi0bits+0xa>

0800718c <__lo0bits>:
 800718c:	6803      	ldr	r3, [r0, #0]
 800718e:	f013 0207 	ands.w	r2, r3, #7
 8007192:	4601      	mov	r1, r0
 8007194:	d00b      	beq.n	80071ae <__lo0bits+0x22>
 8007196:	07da      	lsls	r2, r3, #31
 8007198:	d424      	bmi.n	80071e4 <__lo0bits+0x58>
 800719a:	0798      	lsls	r0, r3, #30
 800719c:	bf49      	itett	mi
 800719e:	085b      	lsrmi	r3, r3, #1
 80071a0:	089b      	lsrpl	r3, r3, #2
 80071a2:	2001      	movmi	r0, #1
 80071a4:	600b      	strmi	r3, [r1, #0]
 80071a6:	bf5c      	itt	pl
 80071a8:	600b      	strpl	r3, [r1, #0]
 80071aa:	2002      	movpl	r0, #2
 80071ac:	4770      	bx	lr
 80071ae:	b298      	uxth	r0, r3
 80071b0:	b9b0      	cbnz	r0, 80071e0 <__lo0bits+0x54>
 80071b2:	0c1b      	lsrs	r3, r3, #16
 80071b4:	2010      	movs	r0, #16
 80071b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80071ba:	bf04      	itt	eq
 80071bc:	0a1b      	lsreq	r3, r3, #8
 80071be:	3008      	addeq	r0, #8
 80071c0:	071a      	lsls	r2, r3, #28
 80071c2:	bf04      	itt	eq
 80071c4:	091b      	lsreq	r3, r3, #4
 80071c6:	3004      	addeq	r0, #4
 80071c8:	079a      	lsls	r2, r3, #30
 80071ca:	bf04      	itt	eq
 80071cc:	089b      	lsreq	r3, r3, #2
 80071ce:	3002      	addeq	r0, #2
 80071d0:	07da      	lsls	r2, r3, #31
 80071d2:	d403      	bmi.n	80071dc <__lo0bits+0x50>
 80071d4:	085b      	lsrs	r3, r3, #1
 80071d6:	f100 0001 	add.w	r0, r0, #1
 80071da:	d005      	beq.n	80071e8 <__lo0bits+0x5c>
 80071dc:	600b      	str	r3, [r1, #0]
 80071de:	4770      	bx	lr
 80071e0:	4610      	mov	r0, r2
 80071e2:	e7e8      	b.n	80071b6 <__lo0bits+0x2a>
 80071e4:	2000      	movs	r0, #0
 80071e6:	4770      	bx	lr
 80071e8:	2020      	movs	r0, #32
 80071ea:	4770      	bx	lr

080071ec <__i2b>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	460c      	mov	r4, r1
 80071f0:	2101      	movs	r1, #1
 80071f2:	f7ff feb5 	bl	8006f60 <_Balloc>
 80071f6:	4602      	mov	r2, r0
 80071f8:	b928      	cbnz	r0, 8007206 <__i2b+0x1a>
 80071fa:	4b05      	ldr	r3, [pc, #20]	; (8007210 <__i2b+0x24>)
 80071fc:	4805      	ldr	r0, [pc, #20]	; (8007214 <__i2b+0x28>)
 80071fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007202:	f000 fdb5 	bl	8007d70 <__assert_func>
 8007206:	2301      	movs	r3, #1
 8007208:	6144      	str	r4, [r0, #20]
 800720a:	6103      	str	r3, [r0, #16]
 800720c:	bd10      	pop	{r4, pc}
 800720e:	bf00      	nop
 8007210:	08009b04 	.word	0x08009b04
 8007214:	08009b94 	.word	0x08009b94

08007218 <__multiply>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	4614      	mov	r4, r2
 800721e:	690a      	ldr	r2, [r1, #16]
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	429a      	cmp	r2, r3
 8007224:	bfb8      	it	lt
 8007226:	460b      	movlt	r3, r1
 8007228:	460d      	mov	r5, r1
 800722a:	bfbc      	itt	lt
 800722c:	4625      	movlt	r5, r4
 800722e:	461c      	movlt	r4, r3
 8007230:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007234:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007238:	68ab      	ldr	r3, [r5, #8]
 800723a:	6869      	ldr	r1, [r5, #4]
 800723c:	eb0a 0709 	add.w	r7, sl, r9
 8007240:	42bb      	cmp	r3, r7
 8007242:	b085      	sub	sp, #20
 8007244:	bfb8      	it	lt
 8007246:	3101      	addlt	r1, #1
 8007248:	f7ff fe8a 	bl	8006f60 <_Balloc>
 800724c:	b930      	cbnz	r0, 800725c <__multiply+0x44>
 800724e:	4602      	mov	r2, r0
 8007250:	4b42      	ldr	r3, [pc, #264]	; (800735c <__multiply+0x144>)
 8007252:	4843      	ldr	r0, [pc, #268]	; (8007360 <__multiply+0x148>)
 8007254:	f240 115d 	movw	r1, #349	; 0x15d
 8007258:	f000 fd8a 	bl	8007d70 <__assert_func>
 800725c:	f100 0614 	add.w	r6, r0, #20
 8007260:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007264:	4633      	mov	r3, r6
 8007266:	2200      	movs	r2, #0
 8007268:	4543      	cmp	r3, r8
 800726a:	d31e      	bcc.n	80072aa <__multiply+0x92>
 800726c:	f105 0c14 	add.w	ip, r5, #20
 8007270:	f104 0314 	add.w	r3, r4, #20
 8007274:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007278:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800727c:	9202      	str	r2, [sp, #8]
 800727e:	ebac 0205 	sub.w	r2, ip, r5
 8007282:	3a15      	subs	r2, #21
 8007284:	f022 0203 	bic.w	r2, r2, #3
 8007288:	3204      	adds	r2, #4
 800728a:	f105 0115 	add.w	r1, r5, #21
 800728e:	458c      	cmp	ip, r1
 8007290:	bf38      	it	cc
 8007292:	2204      	movcc	r2, #4
 8007294:	9201      	str	r2, [sp, #4]
 8007296:	9a02      	ldr	r2, [sp, #8]
 8007298:	9303      	str	r3, [sp, #12]
 800729a:	429a      	cmp	r2, r3
 800729c:	d808      	bhi.n	80072b0 <__multiply+0x98>
 800729e:	2f00      	cmp	r7, #0
 80072a0:	dc55      	bgt.n	800734e <__multiply+0x136>
 80072a2:	6107      	str	r7, [r0, #16]
 80072a4:	b005      	add	sp, #20
 80072a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072aa:	f843 2b04 	str.w	r2, [r3], #4
 80072ae:	e7db      	b.n	8007268 <__multiply+0x50>
 80072b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80072b4:	f1ba 0f00 	cmp.w	sl, #0
 80072b8:	d020      	beq.n	80072fc <__multiply+0xe4>
 80072ba:	f105 0e14 	add.w	lr, r5, #20
 80072be:	46b1      	mov	r9, r6
 80072c0:	2200      	movs	r2, #0
 80072c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80072c6:	f8d9 b000 	ldr.w	fp, [r9]
 80072ca:	b2a1      	uxth	r1, r4
 80072cc:	fa1f fb8b 	uxth.w	fp, fp
 80072d0:	fb0a b101 	mla	r1, sl, r1, fp
 80072d4:	4411      	add	r1, r2
 80072d6:	f8d9 2000 	ldr.w	r2, [r9]
 80072da:	0c24      	lsrs	r4, r4, #16
 80072dc:	0c12      	lsrs	r2, r2, #16
 80072de:	fb0a 2404 	mla	r4, sl, r4, r2
 80072e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80072e6:	b289      	uxth	r1, r1
 80072e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80072ec:	45f4      	cmp	ip, lr
 80072ee:	f849 1b04 	str.w	r1, [r9], #4
 80072f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80072f6:	d8e4      	bhi.n	80072c2 <__multiply+0xaa>
 80072f8:	9901      	ldr	r1, [sp, #4]
 80072fa:	5072      	str	r2, [r6, r1]
 80072fc:	9a03      	ldr	r2, [sp, #12]
 80072fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007302:	3304      	adds	r3, #4
 8007304:	f1b9 0f00 	cmp.w	r9, #0
 8007308:	d01f      	beq.n	800734a <__multiply+0x132>
 800730a:	6834      	ldr	r4, [r6, #0]
 800730c:	f105 0114 	add.w	r1, r5, #20
 8007310:	46b6      	mov	lr, r6
 8007312:	f04f 0a00 	mov.w	sl, #0
 8007316:	880a      	ldrh	r2, [r1, #0]
 8007318:	f8be b002 	ldrh.w	fp, [lr, #2]
 800731c:	fb09 b202 	mla	r2, r9, r2, fp
 8007320:	4492      	add	sl, r2
 8007322:	b2a4      	uxth	r4, r4
 8007324:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007328:	f84e 4b04 	str.w	r4, [lr], #4
 800732c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007330:	f8be 2000 	ldrh.w	r2, [lr]
 8007334:	0c24      	lsrs	r4, r4, #16
 8007336:	fb09 2404 	mla	r4, r9, r4, r2
 800733a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800733e:	458c      	cmp	ip, r1
 8007340:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007344:	d8e7      	bhi.n	8007316 <__multiply+0xfe>
 8007346:	9a01      	ldr	r2, [sp, #4]
 8007348:	50b4      	str	r4, [r6, r2]
 800734a:	3604      	adds	r6, #4
 800734c:	e7a3      	b.n	8007296 <__multiply+0x7e>
 800734e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1a5      	bne.n	80072a2 <__multiply+0x8a>
 8007356:	3f01      	subs	r7, #1
 8007358:	e7a1      	b.n	800729e <__multiply+0x86>
 800735a:	bf00      	nop
 800735c:	08009b04 	.word	0x08009b04
 8007360:	08009b94 	.word	0x08009b94

08007364 <__pow5mult>:
 8007364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007368:	4615      	mov	r5, r2
 800736a:	f012 0203 	ands.w	r2, r2, #3
 800736e:	4606      	mov	r6, r0
 8007370:	460f      	mov	r7, r1
 8007372:	d007      	beq.n	8007384 <__pow5mult+0x20>
 8007374:	4c25      	ldr	r4, [pc, #148]	; (800740c <__pow5mult+0xa8>)
 8007376:	3a01      	subs	r2, #1
 8007378:	2300      	movs	r3, #0
 800737a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800737e:	f7ff fe51 	bl	8007024 <__multadd>
 8007382:	4607      	mov	r7, r0
 8007384:	10ad      	asrs	r5, r5, #2
 8007386:	d03d      	beq.n	8007404 <__pow5mult+0xa0>
 8007388:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800738a:	b97c      	cbnz	r4, 80073ac <__pow5mult+0x48>
 800738c:	2010      	movs	r0, #16
 800738e:	f7ff fdbf 	bl	8006f10 <malloc>
 8007392:	4602      	mov	r2, r0
 8007394:	6270      	str	r0, [r6, #36]	; 0x24
 8007396:	b928      	cbnz	r0, 80073a4 <__pow5mult+0x40>
 8007398:	4b1d      	ldr	r3, [pc, #116]	; (8007410 <__pow5mult+0xac>)
 800739a:	481e      	ldr	r0, [pc, #120]	; (8007414 <__pow5mult+0xb0>)
 800739c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073a0:	f000 fce6 	bl	8007d70 <__assert_func>
 80073a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073a8:	6004      	str	r4, [r0, #0]
 80073aa:	60c4      	str	r4, [r0, #12]
 80073ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073b4:	b94c      	cbnz	r4, 80073ca <__pow5mult+0x66>
 80073b6:	f240 2171 	movw	r1, #625	; 0x271
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7ff ff16 	bl	80071ec <__i2b>
 80073c0:	2300      	movs	r3, #0
 80073c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80073c6:	4604      	mov	r4, r0
 80073c8:	6003      	str	r3, [r0, #0]
 80073ca:	f04f 0900 	mov.w	r9, #0
 80073ce:	07eb      	lsls	r3, r5, #31
 80073d0:	d50a      	bpl.n	80073e8 <__pow5mult+0x84>
 80073d2:	4639      	mov	r1, r7
 80073d4:	4622      	mov	r2, r4
 80073d6:	4630      	mov	r0, r6
 80073d8:	f7ff ff1e 	bl	8007218 <__multiply>
 80073dc:	4639      	mov	r1, r7
 80073de:	4680      	mov	r8, r0
 80073e0:	4630      	mov	r0, r6
 80073e2:	f7ff fdfd 	bl	8006fe0 <_Bfree>
 80073e6:	4647      	mov	r7, r8
 80073e8:	106d      	asrs	r5, r5, #1
 80073ea:	d00b      	beq.n	8007404 <__pow5mult+0xa0>
 80073ec:	6820      	ldr	r0, [r4, #0]
 80073ee:	b938      	cbnz	r0, 8007400 <__pow5mult+0x9c>
 80073f0:	4622      	mov	r2, r4
 80073f2:	4621      	mov	r1, r4
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff ff0f 	bl	8007218 <__multiply>
 80073fa:	6020      	str	r0, [r4, #0]
 80073fc:	f8c0 9000 	str.w	r9, [r0]
 8007400:	4604      	mov	r4, r0
 8007402:	e7e4      	b.n	80073ce <__pow5mult+0x6a>
 8007404:	4638      	mov	r0, r7
 8007406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740a:	bf00      	nop
 800740c:	08009ce8 	.word	0x08009ce8
 8007410:	08009a8e 	.word	0x08009a8e
 8007414:	08009b94 	.word	0x08009b94

08007418 <__lshift>:
 8007418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800741c:	460c      	mov	r4, r1
 800741e:	6849      	ldr	r1, [r1, #4]
 8007420:	6923      	ldr	r3, [r4, #16]
 8007422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007426:	68a3      	ldr	r3, [r4, #8]
 8007428:	4607      	mov	r7, r0
 800742a:	4691      	mov	r9, r2
 800742c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007430:	f108 0601 	add.w	r6, r8, #1
 8007434:	42b3      	cmp	r3, r6
 8007436:	db0b      	blt.n	8007450 <__lshift+0x38>
 8007438:	4638      	mov	r0, r7
 800743a:	f7ff fd91 	bl	8006f60 <_Balloc>
 800743e:	4605      	mov	r5, r0
 8007440:	b948      	cbnz	r0, 8007456 <__lshift+0x3e>
 8007442:	4602      	mov	r2, r0
 8007444:	4b28      	ldr	r3, [pc, #160]	; (80074e8 <__lshift+0xd0>)
 8007446:	4829      	ldr	r0, [pc, #164]	; (80074ec <__lshift+0xd4>)
 8007448:	f240 11d9 	movw	r1, #473	; 0x1d9
 800744c:	f000 fc90 	bl	8007d70 <__assert_func>
 8007450:	3101      	adds	r1, #1
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	e7ee      	b.n	8007434 <__lshift+0x1c>
 8007456:	2300      	movs	r3, #0
 8007458:	f100 0114 	add.w	r1, r0, #20
 800745c:	f100 0210 	add.w	r2, r0, #16
 8007460:	4618      	mov	r0, r3
 8007462:	4553      	cmp	r3, sl
 8007464:	db33      	blt.n	80074ce <__lshift+0xb6>
 8007466:	6920      	ldr	r0, [r4, #16]
 8007468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800746c:	f104 0314 	add.w	r3, r4, #20
 8007470:	f019 091f 	ands.w	r9, r9, #31
 8007474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007478:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800747c:	d02b      	beq.n	80074d6 <__lshift+0xbe>
 800747e:	f1c9 0e20 	rsb	lr, r9, #32
 8007482:	468a      	mov	sl, r1
 8007484:	2200      	movs	r2, #0
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	fa00 f009 	lsl.w	r0, r0, r9
 800748c:	4302      	orrs	r2, r0
 800748e:	f84a 2b04 	str.w	r2, [sl], #4
 8007492:	f853 2b04 	ldr.w	r2, [r3], #4
 8007496:	459c      	cmp	ip, r3
 8007498:	fa22 f20e 	lsr.w	r2, r2, lr
 800749c:	d8f3      	bhi.n	8007486 <__lshift+0x6e>
 800749e:	ebac 0304 	sub.w	r3, ip, r4
 80074a2:	3b15      	subs	r3, #21
 80074a4:	f023 0303 	bic.w	r3, r3, #3
 80074a8:	3304      	adds	r3, #4
 80074aa:	f104 0015 	add.w	r0, r4, #21
 80074ae:	4584      	cmp	ip, r0
 80074b0:	bf38      	it	cc
 80074b2:	2304      	movcc	r3, #4
 80074b4:	50ca      	str	r2, [r1, r3]
 80074b6:	b10a      	cbz	r2, 80074bc <__lshift+0xa4>
 80074b8:	f108 0602 	add.w	r6, r8, #2
 80074bc:	3e01      	subs	r6, #1
 80074be:	4638      	mov	r0, r7
 80074c0:	612e      	str	r6, [r5, #16]
 80074c2:	4621      	mov	r1, r4
 80074c4:	f7ff fd8c 	bl	8006fe0 <_Bfree>
 80074c8:	4628      	mov	r0, r5
 80074ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80074d2:	3301      	adds	r3, #1
 80074d4:	e7c5      	b.n	8007462 <__lshift+0x4a>
 80074d6:	3904      	subs	r1, #4
 80074d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80074e0:	459c      	cmp	ip, r3
 80074e2:	d8f9      	bhi.n	80074d8 <__lshift+0xc0>
 80074e4:	e7ea      	b.n	80074bc <__lshift+0xa4>
 80074e6:	bf00      	nop
 80074e8:	08009b04 	.word	0x08009b04
 80074ec:	08009b94 	.word	0x08009b94

080074f0 <__mcmp>:
 80074f0:	b530      	push	{r4, r5, lr}
 80074f2:	6902      	ldr	r2, [r0, #16]
 80074f4:	690c      	ldr	r4, [r1, #16]
 80074f6:	1b12      	subs	r2, r2, r4
 80074f8:	d10e      	bne.n	8007518 <__mcmp+0x28>
 80074fa:	f100 0314 	add.w	r3, r0, #20
 80074fe:	3114      	adds	r1, #20
 8007500:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007504:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007508:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800750c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007510:	42a5      	cmp	r5, r4
 8007512:	d003      	beq.n	800751c <__mcmp+0x2c>
 8007514:	d305      	bcc.n	8007522 <__mcmp+0x32>
 8007516:	2201      	movs	r2, #1
 8007518:	4610      	mov	r0, r2
 800751a:	bd30      	pop	{r4, r5, pc}
 800751c:	4283      	cmp	r3, r0
 800751e:	d3f3      	bcc.n	8007508 <__mcmp+0x18>
 8007520:	e7fa      	b.n	8007518 <__mcmp+0x28>
 8007522:	f04f 32ff 	mov.w	r2, #4294967295
 8007526:	e7f7      	b.n	8007518 <__mcmp+0x28>

08007528 <__mdiff>:
 8007528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	460c      	mov	r4, r1
 800752e:	4606      	mov	r6, r0
 8007530:	4611      	mov	r1, r2
 8007532:	4620      	mov	r0, r4
 8007534:	4617      	mov	r7, r2
 8007536:	f7ff ffdb 	bl	80074f0 <__mcmp>
 800753a:	1e05      	subs	r5, r0, #0
 800753c:	d110      	bne.n	8007560 <__mdiff+0x38>
 800753e:	4629      	mov	r1, r5
 8007540:	4630      	mov	r0, r6
 8007542:	f7ff fd0d 	bl	8006f60 <_Balloc>
 8007546:	b930      	cbnz	r0, 8007556 <__mdiff+0x2e>
 8007548:	4b39      	ldr	r3, [pc, #228]	; (8007630 <__mdiff+0x108>)
 800754a:	4602      	mov	r2, r0
 800754c:	f240 2132 	movw	r1, #562	; 0x232
 8007550:	4838      	ldr	r0, [pc, #224]	; (8007634 <__mdiff+0x10c>)
 8007552:	f000 fc0d 	bl	8007d70 <__assert_func>
 8007556:	2301      	movs	r3, #1
 8007558:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800755c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007560:	bfa4      	itt	ge
 8007562:	463b      	movge	r3, r7
 8007564:	4627      	movge	r7, r4
 8007566:	4630      	mov	r0, r6
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	bfa6      	itte	ge
 800756c:	461c      	movge	r4, r3
 800756e:	2500      	movge	r5, #0
 8007570:	2501      	movlt	r5, #1
 8007572:	f7ff fcf5 	bl	8006f60 <_Balloc>
 8007576:	b920      	cbnz	r0, 8007582 <__mdiff+0x5a>
 8007578:	4b2d      	ldr	r3, [pc, #180]	; (8007630 <__mdiff+0x108>)
 800757a:	4602      	mov	r2, r0
 800757c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007580:	e7e6      	b.n	8007550 <__mdiff+0x28>
 8007582:	693e      	ldr	r6, [r7, #16]
 8007584:	60c5      	str	r5, [r0, #12]
 8007586:	6925      	ldr	r5, [r4, #16]
 8007588:	f107 0114 	add.w	r1, r7, #20
 800758c:	f104 0914 	add.w	r9, r4, #20
 8007590:	f100 0e14 	add.w	lr, r0, #20
 8007594:	f107 0210 	add.w	r2, r7, #16
 8007598:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800759c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80075a0:	46f2      	mov	sl, lr
 80075a2:	2700      	movs	r7, #0
 80075a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80075a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075ac:	fa1f f883 	uxth.w	r8, r3
 80075b0:	fa17 f78b 	uxtah	r7, r7, fp
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	eba7 0808 	sub.w	r8, r7, r8
 80075ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075c2:	fa1f f888 	uxth.w	r8, r8
 80075c6:	141f      	asrs	r7, r3, #16
 80075c8:	454d      	cmp	r5, r9
 80075ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075ce:	f84a 3b04 	str.w	r3, [sl], #4
 80075d2:	d8e7      	bhi.n	80075a4 <__mdiff+0x7c>
 80075d4:	1b2b      	subs	r3, r5, r4
 80075d6:	3b15      	subs	r3, #21
 80075d8:	f023 0303 	bic.w	r3, r3, #3
 80075dc:	3304      	adds	r3, #4
 80075de:	3415      	adds	r4, #21
 80075e0:	42a5      	cmp	r5, r4
 80075e2:	bf38      	it	cc
 80075e4:	2304      	movcc	r3, #4
 80075e6:	4419      	add	r1, r3
 80075e8:	4473      	add	r3, lr
 80075ea:	469e      	mov	lr, r3
 80075ec:	460d      	mov	r5, r1
 80075ee:	4565      	cmp	r5, ip
 80075f0:	d30e      	bcc.n	8007610 <__mdiff+0xe8>
 80075f2:	f10c 0203 	add.w	r2, ip, #3
 80075f6:	1a52      	subs	r2, r2, r1
 80075f8:	f022 0203 	bic.w	r2, r2, #3
 80075fc:	3903      	subs	r1, #3
 80075fe:	458c      	cmp	ip, r1
 8007600:	bf38      	it	cc
 8007602:	2200      	movcc	r2, #0
 8007604:	441a      	add	r2, r3
 8007606:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800760a:	b17b      	cbz	r3, 800762c <__mdiff+0x104>
 800760c:	6106      	str	r6, [r0, #16]
 800760e:	e7a5      	b.n	800755c <__mdiff+0x34>
 8007610:	f855 8b04 	ldr.w	r8, [r5], #4
 8007614:	fa17 f488 	uxtah	r4, r7, r8
 8007618:	1422      	asrs	r2, r4, #16
 800761a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800761e:	b2a4      	uxth	r4, r4
 8007620:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007624:	f84e 4b04 	str.w	r4, [lr], #4
 8007628:	1417      	asrs	r7, r2, #16
 800762a:	e7e0      	b.n	80075ee <__mdiff+0xc6>
 800762c:	3e01      	subs	r6, #1
 800762e:	e7ea      	b.n	8007606 <__mdiff+0xde>
 8007630:	08009b04 	.word	0x08009b04
 8007634:	08009b94 	.word	0x08009b94

08007638 <__ulp>:
 8007638:	b082      	sub	sp, #8
 800763a:	ed8d 0b00 	vstr	d0, [sp]
 800763e:	9b01      	ldr	r3, [sp, #4]
 8007640:	4912      	ldr	r1, [pc, #72]	; (800768c <__ulp+0x54>)
 8007642:	4019      	ands	r1, r3
 8007644:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007648:	2900      	cmp	r1, #0
 800764a:	dd05      	ble.n	8007658 <__ulp+0x20>
 800764c:	2200      	movs	r2, #0
 800764e:	460b      	mov	r3, r1
 8007650:	ec43 2b10 	vmov	d0, r2, r3
 8007654:	b002      	add	sp, #8
 8007656:	4770      	bx	lr
 8007658:	4249      	negs	r1, r1
 800765a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800765e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007662:	f04f 0200 	mov.w	r2, #0
 8007666:	f04f 0300 	mov.w	r3, #0
 800766a:	da04      	bge.n	8007676 <__ulp+0x3e>
 800766c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007670:	fa41 f300 	asr.w	r3, r1, r0
 8007674:	e7ec      	b.n	8007650 <__ulp+0x18>
 8007676:	f1a0 0114 	sub.w	r1, r0, #20
 800767a:	291e      	cmp	r1, #30
 800767c:	bfda      	itte	le
 800767e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007682:	fa20 f101 	lsrle.w	r1, r0, r1
 8007686:	2101      	movgt	r1, #1
 8007688:	460a      	mov	r2, r1
 800768a:	e7e1      	b.n	8007650 <__ulp+0x18>
 800768c:	7ff00000 	.word	0x7ff00000

08007690 <__b2d>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	6905      	ldr	r5, [r0, #16]
 8007694:	f100 0714 	add.w	r7, r0, #20
 8007698:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800769c:	1f2e      	subs	r6, r5, #4
 800769e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80076a2:	4620      	mov	r0, r4
 80076a4:	f7ff fd52 	bl	800714c <__hi0bits>
 80076a8:	f1c0 0320 	rsb	r3, r0, #32
 80076ac:	280a      	cmp	r0, #10
 80076ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800772c <__b2d+0x9c>
 80076b2:	600b      	str	r3, [r1, #0]
 80076b4:	dc14      	bgt.n	80076e0 <__b2d+0x50>
 80076b6:	f1c0 0e0b 	rsb	lr, r0, #11
 80076ba:	fa24 f10e 	lsr.w	r1, r4, lr
 80076be:	42b7      	cmp	r7, r6
 80076c0:	ea41 030c 	orr.w	r3, r1, ip
 80076c4:	bf34      	ite	cc
 80076c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80076ca:	2100      	movcs	r1, #0
 80076cc:	3015      	adds	r0, #21
 80076ce:	fa04 f000 	lsl.w	r0, r4, r0
 80076d2:	fa21 f10e 	lsr.w	r1, r1, lr
 80076d6:	ea40 0201 	orr.w	r2, r0, r1
 80076da:	ec43 2b10 	vmov	d0, r2, r3
 80076de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e0:	42b7      	cmp	r7, r6
 80076e2:	bf3a      	itte	cc
 80076e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80076e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80076ec:	2100      	movcs	r1, #0
 80076ee:	380b      	subs	r0, #11
 80076f0:	d017      	beq.n	8007722 <__b2d+0x92>
 80076f2:	f1c0 0c20 	rsb	ip, r0, #32
 80076f6:	fa04 f500 	lsl.w	r5, r4, r0
 80076fa:	42be      	cmp	r6, r7
 80076fc:	fa21 f40c 	lsr.w	r4, r1, ip
 8007700:	ea45 0504 	orr.w	r5, r5, r4
 8007704:	bf8c      	ite	hi
 8007706:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800770a:	2400      	movls	r4, #0
 800770c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007710:	fa01 f000 	lsl.w	r0, r1, r0
 8007714:	fa24 f40c 	lsr.w	r4, r4, ip
 8007718:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800771c:	ea40 0204 	orr.w	r2, r0, r4
 8007720:	e7db      	b.n	80076da <__b2d+0x4a>
 8007722:	ea44 030c 	orr.w	r3, r4, ip
 8007726:	460a      	mov	r2, r1
 8007728:	e7d7      	b.n	80076da <__b2d+0x4a>
 800772a:	bf00      	nop
 800772c:	3ff00000 	.word	0x3ff00000

08007730 <__d2b>:
 8007730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007734:	4689      	mov	r9, r1
 8007736:	2101      	movs	r1, #1
 8007738:	ec57 6b10 	vmov	r6, r7, d0
 800773c:	4690      	mov	r8, r2
 800773e:	f7ff fc0f 	bl	8006f60 <_Balloc>
 8007742:	4604      	mov	r4, r0
 8007744:	b930      	cbnz	r0, 8007754 <__d2b+0x24>
 8007746:	4602      	mov	r2, r0
 8007748:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <__d2b+0xb0>)
 800774a:	4826      	ldr	r0, [pc, #152]	; (80077e4 <__d2b+0xb4>)
 800774c:	f240 310a 	movw	r1, #778	; 0x30a
 8007750:	f000 fb0e 	bl	8007d70 <__assert_func>
 8007754:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800775c:	bb35      	cbnz	r5, 80077ac <__d2b+0x7c>
 800775e:	2e00      	cmp	r6, #0
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	d028      	beq.n	80077b6 <__d2b+0x86>
 8007764:	4668      	mov	r0, sp
 8007766:	9600      	str	r6, [sp, #0]
 8007768:	f7ff fd10 	bl	800718c <__lo0bits>
 800776c:	9900      	ldr	r1, [sp, #0]
 800776e:	b300      	cbz	r0, 80077b2 <__d2b+0x82>
 8007770:	9a01      	ldr	r2, [sp, #4]
 8007772:	f1c0 0320 	rsb	r3, r0, #32
 8007776:	fa02 f303 	lsl.w	r3, r2, r3
 800777a:	430b      	orrs	r3, r1
 800777c:	40c2      	lsrs	r2, r0
 800777e:	6163      	str	r3, [r4, #20]
 8007780:	9201      	str	r2, [sp, #4]
 8007782:	9b01      	ldr	r3, [sp, #4]
 8007784:	61a3      	str	r3, [r4, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	bf14      	ite	ne
 800778a:	2202      	movne	r2, #2
 800778c:	2201      	moveq	r2, #1
 800778e:	6122      	str	r2, [r4, #16]
 8007790:	b1d5      	cbz	r5, 80077c8 <__d2b+0x98>
 8007792:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007796:	4405      	add	r5, r0
 8007798:	f8c9 5000 	str.w	r5, [r9]
 800779c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077a0:	f8c8 0000 	str.w	r0, [r8]
 80077a4:	4620      	mov	r0, r4
 80077a6:	b003      	add	sp, #12
 80077a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077b0:	e7d5      	b.n	800775e <__d2b+0x2e>
 80077b2:	6161      	str	r1, [r4, #20]
 80077b4:	e7e5      	b.n	8007782 <__d2b+0x52>
 80077b6:	a801      	add	r0, sp, #4
 80077b8:	f7ff fce8 	bl	800718c <__lo0bits>
 80077bc:	9b01      	ldr	r3, [sp, #4]
 80077be:	6163      	str	r3, [r4, #20]
 80077c0:	2201      	movs	r2, #1
 80077c2:	6122      	str	r2, [r4, #16]
 80077c4:	3020      	adds	r0, #32
 80077c6:	e7e3      	b.n	8007790 <__d2b+0x60>
 80077c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077d0:	f8c9 0000 	str.w	r0, [r9]
 80077d4:	6918      	ldr	r0, [r3, #16]
 80077d6:	f7ff fcb9 	bl	800714c <__hi0bits>
 80077da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077de:	e7df      	b.n	80077a0 <__d2b+0x70>
 80077e0:	08009b04 	.word	0x08009b04
 80077e4:	08009b94 	.word	0x08009b94

080077e8 <__ratio>:
 80077e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	4688      	mov	r8, r1
 80077ee:	4669      	mov	r1, sp
 80077f0:	4681      	mov	r9, r0
 80077f2:	f7ff ff4d 	bl	8007690 <__b2d>
 80077f6:	a901      	add	r1, sp, #4
 80077f8:	4640      	mov	r0, r8
 80077fa:	ec55 4b10 	vmov	r4, r5, d0
 80077fe:	f7ff ff47 	bl	8007690 <__b2d>
 8007802:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007806:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800780a:	eba3 0c02 	sub.w	ip, r3, r2
 800780e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007812:	1a9b      	subs	r3, r3, r2
 8007814:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007818:	ec51 0b10 	vmov	r0, r1, d0
 800781c:	2b00      	cmp	r3, #0
 800781e:	bfd6      	itet	le
 8007820:	460a      	movle	r2, r1
 8007822:	462a      	movgt	r2, r5
 8007824:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007828:	468b      	mov	fp, r1
 800782a:	462f      	mov	r7, r5
 800782c:	bfd4      	ite	le
 800782e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007832:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007836:	4620      	mov	r0, r4
 8007838:	ee10 2a10 	vmov	r2, s0
 800783c:	465b      	mov	r3, fp
 800783e:	4639      	mov	r1, r7
 8007840:	f7f9 f804 	bl	800084c <__aeabi_ddiv>
 8007844:	ec41 0b10 	vmov	d0, r0, r1
 8007848:	b003      	add	sp, #12
 800784a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800784e <__copybits>:
 800784e:	3901      	subs	r1, #1
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	1149      	asrs	r1, r1, #5
 8007854:	6914      	ldr	r4, [r2, #16]
 8007856:	3101      	adds	r1, #1
 8007858:	f102 0314 	add.w	r3, r2, #20
 800785c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007860:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007864:	1f05      	subs	r5, r0, #4
 8007866:	42a3      	cmp	r3, r4
 8007868:	d30c      	bcc.n	8007884 <__copybits+0x36>
 800786a:	1aa3      	subs	r3, r4, r2
 800786c:	3b11      	subs	r3, #17
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	3211      	adds	r2, #17
 8007874:	42a2      	cmp	r2, r4
 8007876:	bf88      	it	hi
 8007878:	2300      	movhi	r3, #0
 800787a:	4418      	add	r0, r3
 800787c:	2300      	movs	r3, #0
 800787e:	4288      	cmp	r0, r1
 8007880:	d305      	bcc.n	800788e <__copybits+0x40>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	f853 6b04 	ldr.w	r6, [r3], #4
 8007888:	f845 6f04 	str.w	r6, [r5, #4]!
 800788c:	e7eb      	b.n	8007866 <__copybits+0x18>
 800788e:	f840 3b04 	str.w	r3, [r0], #4
 8007892:	e7f4      	b.n	800787e <__copybits+0x30>

08007894 <__any_on>:
 8007894:	f100 0214 	add.w	r2, r0, #20
 8007898:	6900      	ldr	r0, [r0, #16]
 800789a:	114b      	asrs	r3, r1, #5
 800789c:	4298      	cmp	r0, r3
 800789e:	b510      	push	{r4, lr}
 80078a0:	db11      	blt.n	80078c6 <__any_on+0x32>
 80078a2:	dd0a      	ble.n	80078ba <__any_on+0x26>
 80078a4:	f011 011f 	ands.w	r1, r1, #31
 80078a8:	d007      	beq.n	80078ba <__any_on+0x26>
 80078aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80078ae:	fa24 f001 	lsr.w	r0, r4, r1
 80078b2:	fa00 f101 	lsl.w	r1, r0, r1
 80078b6:	428c      	cmp	r4, r1
 80078b8:	d10b      	bne.n	80078d2 <__any_on+0x3e>
 80078ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078be:	4293      	cmp	r3, r2
 80078c0:	d803      	bhi.n	80078ca <__any_on+0x36>
 80078c2:	2000      	movs	r0, #0
 80078c4:	bd10      	pop	{r4, pc}
 80078c6:	4603      	mov	r3, r0
 80078c8:	e7f7      	b.n	80078ba <__any_on+0x26>
 80078ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078ce:	2900      	cmp	r1, #0
 80078d0:	d0f5      	beq.n	80078be <__any_on+0x2a>
 80078d2:	2001      	movs	r0, #1
 80078d4:	e7f6      	b.n	80078c4 <__any_on+0x30>

080078d6 <_calloc_r>:
 80078d6:	b513      	push	{r0, r1, r4, lr}
 80078d8:	434a      	muls	r2, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	9201      	str	r2, [sp, #4]
 80078de:	f000 f859 	bl	8007994 <_malloc_r>
 80078e2:	4604      	mov	r4, r0
 80078e4:	b118      	cbz	r0, 80078ee <_calloc_r+0x18>
 80078e6:	9a01      	ldr	r2, [sp, #4]
 80078e8:	2100      	movs	r1, #0
 80078ea:	f7fc fbc7 	bl	800407c <memset>
 80078ee:	4620      	mov	r0, r4
 80078f0:	b002      	add	sp, #8
 80078f2:	bd10      	pop	{r4, pc}

080078f4 <_free_r>:
 80078f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078f6:	2900      	cmp	r1, #0
 80078f8:	d048      	beq.n	800798c <_free_r+0x98>
 80078fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078fe:	9001      	str	r0, [sp, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f1a1 0404 	sub.w	r4, r1, #4
 8007906:	bfb8      	it	lt
 8007908:	18e4      	addlt	r4, r4, r3
 800790a:	f000 fa7b 	bl	8007e04 <__malloc_lock>
 800790e:	4a20      	ldr	r2, [pc, #128]	; (8007990 <_free_r+0x9c>)
 8007910:	9801      	ldr	r0, [sp, #4]
 8007912:	6813      	ldr	r3, [r2, #0]
 8007914:	4615      	mov	r5, r2
 8007916:	b933      	cbnz	r3, 8007926 <_free_r+0x32>
 8007918:	6063      	str	r3, [r4, #4]
 800791a:	6014      	str	r4, [r2, #0]
 800791c:	b003      	add	sp, #12
 800791e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007922:	f000 ba75 	b.w	8007e10 <__malloc_unlock>
 8007926:	42a3      	cmp	r3, r4
 8007928:	d90b      	bls.n	8007942 <_free_r+0x4e>
 800792a:	6821      	ldr	r1, [r4, #0]
 800792c:	1862      	adds	r2, r4, r1
 800792e:	4293      	cmp	r3, r2
 8007930:	bf04      	itt	eq
 8007932:	681a      	ldreq	r2, [r3, #0]
 8007934:	685b      	ldreq	r3, [r3, #4]
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	bf04      	itt	eq
 800793a:	1852      	addeq	r2, r2, r1
 800793c:	6022      	streq	r2, [r4, #0]
 800793e:	602c      	str	r4, [r5, #0]
 8007940:	e7ec      	b.n	800791c <_free_r+0x28>
 8007942:	461a      	mov	r2, r3
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	b10b      	cbz	r3, 800794c <_free_r+0x58>
 8007948:	42a3      	cmp	r3, r4
 800794a:	d9fa      	bls.n	8007942 <_free_r+0x4e>
 800794c:	6811      	ldr	r1, [r2, #0]
 800794e:	1855      	adds	r5, r2, r1
 8007950:	42a5      	cmp	r5, r4
 8007952:	d10b      	bne.n	800796c <_free_r+0x78>
 8007954:	6824      	ldr	r4, [r4, #0]
 8007956:	4421      	add	r1, r4
 8007958:	1854      	adds	r4, r2, r1
 800795a:	42a3      	cmp	r3, r4
 800795c:	6011      	str	r1, [r2, #0]
 800795e:	d1dd      	bne.n	800791c <_free_r+0x28>
 8007960:	681c      	ldr	r4, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	6053      	str	r3, [r2, #4]
 8007966:	4421      	add	r1, r4
 8007968:	6011      	str	r1, [r2, #0]
 800796a:	e7d7      	b.n	800791c <_free_r+0x28>
 800796c:	d902      	bls.n	8007974 <_free_r+0x80>
 800796e:	230c      	movs	r3, #12
 8007970:	6003      	str	r3, [r0, #0]
 8007972:	e7d3      	b.n	800791c <_free_r+0x28>
 8007974:	6825      	ldr	r5, [r4, #0]
 8007976:	1961      	adds	r1, r4, r5
 8007978:	428b      	cmp	r3, r1
 800797a:	bf04      	itt	eq
 800797c:	6819      	ldreq	r1, [r3, #0]
 800797e:	685b      	ldreq	r3, [r3, #4]
 8007980:	6063      	str	r3, [r4, #4]
 8007982:	bf04      	itt	eq
 8007984:	1949      	addeq	r1, r1, r5
 8007986:	6021      	streq	r1, [r4, #0]
 8007988:	6054      	str	r4, [r2, #4]
 800798a:	e7c7      	b.n	800791c <_free_r+0x28>
 800798c:	b003      	add	sp, #12
 800798e:	bd30      	pop	{r4, r5, pc}
 8007990:	20000220 	.word	0x20000220

08007994 <_malloc_r>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	1ccd      	adds	r5, r1, #3
 8007998:	f025 0503 	bic.w	r5, r5, #3
 800799c:	3508      	adds	r5, #8
 800799e:	2d0c      	cmp	r5, #12
 80079a0:	bf38      	it	cc
 80079a2:	250c      	movcc	r5, #12
 80079a4:	2d00      	cmp	r5, #0
 80079a6:	4606      	mov	r6, r0
 80079a8:	db01      	blt.n	80079ae <_malloc_r+0x1a>
 80079aa:	42a9      	cmp	r1, r5
 80079ac:	d903      	bls.n	80079b6 <_malloc_r+0x22>
 80079ae:	230c      	movs	r3, #12
 80079b0:	6033      	str	r3, [r6, #0]
 80079b2:	2000      	movs	r0, #0
 80079b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b6:	f000 fa25 	bl	8007e04 <__malloc_lock>
 80079ba:	4921      	ldr	r1, [pc, #132]	; (8007a40 <_malloc_r+0xac>)
 80079bc:	680a      	ldr	r2, [r1, #0]
 80079be:	4614      	mov	r4, r2
 80079c0:	b99c      	cbnz	r4, 80079ea <_malloc_r+0x56>
 80079c2:	4f20      	ldr	r7, [pc, #128]	; (8007a44 <_malloc_r+0xb0>)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	b923      	cbnz	r3, 80079d2 <_malloc_r+0x3e>
 80079c8:	4621      	mov	r1, r4
 80079ca:	4630      	mov	r0, r6
 80079cc:	f000 f9a0 	bl	8007d10 <_sbrk_r>
 80079d0:	6038      	str	r0, [r7, #0]
 80079d2:	4629      	mov	r1, r5
 80079d4:	4630      	mov	r0, r6
 80079d6:	f000 f99b 	bl	8007d10 <_sbrk_r>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	d123      	bne.n	8007a26 <_malloc_r+0x92>
 80079de:	230c      	movs	r3, #12
 80079e0:	6033      	str	r3, [r6, #0]
 80079e2:	4630      	mov	r0, r6
 80079e4:	f000 fa14 	bl	8007e10 <__malloc_unlock>
 80079e8:	e7e3      	b.n	80079b2 <_malloc_r+0x1e>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	1b5b      	subs	r3, r3, r5
 80079ee:	d417      	bmi.n	8007a20 <_malloc_r+0x8c>
 80079f0:	2b0b      	cmp	r3, #11
 80079f2:	d903      	bls.n	80079fc <_malloc_r+0x68>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	441c      	add	r4, r3
 80079f8:	6025      	str	r5, [r4, #0]
 80079fa:	e004      	b.n	8007a06 <_malloc_r+0x72>
 80079fc:	6863      	ldr	r3, [r4, #4]
 80079fe:	42a2      	cmp	r2, r4
 8007a00:	bf0c      	ite	eq
 8007a02:	600b      	streq	r3, [r1, #0]
 8007a04:	6053      	strne	r3, [r2, #4]
 8007a06:	4630      	mov	r0, r6
 8007a08:	f000 fa02 	bl	8007e10 <__malloc_unlock>
 8007a0c:	f104 000b 	add.w	r0, r4, #11
 8007a10:	1d23      	adds	r3, r4, #4
 8007a12:	f020 0007 	bic.w	r0, r0, #7
 8007a16:	1ac2      	subs	r2, r0, r3
 8007a18:	d0cc      	beq.n	80079b4 <_malloc_r+0x20>
 8007a1a:	1a1b      	subs	r3, r3, r0
 8007a1c:	50a3      	str	r3, [r4, r2]
 8007a1e:	e7c9      	b.n	80079b4 <_malloc_r+0x20>
 8007a20:	4622      	mov	r2, r4
 8007a22:	6864      	ldr	r4, [r4, #4]
 8007a24:	e7cc      	b.n	80079c0 <_malloc_r+0x2c>
 8007a26:	1cc4      	adds	r4, r0, #3
 8007a28:	f024 0403 	bic.w	r4, r4, #3
 8007a2c:	42a0      	cmp	r0, r4
 8007a2e:	d0e3      	beq.n	80079f8 <_malloc_r+0x64>
 8007a30:	1a21      	subs	r1, r4, r0
 8007a32:	4630      	mov	r0, r6
 8007a34:	f000 f96c 	bl	8007d10 <_sbrk_r>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d1dd      	bne.n	80079f8 <_malloc_r+0x64>
 8007a3c:	e7cf      	b.n	80079de <_malloc_r+0x4a>
 8007a3e:	bf00      	nop
 8007a40:	20000220 	.word	0x20000220
 8007a44:	20000224 	.word	0x20000224

08007a48 <__ssputs_r>:
 8007a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a4c:	688e      	ldr	r6, [r1, #8]
 8007a4e:	429e      	cmp	r6, r3
 8007a50:	4682      	mov	sl, r0
 8007a52:	460c      	mov	r4, r1
 8007a54:	4690      	mov	r8, r2
 8007a56:	461f      	mov	r7, r3
 8007a58:	d838      	bhi.n	8007acc <__ssputs_r+0x84>
 8007a5a:	898a      	ldrh	r2, [r1, #12]
 8007a5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a60:	d032      	beq.n	8007ac8 <__ssputs_r+0x80>
 8007a62:	6825      	ldr	r5, [r4, #0]
 8007a64:	6909      	ldr	r1, [r1, #16]
 8007a66:	eba5 0901 	sub.w	r9, r5, r1
 8007a6a:	6965      	ldr	r5, [r4, #20]
 8007a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a74:	3301      	adds	r3, #1
 8007a76:	444b      	add	r3, r9
 8007a78:	106d      	asrs	r5, r5, #1
 8007a7a:	429d      	cmp	r5, r3
 8007a7c:	bf38      	it	cc
 8007a7e:	461d      	movcc	r5, r3
 8007a80:	0553      	lsls	r3, r2, #21
 8007a82:	d531      	bpl.n	8007ae8 <__ssputs_r+0xa0>
 8007a84:	4629      	mov	r1, r5
 8007a86:	f7ff ff85 	bl	8007994 <_malloc_r>
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	b950      	cbnz	r0, 8007aa4 <__ssputs_r+0x5c>
 8007a8e:	230c      	movs	r3, #12
 8007a90:	f8ca 3000 	str.w	r3, [sl]
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a9a:	81a3      	strh	r3, [r4, #12]
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aa4:	6921      	ldr	r1, [r4, #16]
 8007aa6:	464a      	mov	r2, r9
 8007aa8:	f7ff fa4c 	bl	8006f44 <memcpy>
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab6:	81a3      	strh	r3, [r4, #12]
 8007ab8:	6126      	str	r6, [r4, #16]
 8007aba:	6165      	str	r5, [r4, #20]
 8007abc:	444e      	add	r6, r9
 8007abe:	eba5 0509 	sub.w	r5, r5, r9
 8007ac2:	6026      	str	r6, [r4, #0]
 8007ac4:	60a5      	str	r5, [r4, #8]
 8007ac6:	463e      	mov	r6, r7
 8007ac8:	42be      	cmp	r6, r7
 8007aca:	d900      	bls.n	8007ace <__ssputs_r+0x86>
 8007acc:	463e      	mov	r6, r7
 8007ace:	4632      	mov	r2, r6
 8007ad0:	6820      	ldr	r0, [r4, #0]
 8007ad2:	4641      	mov	r1, r8
 8007ad4:	f000 f97c 	bl	8007dd0 <memmove>
 8007ad8:	68a3      	ldr	r3, [r4, #8]
 8007ada:	6822      	ldr	r2, [r4, #0]
 8007adc:	1b9b      	subs	r3, r3, r6
 8007ade:	4432      	add	r2, r6
 8007ae0:	60a3      	str	r3, [r4, #8]
 8007ae2:	6022      	str	r2, [r4, #0]
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	e7db      	b.n	8007aa0 <__ssputs_r+0x58>
 8007ae8:	462a      	mov	r2, r5
 8007aea:	f000 f997 	bl	8007e1c <_realloc_r>
 8007aee:	4606      	mov	r6, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d1e1      	bne.n	8007ab8 <__ssputs_r+0x70>
 8007af4:	6921      	ldr	r1, [r4, #16]
 8007af6:	4650      	mov	r0, sl
 8007af8:	f7ff fefc 	bl	80078f4 <_free_r>
 8007afc:	e7c7      	b.n	8007a8e <__ssputs_r+0x46>
	...

08007b00 <_svfiprintf_r>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	4698      	mov	r8, r3
 8007b06:	898b      	ldrh	r3, [r1, #12]
 8007b08:	061b      	lsls	r3, r3, #24
 8007b0a:	b09d      	sub	sp, #116	; 0x74
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	460d      	mov	r5, r1
 8007b10:	4614      	mov	r4, r2
 8007b12:	d50e      	bpl.n	8007b32 <_svfiprintf_r+0x32>
 8007b14:	690b      	ldr	r3, [r1, #16]
 8007b16:	b963      	cbnz	r3, 8007b32 <_svfiprintf_r+0x32>
 8007b18:	2140      	movs	r1, #64	; 0x40
 8007b1a:	f7ff ff3b 	bl	8007994 <_malloc_r>
 8007b1e:	6028      	str	r0, [r5, #0]
 8007b20:	6128      	str	r0, [r5, #16]
 8007b22:	b920      	cbnz	r0, 8007b2e <_svfiprintf_r+0x2e>
 8007b24:	230c      	movs	r3, #12
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2c:	e0d1      	b.n	8007cd2 <_svfiprintf_r+0x1d2>
 8007b2e:	2340      	movs	r3, #64	; 0x40
 8007b30:	616b      	str	r3, [r5, #20]
 8007b32:	2300      	movs	r3, #0
 8007b34:	9309      	str	r3, [sp, #36]	; 0x24
 8007b36:	2320      	movs	r3, #32
 8007b38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b40:	2330      	movs	r3, #48	; 0x30
 8007b42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007cec <_svfiprintf_r+0x1ec>
 8007b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b4a:	f04f 0901 	mov.w	r9, #1
 8007b4e:	4623      	mov	r3, r4
 8007b50:	469a      	mov	sl, r3
 8007b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b56:	b10a      	cbz	r2, 8007b5c <_svfiprintf_r+0x5c>
 8007b58:	2a25      	cmp	r2, #37	; 0x25
 8007b5a:	d1f9      	bne.n	8007b50 <_svfiprintf_r+0x50>
 8007b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b60:	d00b      	beq.n	8007b7a <_svfiprintf_r+0x7a>
 8007b62:	465b      	mov	r3, fp
 8007b64:	4622      	mov	r2, r4
 8007b66:	4629      	mov	r1, r5
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7ff ff6d 	bl	8007a48 <__ssputs_r>
 8007b6e:	3001      	adds	r0, #1
 8007b70:	f000 80aa 	beq.w	8007cc8 <_svfiprintf_r+0x1c8>
 8007b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b76:	445a      	add	r2, fp
 8007b78:	9209      	str	r2, [sp, #36]	; 0x24
 8007b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 80a2 	beq.w	8007cc8 <_svfiprintf_r+0x1c8>
 8007b84:	2300      	movs	r3, #0
 8007b86:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b8e:	f10a 0a01 	add.w	sl, sl, #1
 8007b92:	9304      	str	r3, [sp, #16]
 8007b94:	9307      	str	r3, [sp, #28]
 8007b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b9c:	4654      	mov	r4, sl
 8007b9e:	2205      	movs	r2, #5
 8007ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba4:	4851      	ldr	r0, [pc, #324]	; (8007cec <_svfiprintf_r+0x1ec>)
 8007ba6:	f7f8 fb1b 	bl	80001e0 <memchr>
 8007baa:	9a04      	ldr	r2, [sp, #16]
 8007bac:	b9d8      	cbnz	r0, 8007be6 <_svfiprintf_r+0xe6>
 8007bae:	06d0      	lsls	r0, r2, #27
 8007bb0:	bf44      	itt	mi
 8007bb2:	2320      	movmi	r3, #32
 8007bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bb8:	0711      	lsls	r1, r2, #28
 8007bba:	bf44      	itt	mi
 8007bbc:	232b      	movmi	r3, #43	; 0x2b
 8007bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc8:	d015      	beq.n	8007bf6 <_svfiprintf_r+0xf6>
 8007bca:	9a07      	ldr	r2, [sp, #28]
 8007bcc:	4654      	mov	r4, sl
 8007bce:	2000      	movs	r0, #0
 8007bd0:	f04f 0c0a 	mov.w	ip, #10
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bda:	3b30      	subs	r3, #48	; 0x30
 8007bdc:	2b09      	cmp	r3, #9
 8007bde:	d94e      	bls.n	8007c7e <_svfiprintf_r+0x17e>
 8007be0:	b1b0      	cbz	r0, 8007c10 <_svfiprintf_r+0x110>
 8007be2:	9207      	str	r2, [sp, #28]
 8007be4:	e014      	b.n	8007c10 <_svfiprintf_r+0x110>
 8007be6:	eba0 0308 	sub.w	r3, r0, r8
 8007bea:	fa09 f303 	lsl.w	r3, r9, r3
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	46a2      	mov	sl, r4
 8007bf4:	e7d2      	b.n	8007b9c <_svfiprintf_r+0x9c>
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	1d19      	adds	r1, r3, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	9103      	str	r1, [sp, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	bfbb      	ittet	lt
 8007c02:	425b      	neglt	r3, r3
 8007c04:	f042 0202 	orrlt.w	r2, r2, #2
 8007c08:	9307      	strge	r3, [sp, #28]
 8007c0a:	9307      	strlt	r3, [sp, #28]
 8007c0c:	bfb8      	it	lt
 8007c0e:	9204      	strlt	r2, [sp, #16]
 8007c10:	7823      	ldrb	r3, [r4, #0]
 8007c12:	2b2e      	cmp	r3, #46	; 0x2e
 8007c14:	d10c      	bne.n	8007c30 <_svfiprintf_r+0x130>
 8007c16:	7863      	ldrb	r3, [r4, #1]
 8007c18:	2b2a      	cmp	r3, #42	; 0x2a
 8007c1a:	d135      	bne.n	8007c88 <_svfiprintf_r+0x188>
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	1d1a      	adds	r2, r3, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	9203      	str	r2, [sp, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bfb8      	it	lt
 8007c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c2c:	3402      	adds	r4, #2
 8007c2e:	9305      	str	r3, [sp, #20]
 8007c30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cfc <_svfiprintf_r+0x1fc>
 8007c34:	7821      	ldrb	r1, [r4, #0]
 8007c36:	2203      	movs	r2, #3
 8007c38:	4650      	mov	r0, sl
 8007c3a:	f7f8 fad1 	bl	80001e0 <memchr>
 8007c3e:	b140      	cbz	r0, 8007c52 <_svfiprintf_r+0x152>
 8007c40:	2340      	movs	r3, #64	; 0x40
 8007c42:	eba0 000a 	sub.w	r0, r0, sl
 8007c46:	fa03 f000 	lsl.w	r0, r3, r0
 8007c4a:	9b04      	ldr	r3, [sp, #16]
 8007c4c:	4303      	orrs	r3, r0
 8007c4e:	3401      	adds	r4, #1
 8007c50:	9304      	str	r3, [sp, #16]
 8007c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c56:	4826      	ldr	r0, [pc, #152]	; (8007cf0 <_svfiprintf_r+0x1f0>)
 8007c58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c5c:	2206      	movs	r2, #6
 8007c5e:	f7f8 fabf 	bl	80001e0 <memchr>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d038      	beq.n	8007cd8 <_svfiprintf_r+0x1d8>
 8007c66:	4b23      	ldr	r3, [pc, #140]	; (8007cf4 <_svfiprintf_r+0x1f4>)
 8007c68:	bb1b      	cbnz	r3, 8007cb2 <_svfiprintf_r+0x1b2>
 8007c6a:	9b03      	ldr	r3, [sp, #12]
 8007c6c:	3307      	adds	r3, #7
 8007c6e:	f023 0307 	bic.w	r3, r3, #7
 8007c72:	3308      	adds	r3, #8
 8007c74:	9303      	str	r3, [sp, #12]
 8007c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c78:	4433      	add	r3, r6
 8007c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7c:	e767      	b.n	8007b4e <_svfiprintf_r+0x4e>
 8007c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c82:	460c      	mov	r4, r1
 8007c84:	2001      	movs	r0, #1
 8007c86:	e7a5      	b.n	8007bd4 <_svfiprintf_r+0xd4>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	3401      	adds	r4, #1
 8007c8c:	9305      	str	r3, [sp, #20]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	f04f 0c0a 	mov.w	ip, #10
 8007c94:	4620      	mov	r0, r4
 8007c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c9a:	3a30      	subs	r2, #48	; 0x30
 8007c9c:	2a09      	cmp	r2, #9
 8007c9e:	d903      	bls.n	8007ca8 <_svfiprintf_r+0x1a8>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0c5      	beq.n	8007c30 <_svfiprintf_r+0x130>
 8007ca4:	9105      	str	r1, [sp, #20]
 8007ca6:	e7c3      	b.n	8007c30 <_svfiprintf_r+0x130>
 8007ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cac:	4604      	mov	r4, r0
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e7f0      	b.n	8007c94 <_svfiprintf_r+0x194>
 8007cb2:	ab03      	add	r3, sp, #12
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	462a      	mov	r2, r5
 8007cb8:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <_svfiprintf_r+0x1f8>)
 8007cba:	a904      	add	r1, sp, #16
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	f7fc fa85 	bl	80041cc <_printf_float>
 8007cc2:	1c42      	adds	r2, r0, #1
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	d1d6      	bne.n	8007c76 <_svfiprintf_r+0x176>
 8007cc8:	89ab      	ldrh	r3, [r5, #12]
 8007cca:	065b      	lsls	r3, r3, #25
 8007ccc:	f53f af2c 	bmi.w	8007b28 <_svfiprintf_r+0x28>
 8007cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cd2:	b01d      	add	sp, #116	; 0x74
 8007cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd8:	ab03      	add	r3, sp, #12
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	462a      	mov	r2, r5
 8007cde:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <_svfiprintf_r+0x1f8>)
 8007ce0:	a904      	add	r1, sp, #16
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	f7fc fd16 	bl	8004714 <_printf_i>
 8007ce8:	e7eb      	b.n	8007cc2 <_svfiprintf_r+0x1c2>
 8007cea:	bf00      	nop
 8007cec:	08009cf4 	.word	0x08009cf4
 8007cf0:	08009cfe 	.word	0x08009cfe
 8007cf4:	080041cd 	.word	0x080041cd
 8007cf8:	08007a49 	.word	0x08007a49
 8007cfc:	08009cfa 	.word	0x08009cfa

08007d00 <nan>:
 8007d00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007d08 <nan+0x8>
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	00000000 	.word	0x00000000
 8007d0c:	7ff80000 	.word	0x7ff80000

08007d10 <_sbrk_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4d06      	ldr	r5, [pc, #24]	; (8007d2c <_sbrk_r+0x1c>)
 8007d14:	2300      	movs	r3, #0
 8007d16:	4604      	mov	r4, r0
 8007d18:	4608      	mov	r0, r1
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	f7fa fe62 	bl	80029e4 <_sbrk>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d102      	bne.n	8007d2a <_sbrk_r+0x1a>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	b103      	cbz	r3, 8007d2a <_sbrk_r+0x1a>
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	200002bc 	.word	0x200002bc

08007d30 <strncmp>:
 8007d30:	b510      	push	{r4, lr}
 8007d32:	b16a      	cbz	r2, 8007d50 <strncmp+0x20>
 8007d34:	3901      	subs	r1, #1
 8007d36:	1884      	adds	r4, r0, r2
 8007d38:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007d3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d103      	bne.n	8007d4c <strncmp+0x1c>
 8007d44:	42a0      	cmp	r0, r4
 8007d46:	d001      	beq.n	8007d4c <strncmp+0x1c>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1f5      	bne.n	8007d38 <strncmp+0x8>
 8007d4c:	1a98      	subs	r0, r3, r2
 8007d4e:	bd10      	pop	{r4, pc}
 8007d50:	4610      	mov	r0, r2
 8007d52:	e7fc      	b.n	8007d4e <strncmp+0x1e>

08007d54 <__ascii_wctomb>:
 8007d54:	b149      	cbz	r1, 8007d6a <__ascii_wctomb+0x16>
 8007d56:	2aff      	cmp	r2, #255	; 0xff
 8007d58:	bf85      	ittet	hi
 8007d5a:	238a      	movhi	r3, #138	; 0x8a
 8007d5c:	6003      	strhi	r3, [r0, #0]
 8007d5e:	700a      	strbls	r2, [r1, #0]
 8007d60:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d64:	bf98      	it	ls
 8007d66:	2001      	movls	r0, #1
 8007d68:	4770      	bx	lr
 8007d6a:	4608      	mov	r0, r1
 8007d6c:	4770      	bx	lr
	...

08007d70 <__assert_func>:
 8007d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d72:	4614      	mov	r4, r2
 8007d74:	461a      	mov	r2, r3
 8007d76:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <__assert_func+0x2c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	68d8      	ldr	r0, [r3, #12]
 8007d7e:	b14c      	cbz	r4, 8007d94 <__assert_func+0x24>
 8007d80:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <__assert_func+0x30>)
 8007d82:	9100      	str	r1, [sp, #0]
 8007d84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d88:	4906      	ldr	r1, [pc, #24]	; (8007da4 <__assert_func+0x34>)
 8007d8a:	462b      	mov	r3, r5
 8007d8c:	f000 f80e 	bl	8007dac <fiprintf>
 8007d90:	f000 fa84 	bl	800829c <abort>
 8007d94:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <__assert_func+0x38>)
 8007d96:	461c      	mov	r4, r3
 8007d98:	e7f3      	b.n	8007d82 <__assert_func+0x12>
 8007d9a:	bf00      	nop
 8007d9c:	20000008 	.word	0x20000008
 8007da0:	08009d05 	.word	0x08009d05
 8007da4:	08009d12 	.word	0x08009d12
 8007da8:	08009d40 	.word	0x08009d40

08007dac <fiprintf>:
 8007dac:	b40e      	push	{r1, r2, r3}
 8007dae:	b503      	push	{r0, r1, lr}
 8007db0:	4601      	mov	r1, r0
 8007db2:	ab03      	add	r3, sp, #12
 8007db4:	4805      	ldr	r0, [pc, #20]	; (8007dcc <fiprintf+0x20>)
 8007db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	9301      	str	r3, [sp, #4]
 8007dbe:	f000 f87d 	bl	8007ebc <_vfiprintf_r>
 8007dc2:	b002      	add	sp, #8
 8007dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dc8:	b003      	add	sp, #12
 8007dca:	4770      	bx	lr
 8007dcc:	20000008 	.word	0x20000008

08007dd0 <memmove>:
 8007dd0:	4288      	cmp	r0, r1
 8007dd2:	b510      	push	{r4, lr}
 8007dd4:	eb01 0402 	add.w	r4, r1, r2
 8007dd8:	d902      	bls.n	8007de0 <memmove+0x10>
 8007dda:	4284      	cmp	r4, r0
 8007ddc:	4623      	mov	r3, r4
 8007dde:	d807      	bhi.n	8007df0 <memmove+0x20>
 8007de0:	1e43      	subs	r3, r0, #1
 8007de2:	42a1      	cmp	r1, r4
 8007de4:	d008      	beq.n	8007df8 <memmove+0x28>
 8007de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dee:	e7f8      	b.n	8007de2 <memmove+0x12>
 8007df0:	4402      	add	r2, r0
 8007df2:	4601      	mov	r1, r0
 8007df4:	428a      	cmp	r2, r1
 8007df6:	d100      	bne.n	8007dfa <memmove+0x2a>
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e02:	e7f7      	b.n	8007df4 <memmove+0x24>

08007e04 <__malloc_lock>:
 8007e04:	4801      	ldr	r0, [pc, #4]	; (8007e0c <__malloc_lock+0x8>)
 8007e06:	f000 bc09 	b.w	800861c <__retarget_lock_acquire_recursive>
 8007e0a:	bf00      	nop
 8007e0c:	200002c4 	.word	0x200002c4

08007e10 <__malloc_unlock>:
 8007e10:	4801      	ldr	r0, [pc, #4]	; (8007e18 <__malloc_unlock+0x8>)
 8007e12:	f000 bc04 	b.w	800861e <__retarget_lock_release_recursive>
 8007e16:	bf00      	nop
 8007e18:	200002c4 	.word	0x200002c4

08007e1c <_realloc_r>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	4607      	mov	r7, r0
 8007e20:	4614      	mov	r4, r2
 8007e22:	460e      	mov	r6, r1
 8007e24:	b921      	cbnz	r1, 8007e30 <_realloc_r+0x14>
 8007e26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	f7ff bdb2 	b.w	8007994 <_malloc_r>
 8007e30:	b922      	cbnz	r2, 8007e3c <_realloc_r+0x20>
 8007e32:	f7ff fd5f 	bl	80078f4 <_free_r>
 8007e36:	4625      	mov	r5, r4
 8007e38:	4628      	mov	r0, r5
 8007e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e3c:	f000 fc54 	bl	80086e8 <_malloc_usable_size_r>
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d20f      	bcs.n	8007e64 <_realloc_r+0x48>
 8007e44:	4621      	mov	r1, r4
 8007e46:	4638      	mov	r0, r7
 8007e48:	f7ff fda4 	bl	8007994 <_malloc_r>
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d0f2      	beq.n	8007e38 <_realloc_r+0x1c>
 8007e52:	4631      	mov	r1, r6
 8007e54:	4622      	mov	r2, r4
 8007e56:	f7ff f875 	bl	8006f44 <memcpy>
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f7ff fd49 	bl	80078f4 <_free_r>
 8007e62:	e7e9      	b.n	8007e38 <_realloc_r+0x1c>
 8007e64:	4635      	mov	r5, r6
 8007e66:	e7e7      	b.n	8007e38 <_realloc_r+0x1c>

08007e68 <__sfputc_r>:
 8007e68:	6893      	ldr	r3, [r2, #8]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	b410      	push	{r4}
 8007e70:	6093      	str	r3, [r2, #8]
 8007e72:	da08      	bge.n	8007e86 <__sfputc_r+0x1e>
 8007e74:	6994      	ldr	r4, [r2, #24]
 8007e76:	42a3      	cmp	r3, r4
 8007e78:	db01      	blt.n	8007e7e <__sfputc_r+0x16>
 8007e7a:	290a      	cmp	r1, #10
 8007e7c:	d103      	bne.n	8007e86 <__sfputc_r+0x1e>
 8007e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e82:	f000 b94b 	b.w	800811c <__swbuf_r>
 8007e86:	6813      	ldr	r3, [r2, #0]
 8007e88:	1c58      	adds	r0, r3, #1
 8007e8a:	6010      	str	r0, [r2, #0]
 8007e8c:	7019      	strb	r1, [r3, #0]
 8007e8e:	4608      	mov	r0, r1
 8007e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <__sfputs_r>:
 8007e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e98:	4606      	mov	r6, r0
 8007e9a:	460f      	mov	r7, r1
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	18d5      	adds	r5, r2, r3
 8007ea0:	42ac      	cmp	r4, r5
 8007ea2:	d101      	bne.n	8007ea8 <__sfputs_r+0x12>
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	e007      	b.n	8007eb8 <__sfputs_r+0x22>
 8007ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eac:	463a      	mov	r2, r7
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f7ff ffda 	bl	8007e68 <__sfputc_r>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d1f3      	bne.n	8007ea0 <__sfputs_r+0xa>
 8007eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ebc <_vfiprintf_r>:
 8007ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	b09d      	sub	sp, #116	; 0x74
 8007ec4:	4614      	mov	r4, r2
 8007ec6:	4698      	mov	r8, r3
 8007ec8:	4606      	mov	r6, r0
 8007eca:	b118      	cbz	r0, 8007ed4 <_vfiprintf_r+0x18>
 8007ecc:	6983      	ldr	r3, [r0, #24]
 8007ece:	b90b      	cbnz	r3, 8007ed4 <_vfiprintf_r+0x18>
 8007ed0:	f000 fb06 	bl	80084e0 <__sinit>
 8007ed4:	4b89      	ldr	r3, [pc, #548]	; (80080fc <_vfiprintf_r+0x240>)
 8007ed6:	429d      	cmp	r5, r3
 8007ed8:	d11b      	bne.n	8007f12 <_vfiprintf_r+0x56>
 8007eda:	6875      	ldr	r5, [r6, #4]
 8007edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ede:	07d9      	lsls	r1, r3, #31
 8007ee0:	d405      	bmi.n	8007eee <_vfiprintf_r+0x32>
 8007ee2:	89ab      	ldrh	r3, [r5, #12]
 8007ee4:	059a      	lsls	r2, r3, #22
 8007ee6:	d402      	bmi.n	8007eee <_vfiprintf_r+0x32>
 8007ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eea:	f000 fb97 	bl	800861c <__retarget_lock_acquire_recursive>
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	071b      	lsls	r3, r3, #28
 8007ef2:	d501      	bpl.n	8007ef8 <_vfiprintf_r+0x3c>
 8007ef4:	692b      	ldr	r3, [r5, #16]
 8007ef6:	b9eb      	cbnz	r3, 8007f34 <_vfiprintf_r+0x78>
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4630      	mov	r0, r6
 8007efc:	f000 f960 	bl	80081c0 <__swsetup_r>
 8007f00:	b1c0      	cbz	r0, 8007f34 <_vfiprintf_r+0x78>
 8007f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f04:	07dc      	lsls	r4, r3, #31
 8007f06:	d50e      	bpl.n	8007f26 <_vfiprintf_r+0x6a>
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	b01d      	add	sp, #116	; 0x74
 8007f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f12:	4b7b      	ldr	r3, [pc, #492]	; (8008100 <_vfiprintf_r+0x244>)
 8007f14:	429d      	cmp	r5, r3
 8007f16:	d101      	bne.n	8007f1c <_vfiprintf_r+0x60>
 8007f18:	68b5      	ldr	r5, [r6, #8]
 8007f1a:	e7df      	b.n	8007edc <_vfiprintf_r+0x20>
 8007f1c:	4b79      	ldr	r3, [pc, #484]	; (8008104 <_vfiprintf_r+0x248>)
 8007f1e:	429d      	cmp	r5, r3
 8007f20:	bf08      	it	eq
 8007f22:	68f5      	ldreq	r5, [r6, #12]
 8007f24:	e7da      	b.n	8007edc <_vfiprintf_r+0x20>
 8007f26:	89ab      	ldrh	r3, [r5, #12]
 8007f28:	0598      	lsls	r0, r3, #22
 8007f2a:	d4ed      	bmi.n	8007f08 <_vfiprintf_r+0x4c>
 8007f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f2e:	f000 fb76 	bl	800861e <__retarget_lock_release_recursive>
 8007f32:	e7e9      	b.n	8007f08 <_vfiprintf_r+0x4c>
 8007f34:	2300      	movs	r3, #0
 8007f36:	9309      	str	r3, [sp, #36]	; 0x24
 8007f38:	2320      	movs	r3, #32
 8007f3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f42:	2330      	movs	r3, #48	; 0x30
 8007f44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008108 <_vfiprintf_r+0x24c>
 8007f48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f4c:	f04f 0901 	mov.w	r9, #1
 8007f50:	4623      	mov	r3, r4
 8007f52:	469a      	mov	sl, r3
 8007f54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f58:	b10a      	cbz	r2, 8007f5e <_vfiprintf_r+0xa2>
 8007f5a:	2a25      	cmp	r2, #37	; 0x25
 8007f5c:	d1f9      	bne.n	8007f52 <_vfiprintf_r+0x96>
 8007f5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f62:	d00b      	beq.n	8007f7c <_vfiprintf_r+0xc0>
 8007f64:	465b      	mov	r3, fp
 8007f66:	4622      	mov	r2, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f7ff ff93 	bl	8007e96 <__sfputs_r>
 8007f70:	3001      	adds	r0, #1
 8007f72:	f000 80aa 	beq.w	80080ca <_vfiprintf_r+0x20e>
 8007f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f78:	445a      	add	r2, fp
 8007f7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 80a2 	beq.w	80080ca <_vfiprintf_r+0x20e>
 8007f86:	2300      	movs	r3, #0
 8007f88:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f90:	f10a 0a01 	add.w	sl, sl, #1
 8007f94:	9304      	str	r3, [sp, #16]
 8007f96:	9307      	str	r3, [sp, #28]
 8007f98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007f9e:	4654      	mov	r4, sl
 8007fa0:	2205      	movs	r2, #5
 8007fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa6:	4858      	ldr	r0, [pc, #352]	; (8008108 <_vfiprintf_r+0x24c>)
 8007fa8:	f7f8 f91a 	bl	80001e0 <memchr>
 8007fac:	9a04      	ldr	r2, [sp, #16]
 8007fae:	b9d8      	cbnz	r0, 8007fe8 <_vfiprintf_r+0x12c>
 8007fb0:	06d1      	lsls	r1, r2, #27
 8007fb2:	bf44      	itt	mi
 8007fb4:	2320      	movmi	r3, #32
 8007fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fba:	0713      	lsls	r3, r2, #28
 8007fbc:	bf44      	itt	mi
 8007fbe:	232b      	movmi	r3, #43	; 0x2b
 8007fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007fca:	d015      	beq.n	8007ff8 <_vfiprintf_r+0x13c>
 8007fcc:	9a07      	ldr	r2, [sp, #28]
 8007fce:	4654      	mov	r4, sl
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	f04f 0c0a 	mov.w	ip, #10
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fdc:	3b30      	subs	r3, #48	; 0x30
 8007fde:	2b09      	cmp	r3, #9
 8007fe0:	d94e      	bls.n	8008080 <_vfiprintf_r+0x1c4>
 8007fe2:	b1b0      	cbz	r0, 8008012 <_vfiprintf_r+0x156>
 8007fe4:	9207      	str	r2, [sp, #28]
 8007fe6:	e014      	b.n	8008012 <_vfiprintf_r+0x156>
 8007fe8:	eba0 0308 	sub.w	r3, r0, r8
 8007fec:	fa09 f303 	lsl.w	r3, r9, r3
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	9304      	str	r3, [sp, #16]
 8007ff4:	46a2      	mov	sl, r4
 8007ff6:	e7d2      	b.n	8007f9e <_vfiprintf_r+0xe2>
 8007ff8:	9b03      	ldr	r3, [sp, #12]
 8007ffa:	1d19      	adds	r1, r3, #4
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	9103      	str	r1, [sp, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	bfbb      	ittet	lt
 8008004:	425b      	neglt	r3, r3
 8008006:	f042 0202 	orrlt.w	r2, r2, #2
 800800a:	9307      	strge	r3, [sp, #28]
 800800c:	9307      	strlt	r3, [sp, #28]
 800800e:	bfb8      	it	lt
 8008010:	9204      	strlt	r2, [sp, #16]
 8008012:	7823      	ldrb	r3, [r4, #0]
 8008014:	2b2e      	cmp	r3, #46	; 0x2e
 8008016:	d10c      	bne.n	8008032 <_vfiprintf_r+0x176>
 8008018:	7863      	ldrb	r3, [r4, #1]
 800801a:	2b2a      	cmp	r3, #42	; 0x2a
 800801c:	d135      	bne.n	800808a <_vfiprintf_r+0x1ce>
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	1d1a      	adds	r2, r3, #4
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	9203      	str	r2, [sp, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	bfb8      	it	lt
 800802a:	f04f 33ff 	movlt.w	r3, #4294967295
 800802e:	3402      	adds	r4, #2
 8008030:	9305      	str	r3, [sp, #20]
 8008032:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008118 <_vfiprintf_r+0x25c>
 8008036:	7821      	ldrb	r1, [r4, #0]
 8008038:	2203      	movs	r2, #3
 800803a:	4650      	mov	r0, sl
 800803c:	f7f8 f8d0 	bl	80001e0 <memchr>
 8008040:	b140      	cbz	r0, 8008054 <_vfiprintf_r+0x198>
 8008042:	2340      	movs	r3, #64	; 0x40
 8008044:	eba0 000a 	sub.w	r0, r0, sl
 8008048:	fa03 f000 	lsl.w	r0, r3, r0
 800804c:	9b04      	ldr	r3, [sp, #16]
 800804e:	4303      	orrs	r3, r0
 8008050:	3401      	adds	r4, #1
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008058:	482c      	ldr	r0, [pc, #176]	; (800810c <_vfiprintf_r+0x250>)
 800805a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800805e:	2206      	movs	r2, #6
 8008060:	f7f8 f8be 	bl	80001e0 <memchr>
 8008064:	2800      	cmp	r0, #0
 8008066:	d03f      	beq.n	80080e8 <_vfiprintf_r+0x22c>
 8008068:	4b29      	ldr	r3, [pc, #164]	; (8008110 <_vfiprintf_r+0x254>)
 800806a:	bb1b      	cbnz	r3, 80080b4 <_vfiprintf_r+0x1f8>
 800806c:	9b03      	ldr	r3, [sp, #12]
 800806e:	3307      	adds	r3, #7
 8008070:	f023 0307 	bic.w	r3, r3, #7
 8008074:	3308      	adds	r3, #8
 8008076:	9303      	str	r3, [sp, #12]
 8008078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800807a:	443b      	add	r3, r7
 800807c:	9309      	str	r3, [sp, #36]	; 0x24
 800807e:	e767      	b.n	8007f50 <_vfiprintf_r+0x94>
 8008080:	fb0c 3202 	mla	r2, ip, r2, r3
 8008084:	460c      	mov	r4, r1
 8008086:	2001      	movs	r0, #1
 8008088:	e7a5      	b.n	8007fd6 <_vfiprintf_r+0x11a>
 800808a:	2300      	movs	r3, #0
 800808c:	3401      	adds	r4, #1
 800808e:	9305      	str	r3, [sp, #20]
 8008090:	4619      	mov	r1, r3
 8008092:	f04f 0c0a 	mov.w	ip, #10
 8008096:	4620      	mov	r0, r4
 8008098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800809c:	3a30      	subs	r2, #48	; 0x30
 800809e:	2a09      	cmp	r2, #9
 80080a0:	d903      	bls.n	80080aa <_vfiprintf_r+0x1ee>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0c5      	beq.n	8008032 <_vfiprintf_r+0x176>
 80080a6:	9105      	str	r1, [sp, #20]
 80080a8:	e7c3      	b.n	8008032 <_vfiprintf_r+0x176>
 80080aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80080ae:	4604      	mov	r4, r0
 80080b0:	2301      	movs	r3, #1
 80080b2:	e7f0      	b.n	8008096 <_vfiprintf_r+0x1da>
 80080b4:	ab03      	add	r3, sp, #12
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	462a      	mov	r2, r5
 80080ba:	4b16      	ldr	r3, [pc, #88]	; (8008114 <_vfiprintf_r+0x258>)
 80080bc:	a904      	add	r1, sp, #16
 80080be:	4630      	mov	r0, r6
 80080c0:	f7fc f884 	bl	80041cc <_printf_float>
 80080c4:	4607      	mov	r7, r0
 80080c6:	1c78      	adds	r0, r7, #1
 80080c8:	d1d6      	bne.n	8008078 <_vfiprintf_r+0x1bc>
 80080ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080cc:	07d9      	lsls	r1, r3, #31
 80080ce:	d405      	bmi.n	80080dc <_vfiprintf_r+0x220>
 80080d0:	89ab      	ldrh	r3, [r5, #12]
 80080d2:	059a      	lsls	r2, r3, #22
 80080d4:	d402      	bmi.n	80080dc <_vfiprintf_r+0x220>
 80080d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080d8:	f000 faa1 	bl	800861e <__retarget_lock_release_recursive>
 80080dc:	89ab      	ldrh	r3, [r5, #12]
 80080de:	065b      	lsls	r3, r3, #25
 80080e0:	f53f af12 	bmi.w	8007f08 <_vfiprintf_r+0x4c>
 80080e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080e6:	e711      	b.n	8007f0c <_vfiprintf_r+0x50>
 80080e8:	ab03      	add	r3, sp, #12
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	462a      	mov	r2, r5
 80080ee:	4b09      	ldr	r3, [pc, #36]	; (8008114 <_vfiprintf_r+0x258>)
 80080f0:	a904      	add	r1, sp, #16
 80080f2:	4630      	mov	r0, r6
 80080f4:	f7fc fb0e 	bl	8004714 <_printf_i>
 80080f8:	e7e4      	b.n	80080c4 <_vfiprintf_r+0x208>
 80080fa:	bf00      	nop
 80080fc:	08009d64 	.word	0x08009d64
 8008100:	08009d84 	.word	0x08009d84
 8008104:	08009d44 	.word	0x08009d44
 8008108:	08009cf4 	.word	0x08009cf4
 800810c:	08009cfe 	.word	0x08009cfe
 8008110:	080041cd 	.word	0x080041cd
 8008114:	08007e97 	.word	0x08007e97
 8008118:	08009cfa 	.word	0x08009cfa

0800811c <__swbuf_r>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	460e      	mov	r6, r1
 8008120:	4614      	mov	r4, r2
 8008122:	4605      	mov	r5, r0
 8008124:	b118      	cbz	r0, 800812e <__swbuf_r+0x12>
 8008126:	6983      	ldr	r3, [r0, #24]
 8008128:	b90b      	cbnz	r3, 800812e <__swbuf_r+0x12>
 800812a:	f000 f9d9 	bl	80084e0 <__sinit>
 800812e:	4b21      	ldr	r3, [pc, #132]	; (80081b4 <__swbuf_r+0x98>)
 8008130:	429c      	cmp	r4, r3
 8008132:	d12b      	bne.n	800818c <__swbuf_r+0x70>
 8008134:	686c      	ldr	r4, [r5, #4]
 8008136:	69a3      	ldr	r3, [r4, #24]
 8008138:	60a3      	str	r3, [r4, #8]
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	071a      	lsls	r2, r3, #28
 800813e:	d52f      	bpl.n	80081a0 <__swbuf_r+0x84>
 8008140:	6923      	ldr	r3, [r4, #16]
 8008142:	b36b      	cbz	r3, 80081a0 <__swbuf_r+0x84>
 8008144:	6923      	ldr	r3, [r4, #16]
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	6963      	ldr	r3, [r4, #20]
 800814c:	b2f6      	uxtb	r6, r6
 800814e:	4283      	cmp	r3, r0
 8008150:	4637      	mov	r7, r6
 8008152:	dc04      	bgt.n	800815e <__swbuf_r+0x42>
 8008154:	4621      	mov	r1, r4
 8008156:	4628      	mov	r0, r5
 8008158:	f000 f92e 	bl	80083b8 <_fflush_r>
 800815c:	bb30      	cbnz	r0, 80081ac <__swbuf_r+0x90>
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	3b01      	subs	r3, #1
 8008162:	60a3      	str	r3, [r4, #8]
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	6022      	str	r2, [r4, #0]
 800816a:	701e      	strb	r6, [r3, #0]
 800816c:	6963      	ldr	r3, [r4, #20]
 800816e:	3001      	adds	r0, #1
 8008170:	4283      	cmp	r3, r0
 8008172:	d004      	beq.n	800817e <__swbuf_r+0x62>
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	07db      	lsls	r3, r3, #31
 8008178:	d506      	bpl.n	8008188 <__swbuf_r+0x6c>
 800817a:	2e0a      	cmp	r6, #10
 800817c:	d104      	bne.n	8008188 <__swbuf_r+0x6c>
 800817e:	4621      	mov	r1, r4
 8008180:	4628      	mov	r0, r5
 8008182:	f000 f919 	bl	80083b8 <_fflush_r>
 8008186:	b988      	cbnz	r0, 80081ac <__swbuf_r+0x90>
 8008188:	4638      	mov	r0, r7
 800818a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800818c:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <__swbuf_r+0x9c>)
 800818e:	429c      	cmp	r4, r3
 8008190:	d101      	bne.n	8008196 <__swbuf_r+0x7a>
 8008192:	68ac      	ldr	r4, [r5, #8]
 8008194:	e7cf      	b.n	8008136 <__swbuf_r+0x1a>
 8008196:	4b09      	ldr	r3, [pc, #36]	; (80081bc <__swbuf_r+0xa0>)
 8008198:	429c      	cmp	r4, r3
 800819a:	bf08      	it	eq
 800819c:	68ec      	ldreq	r4, [r5, #12]
 800819e:	e7ca      	b.n	8008136 <__swbuf_r+0x1a>
 80081a0:	4621      	mov	r1, r4
 80081a2:	4628      	mov	r0, r5
 80081a4:	f000 f80c 	bl	80081c0 <__swsetup_r>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d0cb      	beq.n	8008144 <__swbuf_r+0x28>
 80081ac:	f04f 37ff 	mov.w	r7, #4294967295
 80081b0:	e7ea      	b.n	8008188 <__swbuf_r+0x6c>
 80081b2:	bf00      	nop
 80081b4:	08009d64 	.word	0x08009d64
 80081b8:	08009d84 	.word	0x08009d84
 80081bc:	08009d44 	.word	0x08009d44

080081c0 <__swsetup_r>:
 80081c0:	4b32      	ldr	r3, [pc, #200]	; (800828c <__swsetup_r+0xcc>)
 80081c2:	b570      	push	{r4, r5, r6, lr}
 80081c4:	681d      	ldr	r5, [r3, #0]
 80081c6:	4606      	mov	r6, r0
 80081c8:	460c      	mov	r4, r1
 80081ca:	b125      	cbz	r5, 80081d6 <__swsetup_r+0x16>
 80081cc:	69ab      	ldr	r3, [r5, #24]
 80081ce:	b913      	cbnz	r3, 80081d6 <__swsetup_r+0x16>
 80081d0:	4628      	mov	r0, r5
 80081d2:	f000 f985 	bl	80084e0 <__sinit>
 80081d6:	4b2e      	ldr	r3, [pc, #184]	; (8008290 <__swsetup_r+0xd0>)
 80081d8:	429c      	cmp	r4, r3
 80081da:	d10f      	bne.n	80081fc <__swsetup_r+0x3c>
 80081dc:	686c      	ldr	r4, [r5, #4]
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081e4:	0719      	lsls	r1, r3, #28
 80081e6:	d42c      	bmi.n	8008242 <__swsetup_r+0x82>
 80081e8:	06dd      	lsls	r5, r3, #27
 80081ea:	d411      	bmi.n	8008210 <__swsetup_r+0x50>
 80081ec:	2309      	movs	r3, #9
 80081ee:	6033      	str	r3, [r6, #0]
 80081f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081f4:	81a3      	strh	r3, [r4, #12]
 80081f6:	f04f 30ff 	mov.w	r0, #4294967295
 80081fa:	e03e      	b.n	800827a <__swsetup_r+0xba>
 80081fc:	4b25      	ldr	r3, [pc, #148]	; (8008294 <__swsetup_r+0xd4>)
 80081fe:	429c      	cmp	r4, r3
 8008200:	d101      	bne.n	8008206 <__swsetup_r+0x46>
 8008202:	68ac      	ldr	r4, [r5, #8]
 8008204:	e7eb      	b.n	80081de <__swsetup_r+0x1e>
 8008206:	4b24      	ldr	r3, [pc, #144]	; (8008298 <__swsetup_r+0xd8>)
 8008208:	429c      	cmp	r4, r3
 800820a:	bf08      	it	eq
 800820c:	68ec      	ldreq	r4, [r5, #12]
 800820e:	e7e6      	b.n	80081de <__swsetup_r+0x1e>
 8008210:	0758      	lsls	r0, r3, #29
 8008212:	d512      	bpl.n	800823a <__swsetup_r+0x7a>
 8008214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008216:	b141      	cbz	r1, 800822a <__swsetup_r+0x6a>
 8008218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800821c:	4299      	cmp	r1, r3
 800821e:	d002      	beq.n	8008226 <__swsetup_r+0x66>
 8008220:	4630      	mov	r0, r6
 8008222:	f7ff fb67 	bl	80078f4 <_free_r>
 8008226:	2300      	movs	r3, #0
 8008228:	6363      	str	r3, [r4, #52]	; 0x34
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008230:	81a3      	strh	r3, [r4, #12]
 8008232:	2300      	movs	r3, #0
 8008234:	6063      	str	r3, [r4, #4]
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f043 0308 	orr.w	r3, r3, #8
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	b94b      	cbnz	r3, 800825a <__swsetup_r+0x9a>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800824c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008250:	d003      	beq.n	800825a <__swsetup_r+0x9a>
 8008252:	4621      	mov	r1, r4
 8008254:	4630      	mov	r0, r6
 8008256:	f000 fa07 	bl	8008668 <__smakebuf_r>
 800825a:	89a0      	ldrh	r0, [r4, #12]
 800825c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008260:	f010 0301 	ands.w	r3, r0, #1
 8008264:	d00a      	beq.n	800827c <__swsetup_r+0xbc>
 8008266:	2300      	movs	r3, #0
 8008268:	60a3      	str	r3, [r4, #8]
 800826a:	6963      	ldr	r3, [r4, #20]
 800826c:	425b      	negs	r3, r3
 800826e:	61a3      	str	r3, [r4, #24]
 8008270:	6923      	ldr	r3, [r4, #16]
 8008272:	b943      	cbnz	r3, 8008286 <__swsetup_r+0xc6>
 8008274:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008278:	d1ba      	bne.n	80081f0 <__swsetup_r+0x30>
 800827a:	bd70      	pop	{r4, r5, r6, pc}
 800827c:	0781      	lsls	r1, r0, #30
 800827e:	bf58      	it	pl
 8008280:	6963      	ldrpl	r3, [r4, #20]
 8008282:	60a3      	str	r3, [r4, #8]
 8008284:	e7f4      	b.n	8008270 <__swsetup_r+0xb0>
 8008286:	2000      	movs	r0, #0
 8008288:	e7f7      	b.n	800827a <__swsetup_r+0xba>
 800828a:	bf00      	nop
 800828c:	20000008 	.word	0x20000008
 8008290:	08009d64 	.word	0x08009d64
 8008294:	08009d84 	.word	0x08009d84
 8008298:	08009d44 	.word	0x08009d44

0800829c <abort>:
 800829c:	b508      	push	{r3, lr}
 800829e:	2006      	movs	r0, #6
 80082a0:	f000 fa52 	bl	8008748 <raise>
 80082a4:	2001      	movs	r0, #1
 80082a6:	f7fa fb25 	bl	80028f4 <_exit>
	...

080082ac <__sflush_r>:
 80082ac:	898a      	ldrh	r2, [r1, #12]
 80082ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b2:	4605      	mov	r5, r0
 80082b4:	0710      	lsls	r0, r2, #28
 80082b6:	460c      	mov	r4, r1
 80082b8:	d458      	bmi.n	800836c <__sflush_r+0xc0>
 80082ba:	684b      	ldr	r3, [r1, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dc05      	bgt.n	80082cc <__sflush_r+0x20>
 80082c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dc02      	bgt.n	80082cc <__sflush_r+0x20>
 80082c6:	2000      	movs	r0, #0
 80082c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	d0f9      	beq.n	80082c6 <__sflush_r+0x1a>
 80082d2:	2300      	movs	r3, #0
 80082d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082d8:	682f      	ldr	r7, [r5, #0]
 80082da:	602b      	str	r3, [r5, #0]
 80082dc:	d032      	beq.n	8008344 <__sflush_r+0x98>
 80082de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	075a      	lsls	r2, r3, #29
 80082e4:	d505      	bpl.n	80082f2 <__sflush_r+0x46>
 80082e6:	6863      	ldr	r3, [r4, #4]
 80082e8:	1ac0      	subs	r0, r0, r3
 80082ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082ec:	b10b      	cbz	r3, 80082f2 <__sflush_r+0x46>
 80082ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f0:	1ac0      	subs	r0, r0, r3
 80082f2:	2300      	movs	r3, #0
 80082f4:	4602      	mov	r2, r0
 80082f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082f8:	6a21      	ldr	r1, [r4, #32]
 80082fa:	4628      	mov	r0, r5
 80082fc:	47b0      	blx	r6
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	d106      	bne.n	8008312 <__sflush_r+0x66>
 8008304:	6829      	ldr	r1, [r5, #0]
 8008306:	291d      	cmp	r1, #29
 8008308:	d82c      	bhi.n	8008364 <__sflush_r+0xb8>
 800830a:	4a2a      	ldr	r2, [pc, #168]	; (80083b4 <__sflush_r+0x108>)
 800830c:	40ca      	lsrs	r2, r1
 800830e:	07d6      	lsls	r6, r2, #31
 8008310:	d528      	bpl.n	8008364 <__sflush_r+0xb8>
 8008312:	2200      	movs	r2, #0
 8008314:	6062      	str	r2, [r4, #4]
 8008316:	04d9      	lsls	r1, r3, #19
 8008318:	6922      	ldr	r2, [r4, #16]
 800831a:	6022      	str	r2, [r4, #0]
 800831c:	d504      	bpl.n	8008328 <__sflush_r+0x7c>
 800831e:	1c42      	adds	r2, r0, #1
 8008320:	d101      	bne.n	8008326 <__sflush_r+0x7a>
 8008322:	682b      	ldr	r3, [r5, #0]
 8008324:	b903      	cbnz	r3, 8008328 <__sflush_r+0x7c>
 8008326:	6560      	str	r0, [r4, #84]	; 0x54
 8008328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800832a:	602f      	str	r7, [r5, #0]
 800832c:	2900      	cmp	r1, #0
 800832e:	d0ca      	beq.n	80082c6 <__sflush_r+0x1a>
 8008330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008334:	4299      	cmp	r1, r3
 8008336:	d002      	beq.n	800833e <__sflush_r+0x92>
 8008338:	4628      	mov	r0, r5
 800833a:	f7ff fadb 	bl	80078f4 <_free_r>
 800833e:	2000      	movs	r0, #0
 8008340:	6360      	str	r0, [r4, #52]	; 0x34
 8008342:	e7c1      	b.n	80082c8 <__sflush_r+0x1c>
 8008344:	6a21      	ldr	r1, [r4, #32]
 8008346:	2301      	movs	r3, #1
 8008348:	4628      	mov	r0, r5
 800834a:	47b0      	blx	r6
 800834c:	1c41      	adds	r1, r0, #1
 800834e:	d1c7      	bne.n	80082e0 <__sflush_r+0x34>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0c4      	beq.n	80082e0 <__sflush_r+0x34>
 8008356:	2b1d      	cmp	r3, #29
 8008358:	d001      	beq.n	800835e <__sflush_r+0xb2>
 800835a:	2b16      	cmp	r3, #22
 800835c:	d101      	bne.n	8008362 <__sflush_r+0xb6>
 800835e:	602f      	str	r7, [r5, #0]
 8008360:	e7b1      	b.n	80082c6 <__sflush_r+0x1a>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	e7ad      	b.n	80082c8 <__sflush_r+0x1c>
 800836c:	690f      	ldr	r7, [r1, #16]
 800836e:	2f00      	cmp	r7, #0
 8008370:	d0a9      	beq.n	80082c6 <__sflush_r+0x1a>
 8008372:	0793      	lsls	r3, r2, #30
 8008374:	680e      	ldr	r6, [r1, #0]
 8008376:	bf08      	it	eq
 8008378:	694b      	ldreq	r3, [r1, #20]
 800837a:	600f      	str	r7, [r1, #0]
 800837c:	bf18      	it	ne
 800837e:	2300      	movne	r3, #0
 8008380:	eba6 0807 	sub.w	r8, r6, r7
 8008384:	608b      	str	r3, [r1, #8]
 8008386:	f1b8 0f00 	cmp.w	r8, #0
 800838a:	dd9c      	ble.n	80082c6 <__sflush_r+0x1a>
 800838c:	6a21      	ldr	r1, [r4, #32]
 800838e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008390:	4643      	mov	r3, r8
 8008392:	463a      	mov	r2, r7
 8008394:	4628      	mov	r0, r5
 8008396:	47b0      	blx	r6
 8008398:	2800      	cmp	r0, #0
 800839a:	dc06      	bgt.n	80083aa <__sflush_r+0xfe>
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a2:	81a3      	strh	r3, [r4, #12]
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295
 80083a8:	e78e      	b.n	80082c8 <__sflush_r+0x1c>
 80083aa:	4407      	add	r7, r0
 80083ac:	eba8 0800 	sub.w	r8, r8, r0
 80083b0:	e7e9      	b.n	8008386 <__sflush_r+0xda>
 80083b2:	bf00      	nop
 80083b4:	20400001 	.word	0x20400001

080083b8 <_fflush_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	690b      	ldr	r3, [r1, #16]
 80083bc:	4605      	mov	r5, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	b913      	cbnz	r3, 80083c8 <_fflush_r+0x10>
 80083c2:	2500      	movs	r5, #0
 80083c4:	4628      	mov	r0, r5
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	b118      	cbz	r0, 80083d2 <_fflush_r+0x1a>
 80083ca:	6983      	ldr	r3, [r0, #24]
 80083cc:	b90b      	cbnz	r3, 80083d2 <_fflush_r+0x1a>
 80083ce:	f000 f887 	bl	80084e0 <__sinit>
 80083d2:	4b14      	ldr	r3, [pc, #80]	; (8008424 <_fflush_r+0x6c>)
 80083d4:	429c      	cmp	r4, r3
 80083d6:	d11b      	bne.n	8008410 <_fflush_r+0x58>
 80083d8:	686c      	ldr	r4, [r5, #4]
 80083da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0ef      	beq.n	80083c2 <_fflush_r+0xa>
 80083e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083e4:	07d0      	lsls	r0, r2, #31
 80083e6:	d404      	bmi.n	80083f2 <_fflush_r+0x3a>
 80083e8:	0599      	lsls	r1, r3, #22
 80083ea:	d402      	bmi.n	80083f2 <_fflush_r+0x3a>
 80083ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ee:	f000 f915 	bl	800861c <__retarget_lock_acquire_recursive>
 80083f2:	4628      	mov	r0, r5
 80083f4:	4621      	mov	r1, r4
 80083f6:	f7ff ff59 	bl	80082ac <__sflush_r>
 80083fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083fc:	07da      	lsls	r2, r3, #31
 80083fe:	4605      	mov	r5, r0
 8008400:	d4e0      	bmi.n	80083c4 <_fflush_r+0xc>
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	059b      	lsls	r3, r3, #22
 8008406:	d4dd      	bmi.n	80083c4 <_fflush_r+0xc>
 8008408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800840a:	f000 f908 	bl	800861e <__retarget_lock_release_recursive>
 800840e:	e7d9      	b.n	80083c4 <_fflush_r+0xc>
 8008410:	4b05      	ldr	r3, [pc, #20]	; (8008428 <_fflush_r+0x70>)
 8008412:	429c      	cmp	r4, r3
 8008414:	d101      	bne.n	800841a <_fflush_r+0x62>
 8008416:	68ac      	ldr	r4, [r5, #8]
 8008418:	e7df      	b.n	80083da <_fflush_r+0x22>
 800841a:	4b04      	ldr	r3, [pc, #16]	; (800842c <_fflush_r+0x74>)
 800841c:	429c      	cmp	r4, r3
 800841e:	bf08      	it	eq
 8008420:	68ec      	ldreq	r4, [r5, #12]
 8008422:	e7da      	b.n	80083da <_fflush_r+0x22>
 8008424:	08009d64 	.word	0x08009d64
 8008428:	08009d84 	.word	0x08009d84
 800842c:	08009d44 	.word	0x08009d44

08008430 <std>:
 8008430:	2300      	movs	r3, #0
 8008432:	b510      	push	{r4, lr}
 8008434:	4604      	mov	r4, r0
 8008436:	e9c0 3300 	strd	r3, r3, [r0]
 800843a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800843e:	6083      	str	r3, [r0, #8]
 8008440:	8181      	strh	r1, [r0, #12]
 8008442:	6643      	str	r3, [r0, #100]	; 0x64
 8008444:	81c2      	strh	r2, [r0, #14]
 8008446:	6183      	str	r3, [r0, #24]
 8008448:	4619      	mov	r1, r3
 800844a:	2208      	movs	r2, #8
 800844c:	305c      	adds	r0, #92	; 0x5c
 800844e:	f7fb fe15 	bl	800407c <memset>
 8008452:	4b05      	ldr	r3, [pc, #20]	; (8008468 <std+0x38>)
 8008454:	6263      	str	r3, [r4, #36]	; 0x24
 8008456:	4b05      	ldr	r3, [pc, #20]	; (800846c <std+0x3c>)
 8008458:	62a3      	str	r3, [r4, #40]	; 0x28
 800845a:	4b05      	ldr	r3, [pc, #20]	; (8008470 <std+0x40>)
 800845c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800845e:	4b05      	ldr	r3, [pc, #20]	; (8008474 <std+0x44>)
 8008460:	6224      	str	r4, [r4, #32]
 8008462:	6323      	str	r3, [r4, #48]	; 0x30
 8008464:	bd10      	pop	{r4, pc}
 8008466:	bf00      	nop
 8008468:	08008781 	.word	0x08008781
 800846c:	080087a3 	.word	0x080087a3
 8008470:	080087db 	.word	0x080087db
 8008474:	080087ff 	.word	0x080087ff

08008478 <_cleanup_r>:
 8008478:	4901      	ldr	r1, [pc, #4]	; (8008480 <_cleanup_r+0x8>)
 800847a:	f000 b8af 	b.w	80085dc <_fwalk_reent>
 800847e:	bf00      	nop
 8008480:	080083b9 	.word	0x080083b9

08008484 <__sfmoreglue>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	1e4a      	subs	r2, r1, #1
 8008488:	2568      	movs	r5, #104	; 0x68
 800848a:	4355      	muls	r5, r2
 800848c:	460e      	mov	r6, r1
 800848e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008492:	f7ff fa7f 	bl	8007994 <_malloc_r>
 8008496:	4604      	mov	r4, r0
 8008498:	b140      	cbz	r0, 80084ac <__sfmoreglue+0x28>
 800849a:	2100      	movs	r1, #0
 800849c:	e9c0 1600 	strd	r1, r6, [r0]
 80084a0:	300c      	adds	r0, #12
 80084a2:	60a0      	str	r0, [r4, #8]
 80084a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084a8:	f7fb fde8 	bl	800407c <memset>
 80084ac:	4620      	mov	r0, r4
 80084ae:	bd70      	pop	{r4, r5, r6, pc}

080084b0 <__sfp_lock_acquire>:
 80084b0:	4801      	ldr	r0, [pc, #4]	; (80084b8 <__sfp_lock_acquire+0x8>)
 80084b2:	f000 b8b3 	b.w	800861c <__retarget_lock_acquire_recursive>
 80084b6:	bf00      	nop
 80084b8:	200002c8 	.word	0x200002c8

080084bc <__sfp_lock_release>:
 80084bc:	4801      	ldr	r0, [pc, #4]	; (80084c4 <__sfp_lock_release+0x8>)
 80084be:	f000 b8ae 	b.w	800861e <__retarget_lock_release_recursive>
 80084c2:	bf00      	nop
 80084c4:	200002c8 	.word	0x200002c8

080084c8 <__sinit_lock_acquire>:
 80084c8:	4801      	ldr	r0, [pc, #4]	; (80084d0 <__sinit_lock_acquire+0x8>)
 80084ca:	f000 b8a7 	b.w	800861c <__retarget_lock_acquire_recursive>
 80084ce:	bf00      	nop
 80084d0:	200002c3 	.word	0x200002c3

080084d4 <__sinit_lock_release>:
 80084d4:	4801      	ldr	r0, [pc, #4]	; (80084dc <__sinit_lock_release+0x8>)
 80084d6:	f000 b8a2 	b.w	800861e <__retarget_lock_release_recursive>
 80084da:	bf00      	nop
 80084dc:	200002c3 	.word	0x200002c3

080084e0 <__sinit>:
 80084e0:	b510      	push	{r4, lr}
 80084e2:	4604      	mov	r4, r0
 80084e4:	f7ff fff0 	bl	80084c8 <__sinit_lock_acquire>
 80084e8:	69a3      	ldr	r3, [r4, #24]
 80084ea:	b11b      	cbz	r3, 80084f4 <__sinit+0x14>
 80084ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f0:	f7ff bff0 	b.w	80084d4 <__sinit_lock_release>
 80084f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084f8:	6523      	str	r3, [r4, #80]	; 0x50
 80084fa:	4b13      	ldr	r3, [pc, #76]	; (8008548 <__sinit+0x68>)
 80084fc:	4a13      	ldr	r2, [pc, #76]	; (800854c <__sinit+0x6c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	62a2      	str	r2, [r4, #40]	; 0x28
 8008502:	42a3      	cmp	r3, r4
 8008504:	bf04      	itt	eq
 8008506:	2301      	moveq	r3, #1
 8008508:	61a3      	streq	r3, [r4, #24]
 800850a:	4620      	mov	r0, r4
 800850c:	f000 f820 	bl	8008550 <__sfp>
 8008510:	6060      	str	r0, [r4, #4]
 8008512:	4620      	mov	r0, r4
 8008514:	f000 f81c 	bl	8008550 <__sfp>
 8008518:	60a0      	str	r0, [r4, #8]
 800851a:	4620      	mov	r0, r4
 800851c:	f000 f818 	bl	8008550 <__sfp>
 8008520:	2200      	movs	r2, #0
 8008522:	60e0      	str	r0, [r4, #12]
 8008524:	2104      	movs	r1, #4
 8008526:	6860      	ldr	r0, [r4, #4]
 8008528:	f7ff ff82 	bl	8008430 <std>
 800852c:	68a0      	ldr	r0, [r4, #8]
 800852e:	2201      	movs	r2, #1
 8008530:	2109      	movs	r1, #9
 8008532:	f7ff ff7d 	bl	8008430 <std>
 8008536:	68e0      	ldr	r0, [r4, #12]
 8008538:	2202      	movs	r2, #2
 800853a:	2112      	movs	r1, #18
 800853c:	f7ff ff78 	bl	8008430 <std>
 8008540:	2301      	movs	r3, #1
 8008542:	61a3      	str	r3, [r4, #24]
 8008544:	e7d2      	b.n	80084ec <__sinit+0xc>
 8008546:	bf00      	nop
 8008548:	080098f0 	.word	0x080098f0
 800854c:	08008479 	.word	0x08008479

08008550 <__sfp>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	4607      	mov	r7, r0
 8008554:	f7ff ffac 	bl	80084b0 <__sfp_lock_acquire>
 8008558:	4b1e      	ldr	r3, [pc, #120]	; (80085d4 <__sfp+0x84>)
 800855a:	681e      	ldr	r6, [r3, #0]
 800855c:	69b3      	ldr	r3, [r6, #24]
 800855e:	b913      	cbnz	r3, 8008566 <__sfp+0x16>
 8008560:	4630      	mov	r0, r6
 8008562:	f7ff ffbd 	bl	80084e0 <__sinit>
 8008566:	3648      	adds	r6, #72	; 0x48
 8008568:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800856c:	3b01      	subs	r3, #1
 800856e:	d503      	bpl.n	8008578 <__sfp+0x28>
 8008570:	6833      	ldr	r3, [r6, #0]
 8008572:	b30b      	cbz	r3, 80085b8 <__sfp+0x68>
 8008574:	6836      	ldr	r6, [r6, #0]
 8008576:	e7f7      	b.n	8008568 <__sfp+0x18>
 8008578:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800857c:	b9d5      	cbnz	r5, 80085b4 <__sfp+0x64>
 800857e:	4b16      	ldr	r3, [pc, #88]	; (80085d8 <__sfp+0x88>)
 8008580:	60e3      	str	r3, [r4, #12]
 8008582:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008586:	6665      	str	r5, [r4, #100]	; 0x64
 8008588:	f000 f847 	bl	800861a <__retarget_lock_init_recursive>
 800858c:	f7ff ff96 	bl	80084bc <__sfp_lock_release>
 8008590:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008594:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008598:	6025      	str	r5, [r4, #0]
 800859a:	61a5      	str	r5, [r4, #24]
 800859c:	2208      	movs	r2, #8
 800859e:	4629      	mov	r1, r5
 80085a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085a4:	f7fb fd6a 	bl	800407c <memset>
 80085a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085b0:	4620      	mov	r0, r4
 80085b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b4:	3468      	adds	r4, #104	; 0x68
 80085b6:	e7d9      	b.n	800856c <__sfp+0x1c>
 80085b8:	2104      	movs	r1, #4
 80085ba:	4638      	mov	r0, r7
 80085bc:	f7ff ff62 	bl	8008484 <__sfmoreglue>
 80085c0:	4604      	mov	r4, r0
 80085c2:	6030      	str	r0, [r6, #0]
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d1d5      	bne.n	8008574 <__sfp+0x24>
 80085c8:	f7ff ff78 	bl	80084bc <__sfp_lock_release>
 80085cc:	230c      	movs	r3, #12
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	e7ee      	b.n	80085b0 <__sfp+0x60>
 80085d2:	bf00      	nop
 80085d4:	080098f0 	.word	0x080098f0
 80085d8:	ffff0001 	.word	0xffff0001

080085dc <_fwalk_reent>:
 80085dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e0:	4606      	mov	r6, r0
 80085e2:	4688      	mov	r8, r1
 80085e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085e8:	2700      	movs	r7, #0
 80085ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085ee:	f1b9 0901 	subs.w	r9, r9, #1
 80085f2:	d505      	bpl.n	8008600 <_fwalk_reent+0x24>
 80085f4:	6824      	ldr	r4, [r4, #0]
 80085f6:	2c00      	cmp	r4, #0
 80085f8:	d1f7      	bne.n	80085ea <_fwalk_reent+0xe>
 80085fa:	4638      	mov	r0, r7
 80085fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008600:	89ab      	ldrh	r3, [r5, #12]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d907      	bls.n	8008616 <_fwalk_reent+0x3a>
 8008606:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800860a:	3301      	adds	r3, #1
 800860c:	d003      	beq.n	8008616 <_fwalk_reent+0x3a>
 800860e:	4629      	mov	r1, r5
 8008610:	4630      	mov	r0, r6
 8008612:	47c0      	blx	r8
 8008614:	4307      	orrs	r7, r0
 8008616:	3568      	adds	r5, #104	; 0x68
 8008618:	e7e9      	b.n	80085ee <_fwalk_reent+0x12>

0800861a <__retarget_lock_init_recursive>:
 800861a:	4770      	bx	lr

0800861c <__retarget_lock_acquire_recursive>:
 800861c:	4770      	bx	lr

0800861e <__retarget_lock_release_recursive>:
 800861e:	4770      	bx	lr

08008620 <__swhatbuf_r>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	460e      	mov	r6, r1
 8008624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008628:	2900      	cmp	r1, #0
 800862a:	b096      	sub	sp, #88	; 0x58
 800862c:	4614      	mov	r4, r2
 800862e:	461d      	mov	r5, r3
 8008630:	da07      	bge.n	8008642 <__swhatbuf_r+0x22>
 8008632:	2300      	movs	r3, #0
 8008634:	602b      	str	r3, [r5, #0]
 8008636:	89b3      	ldrh	r3, [r6, #12]
 8008638:	061a      	lsls	r2, r3, #24
 800863a:	d410      	bmi.n	800865e <__swhatbuf_r+0x3e>
 800863c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008640:	e00e      	b.n	8008660 <__swhatbuf_r+0x40>
 8008642:	466a      	mov	r2, sp
 8008644:	f000 f902 	bl	800884c <_fstat_r>
 8008648:	2800      	cmp	r0, #0
 800864a:	dbf2      	blt.n	8008632 <__swhatbuf_r+0x12>
 800864c:	9a01      	ldr	r2, [sp, #4]
 800864e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008652:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008656:	425a      	negs	r2, r3
 8008658:	415a      	adcs	r2, r3
 800865a:	602a      	str	r2, [r5, #0]
 800865c:	e7ee      	b.n	800863c <__swhatbuf_r+0x1c>
 800865e:	2340      	movs	r3, #64	; 0x40
 8008660:	2000      	movs	r0, #0
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	b016      	add	sp, #88	; 0x58
 8008666:	bd70      	pop	{r4, r5, r6, pc}

08008668 <__smakebuf_r>:
 8008668:	898b      	ldrh	r3, [r1, #12]
 800866a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800866c:	079d      	lsls	r5, r3, #30
 800866e:	4606      	mov	r6, r0
 8008670:	460c      	mov	r4, r1
 8008672:	d507      	bpl.n	8008684 <__smakebuf_r+0x1c>
 8008674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	6123      	str	r3, [r4, #16]
 800867c:	2301      	movs	r3, #1
 800867e:	6163      	str	r3, [r4, #20]
 8008680:	b002      	add	sp, #8
 8008682:	bd70      	pop	{r4, r5, r6, pc}
 8008684:	ab01      	add	r3, sp, #4
 8008686:	466a      	mov	r2, sp
 8008688:	f7ff ffca 	bl	8008620 <__swhatbuf_r>
 800868c:	9900      	ldr	r1, [sp, #0]
 800868e:	4605      	mov	r5, r0
 8008690:	4630      	mov	r0, r6
 8008692:	f7ff f97f 	bl	8007994 <_malloc_r>
 8008696:	b948      	cbnz	r0, 80086ac <__smakebuf_r+0x44>
 8008698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800869c:	059a      	lsls	r2, r3, #22
 800869e:	d4ef      	bmi.n	8008680 <__smakebuf_r+0x18>
 80086a0:	f023 0303 	bic.w	r3, r3, #3
 80086a4:	f043 0302 	orr.w	r3, r3, #2
 80086a8:	81a3      	strh	r3, [r4, #12]
 80086aa:	e7e3      	b.n	8008674 <__smakebuf_r+0xc>
 80086ac:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <__smakebuf_r+0x7c>)
 80086ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80086b0:	89a3      	ldrh	r3, [r4, #12]
 80086b2:	6020      	str	r0, [r4, #0]
 80086b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b8:	81a3      	strh	r3, [r4, #12]
 80086ba:	9b00      	ldr	r3, [sp, #0]
 80086bc:	6163      	str	r3, [r4, #20]
 80086be:	9b01      	ldr	r3, [sp, #4]
 80086c0:	6120      	str	r0, [r4, #16]
 80086c2:	b15b      	cbz	r3, 80086dc <__smakebuf_r+0x74>
 80086c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086c8:	4630      	mov	r0, r6
 80086ca:	f000 f8d1 	bl	8008870 <_isatty_r>
 80086ce:	b128      	cbz	r0, 80086dc <__smakebuf_r+0x74>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f023 0303 	bic.w	r3, r3, #3
 80086d6:	f043 0301 	orr.w	r3, r3, #1
 80086da:	81a3      	strh	r3, [r4, #12]
 80086dc:	89a0      	ldrh	r0, [r4, #12]
 80086de:	4305      	orrs	r5, r0
 80086e0:	81a5      	strh	r5, [r4, #12]
 80086e2:	e7cd      	b.n	8008680 <__smakebuf_r+0x18>
 80086e4:	08008479 	.word	0x08008479

080086e8 <_malloc_usable_size_r>:
 80086e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ec:	1f18      	subs	r0, r3, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bfbc      	itt	lt
 80086f2:	580b      	ldrlt	r3, [r1, r0]
 80086f4:	18c0      	addlt	r0, r0, r3
 80086f6:	4770      	bx	lr

080086f8 <_raise_r>:
 80086f8:	291f      	cmp	r1, #31
 80086fa:	b538      	push	{r3, r4, r5, lr}
 80086fc:	4604      	mov	r4, r0
 80086fe:	460d      	mov	r5, r1
 8008700:	d904      	bls.n	800870c <_raise_r+0x14>
 8008702:	2316      	movs	r3, #22
 8008704:	6003      	str	r3, [r0, #0]
 8008706:	f04f 30ff 	mov.w	r0, #4294967295
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800870e:	b112      	cbz	r2, 8008716 <_raise_r+0x1e>
 8008710:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008714:	b94b      	cbnz	r3, 800872a <_raise_r+0x32>
 8008716:	4620      	mov	r0, r4
 8008718:	f000 f830 	bl	800877c <_getpid_r>
 800871c:	462a      	mov	r2, r5
 800871e:	4601      	mov	r1, r0
 8008720:	4620      	mov	r0, r4
 8008722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008726:	f000 b817 	b.w	8008758 <_kill_r>
 800872a:	2b01      	cmp	r3, #1
 800872c:	d00a      	beq.n	8008744 <_raise_r+0x4c>
 800872e:	1c59      	adds	r1, r3, #1
 8008730:	d103      	bne.n	800873a <_raise_r+0x42>
 8008732:	2316      	movs	r3, #22
 8008734:	6003      	str	r3, [r0, #0]
 8008736:	2001      	movs	r0, #1
 8008738:	e7e7      	b.n	800870a <_raise_r+0x12>
 800873a:	2400      	movs	r4, #0
 800873c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008740:	4628      	mov	r0, r5
 8008742:	4798      	blx	r3
 8008744:	2000      	movs	r0, #0
 8008746:	e7e0      	b.n	800870a <_raise_r+0x12>

08008748 <raise>:
 8008748:	4b02      	ldr	r3, [pc, #8]	; (8008754 <raise+0xc>)
 800874a:	4601      	mov	r1, r0
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	f7ff bfd3 	b.w	80086f8 <_raise_r>
 8008752:	bf00      	nop
 8008754:	20000008 	.word	0x20000008

08008758 <_kill_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d07      	ldr	r5, [pc, #28]	; (8008778 <_kill_r+0x20>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	4611      	mov	r1, r2
 8008764:	602b      	str	r3, [r5, #0]
 8008766:	f7fa f8b5 	bl	80028d4 <_kill>
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	d102      	bne.n	8008774 <_kill_r+0x1c>
 800876e:	682b      	ldr	r3, [r5, #0]
 8008770:	b103      	cbz	r3, 8008774 <_kill_r+0x1c>
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	bd38      	pop	{r3, r4, r5, pc}
 8008776:	bf00      	nop
 8008778:	200002bc 	.word	0x200002bc

0800877c <_getpid_r>:
 800877c:	f7fa b8a2 	b.w	80028c4 <_getpid>

08008780 <__sread>:
 8008780:	b510      	push	{r4, lr}
 8008782:	460c      	mov	r4, r1
 8008784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008788:	f000 f894 	bl	80088b4 <_read_r>
 800878c:	2800      	cmp	r0, #0
 800878e:	bfab      	itete	ge
 8008790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008792:	89a3      	ldrhlt	r3, [r4, #12]
 8008794:	181b      	addge	r3, r3, r0
 8008796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800879a:	bfac      	ite	ge
 800879c:	6563      	strge	r3, [r4, #84]	; 0x54
 800879e:	81a3      	strhlt	r3, [r4, #12]
 80087a0:	bd10      	pop	{r4, pc}

080087a2 <__swrite>:
 80087a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a6:	461f      	mov	r7, r3
 80087a8:	898b      	ldrh	r3, [r1, #12]
 80087aa:	05db      	lsls	r3, r3, #23
 80087ac:	4605      	mov	r5, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	4616      	mov	r6, r2
 80087b2:	d505      	bpl.n	80087c0 <__swrite+0x1e>
 80087b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b8:	2302      	movs	r3, #2
 80087ba:	2200      	movs	r2, #0
 80087bc:	f000 f868 	bl	8008890 <_lseek_r>
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ca:	81a3      	strh	r3, [r4, #12]
 80087cc:	4632      	mov	r2, r6
 80087ce:	463b      	mov	r3, r7
 80087d0:	4628      	mov	r0, r5
 80087d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087d6:	f000 b817 	b.w	8008808 <_write_r>

080087da <__sseek>:
 80087da:	b510      	push	{r4, lr}
 80087dc:	460c      	mov	r4, r1
 80087de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e2:	f000 f855 	bl	8008890 <_lseek_r>
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	bf15      	itete	ne
 80087ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087f6:	81a3      	strheq	r3, [r4, #12]
 80087f8:	bf18      	it	ne
 80087fa:	81a3      	strhne	r3, [r4, #12]
 80087fc:	bd10      	pop	{r4, pc}

080087fe <__sclose>:
 80087fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008802:	f000 b813 	b.w	800882c <_close_r>
	...

08008808 <_write_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4d07      	ldr	r5, [pc, #28]	; (8008828 <_write_r+0x20>)
 800880c:	4604      	mov	r4, r0
 800880e:	4608      	mov	r0, r1
 8008810:	4611      	mov	r1, r2
 8008812:	2200      	movs	r2, #0
 8008814:	602a      	str	r2, [r5, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	f7fa f893 	bl	8002942 <_write>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_write_r+0x1e>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	b103      	cbz	r3, 8008826 <_write_r+0x1e>
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	200002bc 	.word	0x200002bc

0800882c <_close_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4d06      	ldr	r5, [pc, #24]	; (8008848 <_close_r+0x1c>)
 8008830:	2300      	movs	r3, #0
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	602b      	str	r3, [r5, #0]
 8008838:	f7fa f89f 	bl	800297a <_close>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d102      	bne.n	8008846 <_close_r+0x1a>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b103      	cbz	r3, 8008846 <_close_r+0x1a>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	200002bc 	.word	0x200002bc

0800884c <_fstat_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4d07      	ldr	r5, [pc, #28]	; (800886c <_fstat_r+0x20>)
 8008850:	2300      	movs	r3, #0
 8008852:	4604      	mov	r4, r0
 8008854:	4608      	mov	r0, r1
 8008856:	4611      	mov	r1, r2
 8008858:	602b      	str	r3, [r5, #0]
 800885a:	f7fa f89a 	bl	8002992 <_fstat>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	d102      	bne.n	8008868 <_fstat_r+0x1c>
 8008862:	682b      	ldr	r3, [r5, #0]
 8008864:	b103      	cbz	r3, 8008868 <_fstat_r+0x1c>
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	bd38      	pop	{r3, r4, r5, pc}
 800886a:	bf00      	nop
 800886c:	200002bc 	.word	0x200002bc

08008870 <_isatty_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d06      	ldr	r5, [pc, #24]	; (800888c <_isatty_r+0x1c>)
 8008874:	2300      	movs	r3, #0
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	602b      	str	r3, [r5, #0]
 800887c:	f7fa f899 	bl	80029b2 <_isatty>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <_isatty_r+0x1a>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	b103      	cbz	r3, 800888a <_isatty_r+0x1a>
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	200002bc 	.word	0x200002bc

08008890 <_lseek_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d07      	ldr	r5, [pc, #28]	; (80088b0 <_lseek_r+0x20>)
 8008894:	4604      	mov	r4, r0
 8008896:	4608      	mov	r0, r1
 8008898:	4611      	mov	r1, r2
 800889a:	2200      	movs	r2, #0
 800889c:	602a      	str	r2, [r5, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	f7fa f892 	bl	80029c8 <_lseek>
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	d102      	bne.n	80088ae <_lseek_r+0x1e>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	b103      	cbz	r3, 80088ae <_lseek_r+0x1e>
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	200002bc 	.word	0x200002bc

080088b4 <_read_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4d07      	ldr	r5, [pc, #28]	; (80088d4 <_read_r+0x20>)
 80088b8:	4604      	mov	r4, r0
 80088ba:	4608      	mov	r0, r1
 80088bc:	4611      	mov	r1, r2
 80088be:	2200      	movs	r2, #0
 80088c0:	602a      	str	r2, [r5, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	f7fa f820 	bl	8002908 <_read>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_read_r+0x1e>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_read_r+0x1e>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	200002bc 	.word	0x200002bc

080088d8 <pow>:
 80088d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088dc:	ec59 8b10 	vmov	r8, r9, d0
 80088e0:	ec57 6b11 	vmov	r6, r7, d1
 80088e4:	f000 f8a8 	bl	8008a38 <__ieee754_pow>
 80088e8:	4b4e      	ldr	r3, [pc, #312]	; (8008a24 <pow+0x14c>)
 80088ea:	f993 3000 	ldrsb.w	r3, [r3]
 80088ee:	3301      	adds	r3, #1
 80088f0:	ec55 4b10 	vmov	r4, r5, d0
 80088f4:	d015      	beq.n	8008922 <pow+0x4a>
 80088f6:	4632      	mov	r2, r6
 80088f8:	463b      	mov	r3, r7
 80088fa:	4630      	mov	r0, r6
 80088fc:	4639      	mov	r1, r7
 80088fe:	f7f8 f915 	bl	8000b2c <__aeabi_dcmpun>
 8008902:	b970      	cbnz	r0, 8008922 <pow+0x4a>
 8008904:	4642      	mov	r2, r8
 8008906:	464b      	mov	r3, r9
 8008908:	4640      	mov	r0, r8
 800890a:	4649      	mov	r1, r9
 800890c:	f7f8 f90e 	bl	8000b2c <__aeabi_dcmpun>
 8008910:	2200      	movs	r2, #0
 8008912:	2300      	movs	r3, #0
 8008914:	b148      	cbz	r0, 800892a <pow+0x52>
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f8 f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800891e:	2800      	cmp	r0, #0
 8008920:	d17d      	bne.n	8008a1e <pow+0x146>
 8008922:	ec45 4b10 	vmov	d0, r4, r5
 8008926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800892a:	4640      	mov	r0, r8
 800892c:	4649      	mov	r1, r9
 800892e:	f7f8 f8cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008932:	b1e0      	cbz	r0, 800896e <pow+0x96>
 8008934:	2200      	movs	r2, #0
 8008936:	2300      	movs	r3, #0
 8008938:	4630      	mov	r0, r6
 800893a:	4639      	mov	r1, r7
 800893c:	f7f8 f8c4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008940:	2800      	cmp	r0, #0
 8008942:	d16c      	bne.n	8008a1e <pow+0x146>
 8008944:	ec47 6b10 	vmov	d0, r6, r7
 8008948:	f000 fe55 	bl	80095f6 <finite>
 800894c:	2800      	cmp	r0, #0
 800894e:	d0e8      	beq.n	8008922 <pow+0x4a>
 8008950:	2200      	movs	r2, #0
 8008952:	2300      	movs	r3, #0
 8008954:	4630      	mov	r0, r6
 8008956:	4639      	mov	r1, r7
 8008958:	f7f8 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800895c:	2800      	cmp	r0, #0
 800895e:	d0e0      	beq.n	8008922 <pow+0x4a>
 8008960:	f7fb fb62 	bl	8004028 <__errno>
 8008964:	2321      	movs	r3, #33	; 0x21
 8008966:	6003      	str	r3, [r0, #0]
 8008968:	2400      	movs	r4, #0
 800896a:	4d2f      	ldr	r5, [pc, #188]	; (8008a28 <pow+0x150>)
 800896c:	e7d9      	b.n	8008922 <pow+0x4a>
 800896e:	ec45 4b10 	vmov	d0, r4, r5
 8008972:	f000 fe40 	bl	80095f6 <finite>
 8008976:	bbb8      	cbnz	r0, 80089e8 <pow+0x110>
 8008978:	ec49 8b10 	vmov	d0, r8, r9
 800897c:	f000 fe3b 	bl	80095f6 <finite>
 8008980:	b390      	cbz	r0, 80089e8 <pow+0x110>
 8008982:	ec47 6b10 	vmov	d0, r6, r7
 8008986:	f000 fe36 	bl	80095f6 <finite>
 800898a:	b368      	cbz	r0, 80089e8 <pow+0x110>
 800898c:	4622      	mov	r2, r4
 800898e:	462b      	mov	r3, r5
 8008990:	4620      	mov	r0, r4
 8008992:	4629      	mov	r1, r5
 8008994:	f7f8 f8ca 	bl	8000b2c <__aeabi_dcmpun>
 8008998:	b160      	cbz	r0, 80089b4 <pow+0xdc>
 800899a:	f7fb fb45 	bl	8004028 <__errno>
 800899e:	2321      	movs	r3, #33	; 0x21
 80089a0:	6003      	str	r3, [r0, #0]
 80089a2:	2200      	movs	r2, #0
 80089a4:	2300      	movs	r3, #0
 80089a6:	4610      	mov	r0, r2
 80089a8:	4619      	mov	r1, r3
 80089aa:	f7f7 ff4f 	bl	800084c <__aeabi_ddiv>
 80089ae:	4604      	mov	r4, r0
 80089b0:	460d      	mov	r5, r1
 80089b2:	e7b6      	b.n	8008922 <pow+0x4a>
 80089b4:	f7fb fb38 	bl	8004028 <__errno>
 80089b8:	2322      	movs	r3, #34	; 0x22
 80089ba:	6003      	str	r3, [r0, #0]
 80089bc:	2200      	movs	r2, #0
 80089be:	2300      	movs	r3, #0
 80089c0:	4640      	mov	r0, r8
 80089c2:	4649      	mov	r1, r9
 80089c4:	f7f8 f88a 	bl	8000adc <__aeabi_dcmplt>
 80089c8:	2400      	movs	r4, #0
 80089ca:	b158      	cbz	r0, 80089e4 <pow+0x10c>
 80089cc:	ec47 6b10 	vmov	d0, r6, r7
 80089d0:	f000 fe1c 	bl	800960c <rint>
 80089d4:	4632      	mov	r2, r6
 80089d6:	ec51 0b10 	vmov	r0, r1, d0
 80089da:	463b      	mov	r3, r7
 80089dc:	f7f8 f874 	bl	8000ac8 <__aeabi_dcmpeq>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d0c2      	beq.n	800896a <pow+0x92>
 80089e4:	4d11      	ldr	r5, [pc, #68]	; (8008a2c <pow+0x154>)
 80089e6:	e79c      	b.n	8008922 <pow+0x4a>
 80089e8:	2200      	movs	r2, #0
 80089ea:	2300      	movs	r3, #0
 80089ec:	4620      	mov	r0, r4
 80089ee:	4629      	mov	r1, r5
 80089f0:	f7f8 f86a 	bl	8000ac8 <__aeabi_dcmpeq>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d094      	beq.n	8008922 <pow+0x4a>
 80089f8:	ec49 8b10 	vmov	d0, r8, r9
 80089fc:	f000 fdfb 	bl	80095f6 <finite>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d08e      	beq.n	8008922 <pow+0x4a>
 8008a04:	ec47 6b10 	vmov	d0, r6, r7
 8008a08:	f000 fdf5 	bl	80095f6 <finite>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d088      	beq.n	8008922 <pow+0x4a>
 8008a10:	f7fb fb0a 	bl	8004028 <__errno>
 8008a14:	2322      	movs	r3, #34	; 0x22
 8008a16:	6003      	str	r3, [r0, #0]
 8008a18:	2400      	movs	r4, #0
 8008a1a:	2500      	movs	r5, #0
 8008a1c:	e781      	b.n	8008922 <pow+0x4a>
 8008a1e:	4d04      	ldr	r5, [pc, #16]	; (8008a30 <pow+0x158>)
 8008a20:	2400      	movs	r4, #0
 8008a22:	e77e      	b.n	8008922 <pow+0x4a>
 8008a24:	200001dc 	.word	0x200001dc
 8008a28:	fff00000 	.word	0xfff00000
 8008a2c:	7ff00000 	.word	0x7ff00000
 8008a30:	3ff00000 	.word	0x3ff00000
 8008a34:	00000000 	.word	0x00000000

08008a38 <__ieee754_pow>:
 8008a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	ed2d 8b06 	vpush	{d8-d10}
 8008a40:	b08d      	sub	sp, #52	; 0x34
 8008a42:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008a46:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8008a4a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008a4e:	ea56 0100 	orrs.w	r1, r6, r0
 8008a52:	ec53 2b10 	vmov	r2, r3, d0
 8008a56:	f000 84d1 	beq.w	80093fc <__ieee754_pow+0x9c4>
 8008a5a:	497f      	ldr	r1, [pc, #508]	; (8008c58 <__ieee754_pow+0x220>)
 8008a5c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008a60:	428c      	cmp	r4, r1
 8008a62:	ee10 8a10 	vmov	r8, s0
 8008a66:	4699      	mov	r9, r3
 8008a68:	dc09      	bgt.n	8008a7e <__ieee754_pow+0x46>
 8008a6a:	d103      	bne.n	8008a74 <__ieee754_pow+0x3c>
 8008a6c:	b97a      	cbnz	r2, 8008a8e <__ieee754_pow+0x56>
 8008a6e:	42a6      	cmp	r6, r4
 8008a70:	dd02      	ble.n	8008a78 <__ieee754_pow+0x40>
 8008a72:	e00c      	b.n	8008a8e <__ieee754_pow+0x56>
 8008a74:	428e      	cmp	r6, r1
 8008a76:	dc02      	bgt.n	8008a7e <__ieee754_pow+0x46>
 8008a78:	428e      	cmp	r6, r1
 8008a7a:	d110      	bne.n	8008a9e <__ieee754_pow+0x66>
 8008a7c:	b178      	cbz	r0, 8008a9e <__ieee754_pow+0x66>
 8008a7e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008a82:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008a86:	ea54 0308 	orrs.w	r3, r4, r8
 8008a8a:	f000 84b7 	beq.w	80093fc <__ieee754_pow+0x9c4>
 8008a8e:	4873      	ldr	r0, [pc, #460]	; (8008c5c <__ieee754_pow+0x224>)
 8008a90:	b00d      	add	sp, #52	; 0x34
 8008a92:	ecbd 8b06 	vpop	{d8-d10}
 8008a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9a:	f7ff b931 	b.w	8007d00 <nan>
 8008a9e:	f1b9 0f00 	cmp.w	r9, #0
 8008aa2:	da36      	bge.n	8008b12 <__ieee754_pow+0xda>
 8008aa4:	496e      	ldr	r1, [pc, #440]	; (8008c60 <__ieee754_pow+0x228>)
 8008aa6:	428e      	cmp	r6, r1
 8008aa8:	dc51      	bgt.n	8008b4e <__ieee754_pow+0x116>
 8008aaa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8008aae:	428e      	cmp	r6, r1
 8008ab0:	f340 84af 	ble.w	8009412 <__ieee754_pow+0x9da>
 8008ab4:	1531      	asrs	r1, r6, #20
 8008ab6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008aba:	2914      	cmp	r1, #20
 8008abc:	dd0f      	ble.n	8008ade <__ieee754_pow+0xa6>
 8008abe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008ac2:	fa20 fc01 	lsr.w	ip, r0, r1
 8008ac6:	fa0c f101 	lsl.w	r1, ip, r1
 8008aca:	4281      	cmp	r1, r0
 8008acc:	f040 84a1 	bne.w	8009412 <__ieee754_pow+0x9da>
 8008ad0:	f00c 0c01 	and.w	ip, ip, #1
 8008ad4:	f1cc 0102 	rsb	r1, ip, #2
 8008ad8:	9100      	str	r1, [sp, #0]
 8008ada:	b180      	cbz	r0, 8008afe <__ieee754_pow+0xc6>
 8008adc:	e059      	b.n	8008b92 <__ieee754_pow+0x15a>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d155      	bne.n	8008b8e <__ieee754_pow+0x156>
 8008ae2:	f1c1 0114 	rsb	r1, r1, #20
 8008ae6:	fa46 fc01 	asr.w	ip, r6, r1
 8008aea:	fa0c f101 	lsl.w	r1, ip, r1
 8008aee:	42b1      	cmp	r1, r6
 8008af0:	f040 848c 	bne.w	800940c <__ieee754_pow+0x9d4>
 8008af4:	f00c 0c01 	and.w	ip, ip, #1
 8008af8:	f1cc 0102 	rsb	r1, ip, #2
 8008afc:	9100      	str	r1, [sp, #0]
 8008afe:	4959      	ldr	r1, [pc, #356]	; (8008c64 <__ieee754_pow+0x22c>)
 8008b00:	428e      	cmp	r6, r1
 8008b02:	d12d      	bne.n	8008b60 <__ieee754_pow+0x128>
 8008b04:	2f00      	cmp	r7, #0
 8008b06:	da79      	bge.n	8008bfc <__ieee754_pow+0x1c4>
 8008b08:	4956      	ldr	r1, [pc, #344]	; (8008c64 <__ieee754_pow+0x22c>)
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	f7f7 fe9e 	bl	800084c <__aeabi_ddiv>
 8008b10:	e016      	b.n	8008b40 <__ieee754_pow+0x108>
 8008b12:	2100      	movs	r1, #0
 8008b14:	9100      	str	r1, [sp, #0]
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d13b      	bne.n	8008b92 <__ieee754_pow+0x15a>
 8008b1a:	494f      	ldr	r1, [pc, #316]	; (8008c58 <__ieee754_pow+0x220>)
 8008b1c:	428e      	cmp	r6, r1
 8008b1e:	d1ee      	bne.n	8008afe <__ieee754_pow+0xc6>
 8008b20:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008b24:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008b28:	ea53 0308 	orrs.w	r3, r3, r8
 8008b2c:	f000 8466 	beq.w	80093fc <__ieee754_pow+0x9c4>
 8008b30:	4b4d      	ldr	r3, [pc, #308]	; (8008c68 <__ieee754_pow+0x230>)
 8008b32:	429c      	cmp	r4, r3
 8008b34:	dd0d      	ble.n	8008b52 <__ieee754_pow+0x11a>
 8008b36:	2f00      	cmp	r7, #0
 8008b38:	f280 8464 	bge.w	8009404 <__ieee754_pow+0x9cc>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	ec41 0b10 	vmov	d0, r0, r1
 8008b44:	b00d      	add	sp, #52	; 0x34
 8008b46:	ecbd 8b06 	vpop	{d8-d10}
 8008b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4e:	2102      	movs	r1, #2
 8008b50:	e7e0      	b.n	8008b14 <__ieee754_pow+0xdc>
 8008b52:	2f00      	cmp	r7, #0
 8008b54:	daf2      	bge.n	8008b3c <__ieee754_pow+0x104>
 8008b56:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8008b5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008b5e:	e7ef      	b.n	8008b40 <__ieee754_pow+0x108>
 8008b60:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008b64:	d104      	bne.n	8008b70 <__ieee754_pow+0x138>
 8008b66:	4610      	mov	r0, r2
 8008b68:	4619      	mov	r1, r3
 8008b6a:	f7f7 fd45 	bl	80005f8 <__aeabi_dmul>
 8008b6e:	e7e7      	b.n	8008b40 <__ieee754_pow+0x108>
 8008b70:	493e      	ldr	r1, [pc, #248]	; (8008c6c <__ieee754_pow+0x234>)
 8008b72:	428f      	cmp	r7, r1
 8008b74:	d10d      	bne.n	8008b92 <__ieee754_pow+0x15a>
 8008b76:	f1b9 0f00 	cmp.w	r9, #0
 8008b7a:	db0a      	blt.n	8008b92 <__ieee754_pow+0x15a>
 8008b7c:	ec43 2b10 	vmov	d0, r2, r3
 8008b80:	b00d      	add	sp, #52	; 0x34
 8008b82:	ecbd 8b06 	vpop	{d8-d10}
 8008b86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8a:	f000 bc77 	b.w	800947c <__ieee754_sqrt>
 8008b8e:	2100      	movs	r1, #0
 8008b90:	9100      	str	r1, [sp, #0]
 8008b92:	ec43 2b10 	vmov	d0, r2, r3
 8008b96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b9a:	f000 fd23 	bl	80095e4 <fabs>
 8008b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ba2:	ec51 0b10 	vmov	r0, r1, d0
 8008ba6:	f1b8 0f00 	cmp.w	r8, #0
 8008baa:	d12a      	bne.n	8008c02 <__ieee754_pow+0x1ca>
 8008bac:	b12c      	cbz	r4, 8008bba <__ieee754_pow+0x182>
 8008bae:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008c64 <__ieee754_pow+0x22c>
 8008bb2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008bb6:	45e6      	cmp	lr, ip
 8008bb8:	d123      	bne.n	8008c02 <__ieee754_pow+0x1ca>
 8008bba:	2f00      	cmp	r7, #0
 8008bbc:	da05      	bge.n	8008bca <__ieee754_pow+0x192>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	4927      	ldr	r1, [pc, #156]	; (8008c64 <__ieee754_pow+0x22c>)
 8008bc6:	f7f7 fe41 	bl	800084c <__aeabi_ddiv>
 8008bca:	f1b9 0f00 	cmp.w	r9, #0
 8008bce:	dab7      	bge.n	8008b40 <__ieee754_pow+0x108>
 8008bd0:	9b00      	ldr	r3, [sp, #0]
 8008bd2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008bd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008bda:	4323      	orrs	r3, r4
 8008bdc:	d108      	bne.n	8008bf0 <__ieee754_pow+0x1b8>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4610      	mov	r0, r2
 8008be4:	4619      	mov	r1, r3
 8008be6:	f7f7 fb4f 	bl	8000288 <__aeabi_dsub>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	e78d      	b.n	8008b0c <__ieee754_pow+0xd4>
 8008bf0:	9b00      	ldr	r3, [sp, #0]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d1a4      	bne.n	8008b40 <__ieee754_pow+0x108>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4619      	mov	r1, r3
 8008c00:	e79e      	b.n	8008b40 <__ieee754_pow+0x108>
 8008c02:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008c06:	f10c 35ff 	add.w	r5, ip, #4294967295
 8008c0a:	950a      	str	r5, [sp, #40]	; 0x28
 8008c0c:	9d00      	ldr	r5, [sp, #0]
 8008c0e:	46ac      	mov	ip, r5
 8008c10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008c12:	ea5c 0505 	orrs.w	r5, ip, r5
 8008c16:	d0e4      	beq.n	8008be2 <__ieee754_pow+0x1aa>
 8008c18:	4b15      	ldr	r3, [pc, #84]	; (8008c70 <__ieee754_pow+0x238>)
 8008c1a:	429e      	cmp	r6, r3
 8008c1c:	f340 80fc 	ble.w	8008e18 <__ieee754_pow+0x3e0>
 8008c20:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008c24:	429e      	cmp	r6, r3
 8008c26:	4b10      	ldr	r3, [pc, #64]	; (8008c68 <__ieee754_pow+0x230>)
 8008c28:	dd07      	ble.n	8008c3a <__ieee754_pow+0x202>
 8008c2a:	429c      	cmp	r4, r3
 8008c2c:	dc0a      	bgt.n	8008c44 <__ieee754_pow+0x20c>
 8008c2e:	2f00      	cmp	r7, #0
 8008c30:	da84      	bge.n	8008b3c <__ieee754_pow+0x104>
 8008c32:	a307      	add	r3, pc, #28	; (adr r3, 8008c50 <__ieee754_pow+0x218>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	e795      	b.n	8008b66 <__ieee754_pow+0x12e>
 8008c3a:	429c      	cmp	r4, r3
 8008c3c:	dbf7      	blt.n	8008c2e <__ieee754_pow+0x1f6>
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <__ieee754_pow+0x22c>)
 8008c40:	429c      	cmp	r4, r3
 8008c42:	dd17      	ble.n	8008c74 <__ieee754_pow+0x23c>
 8008c44:	2f00      	cmp	r7, #0
 8008c46:	dcf4      	bgt.n	8008c32 <__ieee754_pow+0x1fa>
 8008c48:	e778      	b.n	8008b3c <__ieee754_pow+0x104>
 8008c4a:	bf00      	nop
 8008c4c:	f3af 8000 	nop.w
 8008c50:	8800759c 	.word	0x8800759c
 8008c54:	7e37e43c 	.word	0x7e37e43c
 8008c58:	7ff00000 	.word	0x7ff00000
 8008c5c:	08009d40 	.word	0x08009d40
 8008c60:	433fffff 	.word	0x433fffff
 8008c64:	3ff00000 	.word	0x3ff00000
 8008c68:	3fefffff 	.word	0x3fefffff
 8008c6c:	3fe00000 	.word	0x3fe00000
 8008c70:	41e00000 	.word	0x41e00000
 8008c74:	4b64      	ldr	r3, [pc, #400]	; (8008e08 <__ieee754_pow+0x3d0>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	f7f7 fb06 	bl	8000288 <__aeabi_dsub>
 8008c7c:	a356      	add	r3, pc, #344	; (adr r3, 8008dd8 <__ieee754_pow+0x3a0>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	4604      	mov	r4, r0
 8008c84:	460d      	mov	r5, r1
 8008c86:	f7f7 fcb7 	bl	80005f8 <__aeabi_dmul>
 8008c8a:	a355      	add	r3, pc, #340	; (adr r3, 8008de0 <__ieee754_pow+0x3a8>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	4606      	mov	r6, r0
 8008c92:	460f      	mov	r7, r1
 8008c94:	4620      	mov	r0, r4
 8008c96:	4629      	mov	r1, r5
 8008c98:	f7f7 fcae 	bl	80005f8 <__aeabi_dmul>
 8008c9c:	4b5b      	ldr	r3, [pc, #364]	; (8008e0c <__ieee754_pow+0x3d4>)
 8008c9e:	4682      	mov	sl, r0
 8008ca0:	468b      	mov	fp, r1
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	f7f7 fca6 	bl	80005f8 <__aeabi_dmul>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	a14d      	add	r1, pc, #308	; (adr r1, 8008de8 <__ieee754_pow+0x3b0>)
 8008cb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cb6:	f7f7 fae7 	bl	8000288 <__aeabi_dsub>
 8008cba:	4622      	mov	r2, r4
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	f7f7 fc9b 	bl	80005f8 <__aeabi_dmul>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	4951      	ldr	r1, [pc, #324]	; (8008e10 <__ieee754_pow+0x3d8>)
 8008cca:	f7f7 fadd 	bl	8000288 <__aeabi_dsub>
 8008cce:	4622      	mov	r2, r4
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	4689      	mov	r9, r1
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	4629      	mov	r1, r5
 8008cda:	f7f7 fc8d 	bl	80005f8 <__aeabi_dmul>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	f7f7 fc87 	bl	80005f8 <__aeabi_dmul>
 8008cea:	a341      	add	r3, pc, #260	; (adr r3, 8008df0 <__ieee754_pow+0x3b8>)
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f7f7 fc82 	bl	80005f8 <__aeabi_dmul>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4650      	mov	r0, sl
 8008cfa:	4659      	mov	r1, fp
 8008cfc:	f7f7 fac4 	bl	8000288 <__aeabi_dsub>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4680      	mov	r8, r0
 8008d06:	4689      	mov	r9, r1
 8008d08:	4630      	mov	r0, r6
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	f7f7 fabe 	bl	800028c <__adddf3>
 8008d10:	2400      	movs	r4, #0
 8008d12:	4632      	mov	r2, r6
 8008d14:	463b      	mov	r3, r7
 8008d16:	4620      	mov	r0, r4
 8008d18:	460d      	mov	r5, r1
 8008d1a:	f7f7 fab5 	bl	8000288 <__aeabi_dsub>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4640      	mov	r0, r8
 8008d24:	4649      	mov	r1, r9
 8008d26:	f7f7 faaf 	bl	8000288 <__aeabi_dsub>
 8008d2a:	9b00      	ldr	r3, [sp, #0]
 8008d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	4313      	orrs	r3, r2
 8008d32:	4682      	mov	sl, r0
 8008d34:	468b      	mov	fp, r1
 8008d36:	f040 81f1 	bne.w	800911c <__ieee754_pow+0x6e4>
 8008d3a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008df8 <__ieee754_pow+0x3c0>
 8008d3e:	eeb0 8a47 	vmov.f32	s16, s14
 8008d42:	eef0 8a67 	vmov.f32	s17, s15
 8008d46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d4a:	2600      	movs	r6, #0
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	463b      	mov	r3, r7
 8008d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d54:	f7f7 fa98 	bl	8000288 <__aeabi_dsub>
 8008d58:	4622      	mov	r2, r4
 8008d5a:	462b      	mov	r3, r5
 8008d5c:	f7f7 fc4c 	bl	80005f8 <__aeabi_dmul>
 8008d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d64:	4680      	mov	r8, r0
 8008d66:	4689      	mov	r9, r1
 8008d68:	4650      	mov	r0, sl
 8008d6a:	4659      	mov	r1, fp
 8008d6c:	f7f7 fc44 	bl	80005f8 <__aeabi_dmul>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	4640      	mov	r0, r8
 8008d76:	4649      	mov	r1, r9
 8008d78:	f7f7 fa88 	bl	800028c <__adddf3>
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	463b      	mov	r3, r7
 8008d80:	4680      	mov	r8, r0
 8008d82:	4689      	mov	r9, r1
 8008d84:	4620      	mov	r0, r4
 8008d86:	4629      	mov	r1, r5
 8008d88:	f7f7 fc36 	bl	80005f8 <__aeabi_dmul>
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4604      	mov	r4, r0
 8008d90:	460d      	mov	r5, r1
 8008d92:	4602      	mov	r2, r0
 8008d94:	4649      	mov	r1, r9
 8008d96:	4640      	mov	r0, r8
 8008d98:	f7f7 fa78 	bl	800028c <__adddf3>
 8008d9c:	4b1d      	ldr	r3, [pc, #116]	; (8008e14 <__ieee754_pow+0x3dc>)
 8008d9e:	4299      	cmp	r1, r3
 8008da0:	ec45 4b19 	vmov	d9, r4, r5
 8008da4:	4606      	mov	r6, r0
 8008da6:	460f      	mov	r7, r1
 8008da8:	468b      	mov	fp, r1
 8008daa:	f340 82fe 	ble.w	80093aa <__ieee754_pow+0x972>
 8008dae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008db2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008db6:	4303      	orrs	r3, r0
 8008db8:	f000 81f0 	beq.w	800919c <__ieee754_pow+0x764>
 8008dbc:	a310      	add	r3, pc, #64	; (adr r3, 8008e00 <__ieee754_pow+0x3c8>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	ec51 0b18 	vmov	r0, r1, d8
 8008dc6:	f7f7 fc17 	bl	80005f8 <__aeabi_dmul>
 8008dca:	a30d      	add	r3, pc, #52	; (adr r3, 8008e00 <__ieee754_pow+0x3c8>)
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	e6cb      	b.n	8008b6a <__ieee754_pow+0x132>
 8008dd2:	bf00      	nop
 8008dd4:	f3af 8000 	nop.w
 8008dd8:	60000000 	.word	0x60000000
 8008ddc:	3ff71547 	.word	0x3ff71547
 8008de0:	f85ddf44 	.word	0xf85ddf44
 8008de4:	3e54ae0b 	.word	0x3e54ae0b
 8008de8:	55555555 	.word	0x55555555
 8008dec:	3fd55555 	.word	0x3fd55555
 8008df0:	652b82fe 	.word	0x652b82fe
 8008df4:	3ff71547 	.word	0x3ff71547
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	bff00000 	.word	0xbff00000
 8008e00:	8800759c 	.word	0x8800759c
 8008e04:	7e37e43c 	.word	0x7e37e43c
 8008e08:	3ff00000 	.word	0x3ff00000
 8008e0c:	3fd00000 	.word	0x3fd00000
 8008e10:	3fe00000 	.word	0x3fe00000
 8008e14:	408fffff 	.word	0x408fffff
 8008e18:	4bd7      	ldr	r3, [pc, #860]	; (8009178 <__ieee754_pow+0x740>)
 8008e1a:	ea03 0309 	and.w	r3, r3, r9
 8008e1e:	2200      	movs	r2, #0
 8008e20:	b92b      	cbnz	r3, 8008e2e <__ieee754_pow+0x3f6>
 8008e22:	4bd6      	ldr	r3, [pc, #856]	; (800917c <__ieee754_pow+0x744>)
 8008e24:	f7f7 fbe8 	bl	80005f8 <__aeabi_dmul>
 8008e28:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	1523      	asrs	r3, r4, #20
 8008e30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008e34:	4413      	add	r3, r2
 8008e36:	9309      	str	r3, [sp, #36]	; 0x24
 8008e38:	4bd1      	ldr	r3, [pc, #836]	; (8009180 <__ieee754_pow+0x748>)
 8008e3a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008e3e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008e42:	429c      	cmp	r4, r3
 8008e44:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008e48:	dd08      	ble.n	8008e5c <__ieee754_pow+0x424>
 8008e4a:	4bce      	ldr	r3, [pc, #824]	; (8009184 <__ieee754_pow+0x74c>)
 8008e4c:	429c      	cmp	r4, r3
 8008e4e:	f340 8163 	ble.w	8009118 <__ieee754_pow+0x6e0>
 8008e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e54:	3301      	adds	r3, #1
 8008e56:	9309      	str	r3, [sp, #36]	; 0x24
 8008e58:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008e5c:	2400      	movs	r4, #0
 8008e5e:	00e3      	lsls	r3, r4, #3
 8008e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e62:	4bc9      	ldr	r3, [pc, #804]	; (8009188 <__ieee754_pow+0x750>)
 8008e64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e68:	ed93 7b00 	vldr	d7, [r3]
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	ec53 2b17 	vmov	r2, r3, d7
 8008e72:	eeb0 8a47 	vmov.f32	s16, s14
 8008e76:	eef0 8a67 	vmov.f32	s17, s15
 8008e7a:	4682      	mov	sl, r0
 8008e7c:	f7f7 fa04 	bl	8000288 <__aeabi_dsub>
 8008e80:	4652      	mov	r2, sl
 8008e82:	4606      	mov	r6, r0
 8008e84:	460f      	mov	r7, r1
 8008e86:	462b      	mov	r3, r5
 8008e88:	ec51 0b18 	vmov	r0, r1, d8
 8008e8c:	f7f7 f9fe 	bl	800028c <__adddf3>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	2000      	movs	r0, #0
 8008e96:	49bd      	ldr	r1, [pc, #756]	; (800918c <__ieee754_pow+0x754>)
 8008e98:	f7f7 fcd8 	bl	800084c <__aeabi_ddiv>
 8008e9c:	ec41 0b19 	vmov	d9, r0, r1
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	f7f7 fba6 	bl	80005f8 <__aeabi_dmul>
 8008eac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008eb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008eb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9304      	str	r3, [sp, #16]
 8008ebc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008ec0:	46ab      	mov	fp, r5
 8008ec2:	106d      	asrs	r5, r5, #1
 8008ec4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008ec8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008ecc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	4614      	mov	r4, r2
 8008ed8:	461d      	mov	r5, r3
 8008eda:	f7f7 fb8d 	bl	80005f8 <__aeabi_dmul>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 f9cf 	bl	8000288 <__aeabi_dsub>
 8008eea:	ec53 2b18 	vmov	r2, r3, d8
 8008eee:	4606      	mov	r6, r0
 8008ef0:	460f      	mov	r7, r1
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7f7 f9c7 	bl	8000288 <__aeabi_dsub>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4650      	mov	r0, sl
 8008f00:	4659      	mov	r1, fp
 8008f02:	f7f7 f9c1 	bl	8000288 <__aeabi_dsub>
 8008f06:	4642      	mov	r2, r8
 8008f08:	464b      	mov	r3, r9
 8008f0a:	f7f7 fb75 	bl	80005f8 <__aeabi_dmul>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4630      	mov	r0, r6
 8008f14:	4639      	mov	r1, r7
 8008f16:	f7f7 f9b7 	bl	8000288 <__aeabi_dsub>
 8008f1a:	ec53 2b19 	vmov	r2, r3, d9
 8008f1e:	f7f7 fb6b 	bl	80005f8 <__aeabi_dmul>
 8008f22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f26:	ec41 0b18 	vmov	d8, r0, r1
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	f7f7 fb63 	bl	80005f8 <__aeabi_dmul>
 8008f32:	a37d      	add	r3, pc, #500	; (adr r3, 8009128 <__ieee754_pow+0x6f0>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	4604      	mov	r4, r0
 8008f3a:	460d      	mov	r5, r1
 8008f3c:	f7f7 fb5c 	bl	80005f8 <__aeabi_dmul>
 8008f40:	a37b      	add	r3, pc, #492	; (adr r3, 8009130 <__ieee754_pow+0x6f8>)
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	f7f7 f9a1 	bl	800028c <__adddf3>
 8008f4a:	4622      	mov	r2, r4
 8008f4c:	462b      	mov	r3, r5
 8008f4e:	f7f7 fb53 	bl	80005f8 <__aeabi_dmul>
 8008f52:	a379      	add	r3, pc, #484	; (adr r3, 8009138 <__ieee754_pow+0x700>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	f7f7 f998 	bl	800028c <__adddf3>
 8008f5c:	4622      	mov	r2, r4
 8008f5e:	462b      	mov	r3, r5
 8008f60:	f7f7 fb4a 	bl	80005f8 <__aeabi_dmul>
 8008f64:	a376      	add	r3, pc, #472	; (adr r3, 8009140 <__ieee754_pow+0x708>)
 8008f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6a:	f7f7 f98f 	bl	800028c <__adddf3>
 8008f6e:	4622      	mov	r2, r4
 8008f70:	462b      	mov	r3, r5
 8008f72:	f7f7 fb41 	bl	80005f8 <__aeabi_dmul>
 8008f76:	a374      	add	r3, pc, #464	; (adr r3, 8009148 <__ieee754_pow+0x710>)
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	f7f7 f986 	bl	800028c <__adddf3>
 8008f80:	4622      	mov	r2, r4
 8008f82:	462b      	mov	r3, r5
 8008f84:	f7f7 fb38 	bl	80005f8 <__aeabi_dmul>
 8008f88:	a371      	add	r3, pc, #452	; (adr r3, 8009150 <__ieee754_pow+0x718>)
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	f7f7 f97d 	bl	800028c <__adddf3>
 8008f92:	4622      	mov	r2, r4
 8008f94:	4606      	mov	r6, r0
 8008f96:	460f      	mov	r7, r1
 8008f98:	462b      	mov	r3, r5
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	f7f7 fb2b 	bl	80005f8 <__aeabi_dmul>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	4639      	mov	r1, r7
 8008faa:	f7f7 fb25 	bl	80005f8 <__aeabi_dmul>
 8008fae:	4642      	mov	r2, r8
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	460d      	mov	r5, r1
 8008fb4:	464b      	mov	r3, r9
 8008fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fba:	f7f7 f967 	bl	800028c <__adddf3>
 8008fbe:	ec53 2b18 	vmov	r2, r3, d8
 8008fc2:	f7f7 fb19 	bl	80005f8 <__aeabi_dmul>
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	462b      	mov	r3, r5
 8008fca:	f7f7 f95f 	bl	800028c <__adddf3>
 8008fce:	4642      	mov	r2, r8
 8008fd0:	4682      	mov	sl, r0
 8008fd2:	468b      	mov	fp, r1
 8008fd4:	464b      	mov	r3, r9
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	4649      	mov	r1, r9
 8008fda:	f7f7 fb0d 	bl	80005f8 <__aeabi_dmul>
 8008fde:	4b6c      	ldr	r3, [pc, #432]	; (8009190 <__ieee754_pow+0x758>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460f      	mov	r7, r1
 8008fe6:	f7f7 f951 	bl	800028c <__adddf3>
 8008fea:	4652      	mov	r2, sl
 8008fec:	465b      	mov	r3, fp
 8008fee:	f7f7 f94d 	bl	800028c <__adddf3>
 8008ff2:	9c04      	ldr	r4, [sp, #16]
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f7f7 fafb 	bl	80005f8 <__aeabi_dmul>
 8009002:	4b63      	ldr	r3, [pc, #396]	; (8009190 <__ieee754_pow+0x758>)
 8009004:	4680      	mov	r8, r0
 8009006:	4689      	mov	r9, r1
 8009008:	2200      	movs	r2, #0
 800900a:	4620      	mov	r0, r4
 800900c:	4629      	mov	r1, r5
 800900e:	f7f7 f93b 	bl	8000288 <__aeabi_dsub>
 8009012:	4632      	mov	r2, r6
 8009014:	463b      	mov	r3, r7
 8009016:	f7f7 f937 	bl	8000288 <__aeabi_dsub>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4650      	mov	r0, sl
 8009020:	4659      	mov	r1, fp
 8009022:	f7f7 f931 	bl	8000288 <__aeabi_dsub>
 8009026:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800902a:	f7f7 fae5 	bl	80005f8 <__aeabi_dmul>
 800902e:	4622      	mov	r2, r4
 8009030:	4606      	mov	r6, r0
 8009032:	460f      	mov	r7, r1
 8009034:	462b      	mov	r3, r5
 8009036:	ec51 0b18 	vmov	r0, r1, d8
 800903a:	f7f7 fadd 	bl	80005f8 <__aeabi_dmul>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4630      	mov	r0, r6
 8009044:	4639      	mov	r1, r7
 8009046:	f7f7 f921 	bl	800028c <__adddf3>
 800904a:	4606      	mov	r6, r0
 800904c:	460f      	mov	r7, r1
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4640      	mov	r0, r8
 8009054:	4649      	mov	r1, r9
 8009056:	f7f7 f919 	bl	800028c <__adddf3>
 800905a:	9c04      	ldr	r4, [sp, #16]
 800905c:	a33e      	add	r3, pc, #248	; (adr r3, 8009158 <__ieee754_pow+0x720>)
 800905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009062:	4620      	mov	r0, r4
 8009064:	460d      	mov	r5, r1
 8009066:	f7f7 fac7 	bl	80005f8 <__aeabi_dmul>
 800906a:	4642      	mov	r2, r8
 800906c:	ec41 0b18 	vmov	d8, r0, r1
 8009070:	464b      	mov	r3, r9
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	f7f7 f907 	bl	8000288 <__aeabi_dsub>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4630      	mov	r0, r6
 8009080:	4639      	mov	r1, r7
 8009082:	f7f7 f901 	bl	8000288 <__aeabi_dsub>
 8009086:	a336      	add	r3, pc, #216	; (adr r3, 8009160 <__ieee754_pow+0x728>)
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	f7f7 fab4 	bl	80005f8 <__aeabi_dmul>
 8009090:	a335      	add	r3, pc, #212	; (adr r3, 8009168 <__ieee754_pow+0x730>)
 8009092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009096:	4606      	mov	r6, r0
 8009098:	460f      	mov	r7, r1
 800909a:	4620      	mov	r0, r4
 800909c:	4629      	mov	r1, r5
 800909e:	f7f7 faab 	bl	80005f8 <__aeabi_dmul>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4630      	mov	r0, r6
 80090a8:	4639      	mov	r1, r7
 80090aa:	f7f7 f8ef 	bl	800028c <__adddf3>
 80090ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090b0:	4b38      	ldr	r3, [pc, #224]	; (8009194 <__ieee754_pow+0x75c>)
 80090b2:	4413      	add	r3, r2
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 f8e8 	bl	800028c <__adddf3>
 80090bc:	4682      	mov	sl, r0
 80090be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090c0:	468b      	mov	fp, r1
 80090c2:	f7f7 fa2f 	bl	8000524 <__aeabi_i2d>
 80090c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090c8:	4b33      	ldr	r3, [pc, #204]	; (8009198 <__ieee754_pow+0x760>)
 80090ca:	4413      	add	r3, r2
 80090cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090d0:	4606      	mov	r6, r0
 80090d2:	460f      	mov	r7, r1
 80090d4:	4652      	mov	r2, sl
 80090d6:	465b      	mov	r3, fp
 80090d8:	ec51 0b18 	vmov	r0, r1, d8
 80090dc:	f7f7 f8d6 	bl	800028c <__adddf3>
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	f7f7 f8d2 	bl	800028c <__adddf3>
 80090e8:	4632      	mov	r2, r6
 80090ea:	463b      	mov	r3, r7
 80090ec:	f7f7 f8ce 	bl	800028c <__adddf3>
 80090f0:	9c04      	ldr	r4, [sp, #16]
 80090f2:	4632      	mov	r2, r6
 80090f4:	463b      	mov	r3, r7
 80090f6:	4620      	mov	r0, r4
 80090f8:	460d      	mov	r5, r1
 80090fa:	f7f7 f8c5 	bl	8000288 <__aeabi_dsub>
 80090fe:	4642      	mov	r2, r8
 8009100:	464b      	mov	r3, r9
 8009102:	f7f7 f8c1 	bl	8000288 <__aeabi_dsub>
 8009106:	ec53 2b18 	vmov	r2, r3, d8
 800910a:	f7f7 f8bd 	bl	8000288 <__aeabi_dsub>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4650      	mov	r0, sl
 8009114:	4659      	mov	r1, fp
 8009116:	e606      	b.n	8008d26 <__ieee754_pow+0x2ee>
 8009118:	2401      	movs	r4, #1
 800911a:	e6a0      	b.n	8008e5e <__ieee754_pow+0x426>
 800911c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009170 <__ieee754_pow+0x738>
 8009120:	e60d      	b.n	8008d3e <__ieee754_pow+0x306>
 8009122:	bf00      	nop
 8009124:	f3af 8000 	nop.w
 8009128:	4a454eef 	.word	0x4a454eef
 800912c:	3fca7e28 	.word	0x3fca7e28
 8009130:	93c9db65 	.word	0x93c9db65
 8009134:	3fcd864a 	.word	0x3fcd864a
 8009138:	a91d4101 	.word	0xa91d4101
 800913c:	3fd17460 	.word	0x3fd17460
 8009140:	518f264d 	.word	0x518f264d
 8009144:	3fd55555 	.word	0x3fd55555
 8009148:	db6fabff 	.word	0xdb6fabff
 800914c:	3fdb6db6 	.word	0x3fdb6db6
 8009150:	33333303 	.word	0x33333303
 8009154:	3fe33333 	.word	0x3fe33333
 8009158:	e0000000 	.word	0xe0000000
 800915c:	3feec709 	.word	0x3feec709
 8009160:	dc3a03fd 	.word	0xdc3a03fd
 8009164:	3feec709 	.word	0x3feec709
 8009168:	145b01f5 	.word	0x145b01f5
 800916c:	be3e2fe0 	.word	0xbe3e2fe0
 8009170:	00000000 	.word	0x00000000
 8009174:	3ff00000 	.word	0x3ff00000
 8009178:	7ff00000 	.word	0x7ff00000
 800917c:	43400000 	.word	0x43400000
 8009180:	0003988e 	.word	0x0003988e
 8009184:	000bb679 	.word	0x000bb679
 8009188:	08009da8 	.word	0x08009da8
 800918c:	3ff00000 	.word	0x3ff00000
 8009190:	40080000 	.word	0x40080000
 8009194:	08009dc8 	.word	0x08009dc8
 8009198:	08009db8 	.word	0x08009db8
 800919c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009474 <__ieee754_pow+0xa3c>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	4640      	mov	r0, r8
 80091a4:	4649      	mov	r1, r9
 80091a6:	f7f7 f871 	bl	800028c <__adddf3>
 80091aa:	4622      	mov	r2, r4
 80091ac:	ec41 0b1a 	vmov	d10, r0, r1
 80091b0:	462b      	mov	r3, r5
 80091b2:	4630      	mov	r0, r6
 80091b4:	4639      	mov	r1, r7
 80091b6:	f7f7 f867 	bl	8000288 <__aeabi_dsub>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	ec51 0b1a 	vmov	r0, r1, d10
 80091c2:	f7f7 fca9 	bl	8000b18 <__aeabi_dcmpgt>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f47f adf8 	bne.w	8008dbc <__ieee754_pow+0x384>
 80091cc:	4aa4      	ldr	r2, [pc, #656]	; (8009460 <__ieee754_pow+0xa28>)
 80091ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091d2:	4293      	cmp	r3, r2
 80091d4:	f340 810b 	ble.w	80093ee <__ieee754_pow+0x9b6>
 80091d8:	151b      	asrs	r3, r3, #20
 80091da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80091de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80091e2:	fa4a f303 	asr.w	r3, sl, r3
 80091e6:	445b      	add	r3, fp
 80091e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80091ec:	4e9d      	ldr	r6, [pc, #628]	; (8009464 <__ieee754_pow+0xa2c>)
 80091ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80091f2:	4116      	asrs	r6, r2
 80091f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80091f8:	2000      	movs	r0, #0
 80091fa:	ea23 0106 	bic.w	r1, r3, r6
 80091fe:	f1c2 0214 	rsb	r2, r2, #20
 8009202:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009206:	fa4a fa02 	asr.w	sl, sl, r2
 800920a:	f1bb 0f00 	cmp.w	fp, #0
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4620      	mov	r0, r4
 8009214:	4629      	mov	r1, r5
 8009216:	bfb8      	it	lt
 8009218:	f1ca 0a00 	rsblt	sl, sl, #0
 800921c:	f7f7 f834 	bl	8000288 <__aeabi_dsub>
 8009220:	ec41 0b19 	vmov	d9, r0, r1
 8009224:	4642      	mov	r2, r8
 8009226:	464b      	mov	r3, r9
 8009228:	ec51 0b19 	vmov	r0, r1, d9
 800922c:	f7f7 f82e 	bl	800028c <__adddf3>
 8009230:	2400      	movs	r4, #0
 8009232:	a379      	add	r3, pc, #484	; (adr r3, 8009418 <__ieee754_pow+0x9e0>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	4620      	mov	r0, r4
 800923a:	460d      	mov	r5, r1
 800923c:	f7f7 f9dc 	bl	80005f8 <__aeabi_dmul>
 8009240:	ec53 2b19 	vmov	r2, r3, d9
 8009244:	4606      	mov	r6, r0
 8009246:	460f      	mov	r7, r1
 8009248:	4620      	mov	r0, r4
 800924a:	4629      	mov	r1, r5
 800924c:	f7f7 f81c 	bl	8000288 <__aeabi_dsub>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	4640      	mov	r0, r8
 8009256:	4649      	mov	r1, r9
 8009258:	f7f7 f816 	bl	8000288 <__aeabi_dsub>
 800925c:	a370      	add	r3, pc, #448	; (adr r3, 8009420 <__ieee754_pow+0x9e8>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f7 f9c9 	bl	80005f8 <__aeabi_dmul>
 8009266:	a370      	add	r3, pc, #448	; (adr r3, 8009428 <__ieee754_pow+0x9f0>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	4680      	mov	r8, r0
 800926e:	4689      	mov	r9, r1
 8009270:	4620      	mov	r0, r4
 8009272:	4629      	mov	r1, r5
 8009274:	f7f7 f9c0 	bl	80005f8 <__aeabi_dmul>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4640      	mov	r0, r8
 800927e:	4649      	mov	r1, r9
 8009280:	f7f7 f804 	bl	800028c <__adddf3>
 8009284:	4604      	mov	r4, r0
 8009286:	460d      	mov	r5, r1
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4630      	mov	r0, r6
 800928e:	4639      	mov	r1, r7
 8009290:	f7f6 fffc 	bl	800028c <__adddf3>
 8009294:	4632      	mov	r2, r6
 8009296:	463b      	mov	r3, r7
 8009298:	4680      	mov	r8, r0
 800929a:	4689      	mov	r9, r1
 800929c:	f7f6 fff4 	bl	8000288 <__aeabi_dsub>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4620      	mov	r0, r4
 80092a6:	4629      	mov	r1, r5
 80092a8:	f7f6 ffee 	bl	8000288 <__aeabi_dsub>
 80092ac:	4642      	mov	r2, r8
 80092ae:	4606      	mov	r6, r0
 80092b0:	460f      	mov	r7, r1
 80092b2:	464b      	mov	r3, r9
 80092b4:	4640      	mov	r0, r8
 80092b6:	4649      	mov	r1, r9
 80092b8:	f7f7 f99e 	bl	80005f8 <__aeabi_dmul>
 80092bc:	a35c      	add	r3, pc, #368	; (adr r3, 8009430 <__ieee754_pow+0x9f8>)
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	4604      	mov	r4, r0
 80092c4:	460d      	mov	r5, r1
 80092c6:	f7f7 f997 	bl	80005f8 <__aeabi_dmul>
 80092ca:	a35b      	add	r3, pc, #364	; (adr r3, 8009438 <__ieee754_pow+0xa00>)
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	f7f6 ffda 	bl	8000288 <__aeabi_dsub>
 80092d4:	4622      	mov	r2, r4
 80092d6:	462b      	mov	r3, r5
 80092d8:	f7f7 f98e 	bl	80005f8 <__aeabi_dmul>
 80092dc:	a358      	add	r3, pc, #352	; (adr r3, 8009440 <__ieee754_pow+0xa08>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	f7f6 ffd3 	bl	800028c <__adddf3>
 80092e6:	4622      	mov	r2, r4
 80092e8:	462b      	mov	r3, r5
 80092ea:	f7f7 f985 	bl	80005f8 <__aeabi_dmul>
 80092ee:	a356      	add	r3, pc, #344	; (adr r3, 8009448 <__ieee754_pow+0xa10>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	f7f6 ffc8 	bl	8000288 <__aeabi_dsub>
 80092f8:	4622      	mov	r2, r4
 80092fa:	462b      	mov	r3, r5
 80092fc:	f7f7 f97c 	bl	80005f8 <__aeabi_dmul>
 8009300:	a353      	add	r3, pc, #332	; (adr r3, 8009450 <__ieee754_pow+0xa18>)
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	f7f6 ffc1 	bl	800028c <__adddf3>
 800930a:	4622      	mov	r2, r4
 800930c:	462b      	mov	r3, r5
 800930e:	f7f7 f973 	bl	80005f8 <__aeabi_dmul>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4640      	mov	r0, r8
 8009318:	4649      	mov	r1, r9
 800931a:	f7f6 ffb5 	bl	8000288 <__aeabi_dsub>
 800931e:	4604      	mov	r4, r0
 8009320:	460d      	mov	r5, r1
 8009322:	4602      	mov	r2, r0
 8009324:	460b      	mov	r3, r1
 8009326:	4640      	mov	r0, r8
 8009328:	4649      	mov	r1, r9
 800932a:	f7f7 f965 	bl	80005f8 <__aeabi_dmul>
 800932e:	2200      	movs	r2, #0
 8009330:	ec41 0b19 	vmov	d9, r0, r1
 8009334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009338:	4620      	mov	r0, r4
 800933a:	4629      	mov	r1, r5
 800933c:	f7f6 ffa4 	bl	8000288 <__aeabi_dsub>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	ec51 0b19 	vmov	r0, r1, d9
 8009348:	f7f7 fa80 	bl	800084c <__aeabi_ddiv>
 800934c:	4632      	mov	r2, r6
 800934e:	4604      	mov	r4, r0
 8009350:	460d      	mov	r5, r1
 8009352:	463b      	mov	r3, r7
 8009354:	4640      	mov	r0, r8
 8009356:	4649      	mov	r1, r9
 8009358:	f7f7 f94e 	bl	80005f8 <__aeabi_dmul>
 800935c:	4632      	mov	r2, r6
 800935e:	463b      	mov	r3, r7
 8009360:	f7f6 ff94 	bl	800028c <__adddf3>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4620      	mov	r0, r4
 800936a:	4629      	mov	r1, r5
 800936c:	f7f6 ff8c 	bl	8000288 <__aeabi_dsub>
 8009370:	4642      	mov	r2, r8
 8009372:	464b      	mov	r3, r9
 8009374:	f7f6 ff88 	bl	8000288 <__aeabi_dsub>
 8009378:	460b      	mov	r3, r1
 800937a:	4602      	mov	r2, r0
 800937c:	493a      	ldr	r1, [pc, #232]	; (8009468 <__ieee754_pow+0xa30>)
 800937e:	2000      	movs	r0, #0
 8009380:	f7f6 ff82 	bl	8000288 <__aeabi_dsub>
 8009384:	e9cd 0100 	strd	r0, r1, [sp]
 8009388:	9b01      	ldr	r3, [sp, #4]
 800938a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800938e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009392:	da2f      	bge.n	80093f4 <__ieee754_pow+0x9bc>
 8009394:	4650      	mov	r0, sl
 8009396:	ed9d 0b00 	vldr	d0, [sp]
 800939a:	f000 f9c1 	bl	8009720 <scalbn>
 800939e:	ec51 0b10 	vmov	r0, r1, d0
 80093a2:	ec53 2b18 	vmov	r2, r3, d8
 80093a6:	f7ff bbe0 	b.w	8008b6a <__ieee754_pow+0x132>
 80093aa:	4b30      	ldr	r3, [pc, #192]	; (800946c <__ieee754_pow+0xa34>)
 80093ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80093b0:	429e      	cmp	r6, r3
 80093b2:	f77f af0b 	ble.w	80091cc <__ieee754_pow+0x794>
 80093b6:	4b2e      	ldr	r3, [pc, #184]	; (8009470 <__ieee754_pow+0xa38>)
 80093b8:	440b      	add	r3, r1
 80093ba:	4303      	orrs	r3, r0
 80093bc:	d00b      	beq.n	80093d6 <__ieee754_pow+0x99e>
 80093be:	a326      	add	r3, pc, #152	; (adr r3, 8009458 <__ieee754_pow+0xa20>)
 80093c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c4:	ec51 0b18 	vmov	r0, r1, d8
 80093c8:	f7f7 f916 	bl	80005f8 <__aeabi_dmul>
 80093cc:	a322      	add	r3, pc, #136	; (adr r3, 8009458 <__ieee754_pow+0xa20>)
 80093ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d2:	f7ff bbca 	b.w	8008b6a <__ieee754_pow+0x132>
 80093d6:	4622      	mov	r2, r4
 80093d8:	462b      	mov	r3, r5
 80093da:	f7f6 ff55 	bl	8000288 <__aeabi_dsub>
 80093de:	4642      	mov	r2, r8
 80093e0:	464b      	mov	r3, r9
 80093e2:	f7f7 fb8f 	bl	8000b04 <__aeabi_dcmpge>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f43f aef0 	beq.w	80091cc <__ieee754_pow+0x794>
 80093ec:	e7e7      	b.n	80093be <__ieee754_pow+0x986>
 80093ee:	f04f 0a00 	mov.w	sl, #0
 80093f2:	e717      	b.n	8009224 <__ieee754_pow+0x7ec>
 80093f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093f8:	4619      	mov	r1, r3
 80093fa:	e7d2      	b.n	80093a2 <__ieee754_pow+0x96a>
 80093fc:	491a      	ldr	r1, [pc, #104]	; (8009468 <__ieee754_pow+0xa30>)
 80093fe:	2000      	movs	r0, #0
 8009400:	f7ff bb9e 	b.w	8008b40 <__ieee754_pow+0x108>
 8009404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009408:	f7ff bb9a 	b.w	8008b40 <__ieee754_pow+0x108>
 800940c:	9000      	str	r0, [sp, #0]
 800940e:	f7ff bb76 	b.w	8008afe <__ieee754_pow+0xc6>
 8009412:	2100      	movs	r1, #0
 8009414:	f7ff bb60 	b.w	8008ad8 <__ieee754_pow+0xa0>
 8009418:	00000000 	.word	0x00000000
 800941c:	3fe62e43 	.word	0x3fe62e43
 8009420:	fefa39ef 	.word	0xfefa39ef
 8009424:	3fe62e42 	.word	0x3fe62e42
 8009428:	0ca86c39 	.word	0x0ca86c39
 800942c:	be205c61 	.word	0xbe205c61
 8009430:	72bea4d0 	.word	0x72bea4d0
 8009434:	3e663769 	.word	0x3e663769
 8009438:	c5d26bf1 	.word	0xc5d26bf1
 800943c:	3ebbbd41 	.word	0x3ebbbd41
 8009440:	af25de2c 	.word	0xaf25de2c
 8009444:	3f11566a 	.word	0x3f11566a
 8009448:	16bebd93 	.word	0x16bebd93
 800944c:	3f66c16c 	.word	0x3f66c16c
 8009450:	5555553e 	.word	0x5555553e
 8009454:	3fc55555 	.word	0x3fc55555
 8009458:	c2f8f359 	.word	0xc2f8f359
 800945c:	01a56e1f 	.word	0x01a56e1f
 8009460:	3fe00000 	.word	0x3fe00000
 8009464:	000fffff 	.word	0x000fffff
 8009468:	3ff00000 	.word	0x3ff00000
 800946c:	4090cbff 	.word	0x4090cbff
 8009470:	3f6f3400 	.word	0x3f6f3400
 8009474:	652b82fe 	.word	0x652b82fe
 8009478:	3c971547 	.word	0x3c971547

0800947c <__ieee754_sqrt>:
 800947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009480:	ec55 4b10 	vmov	r4, r5, d0
 8009484:	4e56      	ldr	r6, [pc, #344]	; (80095e0 <__ieee754_sqrt+0x164>)
 8009486:	43ae      	bics	r6, r5
 8009488:	ee10 0a10 	vmov	r0, s0
 800948c:	ee10 3a10 	vmov	r3, s0
 8009490:	4629      	mov	r1, r5
 8009492:	462a      	mov	r2, r5
 8009494:	d110      	bne.n	80094b8 <__ieee754_sqrt+0x3c>
 8009496:	ee10 2a10 	vmov	r2, s0
 800949a:	462b      	mov	r3, r5
 800949c:	f7f7 f8ac 	bl	80005f8 <__aeabi_dmul>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4620      	mov	r0, r4
 80094a6:	4629      	mov	r1, r5
 80094a8:	f7f6 fef0 	bl	800028c <__adddf3>
 80094ac:	4604      	mov	r4, r0
 80094ae:	460d      	mov	r5, r1
 80094b0:	ec45 4b10 	vmov	d0, r4, r5
 80094b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	dc10      	bgt.n	80094de <__ieee754_sqrt+0x62>
 80094bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80094c0:	4330      	orrs	r0, r6
 80094c2:	d0f5      	beq.n	80094b0 <__ieee754_sqrt+0x34>
 80094c4:	b15d      	cbz	r5, 80094de <__ieee754_sqrt+0x62>
 80094c6:	ee10 2a10 	vmov	r2, s0
 80094ca:	462b      	mov	r3, r5
 80094cc:	ee10 0a10 	vmov	r0, s0
 80094d0:	f7f6 feda 	bl	8000288 <__aeabi_dsub>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	f7f7 f9b8 	bl	800084c <__aeabi_ddiv>
 80094dc:	e7e6      	b.n	80094ac <__ieee754_sqrt+0x30>
 80094de:	1509      	asrs	r1, r1, #20
 80094e0:	d076      	beq.n	80095d0 <__ieee754_sqrt+0x154>
 80094e2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80094e6:	07ce      	lsls	r6, r1, #31
 80094e8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80094ec:	bf5e      	ittt	pl
 80094ee:	0fda      	lsrpl	r2, r3, #31
 80094f0:	005b      	lslpl	r3, r3, #1
 80094f2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80094f6:	0fda      	lsrs	r2, r3, #31
 80094f8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80094fc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009500:	2000      	movs	r0, #0
 8009502:	106d      	asrs	r5, r5, #1
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	f04f 0e16 	mov.w	lr, #22
 800950a:	4684      	mov	ip, r0
 800950c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009510:	eb0c 0401 	add.w	r4, ip, r1
 8009514:	4294      	cmp	r4, r2
 8009516:	bfde      	ittt	le
 8009518:	1b12      	suble	r2, r2, r4
 800951a:	eb04 0c01 	addle.w	ip, r4, r1
 800951e:	1840      	addle	r0, r0, r1
 8009520:	0052      	lsls	r2, r2, #1
 8009522:	f1be 0e01 	subs.w	lr, lr, #1
 8009526:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800952a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800952e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009532:	d1ed      	bne.n	8009510 <__ieee754_sqrt+0x94>
 8009534:	4671      	mov	r1, lr
 8009536:	2720      	movs	r7, #32
 8009538:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800953c:	4562      	cmp	r2, ip
 800953e:	eb04 060e 	add.w	r6, r4, lr
 8009542:	dc02      	bgt.n	800954a <__ieee754_sqrt+0xce>
 8009544:	d113      	bne.n	800956e <__ieee754_sqrt+0xf2>
 8009546:	429e      	cmp	r6, r3
 8009548:	d811      	bhi.n	800956e <__ieee754_sqrt+0xf2>
 800954a:	2e00      	cmp	r6, #0
 800954c:	eb06 0e04 	add.w	lr, r6, r4
 8009550:	da43      	bge.n	80095da <__ieee754_sqrt+0x15e>
 8009552:	f1be 0f00 	cmp.w	lr, #0
 8009556:	db40      	blt.n	80095da <__ieee754_sqrt+0x15e>
 8009558:	f10c 0801 	add.w	r8, ip, #1
 800955c:	eba2 020c 	sub.w	r2, r2, ip
 8009560:	429e      	cmp	r6, r3
 8009562:	bf88      	it	hi
 8009564:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009568:	1b9b      	subs	r3, r3, r6
 800956a:	4421      	add	r1, r4
 800956c:	46c4      	mov	ip, r8
 800956e:	0052      	lsls	r2, r2, #1
 8009570:	3f01      	subs	r7, #1
 8009572:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009576:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800957a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800957e:	d1dd      	bne.n	800953c <__ieee754_sqrt+0xc0>
 8009580:	4313      	orrs	r3, r2
 8009582:	d006      	beq.n	8009592 <__ieee754_sqrt+0x116>
 8009584:	1c4c      	adds	r4, r1, #1
 8009586:	bf13      	iteet	ne
 8009588:	3101      	addne	r1, #1
 800958a:	3001      	addeq	r0, #1
 800958c:	4639      	moveq	r1, r7
 800958e:	f021 0101 	bicne.w	r1, r1, #1
 8009592:	1043      	asrs	r3, r0, #1
 8009594:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009598:	0849      	lsrs	r1, r1, #1
 800959a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800959e:	07c2      	lsls	r2, r0, #31
 80095a0:	bf48      	it	mi
 80095a2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80095a6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80095aa:	460c      	mov	r4, r1
 80095ac:	463d      	mov	r5, r7
 80095ae:	e77f      	b.n	80094b0 <__ieee754_sqrt+0x34>
 80095b0:	0ada      	lsrs	r2, r3, #11
 80095b2:	3815      	subs	r0, #21
 80095b4:	055b      	lsls	r3, r3, #21
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	d0fa      	beq.n	80095b0 <__ieee754_sqrt+0x134>
 80095ba:	02d7      	lsls	r7, r2, #11
 80095bc:	d50a      	bpl.n	80095d4 <__ieee754_sqrt+0x158>
 80095be:	f1c1 0420 	rsb	r4, r1, #32
 80095c2:	fa23 f404 	lsr.w	r4, r3, r4
 80095c6:	1e4d      	subs	r5, r1, #1
 80095c8:	408b      	lsls	r3, r1
 80095ca:	4322      	orrs	r2, r4
 80095cc:	1b41      	subs	r1, r0, r5
 80095ce:	e788      	b.n	80094e2 <__ieee754_sqrt+0x66>
 80095d0:	4608      	mov	r0, r1
 80095d2:	e7f0      	b.n	80095b6 <__ieee754_sqrt+0x13a>
 80095d4:	0052      	lsls	r2, r2, #1
 80095d6:	3101      	adds	r1, #1
 80095d8:	e7ef      	b.n	80095ba <__ieee754_sqrt+0x13e>
 80095da:	46e0      	mov	r8, ip
 80095dc:	e7be      	b.n	800955c <__ieee754_sqrt+0xe0>
 80095de:	bf00      	nop
 80095e0:	7ff00000 	.word	0x7ff00000

080095e4 <fabs>:
 80095e4:	ec51 0b10 	vmov	r0, r1, d0
 80095e8:	ee10 2a10 	vmov	r2, s0
 80095ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095f0:	ec43 2b10 	vmov	d0, r2, r3
 80095f4:	4770      	bx	lr

080095f6 <finite>:
 80095f6:	b082      	sub	sp, #8
 80095f8:	ed8d 0b00 	vstr	d0, [sp]
 80095fc:	9801      	ldr	r0, [sp, #4]
 80095fe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009602:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009606:	0fc0      	lsrs	r0, r0, #31
 8009608:	b002      	add	sp, #8
 800960a:	4770      	bx	lr

0800960c <rint>:
 800960c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800960e:	ec51 0b10 	vmov	r0, r1, d0
 8009612:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009616:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800961a:	2e13      	cmp	r6, #19
 800961c:	ee10 4a10 	vmov	r4, s0
 8009620:	460b      	mov	r3, r1
 8009622:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009626:	dc58      	bgt.n	80096da <rint+0xce>
 8009628:	2e00      	cmp	r6, #0
 800962a:	da2b      	bge.n	8009684 <rint+0x78>
 800962c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009630:	4302      	orrs	r2, r0
 8009632:	d023      	beq.n	800967c <rint+0x70>
 8009634:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009638:	4302      	orrs	r2, r0
 800963a:	4254      	negs	r4, r2
 800963c:	4314      	orrs	r4, r2
 800963e:	0c4b      	lsrs	r3, r1, #17
 8009640:	0b24      	lsrs	r4, r4, #12
 8009642:	045b      	lsls	r3, r3, #17
 8009644:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009648:	ea44 0103 	orr.w	r1, r4, r3
 800964c:	4b32      	ldr	r3, [pc, #200]	; (8009718 <rint+0x10c>)
 800964e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009652:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	4630      	mov	r0, r6
 800965c:	4639      	mov	r1, r7
 800965e:	f7f6 fe15 	bl	800028c <__adddf3>
 8009662:	e9cd 0100 	strd	r0, r1, [sp]
 8009666:	463b      	mov	r3, r7
 8009668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800966c:	4632      	mov	r2, r6
 800966e:	f7f6 fe0b 	bl	8000288 <__aeabi_dsub>
 8009672:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009676:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800967a:	4639      	mov	r1, r7
 800967c:	ec41 0b10 	vmov	d0, r0, r1
 8009680:	b003      	add	sp, #12
 8009682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009684:	4a25      	ldr	r2, [pc, #148]	; (800971c <rint+0x110>)
 8009686:	4132      	asrs	r2, r6
 8009688:	ea01 0702 	and.w	r7, r1, r2
 800968c:	4307      	orrs	r7, r0
 800968e:	d0f5      	beq.n	800967c <rint+0x70>
 8009690:	0851      	lsrs	r1, r2, #1
 8009692:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8009696:	4314      	orrs	r4, r2
 8009698:	d00c      	beq.n	80096b4 <rint+0xa8>
 800969a:	ea23 0201 	bic.w	r2, r3, r1
 800969e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80096a2:	2e13      	cmp	r6, #19
 80096a4:	fa43 f606 	asr.w	r6, r3, r6
 80096a8:	bf0c      	ite	eq
 80096aa:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80096ae:	2400      	movne	r4, #0
 80096b0:	ea42 0306 	orr.w	r3, r2, r6
 80096b4:	4918      	ldr	r1, [pc, #96]	; (8009718 <rint+0x10c>)
 80096b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80096ba:	4622      	mov	r2, r4
 80096bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096c0:	4620      	mov	r0, r4
 80096c2:	4629      	mov	r1, r5
 80096c4:	f7f6 fde2 	bl	800028c <__adddf3>
 80096c8:	e9cd 0100 	strd	r0, r1, [sp]
 80096cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096d0:	4622      	mov	r2, r4
 80096d2:	462b      	mov	r3, r5
 80096d4:	f7f6 fdd8 	bl	8000288 <__aeabi_dsub>
 80096d8:	e7d0      	b.n	800967c <rint+0x70>
 80096da:	2e33      	cmp	r6, #51	; 0x33
 80096dc:	dd07      	ble.n	80096ee <rint+0xe2>
 80096de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80096e2:	d1cb      	bne.n	800967c <rint+0x70>
 80096e4:	ee10 2a10 	vmov	r2, s0
 80096e8:	f7f6 fdd0 	bl	800028c <__adddf3>
 80096ec:	e7c6      	b.n	800967c <rint+0x70>
 80096ee:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80096f2:	f04f 36ff 	mov.w	r6, #4294967295
 80096f6:	40d6      	lsrs	r6, r2
 80096f8:	4230      	tst	r0, r6
 80096fa:	d0bf      	beq.n	800967c <rint+0x70>
 80096fc:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009700:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009704:	bf1f      	itttt	ne
 8009706:	ea24 0101 	bicne.w	r1, r4, r1
 800970a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800970e:	fa44 f202 	asrne.w	r2, r4, r2
 8009712:	ea41 0402 	orrne.w	r4, r1, r2
 8009716:	e7cd      	b.n	80096b4 <rint+0xa8>
 8009718:	08009dd8 	.word	0x08009dd8
 800971c:	000fffff 	.word	0x000fffff

08009720 <scalbn>:
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	ec55 4b10 	vmov	r4, r5, d0
 8009726:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800972a:	4606      	mov	r6, r0
 800972c:	462b      	mov	r3, r5
 800972e:	b99a      	cbnz	r2, 8009758 <scalbn+0x38>
 8009730:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009734:	4323      	orrs	r3, r4
 8009736:	d036      	beq.n	80097a6 <scalbn+0x86>
 8009738:	4b39      	ldr	r3, [pc, #228]	; (8009820 <scalbn+0x100>)
 800973a:	4629      	mov	r1, r5
 800973c:	ee10 0a10 	vmov	r0, s0
 8009740:	2200      	movs	r2, #0
 8009742:	f7f6 ff59 	bl	80005f8 <__aeabi_dmul>
 8009746:	4b37      	ldr	r3, [pc, #220]	; (8009824 <scalbn+0x104>)
 8009748:	429e      	cmp	r6, r3
 800974a:	4604      	mov	r4, r0
 800974c:	460d      	mov	r5, r1
 800974e:	da10      	bge.n	8009772 <scalbn+0x52>
 8009750:	a32b      	add	r3, pc, #172	; (adr r3, 8009800 <scalbn+0xe0>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	e03a      	b.n	80097ce <scalbn+0xae>
 8009758:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800975c:	428a      	cmp	r2, r1
 800975e:	d10c      	bne.n	800977a <scalbn+0x5a>
 8009760:	ee10 2a10 	vmov	r2, s0
 8009764:	4620      	mov	r0, r4
 8009766:	4629      	mov	r1, r5
 8009768:	f7f6 fd90 	bl	800028c <__adddf3>
 800976c:	4604      	mov	r4, r0
 800976e:	460d      	mov	r5, r1
 8009770:	e019      	b.n	80097a6 <scalbn+0x86>
 8009772:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009776:	460b      	mov	r3, r1
 8009778:	3a36      	subs	r2, #54	; 0x36
 800977a:	4432      	add	r2, r6
 800977c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009780:	428a      	cmp	r2, r1
 8009782:	dd08      	ble.n	8009796 <scalbn+0x76>
 8009784:	2d00      	cmp	r5, #0
 8009786:	a120      	add	r1, pc, #128	; (adr r1, 8009808 <scalbn+0xe8>)
 8009788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800978c:	da1c      	bge.n	80097c8 <scalbn+0xa8>
 800978e:	a120      	add	r1, pc, #128	; (adr r1, 8009810 <scalbn+0xf0>)
 8009790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009794:	e018      	b.n	80097c8 <scalbn+0xa8>
 8009796:	2a00      	cmp	r2, #0
 8009798:	dd08      	ble.n	80097ac <scalbn+0x8c>
 800979a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800979e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80097a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80097a6:	ec45 4b10 	vmov	d0, r4, r5
 80097aa:	bd70      	pop	{r4, r5, r6, pc}
 80097ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80097b0:	da19      	bge.n	80097e6 <scalbn+0xc6>
 80097b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80097b6:	429e      	cmp	r6, r3
 80097b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80097bc:	dd0a      	ble.n	80097d4 <scalbn+0xb4>
 80097be:	a112      	add	r1, pc, #72	; (adr r1, 8009808 <scalbn+0xe8>)
 80097c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1e2      	bne.n	800978e <scalbn+0x6e>
 80097c8:	a30f      	add	r3, pc, #60	; (adr r3, 8009808 <scalbn+0xe8>)
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	f7f6 ff13 	bl	80005f8 <__aeabi_dmul>
 80097d2:	e7cb      	b.n	800976c <scalbn+0x4c>
 80097d4:	a10a      	add	r1, pc, #40	; (adr r1, 8009800 <scalbn+0xe0>)
 80097d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0b8      	beq.n	8009750 <scalbn+0x30>
 80097de:	a10e      	add	r1, pc, #56	; (adr r1, 8009818 <scalbn+0xf8>)
 80097e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097e4:	e7b4      	b.n	8009750 <scalbn+0x30>
 80097e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80097ea:	3236      	adds	r2, #54	; 0x36
 80097ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80097f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80097f4:	4620      	mov	r0, r4
 80097f6:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <scalbn+0x108>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	e7e8      	b.n	80097ce <scalbn+0xae>
 80097fc:	f3af 8000 	nop.w
 8009800:	c2f8f359 	.word	0xc2f8f359
 8009804:	01a56e1f 	.word	0x01a56e1f
 8009808:	8800759c 	.word	0x8800759c
 800980c:	7e37e43c 	.word	0x7e37e43c
 8009810:	8800759c 	.word	0x8800759c
 8009814:	fe37e43c 	.word	0xfe37e43c
 8009818:	c2f8f359 	.word	0xc2f8f359
 800981c:	81a56e1f 	.word	0x81a56e1f
 8009820:	43500000 	.word	0x43500000
 8009824:	ffff3cb0 	.word	0xffff3cb0
 8009828:	3c900000 	.word	0x3c900000

0800982c <_init>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	bf00      	nop
 8009830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009832:	bc08      	pop	{r3}
 8009834:	469e      	mov	lr, r3
 8009836:	4770      	bx	lr

08009838 <_fini>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	bf00      	nop
 800983c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983e:	bc08      	pop	{r3}
 8009840:	469e      	mov	lr, r3
 8009842:	4770      	bx	lr
