
VRS-zadanie-cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002644  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080027cc  080027cc  000127cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002830  08002830  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002830  08002830  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002830  08002830  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000048  20000018  20000018  00020018  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000060  20000060  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000842b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a2d  00000000  00000000  0002846f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00029ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000680  00000000  00000000  0002a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e33  00000000  00000000  0002ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000632e  00000000  00000000  00041a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007988b  00000000  00000000  00047dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c1654  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d14  00000000  00000000  000c16a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027b4 	.word	0x080027b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080027b4 	.word	0x080027b4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	683a      	ldr	r2, [r7, #0]
 80001e6:	619a      	str	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr

080001f4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	683a      	ldr	r2, [r7, #0]
 8000202:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <resetSegments>:
void setDigit(uint8_t pos);


/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021c:	f7ff ffdc 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000228:	f7ff ffd6 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 800022c:	2102      	movs	r1, #2
 800022e:	480e      	ldr	r0, [pc, #56]	; (8000268 <resetSegments+0x58>)
 8000230:	f7ff ffd2 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000234:	2120      	movs	r1, #32
 8000236:	480c      	ldr	r0, [pc, #48]	; (8000268 <resetSegments+0x58>)
 8000238:	f7ff ffce 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 800023c:	2110      	movs	r1, #16
 800023e:	480a      	ldr	r0, [pc, #40]	; (8000268 <resetSegments+0x58>)
 8000240:	f7ff ffca 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000244:	2101      	movs	r1, #1
 8000246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024a:	f7ff ffc5 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800024e:	2102      	movs	r1, #2
 8000250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000254:	f7ff ffc0 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000258:	2108      	movs	r1, #8
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f7ff ffbb 	bl	80001d8 <LL_GPIO_SetOutputPin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	48000400 	.word	0x48000400

0800026c <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000278:	f7ff ffbc 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 800027c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000284:	f7ff ffb6 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000288:	2102      	movs	r1, #2
 800028a:	480e      	ldr	r0, [pc, #56]	; (80002c4 <setSegments+0x58>)
 800028c:	f7ff ffb2 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000290:	2120      	movs	r1, #32
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <setSegments+0x58>)
 8000294:	f7ff ffae 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000298:	2110      	movs	r1, #16
 800029a:	480a      	ldr	r0, [pc, #40]	; (80002c4 <setSegments+0x58>)
 800029c:	f7ff ffaa 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 80002a0:	2101      	movs	r1, #1
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f7ff ffa5 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 80002aa:	2102      	movs	r1, #2
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f7ff ffa0 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80002b4:	2108      	movs	r1, #8
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ba:	f7ff ff9b 	bl	80001f4 <LL_GPIO_ResetOutputPin>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	48000400 	.word	0x48000400

080002c8 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80002cc:	2104      	movs	r1, #4
 80002ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d2:	f7ff ff8f 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80002d6:	2101      	movs	r1, #1
 80002d8:	480a      	ldr	r0, [pc, #40]	; (8000304 <resetDigits+0x3c>)
 80002da:	f7ff ff8b 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80002de:	2110      	movs	r1, #16
 80002e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e4:	f7ff ff86 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 80002e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	f7ff ff80 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80002f4:	2180      	movs	r1, #128	; 0x80
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fa:	f7ff ff7b 	bl	80001f4 <LL_GPIO_ResetOutputPin>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	48000400 	.word	0x48000400

08000308 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 800030c:	2101      	movs	r1, #1
 800030e:	480d      	ldr	r0, [pc, #52]	; (8000344 <setDigits+0x3c>)
 8000310:	f7ff ff62 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000314:	2110      	movs	r1, #16
 8000316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031a:	f7ff ff5d 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 800031e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000326:	f7ff ff57 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 800032a:	2104      	movs	r1, #4
 800032c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000330:	f7ff ff52 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033a:	f7ff ff4d 	bl	80001d8 <LL_GPIO_SetOutputPin>
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	48000400 	.word	0x48000400

08000348 <set_sign>:

void set_sign(char sign){
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<6))
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	3b30      	subs	r3, #48	; 0x30
 8000356:	4a2e      	ldr	r2, [pc, #184]	; (8000410 <set_sign+0xc8>)
 8000358:	5cd3      	ldrb	r3, [r2, r3]
 800035a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800035e:	2b00      	cmp	r3, #0
 8000360:	d004      	beq.n	800036c <set_sign+0x24>
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000362:	2102      	movs	r1, #2
 8000364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000368:	f7ff ff44 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<5))
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	3b30      	subs	r3, #48	; 0x30
 8000370:	4a27      	ldr	r2, [pc, #156]	; (8000410 <set_sign+0xc8>)
 8000372:	5cd3      	ldrb	r3, [r2, r3]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	2b00      	cmp	r3, #0
 800037a:	d004      	beq.n	8000386 <set_sign+0x3e>
		LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800037c:	2101      	movs	r1, #1
 800037e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000382:	f7ff ff37 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<4))
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	3b30      	subs	r3, #48	; 0x30
 800038a:	4a21      	ldr	r2, [pc, #132]	; (8000410 <set_sign+0xc8>)
 800038c:	5cd3      	ldrb	r3, [r2, r3]
 800038e:	f003 0310 	and.w	r3, r3, #16
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <set_sign+0x5a>
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039e:	f7ff ff29 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<3))
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	3b30      	subs	r3, #48	; 0x30
 80003a6:	4a1a      	ldr	r2, [pc, #104]	; (8000410 <set_sign+0xc8>)
 80003a8:	5cd3      	ldrb	r3, [r2, r3]
 80003aa:	f003 0308 	and.w	r3, r3, #8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d003      	beq.n	80003ba <set_sign+0x72>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80003b2:	2120      	movs	r1, #32
 80003b4:	4817      	ldr	r0, [pc, #92]	; (8000414 <set_sign+0xcc>)
 80003b6:	f7ff ff1d 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<2))
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	3b30      	subs	r3, #48	; 0x30
 80003be:	4a14      	ldr	r2, [pc, #80]	; (8000410 <set_sign+0xc8>)
 80003c0:	5cd3      	ldrb	r3, [r2, r3]
 80003c2:	f003 0304 	and.w	r3, r3, #4
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d005      	beq.n	80003d6 <set_sign+0x8e>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80003ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d2:	f7ff ff0f 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<1))
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	3b30      	subs	r3, #48	; 0x30
 80003da:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <set_sign+0xc8>)
 80003dc:	5cd3      	ldrb	r3, [r2, r3]
 80003de:	f003 0302 	and.w	r3, r3, #2
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d004      	beq.n	80003f0 <set_sign+0xa8>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80003e6:	2108      	movs	r1, #8
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ec:	f7ff ff02 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<0))
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	3b30      	subs	r3, #48	; 0x30
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <set_sign+0xc8>)
 80003f6:	5cd3      	ldrb	r3, [r2, r3]
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d003      	beq.n	8000408 <set_sign+0xc0>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000400:	2110      	movs	r1, #16
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <set_sign+0xcc>)
 8000404:	f7ff fef6 	bl	80001f4 <LL_GPIO_ResetOutputPin>

}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	080027cc 	.word	0x080027cc
 8000414:	48000400 	.word	0x48000400

08000418 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b03      	cmp	r3, #3
 8000426:	d823      	bhi.n	8000470 <setDigit+0x58>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <setDigit+0x18>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000441 	.word	0x08000441
 8000434:	0800044d 	.word	0x0800044d
 8000438:	0800045b 	.word	0x0800045b
 800043c:	08000467 	.word	0x08000467
	{
	case 0:
		DIGIT_4_ON;
 8000440:	2104      	movs	r1, #4
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f7ff fec7 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 800044a:	e011      	b.n	8000470 <setDigit+0x58>
	case 1:
		DIGIT_3_ON;
 800044c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f7ff fec0 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 8000458:	e00a      	b.n	8000470 <setDigit+0x58>
	case 2:
		DIGIT_2_ON;
 800045a:	2110      	movs	r1, #16
 800045c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000460:	f7ff feba 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 8000464:	e004      	b.n	8000470 <setDigit+0x58>
	case 3:
		DIGIT_1_ON;
 8000466:	2101      	movs	r1, #1
 8000468:	4803      	ldr	r0, [pc, #12]	; (8000478 <setDigit+0x60>)
 800046a:	f7ff feb5 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 800046e:	bf00      	nop
	}
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	48000400 	.word	0x48000400

0800047c <display_sign>:
void display_sign(char sign_1,char sign_2, char sign_3,char sign_4)
{
 800047c:	b490      	push	{r4, r7}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4604      	mov	r4, r0
 8000484:	4608      	mov	r0, r1
 8000486:	4611      	mov	r1, r2
 8000488:	461a      	mov	r2, r3
 800048a:	4623      	mov	r3, r4
 800048c:	71fb      	strb	r3, [r7, #7]
 800048e:	4603      	mov	r3, r0
 8000490:	71bb      	strb	r3, [r7, #6]
 8000492:	460b      	mov	r3, r1
 8000494:	717b      	strb	r3, [r7, #5]
 8000496:	4613      	mov	r3, r2
 8000498:	713b      	strb	r3, [r7, #4]
	Display_sign[0] = sign_1;
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <display_sign+0x40>)
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	7013      	strb	r3, [r2, #0]
	Display_sign[1] = sign_2;
 80004a0:	4a06      	ldr	r2, [pc, #24]	; (80004bc <display_sign+0x40>)
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	7053      	strb	r3, [r2, #1]
	Display_sign[2] = sign_3;
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <display_sign+0x40>)
 80004a8:	797b      	ldrb	r3, [r7, #5]
 80004aa:	7093      	strb	r3, [r2, #2]
	Display_sign[3] = sign_4;
 80004ac:	4a03      	ldr	r2, [pc, #12]	; (80004bc <display_sign+0x40>)
 80004ae:	793b      	ldrb	r3, [r7, #4]
 80004b0:	70d3      	strb	r3, [r2, #3]
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc90      	pop	{r4, r7}
 80004ba:	4770      	bx	lr
 80004bc:	2000004c 	.word	0x2000004c

080004c0 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	e026      	b.n	800051a <updateDisplay+0x5a>
	{

		setDigit(i);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ffa2 	bl	8000418 <setDigit>
		set_sign(Display_sign[3-i]);
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f1c3 0303 	rsb	r3, r3, #3
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <updateDisplay+0x6c>)
 80004dc:	5cd3      	ldrb	r3, [r2, r3]
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff32 	bl	8000348 <set_sign>

		disp_time_saved = disp_time;
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <updateDisplay+0x70>)
 80004e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004ea:	4912      	ldr	r1, [pc, #72]	; (8000534 <updateDisplay+0x74>)
 80004ec:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 80004f0:	bf00      	nop
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <updateDisplay+0x74>)
 80004f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004f8:	1c94      	adds	r4, r2, #2
 80004fa:	f143 0500 	adc.w	r5, r3, #0
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <updateDisplay+0x70>)
 8000500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000504:	42ab      	cmp	r3, r5
 8000506:	bf08      	it	eq
 8000508:	42a2      	cmpeq	r2, r4
 800050a:	d3f2      	bcc.n	80004f2 <updateDisplay+0x32>

		resetDigits();
 800050c:	f7ff fedc 	bl	80002c8 <resetDigits>
		resetSegments();
 8000510:	f7ff fe7e 	bl	8000210 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	3301      	adds	r3, #1
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d9d5      	bls.n	80004cc <updateDisplay+0xc>
	}
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bdb0      	pop	{r4, r5, r7, pc}
 800052a:	bf00      	nop
 800052c:	2000004c 	.word	0x2000004c
 8000530:	20000038 	.word	0x20000038
 8000534:	20000040 	.word	0x20000040

08000538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <__NVIC_GetPriorityGrouping+0x18>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	f003 0307 	and.w	r3, r3, #7
}
 8000546:	4618      	mov	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	2b00      	cmp	r3, #0
 8000564:	db0b      	blt.n	800057e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	f003 021f 	and.w	r2, r3, #31
 800056c:	4907      	ldr	r1, [pc, #28]	; (800058c <__NVIC_EnableIRQ+0x38>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	095b      	lsrs	r3, r3, #5
 8000574:	2001      	movs	r0, #1
 8000576:	fa00 f202 	lsl.w	r2, r0, r2
 800057a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000e100 	.word	0xe000e100

08000590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	db0a      	blt.n	80005ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	490c      	ldr	r1, [pc, #48]	; (80005dc <__NVIC_SetPriority+0x4c>)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	0112      	lsls	r2, r2, #4
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	440b      	add	r3, r1
 80005b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005b8:	e00a      	b.n	80005d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4908      	ldr	r1, [pc, #32]	; (80005e0 <__NVIC_SetPriority+0x50>)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	f003 030f 	and.w	r3, r3, #15
 80005c6:	3b04      	subs	r3, #4
 80005c8:	0112      	lsls	r2, r2, #4
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	440b      	add	r3, r1
 80005ce:	761a      	strb	r2, [r3, #24]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000e100 	.word	0xe000e100
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	f1c3 0307 	rsb	r3, r3, #7
 80005fe:	2b04      	cmp	r3, #4
 8000600:	bf28      	it	cs
 8000602:	2304      	movcs	r3, #4
 8000604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	3304      	adds	r3, #4
 800060a:	2b06      	cmp	r3, #6
 800060c:	d902      	bls.n	8000614 <NVIC_EncodePriority+0x30>
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	3b03      	subs	r3, #3
 8000612:	e000      	b.n	8000616 <NVIC_EncodePriority+0x32>
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	f04f 32ff 	mov.w	r2, #4294967295
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	43da      	mvns	r2, r3
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	401a      	ands	r2, r3
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062c:	f04f 31ff 	mov.w	r1, #4294967295
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	43d9      	mvns	r1, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	4313      	orrs	r3, r2
         );
}
 800063e:	4618      	mov	r0, r3
 8000640:	3724      	adds	r7, #36	; 0x24
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	4907      	ldr	r1, [pc, #28]	; (8000678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4313      	orrs	r3, r2
 800065e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4013      	ands	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40021000 	.word	0x40021000

0800067c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <LL_SYSCFG_SetEXTISource+0x58>)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	3302      	adds	r3, #2
 800068e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	0c1b      	lsrs	r3, r3, #16
 8000696:	43db      	mvns	r3, r3
 8000698:	ea02 0103 	and.w	r1, r2, r3
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	0c1b      	lsrs	r3, r3, #16
 80006a0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	fa93 f3a3 	rbit	r3, r3
 80006a8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	fab3 f383 	clz	r3, r3
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	fa03 f202 	lsl.w	r2, r3, r2
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <LL_SYSCFG_SetEXTISource+0x58>)
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	430a      	orrs	r2, r1
 80006c2:	3302      	adds	r3, #2
 80006c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40010000 	.word	0x40010000

080006d8 <LL_GPIO_SetPinMode>:
{
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa93 f3a3 	rbit	r3, r3
 80006f2:	613b      	str	r3, [r7, #16]
  return result;
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	fab3 f383 	clz	r3, r3
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	2103      	movs	r1, #3
 8000700:	fa01 f303 	lsl.w	r3, r1, r3
 8000704:	43db      	mvns	r3, r3
 8000706:	401a      	ands	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	fa93 f3a3 	rbit	r3, r3
 8000712:	61bb      	str	r3, [r7, #24]
  return result;
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fab3 f383 	clz	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	431a      	orrs	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_GPIO_SetPinPull>:
{
 8000736:	b480      	push	{r7}
 8000738:	b089      	sub	sp, #36	; 0x24
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68da      	ldr	r2, [r3, #12]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	fa93 f3a3 	rbit	r3, r3
 8000750:	613b      	str	r3, [r7, #16]
  return result;
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	fab3 f383 	clz	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	2103      	movs	r1, #3
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	43db      	mvns	r3, r3
 8000764:	401a      	ands	r2, r3
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	fa93 f3a3 	rbit	r3, r3
 8000770:	61bb      	str	r3, [r7, #24]
  return result;
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	fab3 f383 	clz	r3, r3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	431a      	orrs	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	60da      	str	r2, [r3, #12]
}
 8000788:	bf00      	nop
 800078a:	3724      	adds	r7, #36	; 0x24
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <LL_GPIO_ResetOutputPin>:
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80007d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007d6:	f7ff ff39 	bl	800064c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80007da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007de:	f7ff ff35 	bl	800064c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80007e2:	f641 119f 	movw	r1, #6559	; 0x199f
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f7ff ffd3 	bl	8000794 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 80007ee:	2133      	movs	r1, #51	; 0x33
 80007f0:	482b      	ldr	r0, [pc, #172]	; (80008a0 <MX_GPIO_Init+0xf0>)
 80007f2:	f7ff ffcf 	bl	8000794 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80007f6:	f641 139f 	movw	r3, #6559	; 0x199f
 80007fa:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007fc:	2301      	movs	r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f001 f9fa 	bl	8001c0c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800081c:	2301      	movs	r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4619      	mov	r1, r3
 8000830:	481b      	ldr	r0, [pc, #108]	; (80008a0 <MX_GPIO_Init+0xf0>)
 8000832:	f001 f9eb 	bl	8001c0c <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8000836:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff ff1e 	bl	800067c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 8000840:	2201      	movs	r2, #1
 8000842:	2108      	movs	r1, #8
 8000844:	4816      	ldr	r0, [pc, #88]	; (80008a0 <MX_GPIO_Init+0xf0>)
 8000846:	f7ff ff76 	bl	8000736 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4814      	ldr	r0, [pc, #80]	; (80008a0 <MX_GPIO_Init+0xf0>)
 8000850:	f7ff ff42 	bl	80006d8 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000854:	2308      	movs	r3, #8
 8000856:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800085c:	2301      	movs	r3, #1
 800085e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000862:	2300      	movs	r3, #0
 8000864:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000868:	2302      	movs	r3, #2
 800086a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4618      	mov	r0, r3
 8000874:	f000 ffd2 	bl	800181c <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000878:	f7ff fe5e 	bl	8000538 <__NVIC_GetPriorityGrouping>
 800087c:	4603      	mov	r3, r0
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff feae 	bl	80005e4 <NVIC_EncodePriority>
 8000888:	4603      	mov	r3, r0
 800088a:	4619      	mov	r1, r3
 800088c:	2009      	movs	r0, #9
 800088e:	f7ff fe7f 	bl	8000590 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8000892:	2009      	movs	r0, #9
 8000894:	f7ff fe5e 	bl	8000554 <__NVIC_EnableIRQ>

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	48000400 	.word	0x48000400

080008a4 <__NVIC_GetPriorityGrouping>:
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <__NVIC_GetPriorityGrouping+0x18>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	f003 0307 	and.w	r3, r3, #7
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_EnableIRQ>:
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	db0b      	blt.n	80008ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f003 021f 	and.w	r2, r3, #31
 80008d8:	4907      	ldr	r1, [pc, #28]	; (80008f8 <__NVIC_EnableIRQ+0x38>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	2001      	movs	r0, #1
 80008e2:	fa00 f202 	lsl.w	r2, r0, r2
 80008e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000e100 	.word	0xe000e100

080008fc <__NVIC_SetPriority>:
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db0a      	blt.n	8000926 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <__NVIC_SetPriority+0x4c>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	440b      	add	r3, r1
 8000920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000924:	e00a      	b.n	800093c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4908      	ldr	r1, [pc, #32]	; (800094c <__NVIC_SetPriority+0x50>)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	3b04      	subs	r3, #4
 8000934:	0112      	lsls	r2, r2, #4
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	440b      	add	r3, r1
 800093a:	761a      	strb	r2, [r3, #24]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <NVIC_EncodePriority>:
{
 8000950:	b480      	push	{r7}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f1c3 0307 	rsb	r3, r3, #7
 800096a:	2b04      	cmp	r3, #4
 800096c:	bf28      	it	cs
 800096e:	2304      	movcs	r3, #4
 8000970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3304      	adds	r3, #4
 8000976:	2b06      	cmp	r3, #6
 8000978:	d902      	bls.n	8000980 <NVIC_EncodePriority+0x30>
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3b03      	subs	r3, #3
 800097e:	e000      	b.n	8000982 <NVIC_EncodePriority+0x32>
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	f04f 32ff 	mov.w	r2, #4294967295
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43da      	mvns	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	401a      	ands	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000998:	f04f 31ff 	mov.w	r1, #4294967295
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	43d9      	mvns	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	4313      	orrs	r3, r2
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3724      	adds	r7, #36	; 0x24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000a0a:	f023 0306 	bic.w	r3, r3, #6
 8000a0e:	68b9      	ldr	r1, [r7, #8]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	430a      	orrs	r2, r1
 8000a14:	431a      	orrs	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	60da      	str	r2, [r3, #12]
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60da      	str	r2, [r3, #12]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	605a      	str	r2, [r3, #4]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <LL_AHB1_GRP1_EnableClock>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a72:	695a      	ldr	r2, [r3, #20]
 8000a74:	4907      	ldr	r1, [pc, #28]	; (8000a94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a7e:	695a      	ldr	r2, [r3, #20]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4013      	ands	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a86:	68fb      	ldr	r3, [r7, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40021000 	.word	0x40021000

08000a98 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aa2:	69da      	ldr	r2, [r3, #28]
 8000aa4:	4907      	ldr	r1, [pc, #28]	; (8000ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aae:	69da      	ldr	r2, [r3, #28]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	; 0x38
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000af2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000af6:	f7ff ffb7 	bl	8000a68 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000afa:	23c0      	movs	r3, #192	; 0xc0
 8000afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000afe:	2302      	movs	r3, #2
 8000b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b06:	2301      	movs	r3, #1
 8000b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4820      	ldr	r0, [pc, #128]	; (8000b98 <MX_I2C1_Init+0xd0>)
 8000b18:	f001 f878 	bl	8001c0c <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000b1c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000b20:	f7ff ffba 	bl	8000a98 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b24:	f7ff febe 	bl	80008a4 <__NVIC_GetPriorityGrouping>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff0e 	bl	8000950 <NVIC_EncodePriority>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4619      	mov	r1, r3
 8000b38:	201f      	movs	r0, #31
 8000b3a:	f7ff fedf 	bl	80008fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b3e:	201f      	movs	r0, #31
 8000b40:	f7ff febe 	bl	80008c0 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000b44:	4815      	ldr	r0, [pc, #84]	; (8000b9c <MX_I2C1_Init+0xd4>)
 8000b46:	f7ff ff7e 	bl	8000a46 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000b4a:	4814      	ldr	r0, [pc, #80]	; (8000b9c <MX_I2C1_Init+0xd4>)
 8000b4c:	f7ff ff6b 	bl	8000a26 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000b50:	4812      	ldr	r0, [pc, #72]	; (8000b9c <MX_I2C1_Init+0xd4>)
 8000b52:	f7ff ff40 	bl	80009d6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000b56:	4811      	ldr	r0, [pc, #68]	; (8000b9c <MX_I2C1_Init+0xd4>)
 8000b58:	f7ff ff2d 	bl	80009b6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C1_Init+0xd8>)
 8000b62:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MX_I2C1_Init+0xd4>)
 8000b80:	f001 f957 	bl	8001e32 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_I2C1_Init+0xd4>)
 8000b8a:	f7ff ff34 	bl	80009f6 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	3738      	adds	r7, #56	; 0x38
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	2000090e 	.word	0x2000090e

08000ba4 <__NVIC_SetPriorityGrouping>:
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <LL_RCC_HSI_Enable+0x1c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <LL_RCC_HSI_Enable+0x1c>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <LL_RCC_HSI_IsReady+0x20>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	bf0c      	ite	eq
 8000c1c:	2301      	moveq	r3, #1
 8000c1e:	2300      	movne	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	40021000 	.word	0x40021000

08000c30 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4904      	ldr	r1, [pc, #16]	; (8000c58 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000

08000c5c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <LL_RCC_SetSysClkSource+0x24>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f023 0203 	bic.w	r2, r3, #3
 8000c6c:	4904      	ldr	r1, [pc, #16]	; (8000c80 <LL_RCC_SetSysClkSource+0x24>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	604b      	str	r3, [r1, #4]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000

08000c84 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <LL_RCC_GetSysClkSource+0x18>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 030c 	and.w	r3, r3, #12
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cb0:	4904      	ldr	r1, [pc, #16]	; (8000cc4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	604b      	str	r3, [r1, #4]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <LL_RCC_SetAPB1Prescaler+0x24>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000cd8:	4904      	ldr	r1, [pc, #16]	; (8000cec <LL_RCC_SetAPB1Prescaler+0x24>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	604b      	str	r3, [r1, #4]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40021000 	.word	0x40021000

08000cf0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d00:	4904      	ldr	r1, [pc, #16]	; (8000d14 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	604b      	str	r3, [r1, #4]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	40021000 	.word	0x40021000

08000d18 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <LL_RCC_SetI2CClockSource+0x2c>)
 8000d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	0e1b      	lsrs	r3, r3, #24
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d32:	4904      	ldr	r1, [pc, #16]	; (8000d44 <LL_RCC_SetI2CClockSource+0x2c>)
 8000d34:	4313      	orrs	r3, r2
 8000d36:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	40021000 	.word	0x40021000

08000d48 <LL_APB1_GRP1_EnableClock>:
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d52:	69da      	ldr	r2, [r3, #28]
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d5e:	69da      	ldr	r2, [r3, #28]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4013      	ands	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000

08000d78 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d82:	699a      	ldr	r2, [r3, #24]
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d8e:	699a      	ldr	r2, [r3, #24]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4013      	ands	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40021000 	.word	0x40021000

08000da8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <LL_FLASH_SetLatency+0x24>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f023 0207 	bic.w	r2, r3, #7
 8000db8:	4904      	ldr	r1, [pc, #16]	; (8000dcc <LL_FLASH_SetLatency+0x24>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	600b      	str	r3, [r1, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <LL_FLASH_GetLatency+0x18>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40022000 	.word	0x40022000

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f7ff ffc0 	bl	8000d78 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000df8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000dfc:	f7ff ffa4 	bl	8000d48 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f7ff fecf 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
  EXTI->RTSR &= ~(EXTI_IMR_MR4);
  EXTI->FTSR |= EXTI_IMR_MR4;*/
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e06:	f000 f877 	bl	8000ef8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Systick_Init();
 8000e0a:	f000 fb39 	bl	8001480 <Systick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f7ff fccf 	bl	80007b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e12:	f7ff fe59 	bl	8000ac8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000e16:	f000 fb45 	bl	80014a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  setSegments();
 8000e1a:	f7ff fa27 	bl	800026c <setSegments>
  setDigits();
 8000e1e:	f7ff fa73 	bl	8000308 <setDigits>
  LL_mDelay(2000);
 8000e22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e26:	f001 fc63 	bl	80026f0 <LL_mDelay>
  resetDigits();
 8000e2a:	f7ff fa4d 	bl	80002c8 <resetDigits>
  resetSegments();
 8000e2e:	f7ff f9ef 	bl	8000210 <resetSegments>

  mode = 0;
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <main+0xf0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test = BUTTON_READ_VALUE;
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <main+0xf4>)
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	71fb      	strb	r3, [r7, #7]
	  if(disp_time > (saved_time + 500))
 8000e44:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <main+0xf8>)
 8000e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4a:	f512 74fa 	adds.w	r4, r2, #500	; 0x1f4
 8000e4e:	f143 0500 	adc.w	r5, r3, #0
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <main+0xfc>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	429d      	cmp	r5, r3
 8000e5a:	bf08      	it	eq
 8000e5c:	4294      	cmpeq	r4, r2
 8000e5e:	d2eb      	bcs.n	8000e38 <main+0x4c>
	  	  {

	  		  display_sign(display_text[act_index],display_text[act_index+1],display_text[act_index+2],display_text[act_index+3]);
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <main+0x100>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <main+0x104>)
 8000e66:	5cd0      	ldrb	r0, [r2, r3]
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <main+0x100>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a20      	ldr	r2, [pc, #128]	; (8000ef0 <main+0x104>)
 8000e70:	5cd1      	ldrb	r1, [r2, r3]
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <main+0x100>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3302      	adds	r3, #2
 8000e78:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <main+0x104>)
 8000e7a:	5cd2      	ldrb	r2, [r2, r3]
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <main+0x100>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3303      	adds	r3, #3
 8000e82:	4e1b      	ldr	r6, [pc, #108]	; (8000ef0 <main+0x104>)
 8000e84:	5cf3      	ldrb	r3, [r6, r3]
 8000e86:	f7ff faf9 	bl	800047c <display_sign>
	  	  	  saved_time = disp_time;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <main+0xfc>)
 8000e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e90:	4914      	ldr	r1, [pc, #80]	; (8000ee4 <main+0xf8>)
 8000e92:	e9c1 2300 	strd	r2, r3, [r1]

	  	  	  if(right){ //urcovanie smeru
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <main+0x108>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d005      	beq.n	8000eaa <main+0xbe>
	  	  		  act_index++;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <main+0x100>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <main+0x100>)
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	e004      	b.n	8000eb4 <main+0xc8>
	  	  	  } else {
	  	  		  act_index--;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <main+0x100>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <main+0x100>)
 8000eb2:	6013      	str	r3, [r2, #0]
	  	  	  }
	  	  	  if(act_index == strlen(display_text)-4) { //17 velkost zobrazovaneho textu, ak dojde nakoniec zmeni smer
 8000eb4:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <main+0x104>)
 8000eb6:	f7ff f987 	bl	80001c8 <strlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	3b04      	subs	r3, #4
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <main+0x100>)
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d102      	bne.n	8000ecc <main+0xe0>
	  	  		  right = 0;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <main+0x108>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
	  	  	  }
	  	  	  if (act_index == 0){
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <main+0x100>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1b1      	bne.n	8000e38 <main+0x4c>
	  	  		  right = 1;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <main+0x108>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]
	  test = BUTTON_READ_VALUE;
 8000eda:	e7ad      	b.n	8000e38 <main+0x4c>
 8000edc:	20000050 	.word	0x20000050
 8000ee0:	48000400 	.word	0x48000400
 8000ee4:	20000058 	.word	0x20000058
 8000ee8:	20000038 	.word	0x20000038
 8000eec:	20000048 	.word	0x20000048
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	2000000c 	.word	0x2000000c

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ff53 	bl	8000da8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000f02:	bf00      	nop
 8000f04:	f7ff ff64 	bl	8000dd0 <LL_FLASH_GetLatency>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1fa      	bne.n	8000f04 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000f0e:	f7ff fe6d 	bl	8000bec <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000f12:	bf00      	nop
 8000f14:	f7ff fe7a 	bl	8000c0c <LL_RCC_HSI_IsReady>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d1fa      	bne.n	8000f14 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000f1e:	2010      	movs	r0, #16
 8000f20:	f7ff fe86 	bl	8000c30 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff febb 	bl	8000ca0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff fecc 	bl	8000cc8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff fedd 	bl	8000cf0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff fe90 	bl	8000c5c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000f3c:	bf00      	nop
 8000f3e:	f7ff fea1 	bl	8000c84 <LL_RCC_GetSysClkSource>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1fa      	bne.n	8000f3e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <SystemClock_Config+0x68>)
 8000f4a:	f001 fbc3 	bl	80026d4 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <SystemClock_Config+0x68>)
 8000f50:	f001 fbf4 	bl	800273c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8000f54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f58:	f7ff fede 	bl	8000d18 <LL_RCC_SetI2CClockSource>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	007a1200 	.word	0x007a1200

08000f64 <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint16_t samples_window, uint16_t samples_required)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	4611      	mov	r1, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	70fb      	strb	r3, [r7, #3]
 8000f76:	460b      	mov	r3, r1
 8000f78:	70bb      	strb	r3, [r7, #2]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	803b      	strh	r3, [r7, #0]
	//type your code for "checkButtonState" implementation here:
	uint16_t detection = 0, timeout = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	81fb      	strh	r3, [r7, #14]
 8000f82:	2300      	movs	r3, #0
 8000f84:	81bb      	strh	r3, [r7, #12]
	while(timeout <= samples_window){ // cyklus bezi pokial nedocita potrebny pocet vzoriek a ak nahodou nastane detekcia funkcia sa ukonci a vrati 1
 8000f86:	e020      	b.n	8000fca <checkButtonState+0x66>
		uint8_t actual_value = BUTTON_READ_VALUE;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <checkButtonState+0x90>)
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	72fb      	strb	r3, [r7, #11]
		if((actual_value && edge) || (!(actual_value) && !(edge))) {
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <checkButtonState+0x3c>
 8000f9a:	78bb      	ldrb	r3, [r7, #2]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d105      	bne.n	8000fac <checkButtonState+0x48>
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <checkButtonState+0x50>
 8000fa6:	78bb      	ldrb	r3, [r7, #2]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d103      	bne.n	8000fb4 <checkButtonState+0x50>
			detection++;
 8000fac:	89fb      	ldrh	r3, [r7, #14]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	81fb      	strh	r3, [r7, #14]
 8000fb2:	e001      	b.n	8000fb8 <checkButtonState+0x54>
		}
		else{
			detection = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	81fb      	strh	r3, [r7, #14]
		}

		timeout++;
 8000fb8:	89bb      	ldrh	r3, [r7, #12]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	81bb      	strh	r3, [r7, #12]

		if(detection == samples_required){
 8000fbe:	89fa      	ldrh	r2, [r7, #14]
 8000fc0:	8b3b      	ldrh	r3, [r7, #24]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d101      	bne.n	8000fca <checkButtonState+0x66>
			return 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <checkButtonState+0x84>
	while(timeout <= samples_window){ // cyklus bezi pokial nedocita potrebny pocet vzoriek a ak nahodou nastane detekcia funkcia sa ukonci a vrati 1
 8000fca:	89ba      	ldrh	r2, [r7, #12]
 8000fcc:	883b      	ldrh	r3, [r7, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d9da      	bls.n	8000f88 <checkButtonState+0x24>
		}
	}
	if (((timeout > samples_window) && (detection != samples_required))){ //ak cyklus dobehol a nenapocitali sme dostatocny pocet vzoriek iducich po sebe vrati 0
 8000fd2:	89ba      	ldrh	r2, [r7, #12]
 8000fd4:	883b      	ldrh	r3, [r7, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d905      	bls.n	8000fe6 <checkButtonState+0x82>
 8000fda:	89fa      	ldrh	r2, [r7, #14]
 8000fdc:	8b3b      	ldrh	r3, [r7, #24]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d001      	beq.n	8000fe6 <checkButtonState+0x82>
		return 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <checkButtonState+0x84>
	}
	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001002:	695a      	ldr	r2, [r3, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4013      	ands	r3, r2
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	bf0c      	ite	eq
 800100e:	2301      	moveq	r3, #1
 8001010:	2300      	movne	r3, #0
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40010400 	.word	0x40010400

08001024 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6153      	str	r3, [r2, #20]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40010400 	.word	0x40010400

08001044 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f06f 0201 	mvn.w	r2, #1
 8001052:	611a      	str	r2, [r3, #16]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108a:	e7fe      	b.n	800108a <NMI_Handler+0x4>

0800108c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <HardFault_Handler+0x4>

08001092 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <BusFault_Handler+0x4>

0800109e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <UsageFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	disp_time++;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <SysTick_Handler+0x20>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	1c50      	adds	r0, r2, #1
 80010dc:	f143 0100 	adc.w	r1, r3, #0
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <SysTick_Handler+0x20>)
 80010e2:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	20000038 	.word	0x20000038

080010f4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 80010fa:	2008      	movs	r0, #8
 80010fc:	f7ff ff7c 	bl	8000ff8 <LL_EXTI_IsActiveFlag_0_31>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d01c      	beq.n	8001140 <EXTI3_IRQHandler+0x4c>
  {
  if(checkButtonState(GPIOB,
 8001106:	f44f 7361 	mov.w	r3, #900	; 0x384
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001110:	2200      	movs	r2, #0
 8001112:	2103      	movs	r1, #3
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <EXTI3_IRQHandler+0x54>)
 8001116:	f7ff ff25 	bl	8000f64 <checkButtonState>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00c      	beq.n	800113a <EXTI3_IRQHandler+0x46>
						3,
						0,
						1000,
						900))
	{
	  mode++;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <EXTI3_IRQHandler+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <EXTI3_IRQHandler+0x58>)
 800112a:	701a      	strb	r2, [r3, #0]
	  if(mode >= 4) {
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <EXTI3_IRQHandler+0x58>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b03      	cmp	r3, #3
 8001132:	d902      	bls.n	800113a <EXTI3_IRQHandler+0x46>
		  mode = 0;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <EXTI3_IRQHandler+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
	  }
	}
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 800113a:	2008      	movs	r0, #8
 800113c:	f7ff ff72 	bl	8001024 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	48000400 	.word	0x48000400
 800114c:	20000050 	.word	0x20000050

08001150 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8001154:	4806      	ldr	r0, [pc, #24]	; (8001170 <TIM3_IRQHandler+0x20>)
 8001156:	f7ff ff83 	bl	8001060 <LL_TIM_IsActiveFlag_UPDATE>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <TIM3_IRQHandler+0x14>
		{
			updateDisplay();
 8001160:	f7ff f9ae 	bl	80004c0 <updateDisplay>
		}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <TIM3_IRQHandler+0x20>)
 8001166:	f7ff ff6d 	bl	8001044 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40000400 	.word	0x40000400

08001174 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	; (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <LL_APB1_GRP1_EnableClock>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012d2:	69da      	ldr	r2, [r3, #28]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000

080012ec <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <LL_SYSTICK_EnableIT+0x1c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <LL_SYSTICK_EnableIT+0x1c>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <LL_TIM_EnableCounter>:
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f043 0201 	orr.w	r2, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_TIM_EnableARRPreload>:
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_TIM_OC_DisableFast>:
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d028      	beq.n	80013ae <LL_TIM_OC_DisableFast+0x62>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2b04      	cmp	r3, #4
 8001360:	d023      	beq.n	80013aa <LL_TIM_OC_DisableFast+0x5e>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b10      	cmp	r3, #16
 8001366:	d01e      	beq.n	80013a6 <LL_TIM_OC_DisableFast+0x5a>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b40      	cmp	r3, #64	; 0x40
 800136c:	d019      	beq.n	80013a2 <LL_TIM_OC_DisableFast+0x56>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001374:	d013      	beq.n	800139e <LL_TIM_OC_DisableFast+0x52>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137c:	d00d      	beq.n	800139a <LL_TIM_OC_DisableFast+0x4e>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001384:	d007      	beq.n	8001396 <LL_TIM_OC_DisableFast+0x4a>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138c:	d101      	bne.n	8001392 <LL_TIM_OC_DisableFast+0x46>
 800138e:	2307      	movs	r3, #7
 8001390:	e00e      	b.n	80013b0 <LL_TIM_OC_DisableFast+0x64>
 8001392:	2308      	movs	r3, #8
 8001394:	e00c      	b.n	80013b0 <LL_TIM_OC_DisableFast+0x64>
 8001396:	2306      	movs	r3, #6
 8001398:	e00a      	b.n	80013b0 <LL_TIM_OC_DisableFast+0x64>
 800139a:	2305      	movs	r3, #5
 800139c:	e008      	b.n	80013b0 <LL_TIM_OC_DisableFast+0x64>
 800139e:	2304      	movs	r3, #4
 80013a0:	e006      	b.n	80013b0 <LL_TIM_OC_DisableFast+0x64>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e004      	b.n	80013b0 <LL_TIM_OC_DisableFast+0x64>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <LL_TIM_OC_DisableFast+0x64>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <LL_TIM_OC_DisableFast+0x64>
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3318      	adds	r3, #24
 80013b6:	4619      	mov	r1, r3
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <LL_TIM_OC_DisableFast+0x9c>)
 80013bc:	5cd3      	ldrb	r3, [r2, r3]
 80013be:	440b      	add	r3, r1
 80013c0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4908      	ldr	r1, [pc, #32]	; (80013ec <LL_TIM_OC_DisableFast+0xa0>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	4619      	mov	r1, r3
 80013ce:	2304      	movs	r3, #4
 80013d0:	408b      	lsls	r3, r1
 80013d2:	43db      	mvns	r3, r3
 80013d4:	401a      	ands	r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	601a      	str	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	08002818 	.word	0x08002818
 80013ec:	08002824 	.word	0x08002824

080013f0 <LL_TIM_SetClockSource>:
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001402:	f023 0307 	bic.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_TIM_SetTriggerOutput>:
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	605a      	str	r2, [r3, #4]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_TIM_DisableMasterSlaveMode>:
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f043 0201 	orr.w	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <Systick_Init>:

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void Systick_Init(void){
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <Systick_Init+0x20>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0; /* Load the SysTick Counter Value */
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <Systick_Init+0x20>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (SysTick_CTRL_TICKINT_Msk   |  /* Enable SysTick exception */
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <Systick_Init+0x20>)
 8001492:	2207      	movs	r2, #7
 8001494:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_ENABLE_Msk) |    /* Enable SysTick system timer */
					 SysTick_CTRL_CLKSOURCE_Msk;   /* Use processor clock source */
	LL_SYSTICK_EnableIT();
 8001496:	f7ff ff29 	bl	80012ec <LL_SYSTICK_EnableIT>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	; 0x38
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2220      	movs	r2, #32
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 f96f 	bl	80027a4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80014c6:	2002      	movs	r0, #2
 80014c8:	f7ff fef8 	bl	80012bc <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80014cc:	f7ff fe6c 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2200      	movs	r2, #0
 80014d4:	210f      	movs	r1, #15
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff febc 	bl	8001254 <NVIC_EncodePriority>
 80014dc:	4603      	mov	r3, r0
 80014de:	4619      	mov	r1, r3
 80014e0:	201d      	movs	r0, #29
 80014e2:	f7ff fe8d 	bl	8001200 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80014e6:	201d      	movs	r0, #29
 80014e8:	f7ff fe6c 	bl	80011c4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 80014ec:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80014f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;
 80014f6:	2313      	movs	r3, #19
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	4619      	mov	r1, r3
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <MX_TIM3_Init+0xc0>)
 8001506:	f000 fd61 	bl	8001fcc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800150a:	4816      	ldr	r0, [pc, #88]	; (8001564 <MX_TIM3_Init+0xc0>)
 800150c:	f7ff ff0e 	bl	800132c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001510:	2100      	movs	r1, #0
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <MX_TIM3_Init+0xc0>)
 8001514:	f7ff ff6c 	bl	80013f0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8001518:	2310      	movs	r3, #16
 800151a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	461a      	mov	r2, r3
 8001530:	2101      	movs	r1, #1
 8001532:	480c      	ldr	r0, [pc, #48]	; (8001564 <MX_TIM3_Init+0xc0>)
 8001534:	f000 fdbc 	bl	80020b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001538:	2101      	movs	r1, #1
 800153a:	480a      	ldr	r0, [pc, #40]	; (8001564 <MX_TIM3_Init+0xc0>)
 800153c:	f7ff ff06 	bl	800134c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001540:	2100      	movs	r1, #0
 8001542:	4808      	ldr	r0, [pc, #32]	; (8001564 <MX_TIM3_Init+0xc0>)
 8001544:	f7ff ff69 	bl	800141a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_TIM3_Init+0xc0>)
 800154a:	f7ff ff79 	bl	8001440 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM3);
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_TIM3_Init+0xc0>)
 8001550:	f7ff ff86 	bl	8001460 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <MX_TIM3_Init+0xc0>)
 8001556:	f7ff fed9 	bl	800130c <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	3738      	adds	r7, #56	; 0x38
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40000400 	.word	0x40000400

08001568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800156e:	490e      	ldr	r1, [pc, #56]	; (80015a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <LoopForever+0xe>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001584:	4c0b      	ldr	r4, [pc, #44]	; (80015b4 <LoopForever+0x16>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001592:	f7ff fdf7 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f001 f8e1 	bl	800275c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159a:	f7ff fc27 	bl	8000dec <main>

0800159e <LoopForever>:

LoopForever:
    b LoopForever
 800159e:	e7fe      	b.n	800159e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80015ac:	08002838 	.word	0x08002838
  ldr r2, =_sbss
 80015b0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80015b4:	20000060 	.word	0x20000060

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>
	...

080015bc <LL_EXTI_EnableIT_0_31>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <LL_EXTI_EnableIT_0_31+0x20>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4904      	ldr	r1, [pc, #16]	; (80015dc <LL_EXTI_EnableIT_0_31+0x20>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40010400 	.word	0x40010400

080015e0 <LL_EXTI_EnableIT_32_63>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <LL_EXTI_EnableIT_32_63+0x20>)
 80015ea:	6a1a      	ldr	r2, [r3, #32]
 80015ec:	4904      	ldr	r1, [pc, #16]	; (8001600 <LL_EXTI_EnableIT_32_63+0x20>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	620b      	str	r3, [r1, #32]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40010400 	.word	0x40010400

08001604 <LL_EXTI_DisableIT_0_31>:
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <LL_EXTI_DisableIT_0_31+0x24>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	43db      	mvns	r3, r3
 8001614:	4904      	ldr	r1, [pc, #16]	; (8001628 <LL_EXTI_DisableIT_0_31+0x24>)
 8001616:	4013      	ands	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40010400 	.word	0x40010400

0800162c <LL_EXTI_DisableIT_32_63>:
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <LL_EXTI_DisableIT_32_63+0x24>)
 8001636:	6a1a      	ldr	r2, [r3, #32]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	43db      	mvns	r3, r3
 800163c:	4904      	ldr	r1, [pc, #16]	; (8001650 <LL_EXTI_DisableIT_32_63+0x24>)
 800163e:	4013      	ands	r3, r2
 8001640:	620b      	str	r3, [r1, #32]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40010400 	.word	0x40010400

08001654 <LL_EXTI_EnableEvent_0_31>:
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <LL_EXTI_EnableEvent_0_31+0x20>)
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	4904      	ldr	r1, [pc, #16]	; (8001674 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40010400 	.word	0x40010400

08001678 <LL_EXTI_EnableEvent_32_63>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001684:	4904      	ldr	r1, [pc, #16]	; (8001698 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4313      	orrs	r3, r2
 800168a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40010400 	.word	0x40010400

0800169c <LL_EXTI_DisableEvent_0_31>:
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4904      	ldr	r1, [pc, #16]	; (80016c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40010400 	.word	0x40010400

080016c4 <LL_EXTI_DisableEvent_32_63>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80016ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	4904      	ldr	r1, [pc, #16]	; (80016e8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40010400 	.word	0x40010400

080016ec <LL_EXTI_EnableRisingTrig_0_31>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	4904      	ldr	r1, [pc, #16]	; (800170c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40010400 	.word	0x40010400

08001710 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800171a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171c:	4904      	ldr	r1, [pc, #16]	; (8001730 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40010400 	.word	0x40010400

08001734 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	43db      	mvns	r3, r3
 8001744:	4904      	ldr	r1, [pc, #16]	; (8001758 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001746:	4013      	ands	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40010400 	.word	0x40010400

0800175c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	43db      	mvns	r3, r3
 800176c:	4904      	ldr	r1, [pc, #16]	; (8001780 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800176e:	4013      	ands	r3, r2
 8001770:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40010400 	.word	0x40010400

08001784 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	4904      	ldr	r1, [pc, #16]	; (80017a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4313      	orrs	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40010400 	.word	0x40010400

080017a8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80017b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b4:	4904      	ldr	r1, [pc, #16]	; (80017c8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	40010400 	.word	0x40010400

080017cc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	43db      	mvns	r3, r3
 80017dc:	4904      	ldr	r1, [pc, #16]	; (80017f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80017de:	4013      	ands	r3, r2
 80017e0:	60cb      	str	r3, [r1, #12]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40010400 	.word	0x40010400

080017f4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80017fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	43db      	mvns	r3, r3
 8001804:	4904      	ldr	r1, [pc, #16]	; (8001818 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001806:	4013      	ands	r3, r2
 8001808:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40010400 	.word	0x40010400

0800181c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7a1b      	ldrb	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80cd 	beq.w	80019cc <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d061      	beq.n	80018fe <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7a5b      	ldrb	r3, [r3, #9]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d01c      	beq.n	800187c <LL_EXTI_Init+0x60>
 8001842:	2b02      	cmp	r3, #2
 8001844:	dc25      	bgt.n	8001892 <LL_EXTI_Init+0x76>
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <LL_EXTI_Init+0x34>
 800184a:	2b01      	cmp	r3, #1
 800184c:	d00b      	beq.n	8001866 <LL_EXTI_Init+0x4a>
 800184e:	e020      	b.n	8001892 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff21 	bl	800169c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff feac 	bl	80015bc <LL_EXTI_EnableIT_0_31>
          break;
 8001864:	e018      	b.n	8001898 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff feca 	bl	8001604 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff feed 	bl	8001654 <LL_EXTI_EnableEvent_0_31>
          break;
 800187a:	e00d      	b.n	8001898 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fe9b 	bl	80015bc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fee2 	bl	8001654 <LL_EXTI_EnableEvent_0_31>
          break;
 8001890:	e002      	b.n	8001898 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
          break;
 8001896:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7a9b      	ldrb	r3, [r3, #10]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d02e      	beq.n	80018fe <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7a9b      	ldrb	r3, [r3, #10]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d01c      	beq.n	80018e2 <LL_EXTI_Init+0xc6>
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	dc25      	bgt.n	80018f8 <LL_EXTI_Init+0xdc>
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d002      	beq.n	80018b6 <LL_EXTI_Init+0x9a>
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d00b      	beq.n	80018cc <LL_EXTI_Init+0xb0>
 80018b4:	e020      	b.n	80018f8 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff86 	bl	80017cc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff11 	bl	80016ec <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80018ca:	e019      	b.n	8001900 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff2f 	bl	8001734 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff52 	bl	8001784 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80018e0:	e00e      	b.n	8001900 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff00 	bl	80016ec <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff47 	bl	8001784 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80018f6:	e003      	b.n	8001900 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
            break;
 80018fc:	e000      	b.n	8001900 <LL_EXTI_Init+0xe4>
        }
      }
 80018fe:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d076      	beq.n	80019f6 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7a5b      	ldrb	r3, [r3, #9]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d01c      	beq.n	800194a <LL_EXTI_Init+0x12e>
 8001910:	2b02      	cmp	r3, #2
 8001912:	dc25      	bgt.n	8001960 <LL_EXTI_Init+0x144>
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <LL_EXTI_Init+0x102>
 8001918:	2b01      	cmp	r3, #1
 800191a:	d00b      	beq.n	8001934 <LL_EXTI_Init+0x118>
 800191c:	e020      	b.n	8001960 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fece 	bl	80016c4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fe57 	bl	80015e0 <LL_EXTI_EnableIT_32_63>
          break;
 8001932:	e018      	b.n	8001966 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fe77 	bl	800162c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fe98 	bl	8001678 <LL_EXTI_EnableEvent_32_63>
          break;
 8001948:	e00d      	b.n	8001966 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fe46 	bl	80015e0 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fe8d 	bl	8001678 <LL_EXTI_EnableEvent_32_63>
          break;
 800195e:	e002      	b.n	8001966 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
          break;
 8001964:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7a9b      	ldrb	r3, [r3, #10]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d043      	beq.n	80019f6 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7a9b      	ldrb	r3, [r3, #10]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d01c      	beq.n	80019b0 <LL_EXTI_Init+0x194>
 8001976:	2b03      	cmp	r3, #3
 8001978:	dc25      	bgt.n	80019c6 <LL_EXTI_Init+0x1aa>
 800197a:	2b01      	cmp	r3, #1
 800197c:	d002      	beq.n	8001984 <LL_EXTI_Init+0x168>
 800197e:	2b02      	cmp	r3, #2
 8001980:	d00b      	beq.n	800199a <LL_EXTI_Init+0x17e>
 8001982:	e020      	b.n	80019c6 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff33 	bl	80017f4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff febc 	bl	8001710 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001998:	e02e      	b.n	80019f8 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fedc 	bl	800175c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fefd 	bl	80017a8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80019ae:	e023      	b.n	80019f8 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff feab 	bl	8001710 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fef2 	bl	80017a8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80019c4:	e018      	b.n	80019f8 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
            break;
 80019ca:	e015      	b.n	80019f8 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fe17 	bl	8001604 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fe5e 	bl	800169c <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fe21 	bl	800162c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fe68 	bl	80016c4 <LL_EXTI_DisableEvent_32_63>
 80019f4:	e000      	b.n	80019f8 <LL_EXTI_Init+0x1dc>
      }
 80019f6:	bf00      	nop
#endif
  }
  return status;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <LL_GPIO_SetPinMode>:
{
 8001a02:	b480      	push	{r7}
 8001a04:	b089      	sub	sp, #36	; 0x24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	613b      	str	r3, [r7, #16]
  return result;
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2103      	movs	r1, #3
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	401a      	ands	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	61bb      	str	r3, [r7, #24]
  return result;
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	3724      	adds	r7, #36	; 0x24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_GPIO_SetPinOutputType>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	401a      	ands	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	605a      	str	r2, [r3, #4]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_GPIO_SetPinSpeed>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	613b      	str	r3, [r7, #16]
  return result;
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	401a      	ands	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	61bb      	str	r3, [r7, #24]
  return result;
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	431a      	orrs	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	609a      	str	r2, [r3, #8]
}
 8001ae2:	bf00      	nop
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_GPIO_SetPinPull>:
{
 8001aee:	b480      	push	{r7}
 8001af0:	b089      	sub	sp, #36	; 0x24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	613b      	str	r3, [r7, #16]
  return result;
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	fab3 f383 	clz	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2103      	movs	r1, #3
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	61bb      	str	r3, [r7, #24]
  return result;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	60da      	str	r2, [r3, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3724      	adds	r7, #36	; 0x24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_GPIO_SetAFPin_0_7>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	613b      	str	r3, [r7, #16]
  return result;
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	210f      	movs	r1, #15
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	61bb      	str	r3, [r7, #24]
  return result;
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	621a      	str	r2, [r3, #32]
}
 8001b9e:	bf00      	nop
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_GPIO_SetAFPin_8_15>:
{
 8001baa:	b480      	push	{r7}
 8001bac:	b089      	sub	sp, #36	; 0x24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	613b      	str	r3, [r7, #16]
  return result;
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	61bb      	str	r3, [r7, #24]
  return result;
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c00:	bf00      	nop
 8001c02:	3724      	adds	r7, #36	; 0x24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	613b      	str	r3, [r7, #16]
  return result;
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c2e:	e051      	b.n	8001cd4 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2101      	movs	r1, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d043      	beq.n	8001cce <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d003      	beq.n	8001c56 <LL_GPIO_Init+0x4a>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d10e      	bne.n	8001c74 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	69b9      	ldr	r1, [r7, #24]
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff16 	bl	8001a90 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6819      	ldr	r1, [r3, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fef6 	bl	8001a60 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	69b9      	ldr	r1, [r7, #24]
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff36 	bl	8001aee <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d11a      	bne.n	8001cc0 <LL_GPIO_Init+0xb4>
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	60bb      	str	r3, [r7, #8]
  return result;
 8001c96:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b07      	cmp	r3, #7
 8001ca0:	d807      	bhi.n	8001cb2 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	69b9      	ldr	r1, [r7, #24]
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ff4e 	bl	8001b4c <LL_GPIO_SetAFPin_0_7>
 8001cb0:	e006      	b.n	8001cc0 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	69b9      	ldr	r1, [r7, #24]
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ff75 	bl	8001baa <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	69b9      	ldr	r1, [r7, #24]
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fe9a 	bl	8001a02 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	fa22 f303 	lsr.w	r3, r2, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1a6      	bne.n	8001c30 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <LL_I2C_Enable>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	601a      	str	r2, [r3, #0]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_I2C_Disable>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 0201 	bic.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	601a      	str	r2, [r3, #0]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_I2C_ConfigFilters>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	0219      	lsls	r1, r3, #8
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	430b      	orrs	r3, r1
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_I2C_SetOwnAddress1>:
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d6e:	f023 0307 	bic.w	r3, r3, #7
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	609a      	str	r2, [r3, #8]
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_I2C_EnableOwnAddress1>:
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_I2C_DisableOwnAddress1>:
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_I2C_SetTiming>:
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	611a      	str	r2, [r3, #16]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_I2C_SetMode>:
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	601a      	str	r2, [r3, #0]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	605a      	str	r2, [r3, #4]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff65 	bl	8001d0c <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6899      	ldr	r1, [r3, #8]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff6d 	bl	8001d2c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4619      	mov	r1, r3
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ffb6 	bl	8001dca <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ff44 	bl	8001cec <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ffa0 	bl	8001daa <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6919      	ldr	r1, [r3, #16]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	461a      	mov	r2, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff70 	bl	8001d5a <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ff81 	bl	8001d8a <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa9 	bl	8001de6 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffb6 	bl	8001e0c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <LL_TIM_SetPrescaler>:
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_TIM_SetAutoReload>:
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_TIM_SetRepetitionCounter>:
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_TIM_OC_SetCompareCH1>:
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_TIM_OC_SetCompareCH2>:
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_TIM_OC_SetCompareCH3>:
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_TIM_OC_SetCompareCH4>:
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_TIM_OC_SetCompareCH5>:
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_TIM_OC_SetCompareCH6>:
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	615a      	str	r2, [r3, #20]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a2f      	ldr	r2, [pc, #188]	; (800209c <LL_TIM_Init+0xd0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <LL_TIM_Init+0x28>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fea:	d003      	beq.n	8001ff4 <LL_TIM_Init+0x28>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a2c      	ldr	r2, [pc, #176]	; (80020a0 <LL_TIM_Init+0xd4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d106      	bne.n	8002002 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a25      	ldr	r2, [pc, #148]	; (800209c <LL_TIM_Init+0xd0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <LL_TIM_Init+0x66>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d00f      	beq.n	8002032 <LL_TIM_Init+0x66>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <LL_TIM_Init+0xd4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00b      	beq.n	8002032 <LL_TIM_Init+0x66>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a21      	ldr	r2, [pc, #132]	; (80020a4 <LL_TIM_Init+0xd8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <LL_TIM_Init+0x66>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a20      	ldr	r2, [pc, #128]	; (80020a8 <LL_TIM_Init+0xdc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d003      	beq.n	8002032 <LL_TIM_Init+0x66>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <LL_TIM_Init+0xe0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d106      	bne.n	8002040 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	4619      	mov	r1, r3
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff3a 	bl	8001ec6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff26 	bl	8001eaa <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0e      	ldr	r2, [pc, #56]	; (800209c <LL_TIM_Init+0xd0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00b      	beq.n	800207e <LL_TIM_Init+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <LL_TIM_Init+0xd8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d007      	beq.n	800207e <LL_TIM_Init+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <LL_TIM_Init+0xdc>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d003      	beq.n	800207e <LL_TIM_Init+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <LL_TIM_Init+0xe0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d105      	bne.n	800208a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	4619      	mov	r1, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff2c 	bl	8001ee2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff8d 	bl	8001faa <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40014400 	.word	0x40014400
 80020ac:	40014800 	.word	0x40014800

080020b0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020c6:	d045      	beq.n	8002154 <LL_TIM_OC_Init+0xa4>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020ce:	d848      	bhi.n	8002162 <LL_TIM_OC_Init+0xb2>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d6:	d036      	beq.n	8002146 <LL_TIM_OC_Init+0x96>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020de:	d840      	bhi.n	8002162 <LL_TIM_OC_Init+0xb2>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e6:	d027      	beq.n	8002138 <LL_TIM_OC_Init+0x88>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ee:	d838      	bhi.n	8002162 <LL_TIM_OC_Init+0xb2>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f6:	d018      	beq.n	800212a <LL_TIM_OC_Init+0x7a>
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020fe:	d830      	bhi.n	8002162 <LL_TIM_OC_Init+0xb2>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d003      	beq.n	800210e <LL_TIM_OC_Init+0x5e>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b10      	cmp	r3, #16
 800210a:	d007      	beq.n	800211c <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800210c:	e029      	b.n	8002162 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f82d 	bl	8002170 <OC1Config>
 8002116:	4603      	mov	r3, r0
 8002118:	75fb      	strb	r3, [r7, #23]
      break;
 800211a:	e023      	b.n	8002164 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f8a0 	bl	8002264 <OC2Config>
 8002124:	4603      	mov	r3, r0
 8002126:	75fb      	strb	r3, [r7, #23]
      break;
 8002128:	e01c      	b.n	8002164 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f917 	bl	8002360 <OC3Config>
 8002132:	4603      	mov	r3, r0
 8002134:	75fb      	strb	r3, [r7, #23]
      break;
 8002136:	e015      	b.n	8002164 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f98e 	bl	800245c <OC4Config>
 8002140:	4603      	mov	r3, r0
 8002142:	75fb      	strb	r3, [r7, #23]
      break;
 8002144:	e00e      	b.n	8002164 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f9ed 	bl	8002528 <OC5Config>
 800214e:	4603      	mov	r3, r0
 8002150:	75fb      	strb	r3, [r7, #23]
      break;
 8002152:	e007      	b.n	8002164 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fa44 	bl	80025e4 <OC6Config>
 800215c:	4603      	mov	r3, r0
 800215e:	75fb      	strb	r3, [r7, #23]
      break;
 8002160:	e000      	b.n	8002164 <LL_TIM_OC_Init+0xb4>
      break;
 8002162:	bf00      	nop
  }

  return result;
 8002164:	7dfb      	ldrb	r3, [r7, #23]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	f023 0201 	bic.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f023 0202 	bic.w	r2, r3, #2
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f023 0201 	bic.w	r2, r3, #1
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a20      	ldr	r2, [pc, #128]	; (8002254 <OC1Config+0xe4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00b      	beq.n	80021ee <OC1Config+0x7e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <OC1Config+0xe8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <OC1Config+0x7e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1e      	ldr	r2, [pc, #120]	; (800225c <OC1Config+0xec>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d003      	beq.n	80021ee <OC1Config+0x7e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <OC1Config+0xf0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d11e      	bne.n	800222c <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f023 0208 	bic.w	r2, r3, #8
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f023 0204 	bic.w	r2, r3, #4
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff fe5d 	bl	8001efe <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40014000 	.word	0x40014000
 800225c:	40014400 	.word	0x40014400
 8002260:	40014800 	.word	0x40014800

08002264 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f023 0210 	bic.w	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800229a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	0212      	lsls	r2, r2, #8
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f023 0220 	bic.w	r2, r3, #32
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f023 0210 	bic.w	r2, r3, #16
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a21      	ldr	r2, [pc, #132]	; (8002350 <OC2Config+0xec>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00b      	beq.n	80022e8 <OC2Config+0x84>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a20      	ldr	r2, [pc, #128]	; (8002354 <OC2Config+0xf0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d007      	beq.n	80022e8 <OC2Config+0x84>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <OC2Config+0xf4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <OC2Config+0x84>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a1e      	ldr	r2, [pc, #120]	; (800235c <OC2Config+0xf8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d11f      	bne.n	8002328 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	019b      	lsls	r3, r3, #6
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	019b      	lsls	r3, r3, #6
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff fded 	bl	8001f1a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40014000 	.word	0x40014000
 8002358:	40014400 	.word	0x40014400
 800235c:	40014800 	.word	0x40014800

08002360 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	4313      	orrs	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a21      	ldr	r2, [pc, #132]	; (800244c <OC3Config+0xec>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00b      	beq.n	80023e2 <OC3Config+0x82>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a20      	ldr	r2, [pc, #128]	; (8002450 <OC3Config+0xf0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <OC3Config+0x82>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <OC3Config+0xf4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <OC3Config+0x82>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <OC3Config+0xf8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d11f      	bne.n	8002422 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	029b      	lsls	r3, r3, #10
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	029b      	lsls	r3, r3, #10
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	015b      	lsls	r3, r3, #5
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fd7e 	bl	8001f36 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40014000 	.word	0x40014000
 8002454:	40014400 	.word	0x40014400
 8002458:	40014800 	.word	0x40014800

0800245c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800248a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	0212      	lsls	r2, r2, #8
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	031b      	lsls	r3, r3, #12
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	031b      	lsls	r3, r3, #12
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a15      	ldr	r2, [pc, #84]	; (8002518 <OC4Config+0xbc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00b      	beq.n	80024e0 <OC4Config+0x84>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a14      	ldr	r2, [pc, #80]	; (800251c <OC4Config+0xc0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d007      	beq.n	80024e0 <OC4Config+0x84>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <OC4Config+0xc4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d003      	beq.n	80024e0 <OC4Config+0x84>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a12      	ldr	r2, [pc, #72]	; (8002524 <OC4Config+0xc8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d107      	bne.n	80024f0 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	019b      	lsls	r3, r3, #6
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4619      	mov	r1, r3
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fd25 	bl	8001f52 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40014000 	.word	0x40014000
 8002520:	40014400 	.word	0x40014400
 8002524:	40014800 	.word	0x40014800

08002528 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4313      	orrs	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	4313      	orrs	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <OC5Config+0xac>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00b      	beq.n	800259c <OC5Config+0x74>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <OC5Config+0xb0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d007      	beq.n	800259c <OC5Config+0x74>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a13      	ldr	r2, [pc, #76]	; (80025dc <OC5Config+0xb4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <OC5Config+0x74>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <OC5Config+0xb8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d109      	bne.n	80025b0 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4619      	mov	r1, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff fcd6 	bl	8001f6e <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40012c00 	.word	0x40012c00
 80025d8:	40014000 	.word	0x40014000
 80025dc:	40014400 	.word	0x40014400
 80025e0:	40014800 	.word	0x40014800

080025e4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002604:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800260c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	0212      	lsls	r2, r2, #8
 8002616:	4313      	orrs	r3, r2
 8002618:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	051b      	lsls	r3, r3, #20
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	051b      	lsls	r3, r3, #20
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <OC6Config+0xac>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00b      	beq.n	800265a <OC6Config+0x76>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a13      	ldr	r2, [pc, #76]	; (8002694 <OC6Config+0xb0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <OC6Config+0x76>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a12      	ldr	r2, [pc, #72]	; (8002698 <OC6Config+0xb4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d003      	beq.n	800265a <OC6Config+0x76>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <OC6Config+0xb8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d109      	bne.n	800266e <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	029b      	lsls	r3, r3, #10
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4619      	mov	r1, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fc87 	bl	8001f8e <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40012c00 	.word	0x40012c00
 8002694:	40014000 	.word	0x40014000
 8002698:	40014400 	.word	0x40014400
 800269c:	40014800 	.word	0x40014800

080026a0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	4a07      	ldr	r2, [pc, #28]	; (80026d0 <LL_InitTick+0x30>)
 80026b4:	3b01      	subs	r3, #1
 80026b6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <LL_InitTick+0x30>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <LL_InitTick+0x30>)
 80026c0:	2205      	movs	r2, #5
 80026c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80026dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ffdd 	bl	80026a0 <LL_InitTick>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <LL_mDelay+0x48>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80026fe:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d00c      	beq.n	8002722 <LL_mDelay+0x32>
  {
    Delay++;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3301      	adds	r3, #1
 800270c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800270e:	e008      	b.n	8002722 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <LL_mDelay+0x48>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <LL_mDelay+0x32>
    {
      Delay--;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f3      	bne.n	8002710 <LL_mDelay+0x20>
    }
  }
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <LL_SetSystemCoreClock+0x1c>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000010 	.word	0x20000010

0800275c <__libc_init_array>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	4d0d      	ldr	r5, [pc, #52]	; (8002794 <__libc_init_array+0x38>)
 8002760:	4c0d      	ldr	r4, [pc, #52]	; (8002798 <__libc_init_array+0x3c>)
 8002762:	1b64      	subs	r4, r4, r5
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	2600      	movs	r6, #0
 8002768:	42a6      	cmp	r6, r4
 800276a:	d109      	bne.n	8002780 <__libc_init_array+0x24>
 800276c:	4d0b      	ldr	r5, [pc, #44]	; (800279c <__libc_init_array+0x40>)
 800276e:	4c0c      	ldr	r4, [pc, #48]	; (80027a0 <__libc_init_array+0x44>)
 8002770:	f000 f820 	bl	80027b4 <_init>
 8002774:	1b64      	subs	r4, r4, r5
 8002776:	10a4      	asrs	r4, r4, #2
 8002778:	2600      	movs	r6, #0
 800277a:	42a6      	cmp	r6, r4
 800277c:	d105      	bne.n	800278a <__libc_init_array+0x2e>
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	f855 3b04 	ldr.w	r3, [r5], #4
 8002784:	4798      	blx	r3
 8002786:	3601      	adds	r6, #1
 8002788:	e7ee      	b.n	8002768 <__libc_init_array+0xc>
 800278a:	f855 3b04 	ldr.w	r3, [r5], #4
 800278e:	4798      	blx	r3
 8002790:	3601      	adds	r6, #1
 8002792:	e7f2      	b.n	800277a <__libc_init_array+0x1e>
 8002794:	08002830 	.word	0x08002830
 8002798:	08002830 	.word	0x08002830
 800279c:	08002830 	.word	0x08002830
 80027a0:	08002834 	.word	0x08002834

080027a4 <memset>:
 80027a4:	4402      	add	r2, r0
 80027a6:	4603      	mov	r3, r0
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d100      	bne.n	80027ae <memset+0xa>
 80027ac:	4770      	bx	lr
 80027ae:	f803 1b01 	strb.w	r1, [r3], #1
 80027b2:	e7f9      	b.n	80027a8 <memset+0x4>

080027b4 <_init>:
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b6:	bf00      	nop
 80027b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ba:	bc08      	pop	{r3}
 80027bc:	469e      	mov	lr, r3
 80027be:	4770      	bx	lr

080027c0 <_fini>:
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c2:	bf00      	nop
 80027c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c6:	bc08      	pop	{r3}
 80027c8:	469e      	mov	lr, r3
 80027ca:	4770      	bx	lr
