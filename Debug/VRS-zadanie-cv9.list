
VRS-zadanie-cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001f94  08001f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ff8  08001ff8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001ff8  08001ff8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ff8  08001ff8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ff8  08001ff8  00011ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ffc  08001ffc  00011ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000040  20000018  20000018  00020018  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000058  20000058  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000722c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016d0  00000000  00000000  00027270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000640  00000000  00000000  00028940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000588  00000000  00000000  00028f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c3c  00000000  00000000  00029508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000059ac  00000000  00000000  00040144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079240  00000000  00000000  00045af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000bed30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000186c  00000000  00000000  000bed84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f7c 	.word	0x08001f7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08001f7c 	.word	0x08001f7c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	683a      	ldr	r2, [r7, #0]
 80001e6:	619a      	str	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr

080001f4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	683a      	ldr	r2, [r7, #0]
 8000202:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <resetSegments>:
void setDigit(uint8_t pos);


/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021c:	f7ff ffdc 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000228:	f7ff ffd6 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 800022c:	2102      	movs	r1, #2
 800022e:	480e      	ldr	r0, [pc, #56]	; (8000268 <resetSegments+0x58>)
 8000230:	f7ff ffd2 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000234:	2120      	movs	r1, #32
 8000236:	480c      	ldr	r0, [pc, #48]	; (8000268 <resetSegments+0x58>)
 8000238:	f7ff ffce 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 800023c:	2110      	movs	r1, #16
 800023e:	480a      	ldr	r0, [pc, #40]	; (8000268 <resetSegments+0x58>)
 8000240:	f7ff ffca 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000244:	2101      	movs	r1, #1
 8000246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024a:	f7ff ffc5 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800024e:	2102      	movs	r1, #2
 8000250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000254:	f7ff ffc0 	bl	80001d8 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000258:	2108      	movs	r1, #8
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f7ff ffbb 	bl	80001d8 <LL_GPIO_SetOutputPin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	48000400 	.word	0x48000400

0800026c <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000278:	f7ff ffbc 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 800027c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000284:	f7ff ffb6 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000288:	2102      	movs	r1, #2
 800028a:	480e      	ldr	r0, [pc, #56]	; (80002c4 <setSegments+0x58>)
 800028c:	f7ff ffb2 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000290:	2120      	movs	r1, #32
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <setSegments+0x58>)
 8000294:	f7ff ffae 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000298:	2110      	movs	r1, #16
 800029a:	480a      	ldr	r0, [pc, #40]	; (80002c4 <setSegments+0x58>)
 800029c:	f7ff ffaa 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 80002a0:	2101      	movs	r1, #1
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f7ff ffa5 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 80002aa:	2102      	movs	r1, #2
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f7ff ffa0 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80002b4:	2108      	movs	r1, #8
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ba:	f7ff ff9b 	bl	80001f4 <LL_GPIO_ResetOutputPin>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	48000400 	.word	0x48000400

080002c8 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80002cc:	2104      	movs	r1, #4
 80002ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d2:	f7ff ff8f 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80002d6:	2101      	movs	r1, #1
 80002d8:	480a      	ldr	r0, [pc, #40]	; (8000304 <resetDigits+0x3c>)
 80002da:	f7ff ff8b 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80002de:	2110      	movs	r1, #16
 80002e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e4:	f7ff ff86 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	//LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 80002e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f0:	f7ff ff80 	bl	80001f4 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80002f4:	2180      	movs	r1, #128	; 0x80
 80002f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fa:	f7ff ff7b 	bl	80001f4 <LL_GPIO_ResetOutputPin>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	48000400 	.word	0x48000400

08000308 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 800030c:	2101      	movs	r1, #1
 800030e:	480d      	ldr	r0, [pc, #52]	; (8000344 <setDigits+0x3c>)
 8000310:	f7ff ff62 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000314:	2110      	movs	r1, #16
 8000316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031a:	f7ff ff5d 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 800031e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000326:	f7ff ff57 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 800032a:	2104      	movs	r1, #4
 800032c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000330:	f7ff ff52 	bl	80001d8 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033a:	f7ff ff4d 	bl	80001d8 <LL_GPIO_SetOutputPin>
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	48000400 	.word	0x48000400

08000348 <set_sign>:

void set_sign(char sign){
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<6))
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	3b30      	subs	r3, #48	; 0x30
 8000356:	4a2e      	ldr	r2, [pc, #184]	; (8000410 <set_sign+0xc8>)
 8000358:	5cd3      	ldrb	r3, [r2, r3]
 800035a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800035e:	2b00      	cmp	r3, #0
 8000360:	d004      	beq.n	800036c <set_sign+0x24>
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000362:	2102      	movs	r1, #2
 8000364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000368:	f7ff ff44 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<5))
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	3b30      	subs	r3, #48	; 0x30
 8000370:	4a27      	ldr	r2, [pc, #156]	; (8000410 <set_sign+0xc8>)
 8000372:	5cd3      	ldrb	r3, [r2, r3]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	2b00      	cmp	r3, #0
 800037a:	d004      	beq.n	8000386 <set_sign+0x3e>
		LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800037c:	2101      	movs	r1, #1
 800037e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000382:	f7ff ff37 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<4))
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	3b30      	subs	r3, #48	; 0x30
 800038a:	4a21      	ldr	r2, [pc, #132]	; (8000410 <set_sign+0xc8>)
 800038c:	5cd3      	ldrb	r3, [r2, r3]
 800038e:	f003 0310 	and.w	r3, r3, #16
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <set_sign+0x5a>
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039e:	f7ff ff29 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<3))
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	3b30      	subs	r3, #48	; 0x30
 80003a6:	4a1a      	ldr	r2, [pc, #104]	; (8000410 <set_sign+0xc8>)
 80003a8:	5cd3      	ldrb	r3, [r2, r3]
 80003aa:	f003 0308 	and.w	r3, r3, #8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d003      	beq.n	80003ba <set_sign+0x72>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80003b2:	2120      	movs	r1, #32
 80003b4:	4817      	ldr	r0, [pc, #92]	; (8000414 <set_sign+0xcc>)
 80003b6:	f7ff ff1d 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<2))
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	3b30      	subs	r3, #48	; 0x30
 80003be:	4a14      	ldr	r2, [pc, #80]	; (8000410 <set_sign+0xc8>)
 80003c0:	5cd3      	ldrb	r3, [r2, r3]
 80003c2:	f003 0304 	and.w	r3, r3, #4
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d005      	beq.n	80003d6 <set_sign+0x8e>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80003ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d2:	f7ff ff0f 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<1))
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	3b30      	subs	r3, #48	; 0x30
 80003da:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <set_sign+0xc8>)
 80003dc:	5cd3      	ldrb	r3, [r2, r3]
 80003de:	f003 0302 	and.w	r3, r3, #2
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d004      	beq.n	80003f0 <set_sign+0xa8>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80003e6:	2108      	movs	r1, #8
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ec:	f7ff ff02 	bl	80001f4 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<0))
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	3b30      	subs	r3, #48	; 0x30
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <set_sign+0xc8>)
 80003f6:	5cd3      	ldrb	r3, [r2, r3]
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d003      	beq.n	8000408 <set_sign+0xc0>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000400:	2110      	movs	r1, #16
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <set_sign+0xcc>)
 8000404:	f7ff fef6 	bl	80001f4 <LL_GPIO_ResetOutputPin>

}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	08001f94 	.word	0x08001f94
 8000414:	48000400 	.word	0x48000400

08000418 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b03      	cmp	r3, #3
 8000426:	d823      	bhi.n	8000470 <setDigit+0x58>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <setDigit+0x18>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000441 	.word	0x08000441
 8000434:	0800044d 	.word	0x0800044d
 8000438:	0800045b 	.word	0x0800045b
 800043c:	08000467 	.word	0x08000467
	{
	case 0:
		DIGIT_4_ON;
 8000440:	2104      	movs	r1, #4
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f7ff fec7 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 800044a:	e011      	b.n	8000470 <setDigit+0x58>
	case 1:
		DIGIT_3_ON;
 800044c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f7ff fec0 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 8000458:	e00a      	b.n	8000470 <setDigit+0x58>
	case 2:
		DIGIT_2_ON;
 800045a:	2110      	movs	r1, #16
 800045c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000460:	f7ff feba 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 8000464:	e004      	b.n	8000470 <setDigit+0x58>
	case 3:
		DIGIT_1_ON;
 8000466:	2101      	movs	r1, #1
 8000468:	4803      	ldr	r0, [pc, #12]	; (8000478 <setDigit+0x60>)
 800046a:	f7ff feb5 	bl	80001d8 <LL_GPIO_SetOutputPin>
		break;
 800046e:	bf00      	nop
	}
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	48000400 	.word	0x48000400

0800047c <display_sign>:
void display_sign(char sign_1,char sign_2, char sign_3,char sign_4)
{
 800047c:	b490      	push	{r4, r7}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4604      	mov	r4, r0
 8000484:	4608      	mov	r0, r1
 8000486:	4611      	mov	r1, r2
 8000488:	461a      	mov	r2, r3
 800048a:	4623      	mov	r3, r4
 800048c:	71fb      	strb	r3, [r7, #7]
 800048e:	4603      	mov	r3, r0
 8000490:	71bb      	strb	r3, [r7, #6]
 8000492:	460b      	mov	r3, r1
 8000494:	717b      	strb	r3, [r7, #5]
 8000496:	4613      	mov	r3, r2
 8000498:	713b      	strb	r3, [r7, #4]
	Display_sign[0] = sign_1;
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <display_sign+0x40>)
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	7013      	strb	r3, [r2, #0]
	Display_sign[1] = sign_2;
 80004a0:	4a06      	ldr	r2, [pc, #24]	; (80004bc <display_sign+0x40>)
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	7053      	strb	r3, [r2, #1]
	Display_sign[2] = sign_3;
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <display_sign+0x40>)
 80004a8:	797b      	ldrb	r3, [r7, #5]
 80004aa:	7093      	strb	r3, [r2, #2]
	Display_sign[3] = sign_4;
 80004ac:	4a03      	ldr	r2, [pc, #12]	; (80004bc <display_sign+0x40>)
 80004ae:	793b      	ldrb	r3, [r7, #4]
 80004b0:	70d3      	strb	r3, [r2, #3]
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc90      	pop	{r4, r7}
 80004ba:	4770      	bx	lr
 80004bc:	2000004c 	.word	0x2000004c

080004c0 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	e026      	b.n	800051a <updateDisplay+0x5a>
	{

		setDigit(i);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ffa2 	bl	8000418 <setDigit>
		set_sign(Display_sign[3-i]);
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f1c3 0303 	rsb	r3, r3, #3
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <updateDisplay+0x6c>)
 80004dc:	5cd3      	ldrb	r3, [r2, r3]
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff32 	bl	8000348 <set_sign>

		disp_time_saved = disp_time;
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <updateDisplay+0x70>)
 80004e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004ea:	4912      	ldr	r1, [pc, #72]	; (8000534 <updateDisplay+0x74>)
 80004ec:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 80004f0:	bf00      	nop
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <updateDisplay+0x74>)
 80004f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004f8:	1c94      	adds	r4, r2, #2
 80004fa:	f143 0500 	adc.w	r5, r3, #0
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <updateDisplay+0x70>)
 8000500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000504:	42ab      	cmp	r3, r5
 8000506:	bf08      	it	eq
 8000508:	42a2      	cmpeq	r2, r4
 800050a:	d3f2      	bcc.n	80004f2 <updateDisplay+0x32>

		resetDigits();
 800050c:	f7ff fedc 	bl	80002c8 <resetDigits>
		resetSegments();
 8000510:	f7ff fe7e 	bl	8000210 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	3301      	adds	r3, #1
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d9d5      	bls.n	80004cc <updateDisplay+0xc>
	}
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bdb0      	pop	{r4, r5, r7, pc}
 800052a:	bf00      	nop
 800052c:	2000004c 	.word	0x2000004c
 8000530:	20000038 	.word	0x20000038
 8000534:	20000040 	.word	0x20000040

08000538 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	4907      	ldr	r1, [pc, #28]	; (8000564 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800054e:	695a      	ldr	r2, [r3, #20]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4013      	ands	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000

08000568 <LL_GPIO_ResetOutputPin>:
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800059a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800059e:	f7ff ffcb 	bl	8000538 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80005a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80005a6:	f7ff ffc7 	bl	8000538 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80005aa:	f641 119f 	movw	r1, #6559	; 0x199f
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f7ff ffd9 	bl	8000568 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 80005b6:	2133      	movs	r1, #51	; 0x33
 80005b8:	4813      	ldr	r0, [pc, #76]	; (8000608 <MX_GPIO_Init+0x84>)
 80005ba:	f7ff ffd5 	bl	8000568 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80005be:	f641 139f 	movw	r3, #6559	; 0x199f
 80005c2:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005c4:	2301      	movs	r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	463b      	mov	r3, r7
 80005d6:	4619      	mov	r1, r3
 80005d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005dc:	f000 fefa 	bl	80013d4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80005e0:	2333      	movs	r3, #51	; 0x33
 80005e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <MX_GPIO_Init+0x84>)
 80005fa:	f000 feeb 	bl	80013d4 <LL_GPIO_Init>

}
 80005fe:	bf00      	nop
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	48000400 	.word	0x48000400

0800060c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <__NVIC_GetPriorityGrouping+0x18>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	f003 0307 	and.w	r3, r3, #7
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	db0b      	blt.n	8000652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f003 021f 	and.w	r2, r3, #31
 8000640:	4907      	ldr	r1, [pc, #28]	; (8000660 <__NVIC_EnableIRQ+0x38>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	095b      	lsrs	r3, r3, #5
 8000648:	2001      	movs	r0, #1
 800064a:	fa00 f202 	lsl.w	r2, r0, r2
 800064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000e100 	.word	0xe000e100

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	b2da      	uxtb	r2, r3
 800067c:	490c      	ldr	r1, [pc, #48]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	3b04      	subs	r3, #4
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 32ff 	mov.w	r2, #4294967295
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	401a      	ands	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	f04f 31ff 	mov.w	r1, #4294967295
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43d9      	mvns	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800075e:	b480      	push	{r7}
 8000760:	b085      	sub	sp, #20
 8000762:	af00      	add	r7, sp, #0
 8000764:	60f8      	str	r0, [r7, #12]
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000772:	f023 0306 	bic.w	r3, r3, #6
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	430a      	orrs	r2, r1
 800077c:	431a      	orrs	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	60da      	str	r2, [r3, #12]
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800078e:	b480      	push	{r7}
 8000790:	b083      	sub	sp, #12
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	60da      	str	r2, [r3, #12]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	605a      	str	r2, [r3, #4]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <LL_AHB1_GRP1_EnableClock>:
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007da:	695a      	ldr	r2, [r3, #20]
 80007dc:	4907      	ldr	r1, [pc, #28]	; (80007fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	40021000 	.word	0x40021000

08000800 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <LL_APB1_GRP1_EnableClock+0x2c>)
 800080a:	69da      	ldr	r2, [r3, #28]
 800080c:	4907      	ldr	r1, [pc, #28]	; (800082c <LL_APB1_GRP1_EnableClock+0x2c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000816:	69da      	ldr	r2, [r3, #28]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4013      	ands	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	40021000 	.word	0x40021000

08000830 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800085a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800085e:	f7ff ffb7 	bl	80007d0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000862:	23c0      	movs	r3, #192	; 0xc0
 8000864:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000866:	2302      	movs	r3, #2
 8000868:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800086e:	2301      	movs	r3, #1
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000872:	2301      	movs	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000876:	2304      	movs	r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4820      	ldr	r0, [pc, #128]	; (8000900 <MX_I2C1_Init+0xd0>)
 8000880:	f000 fda8 	bl	80013d4 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000884:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000888:	f7ff ffba 	bl	8000800 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800088c:	f7ff febe 	bl	800060c <__NVIC_GetPriorityGrouping>
 8000890:	4603      	mov	r3, r0
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff0e 	bl	80006b8 <NVIC_EncodePriority>
 800089c:	4603      	mov	r3, r0
 800089e:	4619      	mov	r1, r3
 80008a0:	201f      	movs	r0, #31
 80008a2:	f7ff fedf 	bl	8000664 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008a6:	201f      	movs	r0, #31
 80008a8:	f7ff febe 	bl	8000628 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80008ac:	4815      	ldr	r0, [pc, #84]	; (8000904 <MX_I2C1_Init+0xd4>)
 80008ae:	f7ff ff7e 	bl	80007ae <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80008b2:	4814      	ldr	r0, [pc, #80]	; (8000904 <MX_I2C1_Init+0xd4>)
 80008b4:	f7ff ff6b 	bl	800078e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80008b8:	4812      	ldr	r0, [pc, #72]	; (8000904 <MX_I2C1_Init+0xd4>)
 80008ba:	f7ff ff40 	bl	800073e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80008be:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_I2C1_Init+0xd4>)
 80008c0:	f7ff ff2d 	bl	800071e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_I2C1_Init+0xd8>)
 80008ca:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80008dc:	2300      	movs	r3, #0
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <MX_I2C1_Init+0xd4>)
 80008e8:	f000 fe87 	bl	80015fa <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_I2C1_Init+0xd4>)
 80008f2:	f7ff ff34 	bl	800075e <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	3738      	adds	r7, #56	; 0x38
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	48000400 	.word	0x48000400
 8000904:	40005400 	.word	0x40005400
 8000908:	2000090e 	.word	0x2000090e

0800090c <__NVIC_SetPriorityGrouping>:
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	60d3      	str	r3, [r2, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <LL_RCC_HSI_Enable+0x1c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <LL_RCC_HSI_Enable+0x1c>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <LL_RCC_HSI_IsReady+0x20>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b02      	cmp	r3, #2
 8000982:	bf0c      	ite	eq
 8000984:	2301      	moveq	r3, #1
 8000986:	2300      	movne	r3, #0
 8000988:	b2db      	uxtb	r3, r3
}
 800098a:	4618      	mov	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	40021000 	.word	0x40021000

08000998 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4904      	ldr	r1, [pc, #16]	; (80009c0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80009ae:	4313      	orrs	r3, r2
 80009b0:	600b      	str	r3, [r1, #0]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <LL_RCC_SetSysClkSource+0x24>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f023 0203 	bic.w	r2, r3, #3
 80009d4:	4904      	ldr	r1, [pc, #16]	; (80009e8 <LL_RCC_SetSysClkSource+0x24>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4313      	orrs	r3, r2
 80009da:	604b      	str	r3, [r1, #4]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	40021000 	.word	0x40021000

080009ec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <LL_RCC_GetSysClkSource+0x18>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 030c 	and.w	r3, r3, #12
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <LL_RCC_SetAHBPrescaler+0x24>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a18:	4904      	ldr	r1, [pc, #16]	; (8000a2c <LL_RCC_SetAHBPrescaler+0x24>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	604b      	str	r3, [r1, #4]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	40021000 	.word	0x40021000

08000a30 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000a40:	4904      	ldr	r1, [pc, #16]	; (8000a54 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	604b      	str	r3, [r1, #4]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000

08000a58 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000a68:	4904      	ldr	r1, [pc, #16]	; (8000a7c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	604b      	str	r3, [r1, #4]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000

08000a80 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <LL_RCC_SetI2CClockSource+0x2c>)
 8000a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	0e1b      	lsrs	r3, r3, #24
 8000a90:	43db      	mvns	r3, r3
 8000a92:	401a      	ands	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a9a:	4904      	ldr	r1, [pc, #16]	; (8000aac <LL_RCC_SetI2CClockSource+0x2c>)
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000

08000ab0 <LL_APB1_GRP1_EnableClock>:
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aba:	69da      	ldr	r2, [r3, #28]
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ac6:	69da      	ldr	r2, [r3, #28]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4013      	ands	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	40021000 	.word	0x40021000

08000ae0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000aea:	699a      	ldr	r2, [r3, #24]
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000af6:	699a      	ldr	r2, [r3, #24]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4013      	ands	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000

08000b10 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <LL_FLASH_SetLatency+0x24>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f023 0207 	bic.w	r2, r3, #7
 8000b20:	4904      	ldr	r1, [pc, #16]	; (8000b34 <LL_FLASH_SetLatency+0x24>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	600b      	str	r3, [r1, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40022000 	.word	0x40022000

08000b38 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <LL_FLASH_GetLatency+0x18>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0307 	and.w	r3, r3, #7
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff ffc1 	bl	8000ae0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b5e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b62:	f7ff ffa5 	bl	8000ab0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b66:	2003      	movs	r0, #3
 8000b68:	f7ff fed0 	bl	800090c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6c:	f000 f86a 	bl	8000c44 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Systick_Init();
 8000b70:	f000 fa8e 	bl	8001090 <Systick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f7ff fd06 	bl	8000584 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b78:	f7ff fe5a 	bl	8000830 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b7c:	f000 fa9a 	bl	80010b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  setSegments();
 8000b80:	f7ff fb74 	bl	800026c <setSegments>
  setDigits();
 8000b84:	f7ff fbc0 	bl	8000308 <setDigits>
  LL_mDelay(2000);
 8000b88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b8c:	f001 f994 	bl	8001eb8 <LL_mDelay>
  resetDigits();
 8000b90:	f7ff fb9a 	bl	80002c8 <resetDigits>
  resetSegments();
 8000b94:	f7ff fb3c 	bl	8000210 <resetSegments>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(disp_time > (saved_time + 2000))
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <main+0xdc>)
 8000b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9e:	f512 64fa 	adds.w	r4, r2, #2000	; 0x7d0
 8000ba2:	f143 0500 	adc.w	r5, r3, #0
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <main+0xe0>)
 8000ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bac:	429d      	cmp	r5, r3
 8000bae:	bf08      	it	eq
 8000bb0:	4294      	cmpeq	r4, r2
 8000bb2:	d2f1      	bcs.n	8000b98 <main+0x44>
	  	  {

	  		  display_sign(display_text[act_index],display_text[act_index+1],display_text[act_index+2],display_text[act_index+3]);
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <main+0xe4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <main+0xe8>)
 8000bba:	5cd0      	ldrb	r0, [r2, r3]
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <main+0xe4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <main+0xe8>)
 8000bc4:	5cd1      	ldrb	r1, [r2, r3]
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <main+0xe4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3302      	adds	r3, #2
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <main+0xe8>)
 8000bce:	5cd2      	ldrb	r2, [r2, r3]
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <main+0xe4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3303      	adds	r3, #3
 8000bd6:	4e19      	ldr	r6, [pc, #100]	; (8000c3c <main+0xe8>)
 8000bd8:	5cf3      	ldrb	r3, [r6, r3]
 8000bda:	f7ff fc4f 	bl	800047c <display_sign>
	  	  	  saved_time = disp_time;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <main+0xe0>)
 8000be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <main+0xdc>)
 8000be6:	e9c1 2300 	strd	r2, r3, [r1]

	  	  	  if(right){ //urcovanie smeru
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <main+0xec>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <main+0xaa>
	  	  		  act_index++;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <main+0xe4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <main+0xe4>)
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e004      	b.n	8000c08 <main+0xb4>
	  	  	  } else {
	  	  		  act_index--;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <main+0xe4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <main+0xe4>)
 8000c06:	6013      	str	r3, [r2, #0]
	  	  	  }
	  	  	  if(act_index == strlen(display_text)-4) { //17 velkost zobrazovaneho textu, ak dojde nakoniec zmeni smer
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <main+0xe8>)
 8000c0a:	f7ff fadd 	bl	80001c8 <strlen>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	3b04      	subs	r3, #4
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <main+0xe4>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d102      	bne.n	8000c20 <main+0xcc>
	  	  		  right = 0;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <main+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
	  	  	  }
	  	  	  if (act_index == 0){
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <main+0xe4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1b7      	bne.n	8000b98 <main+0x44>
	  	  		  right = 1;
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <main+0xec>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
	  if(disp_time > (saved_time + 2000))
 8000c2e:	e7b3      	b.n	8000b98 <main+0x44>
 8000c30:	20000050 	.word	0x20000050
 8000c34:	20000038 	.word	0x20000038
 8000c38:	20000048 	.word	0x20000048
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	2000000c 	.word	0x2000000c

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff ff61 	bl	8000b10 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ff72 	bl	8000b38 <LL_FLASH_GetLatency>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1fa      	bne.n	8000c50 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000c5a:	f7ff fe7b 	bl	8000954 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000c5e:	bf00      	nop
 8000c60:	f7ff fe88 	bl	8000974 <LL_RCC_HSI_IsReady>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d1fa      	bne.n	8000c60 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000c6a:	2010      	movs	r0, #16
 8000c6c:	f7ff fe94 	bl	8000998 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fec9 	bl	8000a08 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff feda 	bl	8000a30 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff feeb 	bl	8000a58 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fe9e 	bl	80009c4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000c88:	bf00      	nop
 8000c8a:	f7ff feaf 	bl	80009ec <LL_RCC_GetSysClkSource>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1fa      	bne.n	8000c8a <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <SystemClock_Config+0x68>)
 8000c96:	f001 f901 	bl	8001e9c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000c9a:	4804      	ldr	r0, [pc, #16]	; (8000cac <SystemClock_Config+0x68>)
 8000c9c:	f001 f932 	bl	8001f04 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8000ca0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000ca4:	f7ff feec 	bl	8000a80 <LL_RCC_SetI2CClockSource>
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	007a1200 	.word	0x007a1200

08000cb0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f06f 0201 	mvn.w	r2, #1
 8000cbe:	611a      	str	r2, [r3, #16]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d101      	bne.n	8000ce4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e000      	b.n	8000ce6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <NMI_Handler+0x4>

08000cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <HardFault_Handler+0x4>

08000cfe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <MemManage_Handler+0x4>

08000d04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <BusFault_Handler+0x4>

08000d0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <UsageFault_Handler+0x4>

08000d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	disp_time++;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SysTick_Handler+0x20>)
 8000d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d46:	1c50      	adds	r0, r2, #1
 8000d48:	f143 0100 	adc.w	r1, r3, #0
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <SysTick_Handler+0x20>)
 8000d4e:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	20000038 	.word	0x20000038

08000d60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <TIM3_IRQHandler+0x20>)
 8000d66:	f7ff ffb1 	bl	8000ccc <LL_TIM_IsActiveFlag_UPDATE>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <TIM3_IRQHandler+0x14>
		{
			updateDisplay();
 8000d70:	f7ff fba6 	bl	80004c0 <updateDisplay>
		}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM3_IRQHandler+0x20>)
 8000d76:	f7ff ff9b 	bl	8000cb0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40000400 	.word	0x40000400

08000d84 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <LL_APB1_GRP1_EnableClock>:
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ed6:	69da      	ldr	r2, [r3, #28]
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000

08000efc <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <LL_SYSTICK_EnableIT+0x1c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <LL_SYSTICK_EnableIT+0x1c>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <LL_TIM_EnableCounter>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f043 0201 	orr.w	r2, r3, #1
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	601a      	str	r2, [r3, #0]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_TIM_EnableARRPreload>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	601a      	str	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_TIM_OC_DisableFast>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d028      	beq.n	8000fbe <LL_TIM_OC_DisableFast+0x62>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d023      	beq.n	8000fba <LL_TIM_OC_DisableFast+0x5e>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	2b10      	cmp	r3, #16
 8000f76:	d01e      	beq.n	8000fb6 <LL_TIM_OC_DisableFast+0x5a>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b40      	cmp	r3, #64	; 0x40
 8000f7c:	d019      	beq.n	8000fb2 <LL_TIM_OC_DisableFast+0x56>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f84:	d013      	beq.n	8000fae <LL_TIM_OC_DisableFast+0x52>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8c:	d00d      	beq.n	8000faa <LL_TIM_OC_DisableFast+0x4e>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f94:	d007      	beq.n	8000fa6 <LL_TIM_OC_DisableFast+0x4a>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9c:	d101      	bne.n	8000fa2 <LL_TIM_OC_DisableFast+0x46>
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	e00e      	b.n	8000fc0 <LL_TIM_OC_DisableFast+0x64>
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	e00c      	b.n	8000fc0 <LL_TIM_OC_DisableFast+0x64>
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	e00a      	b.n	8000fc0 <LL_TIM_OC_DisableFast+0x64>
 8000faa:	2305      	movs	r3, #5
 8000fac:	e008      	b.n	8000fc0 <LL_TIM_OC_DisableFast+0x64>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e006      	b.n	8000fc0 <LL_TIM_OC_DisableFast+0x64>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e004      	b.n	8000fc0 <LL_TIM_OC_DisableFast+0x64>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e002      	b.n	8000fc0 <LL_TIM_OC_DisableFast+0x64>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <LL_TIM_OC_DisableFast+0x64>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3318      	adds	r3, #24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <LL_TIM_OC_DisableFast+0x9c>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
 8000fce:	440b      	add	r3, r1
 8000fd0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	4908      	ldr	r1, [pc, #32]	; (8000ffc <LL_TIM_OC_DisableFast+0xa0>)
 8000fda:	5ccb      	ldrb	r3, [r1, r3]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2304      	movs	r3, #4
 8000fe0:	408b      	lsls	r3, r1
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	08001fe0 	.word	0x08001fe0
 8000ffc:	08001fec 	.word	0x08001fec

08001000 <LL_TIM_SetClockSource>:
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001012:	f023 0307 	bic.w	r3, r3, #7
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	609a      	str	r2, [r3, #8]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_TIM_SetTriggerOutput>:
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	605a      	str	r2, [r3, #4]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_TIM_DisableMasterSlaveMode>:
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	609a      	str	r2, [r3, #8]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	f043 0201 	orr.w	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	60da      	str	r2, [r3, #12]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <Systick_Init>:

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void Systick_Init(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <Systick_Init+0x20>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0; /* Load the SysTick Counter Value */
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <Systick_Init+0x20>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (SysTick_CTRL_TICKINT_Msk   |  /* Enable SysTick exception */
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <Systick_Init+0x20>)
 80010a2:	2207      	movs	r2, #7
 80010a4:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_ENABLE_Msk) |    /* Enable SysTick system timer */
					 SysTick_CTRL_CLKSOURCE_Msk;   /* Use processor clock source */
	LL_SYSTICK_EnableIT();
 80010a6:	f7ff ff29 	bl	8000efc <LL_SYSTICK_EnableIT>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08e      	sub	sp, #56	; 0x38
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2220      	movs	r2, #32
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 ff4b 	bl	8001f6c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80010d6:	2002      	movs	r0, #2
 80010d8:	f7ff fef8 	bl	8000ecc <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80010dc:	f7ff fe6c 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2200      	movs	r2, #0
 80010e4:	210f      	movs	r1, #15
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff febc 	bl	8000e64 <NVIC_EncodePriority>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4619      	mov	r1, r3
 80010f0:	201d      	movs	r0, #29
 80010f2:	f7ff fe8d 	bl	8000e10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80010f6:	201d      	movs	r0, #29
 80010f8:	f7ff fe6c 	bl	8000dd4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 80010fc:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8001100:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;
 8001106:	2313      	movs	r3, #19
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	4817      	ldr	r0, [pc, #92]	; (8001174 <MX_TIM3_Init+0xc0>)
 8001116:	f000 fb3d 	bl	8001794 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800111a:	4816      	ldr	r0, [pc, #88]	; (8001174 <MX_TIM3_Init+0xc0>)
 800111c:	f7ff ff0e 	bl	8000f3c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001120:	2100      	movs	r1, #0
 8001122:	4814      	ldr	r0, [pc, #80]	; (8001174 <MX_TIM3_Init+0xc0>)
 8001124:	f7ff ff6c 	bl	8001000 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8001128:	2310      	movs	r3, #16
 800112a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	461a      	mov	r2, r3
 8001140:	2101      	movs	r1, #1
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_TIM3_Init+0xc0>)
 8001144:	f000 fb98 	bl	8001878 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001148:	2101      	movs	r1, #1
 800114a:	480a      	ldr	r0, [pc, #40]	; (8001174 <MX_TIM3_Init+0xc0>)
 800114c:	f7ff ff06 	bl	8000f5c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001150:	2100      	movs	r1, #0
 8001152:	4808      	ldr	r0, [pc, #32]	; (8001174 <MX_TIM3_Init+0xc0>)
 8001154:	f7ff ff69 	bl	800102a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_TIM3_Init+0xc0>)
 800115a:	f7ff ff79 	bl	8001050 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM3);
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_TIM3_Init+0xc0>)
 8001160:	f7ff ff86 	bl	8001070 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <MX_TIM3_Init+0xc0>)
 8001166:	f7ff fed9 	bl	8000f1c <LL_TIM_EnableCounter>
  /* USER CODE END TIM3_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3738      	adds	r7, #56	; 0x38
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40000400 	.word	0x40000400

08001178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800117e:	490e      	ldr	r1, [pc, #56]	; (80011b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <LoopForever+0xe>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001194:	4c0b      	ldr	r4, [pc, #44]	; (80011c4 <LoopForever+0x16>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011a2:	f7ff fdf7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f000 febd 	bl	8001f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011aa:	f7ff fcd3 	bl	8000b54 <main>

080011ae <LoopForever>:

LoopForever:
    b LoopForever
 80011ae:	e7fe      	b.n	80011ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011b0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80011bc:	08002000 	.word	0x08002000
  ldr r2, =_sbss
 80011c0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80011c4:	20000058 	.word	0x20000058

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>

080011ca <LL_GPIO_SetPinMode>:
{
 80011ca:	b480      	push	{r7}
 80011cc:	b089      	sub	sp, #36	; 0x24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	fa93 f3a3 	rbit	r3, r3
 80011e4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	fab3 f383 	clz	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2103      	movs	r1, #3
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	401a      	ands	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	61bb      	str	r3, [r7, #24]
  return result;
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	fab3 f383 	clz	r3, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	431a      	orrs	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	3724      	adds	r7, #36	; 0x24
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_GPIO_SetPinOutputType>:
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	43db      	mvns	r3, r3
 800123c:	401a      	ands	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	fb01 f303 	mul.w	r3, r1, r3
 8001246:	431a      	orrs	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	605a      	str	r2, [r3, #4]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_GPIO_SetPinSpeed>:
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	613b      	str	r3, [r7, #16]
  return result;
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	fab3 f383 	clz	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2103      	movs	r1, #3
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	61bb      	str	r3, [r7, #24]
  return result;
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fab3 f383 	clz	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	431a      	orrs	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	609a      	str	r2, [r3, #8]
}
 80012aa:	bf00      	nop
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_GPIO_SetPinPull>:
{
 80012b6:	b480      	push	{r7}
 80012b8:	b089      	sub	sp, #36	; 0x24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	613b      	str	r3, [r7, #16]
  return result;
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2103      	movs	r1, #3
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	401a      	ands	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	61bb      	str	r3, [r7, #24]
  return result;
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	fab3 f383 	clz	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	431a      	orrs	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	60da      	str	r2, [r3, #12]
}
 8001308:	bf00      	nop
 800130a:	3724      	adds	r7, #36	; 0x24
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_GPIO_SetAFPin_0_7>:
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	613b      	str	r3, [r7, #16]
  return result;
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	210f      	movs	r1, #15
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	401a      	ands	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	61bb      	str	r3, [r7, #24]
  return result;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	431a      	orrs	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	621a      	str	r2, [r3, #32]
}
 8001366:	bf00      	nop
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_GPIO_SetAFPin_8_15>:
{
 8001372:	b480      	push	{r7}
 8001374:	b089      	sub	sp, #36	; 0x24
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa93 f3a3 	rbit	r3, r3
 800138e:	613b      	str	r3, [r7, #16]
  return result;
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	fab3 f383 	clz	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	210f      	movs	r1, #15
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	401a      	ands	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa93 f3a3 	rbit	r3, r3
 80013b0:	61bb      	str	r3, [r7, #24]
  return result;
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	431a      	orrs	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013c8:	bf00      	nop
 80013ca:	3724      	adds	r7, #36	; 0x24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	613b      	str	r3, [r7, #16]
  return result;
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80013f6:	e051      	b.n	800149c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d043      	beq.n	8001496 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d003      	beq.n	800141e <LL_GPIO_Init+0x4a>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d10e      	bne.n	800143c <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	461a      	mov	r2, r3
 8001424:	69b9      	ldr	r1, [r7, #24]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ff16 	bl	8001258 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6819      	ldr	r1, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	461a      	mov	r2, r3
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fef6 	bl	8001228 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	461a      	mov	r2, r3
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff36 	bl	80012b6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d11a      	bne.n	8001488 <LL_GPIO_Init+0xb4>
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	60bb      	str	r3, [r7, #8]
  return result;
 800145e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b07      	cmp	r3, #7
 8001468:	d807      	bhi.n	800147a <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	461a      	mov	r2, r3
 8001470:	69b9      	ldr	r1, [r7, #24]
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff4e 	bl	8001314 <LL_GPIO_SetAFPin_0_7>
 8001478:	e006      	b.n	8001488 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	461a      	mov	r2, r3
 8001480:	69b9      	ldr	r1, [r7, #24]
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff75 	bl	8001372 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	461a      	mov	r2, r3
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fe9a 	bl	80011ca <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	fa22 f303 	lsr.w	r3, r2, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1a6      	bne.n	80013f8 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <LL_I2C_Enable>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_I2C_Disable>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 0201 	bic.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	601a      	str	r2, [r3, #0]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_I2C_ConfigFilters>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	0219      	lsls	r1, r3, #8
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	430b      	orrs	r3, r1
 8001510:	431a      	orrs	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_I2C_SetOwnAddress1>:
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001536:	f023 0307 	bic.w	r3, r3, #7
 800153a:	68b9      	ldr	r1, [r7, #8]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	430a      	orrs	r2, r1
 8001540:	431a      	orrs	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	609a      	str	r2, [r3, #8]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_I2C_EnableOwnAddress1>:
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	609a      	str	r2, [r3, #8]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_I2C_DisableOwnAddress1>:
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	609a      	str	r2, [r3, #8]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <LL_I2C_SetTiming>:
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	611a      	str	r2, [r3, #16]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_I2C_SetMode>:
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	601a      	str	r2, [r3, #0]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	605a      	str	r2, [r3, #4]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff65 	bl	80014d4 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6899      	ldr	r1, [r3, #8]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	461a      	mov	r2, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff6d 	bl	80014f4 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffb6 	bl	8001592 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff44 	bl	80014b4 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffa0 	bl	8001572 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6919      	ldr	r1, [r3, #16]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	461a      	mov	r2, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff70 	bl	8001522 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ff81 	bl	8001552 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffa9 	bl	80015ae <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffb6 	bl	80015d4 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <LL_TIM_SetPrescaler>:
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_TIM_SetAutoReload>:
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <LL_TIM_SetRepetitionCounter>:
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_TIM_OC_SetCompareCH1>:
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_TIM_OC_SetCompareCH2>:
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_TIM_OC_SetCompareCH3>:
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_TIM_OC_SetCompareCH4>:
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_TIM_OC_SetCompareCH5>:
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	659a      	str	r2, [r3, #88]	; 0x58
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_TIM_OC_SetCompareCH6>:
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	615a      	str	r2, [r3, #20]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <LL_TIM_Init+0xd0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d007      	beq.n	80017bc <LL_TIM_Init+0x28>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b2:	d003      	beq.n	80017bc <LL_TIM_Init+0x28>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a2c      	ldr	r2, [pc, #176]	; (8001868 <LL_TIM_Init+0xd4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d106      	bne.n	80017ca <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a25      	ldr	r2, [pc, #148]	; (8001864 <LL_TIM_Init+0xd0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <LL_TIM_Init+0x66>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d8:	d00f      	beq.n	80017fa <LL_TIM_Init+0x66>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a22      	ldr	r2, [pc, #136]	; (8001868 <LL_TIM_Init+0xd4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00b      	beq.n	80017fa <LL_TIM_Init+0x66>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a21      	ldr	r2, [pc, #132]	; (800186c <LL_TIM_Init+0xd8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d007      	beq.n	80017fa <LL_TIM_Init+0x66>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a20      	ldr	r2, [pc, #128]	; (8001870 <LL_TIM_Init+0xdc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d003      	beq.n	80017fa <LL_TIM_Init+0x66>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <LL_TIM_Init+0xe0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d106      	bne.n	8001808 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff3a 	bl	800168e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	4619      	mov	r1, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff26 	bl	8001672 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <LL_TIM_Init+0xd0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00b      	beq.n	8001846 <LL_TIM_Init+0xb2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <LL_TIM_Init+0xd8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <LL_TIM_Init+0xb2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <LL_TIM_Init+0xdc>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d003      	beq.n	8001846 <LL_TIM_Init+0xb2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <LL_TIM_Init+0xe0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d105      	bne.n	8001852 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	4619      	mov	r1, r3
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff2c 	bl	80016aa <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ff8d 	bl	8001772 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40012c00 	.word	0x40012c00
 8001868:	40000400 	.word	0x40000400
 800186c:	40014000 	.word	0x40014000
 8001870:	40014400 	.word	0x40014400
 8001874:	40014800 	.word	0x40014800

08001878 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800188e:	d045      	beq.n	800191c <LL_TIM_OC_Init+0xa4>
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001896:	d848      	bhi.n	800192a <LL_TIM_OC_Init+0xb2>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189e:	d036      	beq.n	800190e <LL_TIM_OC_Init+0x96>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a6:	d840      	bhi.n	800192a <LL_TIM_OC_Init+0xb2>
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ae:	d027      	beq.n	8001900 <LL_TIM_OC_Init+0x88>
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b6:	d838      	bhi.n	800192a <LL_TIM_OC_Init+0xb2>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018be:	d018      	beq.n	80018f2 <LL_TIM_OC_Init+0x7a>
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c6:	d830      	bhi.n	800192a <LL_TIM_OC_Init+0xb2>
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d003      	beq.n	80018d6 <LL_TIM_OC_Init+0x5e>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b10      	cmp	r3, #16
 80018d2:	d007      	beq.n	80018e4 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80018d4:	e029      	b.n	800192a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f82d 	bl	8001938 <OC1Config>
 80018de:	4603      	mov	r3, r0
 80018e0:	75fb      	strb	r3, [r7, #23]
      break;
 80018e2:	e023      	b.n	800192c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f8a0 	bl	8001a2c <OC2Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	75fb      	strb	r3, [r7, #23]
      break;
 80018f0:	e01c      	b.n	800192c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f917 	bl	8001b28 <OC3Config>
 80018fa:	4603      	mov	r3, r0
 80018fc:	75fb      	strb	r3, [r7, #23]
      break;
 80018fe:	e015      	b.n	800192c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 f98e 	bl	8001c24 <OC4Config>
 8001908:	4603      	mov	r3, r0
 800190a:	75fb      	strb	r3, [r7, #23]
      break;
 800190c:	e00e      	b.n	800192c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 f9ed 	bl	8001cf0 <OC5Config>
 8001916:	4603      	mov	r3, r0
 8001918:	75fb      	strb	r3, [r7, #23]
      break;
 800191a:	e007      	b.n	800192c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 fa44 	bl	8001dac <OC6Config>
 8001924:	4603      	mov	r3, r0
 8001926:	75fb      	strb	r3, [r7, #23]
      break;
 8001928:	e000      	b.n	800192c <LL_TIM_OC_Init+0xb4>
      break;
 800192a:	bf00      	nop
  }

  return result;
 800192c:	7dfb      	ldrb	r3, [r7, #23]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	f023 0201 	bic.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f023 0202 	bic.w	r2, r3, #2
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f023 0201 	bic.w	r2, r3, #1
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4313      	orrs	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a20      	ldr	r2, [pc, #128]	; (8001a1c <OC1Config+0xe4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00b      	beq.n	80019b6 <OC1Config+0x7e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <OC1Config+0xe8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <OC1Config+0x7e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <OC1Config+0xec>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d003      	beq.n	80019b6 <OC1Config+0x7e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <OC1Config+0xf0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d11e      	bne.n	80019f4 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f023 0208 	bic.w	r2, r3, #8
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4313      	orrs	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f023 0204 	bic.w	r2, r3, #4
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fe5d 	bl	80016c6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40012c00 	.word	0x40012c00
 8001a20:	40014000 	.word	0x40014000
 8001a24:	40014400 	.word	0x40014400
 8001a28:	40014800 	.word	0x40014800

08001a2c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	f023 0210 	bic.w	r2, r3, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	0212      	lsls	r2, r2, #8
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f023 0220 	bic.w	r2, r3, #32
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f023 0210 	bic.w	r2, r3, #16
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <OC2Config+0xec>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d00b      	beq.n	8001ab0 <OC2Config+0x84>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <OC2Config+0xf0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d007      	beq.n	8001ab0 <OC2Config+0x84>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <OC2Config+0xf4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d003      	beq.n	8001ab0 <OC2Config+0x84>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <OC2Config+0xf8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d11f      	bne.n	8001af0 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	019b      	lsls	r3, r3, #6
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	019b      	lsls	r3, r3, #6
 8001acc:	4313      	orrs	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fded 	bl	80016e2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40012c00 	.word	0x40012c00
 8001b1c:	40014000 	.word	0x40014000
 8001b20:	40014400 	.word	0x40014400
 8001b24:	40014800 	.word	0x40014800

08001b28 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f023 0303 	bic.w	r3, r3, #3
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	4313      	orrs	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	4313      	orrs	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <OC3Config+0xec>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00b      	beq.n	8001baa <OC3Config+0x82>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a20      	ldr	r2, [pc, #128]	; (8001c18 <OC3Config+0xf0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <OC3Config+0x82>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a1f      	ldr	r2, [pc, #124]	; (8001c1c <OC3Config+0xf4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d003      	beq.n	8001baa <OC3Config+0x82>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <OC3Config+0xf8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d11f      	bne.n	8001bea <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	029b      	lsls	r3, r3, #10
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	029b      	lsls	r3, r3, #10
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	015b      	lsls	r3, r3, #5
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff fd7e 	bl	80016fe <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40012c00 	.word	0x40012c00
 8001c18:	40014000 	.word	0x40014000
 8001c1c:	40014400 	.word	0x40014400
 8001c20:	40014800 	.word	0x40014800

08001c24 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	0212      	lsls	r2, r2, #8
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	031b      	lsls	r3, r3, #12
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	031b      	lsls	r3, r3, #12
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <OC4Config+0xbc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00b      	beq.n	8001ca8 <OC4Config+0x84>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <OC4Config+0xc0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <OC4Config+0x84>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <OC4Config+0xc4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <OC4Config+0x84>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <OC4Config+0xc8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d107      	bne.n	8001cb8 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	019b      	lsls	r3, r3, #6
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fd25 	bl	800171a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40012c00 	.word	0x40012c00
 8001ce4:	40014000 	.word	0x40014000
 8001ce8:	40014400 	.word	0x40014400
 8001cec:	40014800 	.word	0x40014800

08001cf0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d10:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	041b      	lsls	r3, r3, #16
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <OC5Config+0xac>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00b      	beq.n	8001d64 <OC5Config+0x74>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <OC5Config+0xb0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d007      	beq.n	8001d64 <OC5Config+0x74>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <OC5Config+0xb4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d003      	beq.n	8001d64 <OC5Config+0x74>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <OC5Config+0xb8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d109      	bne.n	8001d78 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	4619      	mov	r1, r3
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff fcd6 	bl	8001736 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40012c00 	.word	0x40012c00
 8001da0:	40014000 	.word	0x40014000
 8001da4:	40014400 	.word	0x40014400
 8001da8:	40014800 	.word	0x40014800

08001dac <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	0212      	lsls	r2, r2, #8
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	051b      	lsls	r3, r3, #20
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	051b      	lsls	r3, r3, #20
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <OC6Config+0xac>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00b      	beq.n	8001e22 <OC6Config+0x76>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <OC6Config+0xb0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <OC6Config+0x76>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <OC6Config+0xb4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d003      	beq.n	8001e22 <OC6Config+0x76>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <OC6Config+0xb8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d109      	bne.n	8001e36 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	029b      	lsls	r3, r3, #10
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fc87 	bl	8001756 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40012c00 	.word	0x40012c00
 8001e5c:	40014000 	.word	0x40014000
 8001e60:	40014400 	.word	0x40014400
 8001e64:	40014800 	.word	0x40014800

08001e68 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <LL_InitTick+0x30>)
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <LL_InitTick+0x30>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <LL_InitTick+0x30>)
 8001e88:	2205      	movs	r2, #5
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001ea4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ffdd 	bl	8001e68 <LL_InitTick>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <LL_mDelay+0x48>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001ec6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ece:	d00c      	beq.n	8001eea <LL_mDelay+0x32>
  {
    Delay++;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001ed6:	e008      	b.n	8001eea <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <LL_mDelay+0x48>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <LL_mDelay+0x32>
    {
      Delay--;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f3      	bne.n	8001ed8 <LL_mDelay+0x20>
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <LL_SetSystemCoreClock+0x1c>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000010 	.word	0x20000010

08001f24 <__libc_init_array>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	4d0d      	ldr	r5, [pc, #52]	; (8001f5c <__libc_init_array+0x38>)
 8001f28:	4c0d      	ldr	r4, [pc, #52]	; (8001f60 <__libc_init_array+0x3c>)
 8001f2a:	1b64      	subs	r4, r4, r5
 8001f2c:	10a4      	asrs	r4, r4, #2
 8001f2e:	2600      	movs	r6, #0
 8001f30:	42a6      	cmp	r6, r4
 8001f32:	d109      	bne.n	8001f48 <__libc_init_array+0x24>
 8001f34:	4d0b      	ldr	r5, [pc, #44]	; (8001f64 <__libc_init_array+0x40>)
 8001f36:	4c0c      	ldr	r4, [pc, #48]	; (8001f68 <__libc_init_array+0x44>)
 8001f38:	f000 f820 	bl	8001f7c <_init>
 8001f3c:	1b64      	subs	r4, r4, r5
 8001f3e:	10a4      	asrs	r4, r4, #2
 8001f40:	2600      	movs	r6, #0
 8001f42:	42a6      	cmp	r6, r4
 8001f44:	d105      	bne.n	8001f52 <__libc_init_array+0x2e>
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
 8001f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f4c:	4798      	blx	r3
 8001f4e:	3601      	adds	r6, #1
 8001f50:	e7ee      	b.n	8001f30 <__libc_init_array+0xc>
 8001f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f56:	4798      	blx	r3
 8001f58:	3601      	adds	r6, #1
 8001f5a:	e7f2      	b.n	8001f42 <__libc_init_array+0x1e>
 8001f5c:	08001ff8 	.word	0x08001ff8
 8001f60:	08001ff8 	.word	0x08001ff8
 8001f64:	08001ff8 	.word	0x08001ff8
 8001f68:	08001ffc 	.word	0x08001ffc

08001f6c <memset>:
 8001f6c:	4402      	add	r2, r0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d100      	bne.n	8001f76 <memset+0xa>
 8001f74:	4770      	bx	lr
 8001f76:	f803 1b01 	strb.w	r1, [r3], #1
 8001f7a:	e7f9      	b.n	8001f70 <memset+0x4>

08001f7c <_init>:
 8001f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7e:	bf00      	nop
 8001f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f82:	bc08      	pop	{r3}
 8001f84:	469e      	mov	lr, r3
 8001f86:	4770      	bx	lr

08001f88 <_fini>:
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8a:	bf00      	nop
 8001f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8e:	bc08      	pop	{r3}
 8001f90:	469e      	mov	lr, r3
 8001f92:	4770      	bx	lr
